(function () {
  'use strict';

  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: function value(target, firstSource) {

        if (target === undefined || target === null) {
          throw new TypeError('Cannot convert first argument to object');
        }
        var to = Object(target);
        for (var i = 1; i < arguments.length; i++) {
          var nextSource = arguments[i];
          if (nextSource === undefined || nextSource === null) {
            continue;
          }
          var keysArray = Object.keys(Object(nextSource));
          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== undefined && desc.enumerable) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
        return to;
      }
    });
  }
  if (!('remove' in Element.prototype)) {
    Element.prototype.remove = function () {
      if (this.parentNode) this.parentNode.removeChild(this);
    };
  }
  if (!('find' in Element.prototype)) {
    Element.prototype.find = function (query) {
      return this.querySelector(query);
    };
  }
  if (!('text' in Element.prototype)) {
    Element.prototype.text = function (text) {
      this.innerText = text;
      return this;
    };
  }
  if (!('html' in Element.prototype)) {
    Element.prototype.html = function (html) {
      if (typeof html == 'string') this.innerHTML = html;else {
        this.innerHTML = '';
        this.append(html);
      }
      return this;
    };
  }
  if (!('removeClass' in Element.prototype)) {
    Element.prototype.removeClass = function (classes) {
      var _this = this;
      classes.split(' ').forEach(function (c) {
        _this.classList.remove(c);
      });
      return this;
    };
  }
  if (!('addClass' in Element.prototype)) {
    Element.prototype.addClass = function (classes) {
      var _this2 = this;
      classes.split(' ').forEach(function (c) {
        _this2.classList.add(c);
      });
      return this;
    };
  }
  if (!('toggleClass' in Element.prototype)) {
    Element.prototype.toggleClass = function (classes, status) {
      var _this3 = this;
      classes.split(' ').forEach(function (c) {
        var has = _this3.classList.contains(c);
        if (status && !has) _this3.classList.add(c);else if (!status && has) _this3.classList.remove(c);
      });
      return this;
    };
  }
  if (!('empty' in Element.prototype)) {
    Element.prototype.empty = function () {
      this.innerHTML = '';
      return this;
    };
  }
  if (!('append' in Element.prototype)) {
    Element.prototype.append = function (child) {
      this.appendChild(child);
      return this;
    };
  }
  if (!('on' in Element.prototype)) {
    Element.prototype.on = function (on, call, options) {
      var _this4 = this;
      on.split(' ').forEach(function (e) {
        _this4.addEventListener(e, call, options);
      });
      return this;
    };
  }
  Number.prototype.pad = function (zeros) {
    var numberString = String(this);
    var zerosToAdd = zeros - numberString.length;
    var leadingZeros = "";
    for (var i = 0; i < zerosToAdd; i++) {
      leadingZeros += "0";
    }
    return leadingZeros + numberString;
  };
  if (!Math.trunc) {
    Math.trunc = function (v) {
      v = +v;
      return v - v % 1 || (!isFinite(v) || v === 0 ? v : v < 0 ? -0 : 0);
    };
  }
  if (!Array.from) {
    Array.from = function () {
      var toStr = Object.prototype.toString;
      var isCallable = function isCallable(fn) {
        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
      };
      var toInteger = function toInteger(value) {
        var number = Number(value);
        if (isNaN(number)) {
          return 0;
        }
        if (number === 0 || !isFinite(number)) {
          return number;
        }
        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
      };
      var maxSafeInteger = Math.pow(2, 53) - 1;
      var toLength = function toLength(value) {
        var len = toInteger(value);
        return Math.min(Math.max(len, 0), maxSafeInteger);
      };

      // Свойство length метода from равно 1.
      return function from(arrayLike /* , mapFn, thisArg */) {
        // 1. Положим C равным значению this.
        var C = this;

        // 2. Положим items равным ToObject(arrayLike).
        var items = Object(arrayLike);

        // 3. ReturnIfAbrupt(items).
        if (arrayLike == null) {
          throw new TypeError('Array.from requires an array-like object - not null or undefined');
        }

        // 4. Если mapfn равен undefined, положим mapping равным false.
        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
        var T;
        if (typeof mapFn !== 'undefined') {
          // 5. иначе
          // 5. a. Если вызов IsCallable(mapfn) равен false, выкидываем
          // исключение TypeError.
          if (!isCallable(mapFn)) {
            throw new TypeError('Array.from: when provided, the second argument must be a function');
          }

          // 5. b. Если thisArg присутствует, положим T равным thisArg;
          // иначе положим T равным undefined.
          if (arguments.length > 2) {
            T = arguments[2];
          }
        }

        // 10. Положим lenValue равным Get(items, "length").
        // 11. Положим len равным ToLength(lenValue).
        var len = toLength(items.length);

        // 13. Если IsConstructor(C) равен true, то
        // 13. a. Положим A равным результату вызова внутреннего метода
        // [[Construct]]
        // объекта C со списком аргументов, содержащим единственный элемент
        // len.
        // 14. a. Иначе, положим A равным ArrayCreate(len).
        var A = isCallable(C) ? Object(new C(len)) : new Array(len);

        // 16. Положим k равным 0.
        var k = 0;
        // 17. Пока k < len, будем повторять... (шаги с a по h)
        var kValue;
        while (k < len) {
          kValue = items[k];
          if (mapFn) {
            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
          } else {
            A[k] = kValue;
          }
          k += 1;
        }
        // 18. Положим putStatus равным Put(A, "length", len, true).
        A.length = len;
        // 20. Вернём A.
        return A;
      };
    }();
  }
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      value: function value(predicate) {
        // 1. Let O be ? ToObject(this value).
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        }
        var o = Object(this);

        // 2. Let len be ? ToLength(? Get(O, "length")).
        var len = o.length >>> 0;

        // 3. If IsCallable(predicate) is false, throw a TypeError
        // exception.
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }

        // 4. If thisArg was supplied, let T be thisArg; else let T be
        // undefined.
        var thisArg = arguments[1];

        // 5. Let k be 0.
        var k = 0;

        // 6. Repeat, while k < len
        while (k < len) {
          // a. Let Pk be ! ToString(k).
          // b. Let kValue be ? Get(O, Pk).
          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue,
          // k, O »)).
          // d. If testResult is true, return kValue.
          var kValue = o[k];
          if (predicate.call(thisArg, kValue, k, o)) {
            return kValue;
          }
          // e. Increase k by 1.
          k++;
        }

        // 7. Return undefined.
        return undefined;
      },
      configurable: true,
      writable: true
    });
  }
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      value: function value(searchElement, fromIndex) {
        if (this == null) {
          throw new TypeError('"this" is null or not defined');
        }

        // 1. Let O be ? ToObject(this value).
        var o = Object(this);

        // 2. Let len be ? ToLength(? Get(O, "length")).
        var len = o.length >>> 0;

        // 3. If len is 0, return false.
        if (len === 0) {
          return false;
        }

        // 4. Let n be ? ToInteger(fromIndex).
        // (If fromIndex is undefined, this step produces the value 0.)
        var n = fromIndex | 0;

        // 5. If n ≥ 0, then
        // a. Let k be n.
        // 6. Else n < 0,
        // a. Let k be len + n.
        // b. If k < 0, let k be 0.
        var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
        function sameValueZero(x, y) {
          return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
        }

        // 7. Repeat, while k < len
        while (k < len) {
          // a. Let elementK be the result of ? Get(O, ! ToString(k)).
          // b. If SameValueZero(searchElement, elementK) is true, return
          // true.
          if (sameValueZero(o[k], searchElement)) {
            return true;
          }
          // c. Increase k by 1.
          k++;
        }

        // 8. Return false
        return false;
      }
    });
  }
  if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {

      if (search instanceof RegExp) {
        throw TypeError('first argument must not be a RegExp');
      }
      if (start === undefined) {
        start = 0;
      }
      return this.indexOf(search, start) !== -1;
    };
  }
  if (!Object.entries) {
    Object.entries = function (obj) {
      var ownProps = Object.keys(obj),
        i = ownProps.length,
        resArray = new Array(i); // preallocate the Array
      while (i--) resArray[i] = [ownProps[i], obj[ownProps[i]]];
      return resArray;
    };
  }
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // ближайший аналог внутренней функции
        // IsCallable в ECMAScript 5
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }
      var aArgs = Array.prototype.slice.call(arguments, 1),
        fToBind = this,
        fNOP = function fNOP() {},
        fBound = function fBound() {
          return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
        };
      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();
      return fBound;
    };
  }
  (function () {

    var _slice = Array.prototype.slice;
    try {
      // Не может использоваться с элементами DOM в IE < 9
      _slice.call(document.documentElement);
    } catch (e) {
      // В IE < 9 кидается исключение
      // Функция будет работать для истинных массивов, массивоподобных объектов,
      // NamedNodeMap (атрибуты, сущности, примечания),
      // NodeList (например, getElementsByTagName), HTMLCollection (например, childNodes)
      // и не будет падать на других объектах DOM (как это происходит на элементах DOM в IE < 9)
      Array.prototype.slice = function (begin, end) {
        // IE < 9 будет недоволен аргументом end, равным undefined
        end = typeof end !== 'undefined' ? end : this.length;

        // Для родных объектов Array мы используем родную функцию slice
        if (Object.prototype.toString.call(this) === '[object Array]') {
          return _slice.call(this, begin, end);
        }

        // Массивоподобные объекты мы обрабатываем самостоятельно
        var i,
          cloned = [],
          size,
          len = this.length;

        // Обрабатываем отрицательное значение begin
        var start = begin || 0;
        start = start >= 0 ? start : len + start;

        // Обрабатываем отрицательное значение end
        var upTo = end ? end : len;
        if (end < 0) {
          upTo = len + end;
        }

        // Фактически ожидаемый размер среза
        size = upTo - start;
        if (size > 0) {
          cloned = new Array(size);
          if (this.charAt) {
            for (i = 0; i < size; i++) {
              cloned[i] = this.charAt(start + i);
            }
          } else {
            for (i = 0; i < size; i++) {
              cloned[i] = this[start + i];
            }
          }
        }
        return cloned;
      };
    }
  })();
  /*!
  * Shim for MutationObserver interface
  * Author: Graeme Yeates (github.com/megawac)
  * Repository: https://github.com/megawac/MutationObserver.js
  * License: WTFPL V2, 2004 (wtfpl.net).
  * Though credit and staring the repo will make me feel pretty, you can modify and redistribute as you please.
  * Attempts to follow spec (https://www.w3.org/TR/dom/#mutation-observers) as closely as possible for native javascript
  * See https://github.com/WebKit/webkit/blob/master/Source/WebCore/dom/MutationObserver.cpp for current webkit source c++ implementation
  */

  /**
   * prefix bugs:
      - https://bugs.webkit.org/show_bug.cgi?id=85161
      - https://bugzilla.mozilla.org/show_bug.cgi?id=749920
   * Don't use WebKitMutationObserver as Safari (6.0.5-6.1) use a buggy implementation
  */
  if (!window.MutationObserver) {
    window.MutationObserver = function (undefined$1) {

      /**
       * @param {function(Array.<MutationRecord>, MutationObserver)} listener
       * @constructor
       */
      function MutationObserver(listener) {
        /**
         * @type {Array.<Object>}
         * @private
         */
        this._watched = [];
        /** @private */
        this._listener = listener;
      }

      /**
       * Start a recursive timeout function to check all items being observed for mutations
       * @type {MutationObserver} observer
       * @private
       */
      function startMutationChecker(observer) {
        (function check() {
          var mutations = observer.takeRecords();
          if (mutations.length) {
            // fire away
            // calling the listener with context is not spec but currently consistent with FF and WebKit
            observer._listener(mutations, observer);
          }
          /** @private */
          observer._timeout = setTimeout(check, MutationObserver._period);
        })();
      }

      /**
       * Period to check for mutations (~32 times/sec)
       * @type {number}
       * @expose
       */
      MutationObserver._period = 30 /*ms+runtime*/;

      /**
       * Exposed API
       * @expose
       * @final
       */
      MutationObserver.prototype = {
        /**
         * see https://dom.spec.whatwg.org/#dom-mutationobserver-observe
         * not going to throw here but going to follow the current spec config sets
         * @param {Node|null} $target
         * @param {Object|null} config : MutationObserverInit configuration dictionary
         * @expose
         * @return undefined
         */
        observe: function observe($target, config) {
          /**
           * Using slightly different names so closure can go ham
           * @type {!Object} : A custom mutation config
           */
          var settings = {
            attr: !!(config.attributes || config.attributeFilter || config.attributeOldValue),
            // some browsers enforce that subtree must be set with childList, attributes or characterData.
            // We don't care as spec doesn't specify this rule.
            kids: !!config.childList,
            descendents: !!config.subtree,
            charData: !!(config.characterData || config.characterDataOldValue)
          };
          var watched = this._watched;

          // remove already observed target element from pool
          for (var i = 0; i < watched.length; i++) {
            if (watched[i].tar === $target) watched.splice(i, 1);
          }
          if (config.attributeFilter) {
            /**
             * converts to a {key: true} dict for faster lookup
             * @type {Object.<String,Boolean>}
             */
            settings.afilter = reduce(config.attributeFilter, function (a, b) {
              a[b] = true;
              return a;
            }, {});
          }
          watched.push({
            tar: $target,
            fn: createMutationSearcher($target, settings)
          });

          // reconnect if not connected
          if (!this._timeout) {
            startMutationChecker(this);
          }
        },
        /**
         * Finds mutations since last check and empties the "record queue" i.e. mutations will only be found once
         * @expose
         * @return {Array.<MutationRecord>}
         */
        takeRecords: function takeRecords() {
          var mutations = [];
          var watched = this._watched;
          for (var i = 0; i < watched.length; i++) {
            watched[i].fn(mutations);
          }
          return mutations;
        },
        /**
         * @expose
         * @return undefined
         */
        disconnect: function disconnect() {
          this._watched = []; // clear the stuff being observed
          clearTimeout(this._timeout); // ready for garbage collection
          /** @private */
          this._timeout = null;
        }
      };

      /**
       * Simple MutationRecord pseudoclass. No longer exposing as its not fully compliant
       * @param {Object} data
       * @return {Object} a MutationRecord
       */
      function MutationRecord(data) {
        var settings = {
          // technically these should be on proto so hasOwnProperty will return false for non explicitly props
          type: null,
          target: null,
          addedNodes: [],
          removedNodes: [],
          previousSibling: null,
          nextSibling: null,
          attributeName: null,
          attributeNamespace: null,
          oldValue: null
        };
        for (var prop in data) {
          if (has(settings, prop) && data[prop] !== undefined$1) settings[prop] = data[prop];
        }
        return settings;
      }

      /**
       * Creates a func to find all the mutations
       *
       * @param {Node} $target
       * @param {!Object} config : A custom mutation config
       */
      function createMutationSearcher($target, config) {
        /** type {Elestuct} */
        var $oldstate = clone($target, config); // create the cloned datastructure

        /**
         * consumes array of mutations we can push to
         *
         * @param {Array.<MutationRecord>} mutations
         */
        return function (mutations) {
          var olen = mutations.length,
            dirty;
          if (config.charData && $target.nodeType === 3 && $target.nodeValue !== $oldstate.charData) {
            mutations.push(new MutationRecord({
              type: "characterData",
              target: $target,
              oldValue: $oldstate.charData
            }));
          }

          // Alright we check base level changes in attributes... easy
          if (config.attr && $oldstate.attr) {
            findAttributeMutations(mutations, $target, $oldstate.attr, config.afilter);
          }

          // check childlist or subtree for mutations
          if (config.kids || config.descendents) {
            dirty = searchSubtree(mutations, $target, $oldstate, config);
          }

          // reclone data structure if theres changes
          if (dirty || mutations.length !== olen) {
            /** type {Elestuct} */
            $oldstate = clone($target, config);
          }
        };
      }

      /* attributes + attributeFilter helpers */

      // Check if the environment has the attribute bug (#4) which cause
      // element.attributes.style to always be null.
      var hasAttributeBug = document.createElement("i");
      hasAttributeBug.style.top = 0;
      hasAttributeBug = hasAttributeBug.attributes.style.value != "null";

      /**
       * Gets an attribute value in an environment without attribute bug
       *
       * @param {Node} el
       * @param {Attr} attr
       * @return {String} an attribute value
       */
      function getAttributeSimple(el, attr) {
        // There is a potential for a warning to occur here if the attribute is a
        // custom attribute in IE<9 with a custom .toString() method. This is
        // just a warning and doesn't affect execution (see #21)
        return attr.value;
      }

      /**
       * Gets an attribute value with special hack for style attribute (see #4)
       *
       * @param {Node} el
       * @param {Attr} attr
       * @return {String} an attribute value
       */
      function getAttributeWithStyleHack(el, attr) {
        // As with getAttributeSimple there is a potential warning for custom attribtues in IE7.
        return attr.name !== "style" ? attr.value : el.style.cssText;
      }
      var getAttributeValue = hasAttributeBug ? getAttributeSimple : getAttributeWithStyleHack;

      /**
       * fast helper to check to see if attributes object of an element has changed
       * doesnt handle the textnode case
       *
       * @param {Array.<MutationRecord>} mutations
       * @param {Node} $target
       * @param {Object.<string, string>} $oldstate : Custom attribute clone data structure from clone
       * @param {Object} filter
       */
      function findAttributeMutations(mutations, $target, $oldstate, filter) {
        var checked = {};
        var attributes = $target.attributes;
        var attr;
        var name;
        var i = attributes.length;
        while (i--) {
          attr = attributes[i];
          name = attr.name;
          if (!filter || has(filter, name)) {
            if (getAttributeValue($target, attr) !== $oldstate[name]) {
              // The pushing is redundant but gzips very nicely
              mutations.push(MutationRecord({
                type: "attributes",
                target: $target,
                attributeName: name,
                oldValue: $oldstate[name],
                attributeNamespace: attr.namespaceURI // in ie<8 it incorrectly will return undefined
              }));
            }
            checked[name] = true;
          }
        }
        for (name in $oldstate) {
          if (!checked[name]) {
            mutations.push(MutationRecord({
              target: $target,
              type: "attributes",
              attributeName: name,
              oldValue: $oldstate[name]
            }));
          }
        }
      }

      /**
       * searchSubtree: array of mutations so far, element, element clone, bool
       * synchronous dfs comparision of two nodes
       * This function is applied to any observed element with childList or subtree specified
       * Sorry this is kind of confusing as shit, tried to comment it a bit...
       * codereview.stackexchange.com/questions/38351 discussion of an earlier version of this func
       *
       * @param {Array} mutations
       * @param {Node} $target
       * @param {!Object} $oldstate : A custom cloned node from clone()
       * @param {!Object} config : A custom mutation config
       */
      function searchSubtree(mutations, $target, $oldstate, config) {
        // Track if the tree is dirty and has to be recomputed (#14).
        var dirty;
        /*
         * Helper to identify node rearrangment and stuff...
         * There is no gaurentee that the same node will be identified for both added and removed nodes
         * if the positions have been shuffled.
         * conflicts array will be emptied by end of operation
         */
        function resolveConflicts(conflicts, node, $kids, $oldkids, numAddedNodes) {
          // the distance between the first conflicting node and the last
          var distance = conflicts.length - 1;
          // prevents same conflict being resolved twice consider when two nodes switch places.
          // only one should be given a mutation event (note -~ is used as a math.ceil shorthand)
          var counter = -~((distance - numAddedNodes) / 2);
          var $cur;
          var oldstruct;
          var conflict;
          while (conflict = conflicts.pop()) {
            $cur = $kids[conflict.i];
            oldstruct = $oldkids[conflict.j];

            // attempt to determine if there was node rearrangement... won't gaurentee all matches
            // also handles case where added/removed nodes cause nodes to be identified as conflicts
            if (config.kids && counter && Math.abs(conflict.i - conflict.j) >= distance) {
              mutations.push(MutationRecord({
                type: "childList",
                target: node,
                addedNodes: [$cur],
                removedNodes: [$cur],
                // haha don't rely on this please
                nextSibling: $cur.nextSibling,
                previousSibling: $cur.previousSibling
              }));
              counter--; // found conflict
            }

            // Alright we found the resorted nodes now check for other types of mutations
            if (config.attr && oldstruct.attr) findAttributeMutations(mutations, $cur, oldstruct.attr, config.afilter);
            if (config.charData && $cur.nodeType === 3 && $cur.nodeValue !== oldstruct.charData) {
              mutations.push(MutationRecord({
                type: "characterData",
                target: $cur,
                oldValue: oldstruct.charData
              }));
            }
            // now look @ subtree
            if (config.descendents) findMutations($cur, oldstruct);
          }
        }

        /**
         * Main worker. Finds and adds mutations if there are any
         * @param {Node} node
         * @param {!Object} old : A cloned data structure using internal clone
         */
        function findMutations(node, old) {
          var $kids = node.childNodes;
          var $oldkids = old.kids;
          var klen = $kids.length;
          // $oldkids will be undefined for text and comment nodes
          var olen = $oldkids ? $oldkids.length : 0;
          // if (!olen && !klen) return; // both empty; clearly no changes

          // we delay the intialization of these for marginal performance in the expected case (actually quite signficant on large subtrees when these would be otherwise unused)
          // map of checked element of ids to prevent registering the same conflict twice
          var map;
          // array of potential conflicts (ie nodes that may have been re arranged)
          var conflicts;
          var id; // element id from getElementId helper
          var idx; // index of a moved or inserted element

          var oldstruct;
          // current and old nodes
          var $cur;
          var $old;
          // track the number of added nodes so we can resolve conflicts more accurately
          var numAddedNodes = 0;

          // iterate over both old and current child nodes at the same time
          var i = 0,
            j = 0;
          // while there is still anything left in $kids or $oldkids (same as i < $kids.length || j < $oldkids.length;)
          while (i < klen || j < olen) {
            // current and old nodes at the indexs
            $cur = $kids[i];
            oldstruct = $oldkids[j];
            $old = oldstruct && oldstruct.node;
            if ($cur === $old) {
              // expected case - optimized for this case
              // check attributes as specified by config
              if (config.attr && oldstruct.attr) /* oldstruct.attr instead of textnode check */findAttributeMutations(mutations, $cur, oldstruct.attr, config.afilter);
              // check character data if node is a comment or textNode and it's being observed
              if (config.charData && oldstruct.charData !== undefined$1 && $cur.nodeValue !== oldstruct.charData) {
                mutations.push(MutationRecord({
                  type: "characterData",
                  target: $cur,
                  oldValue: oldstruct.charData
                }));
              }

              // resolve conflicts; it will be undefined if there are no conflicts - otherwise an array
              if (conflicts) resolveConflicts(conflicts, node, $kids, $oldkids, numAddedNodes);

              // recurse on next level of children. Avoids the recursive call when there are no children left to iterate
              if (config.descendents && ($cur.childNodes.length || oldstruct.kids && oldstruct.kids.length)) findMutations($cur, oldstruct);
              i++;
              j++;
            } else {
              // (uncommon case) lookahead until they are the same again or the end of children
              dirty = true;
              if (!map) {
                // delayed initalization (big perf benefit)
                map = {};
                conflicts = [];
              }
              if ($cur) {
                // check id is in the location map otherwise do a indexOf search
                if (!map[id = getElementId($cur)]) {
                  // to prevent double checking
                  // mark id as found
                  map[id] = true;
                  // custom indexOf using comparitor checking oldkids[i].node === $cur
                  if ((idx = indexOfCustomNode($oldkids, $cur, j)) === -1) {
                    if (config.kids) {
                      mutations.push(MutationRecord({
                        type: "childList",
                        target: node,
                        addedNodes: [$cur],
                        // $cur is a new node
                        nextSibling: $cur.nextSibling,
                        previousSibling: $cur.previousSibling
                      }));
                      numAddedNodes++;
                    }
                  } else {
                    conflicts.push({
                      // add conflict
                      i: i,
                      j: idx
                    });
                  }
                }
                i++;
              }
              if ($old &&
              // special case: the changes may have been resolved: i and j appear congurent so we can continue using the expected case
              $old !== $kids[i]) {
                if (!map[id = getElementId($old)]) {
                  map[id] = true;
                  if ((idx = indexOf($kids, $old, i)) === -1) {
                    if (config.kids) {
                      mutations.push(MutationRecord({
                        type: "childList",
                        target: old.node,
                        removedNodes: [$old],
                        nextSibling: $oldkids[j + 1],
                        // praise no indexoutofbounds exception
                        previousSibling: $oldkids[j - 1]
                      }));
                      numAddedNodes--;
                    }
                  } else {
                    conflicts.push({
                      i: idx,
                      j: j
                    });
                  }
                }
                j++;
              }
            } // end uncommon case
          } // end loop

          // resolve any remaining conflicts
          if (conflicts) resolveConflicts(conflicts, node, $kids, $oldkids, numAddedNodes);
        }
        findMutations($target, $oldstate);
        return dirty;
      }

      /**
       * Utility
       * Cones a element into a custom data structure designed for comparision. https://gist.github.com/megawac/8201012
       *
       * @param {Node} $target
       * @param {!Object} config : A custom mutation config
       * @return {!Object} : Cloned data structure
       */
      function clone($target, config) {
        var recurse = true; // set true so childList we'll always check the first level
        return function copy($target) {
          var elestruct = {
            /** @type {Node} */
            node: $target
          };

          // Store current character data of target text or comment node if the config requests
          // those properties to be observed.
          if (config.charData && ($target.nodeType === 3 || $target.nodeType === 8)) {
            elestruct.charData = $target.nodeValue;
          }
          // its either a element, comment, doc frag or document node
          else {
            // Add attr only if subtree is specified or top level and avoid if
            // attributes is a document object (#13).
            if (config.attr && recurse && $target.nodeType === 1) {
              /**
               * clone live attribute list to an object structure {name: val}
               * @type {Object.<string, string>}
               */
              elestruct.attr = reduce($target.attributes, function (memo, attr) {
                if (!config.afilter || config.afilter[attr.name]) {
                  memo[attr.name] = getAttributeValue($target, attr);
                }
                return memo;
              }, {});
            }

            // whether we should iterate the children of $target node
            if (recurse && (config.kids || config.charData || config.attr && config.descendents)) {
              /** @type {Array.<!Object>} : Array of custom clone */
              elestruct.kids = map($target.childNodes, copy);
            }
            recurse = config.descendents;
          }
          return elestruct;
        }($target);
      }

      /**
       * indexOf an element in a collection of custom nodes
       *
       * @param {NodeList} set
       * @param {!Object} $node : A custom cloned node
       * @param {number} idx : index to start the loop
       * @return {number}
       */
      function indexOfCustomNode(set, $node, idx) {
        return indexOf(set, $node, idx, JSCompiler_renameProperty("node"));
      }

      // using a non id (eg outerHTML or nodeValue) is extremely naive and will run into issues with nodes that may appear the same like <li></li>
      var counter = 1; // don't use 0 as id (falsy)
      /** @const */
      var expando = "mo_id";

      /**
       * Attempt to uniquely id an element for hashing. We could optimize this for legacy browsers but it hopefully wont be called enough to be a concern
       *
       * @param {Node} $ele
       * @return {(string|number)}
       */
      function getElementId($ele) {
        try {
          return $ele.id || ($ele[expando] = $ele[expando] || counter++);
        } catch (o_O) {
          // ie <8 will throw if you set an unknown property on a text node
          try {
            return $ele.nodeValue; // naive
          } catch (shitie) {
            // when text node is removed: https://gist.github.com/megawac/8355978 :(
            return counter++;
          }
        }
      }

      /**
       * **map** Apply a mapping function to each item of a set
       * @param {Array|NodeList} set
       * @param {Function} iterator
       */
      function map(set, iterator) {
        var results = [];
        for (var index = 0; index < set.length; index++) {
          results[index] = iterator(set[index], index, set);
        }
        return results;
      }

      /**
       * **Reduce** builds up a single result from a list of values
       * @param {Array|NodeList|NamedNodeMap} set
       * @param {Function} iterator
       * @param {*} [memo] Initial value of the memo.
       */
      function reduce(set, iterator, memo) {
        for (var index = 0; index < set.length; index++) {
          memo = iterator(memo, set[index], index, set);
        }
        return memo;
      }

      /**
       * **indexOf** find index of item in collection.
       * @param {Array|NodeList} set
       * @param {Object} item
       * @param {number} idx
       * @param {string} [prop] Property on set item to compare to item
       */
      function indexOf(set, item, idx, prop) {
        for /*idx = ~~idx*/
        (; idx < set.length; idx++) {
          // start idx is always given as this is internal
          if ((prop ? set[idx][prop] : set[idx]) === item) return idx;
        }
        return -1;
      }

      /**
       * @param {Object} obj
       * @param {(string|number)} prop
       * @return {boolean}
       */
      function has(obj, prop) {
        return obj[prop] !== undefined$1; // will be nicely inlined by gcc
      }

      // GCC hack see https://stackoverflow.com/a/23202438/1517919
      function JSCompiler_renameProperty(a) {
        return a;
      }
      return MutationObserver;
    }(void 0);
  }
  /**
   * map-polyfill - A Map polyfill written in TypeScript, unit tested using Jasmine and Karma.
   *
   * @author Brenden Palmer
   * @version v0.0.1-alpha.2
   * @license MIT
   */
  !function () {

    var t;
    !function (t) {
      var e = function () {
        function t(t, e) {
          this.index = 0, this.map = null, this.done = !1, this.map = t, this.type = e;
        }
        return t.prototype.next = function () {
          var t;
          return this.map.keyArray.length > this.index ? ("entries" === this.type ? t = [this.map.keyArray[this.index], this.map.get(this.map.keyArray[this.index])] : "keys" === this.type ? t = this.map.keyArray[this.index] : "values" === this.type && (t = this.map.get(this.map.keyArray[this.index])), this.index++) : this.done = !0, {
            value: t,
            done: this.done
          };
        }, t;
      }();
      t.MapIterator = e;
    }(t || (t = {}));
    var t;
    !function (t) {
      var e = function () {
        function t() {}
        return Object.defineProperty(t, "MAP_KEY_IDENTIFIER", {
          get: function get() {
            return "MAP_KEY_IDENTIFIER_OZAbzyeCu3_spF91dwX14";
          },
          enumerable: !0,
          configurable: !0
        }), Object.defineProperty(t, "MAP_SET_THROWABLE_MESSAGE", {
          get: function get() {
            return "Invalid value used as map key";
          },
          enumerable: !0,
          configurable: !0
        }), t;
      }();
      t.MapConstants = e;
    }(t || (t = {}));
    var t;
    !function (t) {
      var e = function () {
        function t() {
          if (null !== t.instance) throw "Get the instance of the MapSequencer using the getInstance method.";
          this.identifier = 0;
        }
        return t.getInstance = function () {
          return null === t.instance && (t.instance = new t()), t.instance;
        }, t.prototype.next = function () {
          return "Map_CJPOYUrpwK_aHBtMHXsTM" + String(this.identifier++);
        }, t.instance = null, t;
      }();
      t.MapSequencer = e;
    }(t || (t = {}));
    var t;
    !function (t) {
      var e = function () {
        function e() {}
        return e.defineProperty = function (n) {
          var r;
          if (e.isValidObject(n) === !1) throw new TypeError(t.MapConstants.MAP_SET_THROWABLE_MESSAGE);
          if ("undefined" == typeof n[t.MapConstants.MAP_KEY_IDENTIFIER]) {
            r = t.MapSequencer.getInstance().next();
            try {
              Object.defineProperty(n, t.MapConstants.MAP_KEY_IDENTIFIER, {
                enumerable: !1,
                configurable: !1,
                get: function get() {
                  return r;
                }
              });
            } catch (i) {
              throw new TypeError(t.MapConstants.MAP_SET_THROWABLE_MESSAGE);
            }
          } else r = n[t.MapConstants.MAP_KEY_IDENTIFIER];
          return r;
        }, e.getProperty = function (n) {
          return e.isValidObject(n) === !0 ? n[t.MapConstants.MAP_KEY_IDENTIFIER] : void 0;
        }, e.isValidObject = function (t) {
          return t === Object(t);
        }, e;
      }();
      t.MapUtils = e;
    }(t || (t = {}));
    var t;
    !function (t) {
      var e = function () {
        function e(t) {
          void 0 === t && (t = []), this.map = {}, this.keyArray = [];
          for (var e = 0; e < t.length; e++) {
            var n = t[e];
            n && n.length >= 2 && this.set(n[0], n[1]);
          }
        }
        return e.prototype.get = function (e) {
          if (this.has(e) === !0) {
            var n = t.MapUtils.getProperty(e);
            return void 0 === n && (n = String(e)), this.map[n];
          }
        }, e.prototype.has = function (e) {
          var n = t.MapUtils.getProperty(e);
          return void 0 === n && (n = String(e)), void 0 !== n && "undefined" != typeof this.map[n];
        }, e.prototype["delete"] = function (e) {
          if (this.has(e) === !0) {
            var n = t.MapUtils.getProperty(e);
            return void 0 === n && (n = String(e)), this.keyArray.splice(this.keyArray.indexOf(e), 1), delete this.map[n], !0;
          }
          return !1;
        }, e.prototype.set = function (e, n) {
          this["delete"](e);
          var r;
          try {
            r = String(t.MapUtils.defineProperty(e));
          } catch (i) {
            r = String(e);
          }
          this.keyArray.push(e), this.map[r] = n;
        }, e.prototype.entries = function () {
          return new t.MapIterator(this, "entries");
        }, e.prototype.keys = function () {
          return new t.MapIterator(this, "keys");
        }, e.prototype.values = function () {
          return new t.MapIterator(this, "values");
        }, e.prototype.forEach = function (t, e) {
          for (var n = 0, r = this.keyArray; n < r.length; n++) {
            var i = r[n];
            e ? t.call(e, this.get(i), i, this) : t(this.get(i), i, this);
          }
        }, e.prototype.clear = function () {
          this.map = {}, this.keyArray = [];
        }, e;
      }();
      t.Map = e;
    }(t || (t = {}));
    var t;
    !function (t) {
      window.Map || (window.Map = t.Map);
    }(t || (t = {}));
  }();

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function asyncGeneratorStep(n, t, e, r, o, a, c) {
    try {
      var i = n[a](c),
        u = i.value;
    } catch (n) {
      return void e(n);
    }
    i.done ? t(u) : Promise.resolve(u).then(r, o);
  }
  function _asyncToGenerator(n) {
    return function () {
      var t = this,
        e = arguments;
      return new Promise(function (r, o) {
        var a = n.apply(t, e);
        function _next(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
        }
        function _throw(n) {
          asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
        }
        _next(void 0);
      });
    };
  }
  function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
        t && (r = t);
        var n = 0,
          F = function () {};
        return {
          s: F,
          n: function () {
            return n >= r.length ? {
              done: !0
            } : {
              done: !1,
              value: r[n++]
            };
          },
          e: function (r) {
            throw r;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o,
      a = !0,
      u = !1;
    return {
      s: function () {
        t = t.call(r);
      },
      n: function () {
        var r = t.next();
        return a = r.done, r;
      },
      e: function (r) {
        u = !0, o = r;
      },
      f: function () {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      }
    };
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }
  function _get() {
    return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
      var p = _superPropBase(e, t);
      if (p) {
        var n = Object.getOwnPropertyDescriptor(p, t);
        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
      }
    }, _get.apply(null, arguments);
  }
  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(t, "prototype", {
      writable: !1
    }), e && _setPrototypeOf(t, e);
  }
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function () {
      return !!t;
    })();
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
        _defineProperty(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return e;
    };
    var t,
      e = {},
      r = Object.prototype,
      n = r.hasOwnProperty,
      o = Object.defineProperty || function (t, e, r) {
        t[e] = r.value;
      },
      i = "function" == typeof Symbol ? Symbol : {},
      a = i.iterator || "@@iterator",
      c = i.asyncIterator || "@@asyncIterator",
      u = i.toStringTag || "@@toStringTag";
    function define(t, e, r) {
      return Object.defineProperty(t, e, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), t[e];
    }
    try {
      define({}, "");
    } catch (t) {
      define = function (t, e, r) {
        return t[e] = r;
      };
    }
    function wrap(t, e, r, n) {
      var i = e && e.prototype instanceof Generator ? e : Generator,
        a = Object.create(i.prototype),
        c = new Context(n || []);
      return o(a, "_invoke", {
        value: makeInvokeMethod(t, r, c)
      }), a;
    }
    function tryCatch(t, e, r) {
      try {
        return {
          type: "normal",
          arg: t.call(e, r)
        };
      } catch (t) {
        return {
          type: "throw",
          arg: t
        };
      }
    }
    e.wrap = wrap;
    var h = "suspendedStart",
      l = "suspendedYield",
      f = "executing",
      s = "completed",
      y = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var p = {};
    define(p, a, function () {
      return this;
    });
    var d = Object.getPrototypeOf,
      v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t) {
      ["next", "throw", "return"].forEach(function (e) {
        define(t, e, function (t) {
          return this._invoke(e, t);
        });
      });
    }
    function AsyncIterator(t, e) {
      function invoke(r, o, i, a) {
        var c = tryCatch(t[r], t, o);
        if ("throw" !== c.type) {
          var u = c.arg,
            h = u.value;
          return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
            invoke("next", t, i, a);
          }, function (t) {
            invoke("throw", t, i, a);
          }) : e.resolve(h).then(function (t) {
            u.value = t, i(u);
          }, function (t) {
            return invoke("throw", t, i, a);
          });
        }
        a(c.arg);
      }
      var r;
      o(this, "_invoke", {
        value: function (t, n) {
          function callInvokeWithMethodAndArg() {
            return new e(function (e, r) {
              invoke(t, n, e, r);
            });
          }
          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(e, r, n) {
      var o = h;
      return function (i, a) {
        if (o === f) throw Error("Generator is already running");
        if (o === s) {
          if ("throw" === i) throw a;
          return {
            value: t,
            done: !0
          };
        }
        for (n.method = i, n.arg = a;;) {
          var c = n.delegate;
          if (c) {
            var u = maybeInvokeDelegate(c, n);
            if (u) {
              if (u === y) continue;
              return u;
            }
          }
          if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
            if (o === h) throw o = s, n.arg;
            n.dispatchException(n.arg);
          } else "return" === n.method && n.abrupt("return", n.arg);
          o = f;
          var p = tryCatch(e, r, n);
          if ("normal" === p.type) {
            if (o = n.done ? s : l, p.arg === y) continue;
            return {
              value: p.arg,
              done: n.done
            };
          }
          "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
        }
      };
    }
    function maybeInvokeDelegate(e, r) {
      var n = r.method,
        o = e.iterator[n];
      if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
      var i = tryCatch(o, e.iterator, r.arg);
      if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
      var a = i.arg;
      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
    }
    function pushTryEntry(t) {
      var e = {
        tryLoc: t[0]
      };
      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
    }
    function resetTryEntry(t) {
      var e = t.completion || {};
      e.type = "normal", delete e.arg, t.completion = e;
    }
    function Context(t) {
      this.tryEntries = [{
        tryLoc: "root"
      }], t.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(e) {
      if (e || "" === e) {
        var r = e[a];
        if (r) return r.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) {
          var o = -1,
            i = function next() {
              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
              return next.value = t, next.done = !0, next;
            };
          return i.next = i;
        }
      }
      throw new TypeError(typeof e + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), o(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
      var e = "function" == typeof t && t.constructor;
      return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
    }, e.mark = function (t) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
    }, e.awrap = function (t) {
      return {
        __await: t
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
      return this;
    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
      void 0 === i && (i = Promise);
      var a = new AsyncIterator(wrap(t, r, n, o), i);
      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
        return t.done ? t.value : a.next();
      });
    }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
      return this;
    }), define(g, "toString", function () {
      return "[object Generator]";
    }), e.keys = function (t) {
      var e = Object(t),
        r = [];
      for (var n in e) r.push(n);
      return r.reverse(), function next() {
        for (; r.length;) {
          var t = r.pop();
          if (t in e) return next.value = t, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, e.values = values, Context.prototype = {
      constructor: Context,
      reset: function (e) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
      },
      stop: function () {
        this.done = !0;
        var t = this.tryEntries[0].completion;
        if ("throw" === t.type) throw t.arg;
        return this.rval;
      },
      dispatchException: function (e) {
        if (this.done) throw e;
        var r = this;
        function handle(n, o) {
          return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
        }
        for (var o = this.tryEntries.length - 1; o >= 0; --o) {
          var i = this.tryEntries[o],
            a = i.completion;
          if ("root" === i.tryLoc) return handle("end");
          if (i.tryLoc <= this.prev) {
            var c = n.call(i, "catchLoc"),
              u = n.call(i, "finallyLoc");
            if (c && u) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            } else if (c) {
              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            } else {
              if (!u) throw Error("try statement without catch or finally");
              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
            }
          }
        }
      },
      abrupt: function (t, e) {
        for (var r = this.tryEntries.length - 1; r >= 0; --r) {
          var o = this.tryEntries[r];
          if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
            var i = o;
            break;
          }
        }
        i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
        var a = i ? i.completion : {};
        return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
      },
      complete: function (t, e) {
        if ("throw" === t.type) throw t.arg;
        return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
      },
      finish: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
        }
      },
      catch: function (t) {
        for (var e = this.tryEntries.length - 1; e >= 0; --e) {
          var r = this.tryEntries[e];
          if (r.tryLoc === t) {
            var n = r.completion;
            if ("throw" === n.type) {
              var o = n.arg;
              resetTryEntry(r);
            }
            return o;
          }
        }
        throw Error("illegal catch attempt");
      },
      delegateYield: function (e, r, n) {
        return this.delegate = {
          iterator: values(e),
          resultName: r,
          nextLoc: n
        }, "next" === this.method && (this.arg = t), y;
      }
    }, e;
  }
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _superPropBase(t, o) {
    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
    return t;
  }
  function _superPropGet(t, e, o, r) {
    var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), e, o);
    return 2 & r && "function" == typeof p ? function (t) {
      return p.apply(o, t);
    } : p;
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  /**
   * @this {Promise}
   */
  function finallyConstructor(callback) {
    var constructor = this.constructor;
    return this.then(function (value) {
      // @ts-ignore
      return constructor.resolve(callback()).then(function () {
        return value;
      });
    }, function (reason) {
      // @ts-ignore
      return constructor.resolve(callback()).then(function () {
        // @ts-ignore
        return constructor.reject(reason);
      });
    });
  }
  function allSettled(arr) {
    var P = this;
    return new P(function (resolve, reject) {
      if (!(arr && typeof arr.length !== 'undefined')) {
        return reject(new TypeError(_typeof(arr) + ' ' + arr + ' is not iterable(cannot read property Symbol(Symbol.iterator))'));
      }
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;
      function res(i, val) {
        if (val && (_typeof(val) === 'object' || typeof val === 'function')) {
          var then = val.then;
          if (typeof then === 'function') {
            then.call(val, function (val) {
              res(i, val);
            }, function (e) {
              args[i] = {
                status: 'rejected',
                reason: e
              };
              if (--remaining === 0) {
                resolve(args);
              }
            });
            return;
          }
        }
        args[i] = {
          status: 'fulfilled',
          value: val
        };
        if (--remaining === 0) {
          resolve(args);
        }
      }
      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  }

  /**
   * @constructor
   */
  function AggregateError(errors, message) {
    this.name = 'AggregateError', this.errors = errors;
    this.message = message || '';
  }
  AggregateError.prototype = Error.prototype;
  function any$1(arr) {
    var P = this;
    return new P(function (resolve, reject) {
      if (!(arr && typeof arr.length !== 'undefined')) {
        return reject(new TypeError('Promise.any accepts an array'));
      }
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return reject();
      var rejectionReasons = [];
      for (var i = 0; i < args.length; i++) {
        try {
          P.resolve(args[i]).then(resolve)["catch"](function (error) {
            rejectionReasons.push(error);
            if (rejectionReasons.length === args.length) {
              reject(new AggregateError(rejectionReasons, 'All promises were rejected'));
            }
          });
        } catch (ex) {
          reject(ex);
        }
      }
    });
  }

  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;
  function isArray$1(x) {
    return Boolean(x && typeof x.length !== 'undefined');
  }
  function noop() {}

  // Polyfill for Function.prototype.bind
  function bind$4(fn, thisArg) {
    return function () {
      fn.apply(thisArg, arguments);
    };
  }

  /**
   * @constructor
   * @param {Function} fn
   */
  function Promise$1(fn) {
    if (!(this instanceof Promise$1)) throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    /** @type {!number} */
    this._state = 0;
    /** @type {!boolean} */
    this._handled = false;
    /** @type {Promise|undefined} */
    this._value = undefined;
    /** @type {!Array<!Function>} */
    this._deferreds = [];
    doResolve(fn, this);
  }
  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    Promise$1._immediateFn(function () {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }
  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
      if (newValue && (_typeof(newValue) === 'object' || typeof newValue === 'function')) {
        var then = newValue.then;
        if (newValue instanceof Promise$1) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind$4(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }
  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }
  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise$1._immediateFn(function () {
        if (!self._handled) {
          Promise$1._unhandledRejectionFn(self._value);
        }
      });
    }
    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  /**
   * @constructor
   */
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(function (value) {
        if (done) return;
        done = true;
        resolve(self, value);
      }, function (reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      });
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }
  Promise$1.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };
  Promise$1.prototype.then = function (onFulfilled, onRejected) {
    // @ts-ignore
    var prom = new this.constructor(noop);
    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };
  Promise$1.prototype['finally'] = finallyConstructor;
  Promise$1.all = function (arr) {
    return new Promise$1(function (resolve, reject) {
      if (!isArray$1(arr)) {
        return reject(new TypeError('Promise.all accepts an array'));
      }
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;
      function res(i, val) {
        try {
          if (val && (_typeof(val) === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(val, function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }
      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };
  Promise$1.any = any$1;
  Promise$1.allSettled = allSettled;
  Promise$1.resolve = function (value) {
    if (value && _typeof(value) === 'object' && value.constructor === Promise$1) {
      return value;
    }
    return new Promise$1(function (resolve) {
      resolve(value);
    });
  };
  Promise$1.reject = function (value) {
    return new Promise$1(function (resolve, reject) {
      reject(value);
    });
  };
  Promise$1.race = function (arr) {
    return new Promise$1(function (resolve, reject) {
      if (!isArray$1(arr)) {
        return reject(new TypeError('Promise.race accepts an array'));
      }
      for (var i = 0, len = arr.length; i < len; i++) {
        Promise$1.resolve(arr[i]).then(resolve, reject);
      }
    });
  };

  // Use polyfill for setImmediate for performance gains
  Promise$1._immediateFn =
  // @ts-ignore
  typeof setImmediate === 'function' && function (fn) {
    // @ts-ignore
    setImmediate(fn);
  } || function (fn) {
    setTimeoutFunc(fn, 0);
  };
  Promise$1._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };

  /** @suppress {undefinedVars} */
  var globalNS = function () {
    // the only reliable means to get the global object is
    // `Function('return this')()`
    // However, this causes CSP violations in Chrome apps.
    if (typeof self !== 'undefined') {
      return self;
    }
    if (typeof window !== 'undefined') {
      return window;
    }
    if (typeof global !== 'undefined') {
      return global;
    }
    throw new Error('unable to locate global object');
  }();

  // Expose the polyfill if Promise is undefined or set to a
  // non-function value. The latter can be due to a named HTMLElement
  // being exposed by browsers for legacy reasons.
  // https://github.com/taylorhakes/promise-polyfill/issues/114
  if (typeof globalNS['Promise'] !== 'function') {
    globalNS['Promise'] = Promise$1;
  } else {
    if (!globalNS.Promise.prototype['finally']) {
      globalNS.Promise.prototype['finally'] = finallyConstructor;
    }
    if (!globalNS.Promise.allSettled) {
      globalNS.Promise.allSettled = allSettled;
    }
    if (!globalNS.Promise.any) {
      globalNS.Promise.any = any$1;
    }
  }

  var object$2 = {
    author: 'Sheinices',
    github: 'https://github.com/prisma/prisma-source',
    github_prisma: 'sheinices.github.io/prisma-main',
    css_version: '3.2.8',
    app_version: '2.5.6',
    prisma_domain: 'prisma.ws',
    pris_domain: 'ws.pris.cam',
    api_domain: 'pris.cam',
    cub_site: 'cub.rip'
  };
  var plugins$1 = [];
  Object.defineProperty(object$2, 'app_digital', {
    get: function get() {
      return parseInt(object$2.app_version.replace(/\./g, ''));
    }
  });
  Object.defineProperty(object$2, 'css_digital', {
    get: function get() {
      return parseInt(object$2.css_version.replace(/\./g, ''));
    }
  });
  Object.defineProperty(object$2, 'plugins', {
    get: function get() {
      return plugins$1;
    },
    set: function set(plugin) {
      if (_typeof(plugin) == 'object' && typeof plugin.type == 'string') {
        plugins$1.push(plugin);
      }
    }
  });
  Object.defineProperty(object$2, 'cub_mirrors', {
    get: function get() {
      var prisma = ['cub.rip', 'standby.cub.red', 'kurwa-bober.ninja'];
      var users = localStorage.getItem('cub_mirrors') || '[]';
      try {
        users = JSON.parse(users);
      } catch (e) {
        users = [];
      }
      if (Object.prototype.toString.call(users) === '[object Array]' && users.length) {
        return prisma.concat(users);
      }
      return prisma;
    },
    set: function set() {}
  });
  Object.defineProperty(object$2, 'cub_domain', {
    get: function get() {
      var use = localStorage.getItem('cub_domain') || '';
      return object$2.cub_mirrors.indexOf(use) > -1 ? use : object$2.cub_mirrors[0];
    }
  });

  function toObject(a) {
    if (Object.prototype.toString.call(a) === '[object Object]') return a;else {
      a = {};
      return a;
    }
  }
  function toArray(a) {
    if (Object.prototype.toString.call(a) === '[object Object]') {
      var b = [];
      for (var i in a) b.push(a[i]);
      return b;
    } else if (typeof a == 'string' || a == null || typeof a == 'number' || typeof a == 'undefined') return [];else return a;
  }
  function decodeJson(string, empty) {
    var json = empty || {};
    if (string) {
      try {
        json = JSON.parse(string);
      } catch (e) {}
    }
    return json;
  }
  function isObject(a) {
    return Object.prototype.toString.call(a) === '[object Object]';
  }
  function isArray(a) {
    return Object.prototype.toString.call(a) === '[object Array]';
  }
  function extend(a, b, replase) {
    for (var i in b) {
      if (_typeof(b[i]) == 'object') {
        if (a[i] == undefined) a[i] = Object.prototype.toString.call(b[i]) == '[object Array]' ? [] : {};
        this.extend(a[i], b[i], replase);
      } else if (a[i] == undefined || replase) a[i] = b[i];
    }
  }
  function empty$1(a, b) {
    for (var i in b) {
      if (!a[i]) a[i] = b[i];
    }
  }
  function getKeys(a, add) {
    var k = add || [];
    for (var i in a) k.push(i);
    return k;
  }
  function getValues(a, add) {
    var k = add || [];
    for (var i in a) k.push(a[i]);
    return k;
  }
  function remove$4(from, need) {
    var inx = from.indexOf(need);
    if (inx >= 0) from.splice(inx, 1);
  }
  function clone$1(a) {
    return JSON.parse(JSON.stringify(a));
  }
  function insert(where, index, item) {
    where.splice(index, 0, item);
  }
  function destroy$b(arr) {
    var call_function = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'destroy';
    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var where = toArray(arr);
    for (var i = where.length - 1; i >= 0; i--) {
      if (where[i] && where[i][call_function]) where[i][call_function](value);
    }
  }
  function groupBy(xs, key) {
    return xs.reduce(function (rv, x) {
      (rv[x[key]] = rv[x[key]] || []).push(x);
      return rv;
    }, {});
  }
  function removeNoIncludes(where, items) {
    for (var i = where.length - 1; i >= 0; i--) {
      if (items.indexOf(where[i]) === -1) remove$4(where, where[i]);
    }
    return where;
  }
  function shuffle(array) {
    for (var i = array.length - 1; i > 0; i--) {
      var j = Math.floor(Math.random() * (i + 1));
      var temp = array[i];
      array[i] = array[j];
      array[j] = temp;
    }
    return array;
  }
  function shuffleArrayFromIndex(array, startIndex) {
    if (startIndex < 0 || startIndex >= array.length) {
      return;
    }
    for (var i = array.length - 1; i > startIndex; i--) {
      // Выбираем случайный индекс от startIndex до i
      var j = Math.floor(Math.random() * (i - startIndex + 1)) + startIndex;
      // Меняем местами элементы array[i] и array[j]
      var _ref = [array[j], array[i]];
      array[i] = _ref[0];
      array[j] = _ref[1];
    }
  }
  function removeDuplicates(array, key) {
    var seen = [];
    return array.filter(function (a) {
      if (seen.indexOf(a[key]) == -1) {
        seen.push(a[key]);
        return true;
      } else return false;
    });
  }
  var Arrays = {
    toObject: toObject,
    toArray: toArray,
    decodeJson: decodeJson,
    isObject: isObject,
    isArray: isArray,
    extend: extend,
    getKeys: getKeys,
    getValues: getValues,
    insert: insert,
    clone: clone$1,
    remove: remove$4,
    destroy: destroy$b,
    empty: empty$1,
    groupBy: groupBy,
    removeNoIncludes: removeNoIncludes,
    shuffle: shuffle,
    shuffleArrayFromIndex: shuffleArrayFromIndex,
    removeDuplicates: removeDuplicates
  };

  function Subscribe() {
    this.add = function (type, listener) {
      if (this._listeners === undefined) this._listeners = {};
      var listeners = this._listeners;
      if (listeners[type] === undefined) listeners[type] = [];
      if (listeners[type].indexOf(listener) === -1) listeners[type].push(listener);
      return this;
    };
    this.follow = function (type, listener) {
      var _this = this;
      type.split(',').forEach(function (name) {
        _this.add(name, listener);
      });
      return this;
    };
    this.has = function (type, listener) {
      if (this._listeners === undefined) return false;
      var listeners = this._listeners;
      return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
    };
    this.remove = function (type, listener) {
      if (this._listeners === undefined) return this;
      var listeners = this._listeners;
      var listenerArray = listeners[type];
      if (listenerArray !== undefined) {
        var index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
      return this;
    };
    this.send = function (type) {
      var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this._listeners === undefined) return this;
      var listeners = this._listeners;
      var listenerArray = listeners[type];
      if (listenerArray !== undefined) {
        //if(Arrays.isObject(event)) event.target = this

        var array = listenerArray.slice(0);
        for (var i = 0, l = array.length; i < l; i++) {
          array[i].call(this, event);
        }
      }
      return this;
    };
    this.destroy = function () {
      this._listeners = {};
    };
  }
  function start$8() {
    return new Subscribe();
  }

  var html$27 = "<div class=\"head\">\n    <div class=\"head__body\">\n    <div class=\"head__logo-icon\"> \n    <img src=\"./img/logos.svg\" alt=\"PRISMA\" style=\"width: 100%; height: 100%; object-fit: contain;\" />\n    </div>\n        <div class=\"head__menu-icon\">\n        <img src=\"./img/logos.svg\" alt=\"PRISMA\" style=\"width: 100%; height: 100%; object-fit: contain;\" />\n        </div>\n\n        <div class=\"head__title\"></div>\n        \n        <div class=\"head__actions\">\n            <div class=\"head__action head__settings selector open--search\" icon--blink\" data-blink-interval=\"15\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M11 20C15.9706 20 20 15.9706 20 11C20 6.02944 15.9706 2 11 2C6.02944 2 2 6.02944 2 11C2 15.9706 6.02944 20 11 20Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M18.9299 20.6898C19.4599 22.2898 20.6699 22.4498 21.5999 21.0498C22.4499 19.7698 21.8899 18.7198 20.3499 18.7198C19.2099 18.7098 18.5699 19.5998 18.9299 20.6898Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n            </div>\n\n<!--       <div class=\"head__action selector open--premium icon--blink\" data-blink-interval=\"10\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M13.4002 17.4201H10.8902C9.25016 17.4201 7.92016 16.0401 7.92016 14.3401C7.92016 13.9301 8.26016 13.5901 8.67016 13.5901C9.08016 13.5901 9.42016 13.9301 9.42016 14.3401C9.42016 15.2101 10.0802 15.9201 10.8902 15.9201H13.4002C14.0502 15.9201 14.5902 15.3401 14.5902 14.6401C14.5902 13.7701 14.2802 13.6001 13.7702 13.4201L9.74016 12.0001C8.96016 11.7301 7.91016 11.1501 7.91016 9.36008C7.91016 7.82008 9.12016 6.58008 10.6002 6.58008H13.1102C14.7502 6.58008 16.0802 7.96008 16.0802 9.66008C16.0802 10.0701 15.7402 10.4101 15.3302 10.4101C14.9202 10.4101 14.5802 10.0701 14.5802 9.66008C14.5802 8.79008 13.9202 8.08008 13.1102 8.08008H10.6002C9.95016 8.08008 9.41016 8.66008 9.41016 9.36008C9.41016 10.2301 9.72016 10.4001 10.2302 10.5801L14.2602 12.0001C15.0402 12.2701 16.0902 12.8501 16.0902 14.6401C16.0802 16.1701 14.8802 17.4201 13.4002 17.4201Z\" fill=\"currentColor\"/>\n<path d=\"M12 18.75C11.59 18.75 11.25 18.41 11.25 18V6C11.25 5.59 11.59 5.25 12 5.25C12.41 5.25 12.75 5.59 12.75 6V18C12.75 18.41 12.41 18.75 12 18.75Z\" fill=\"currentColor\"/>\n<path d=\"M15 22.75H9C3.57 22.75 1.25 20.43 1.25 15V9C1.25 3.57 3.57 1.25 9 1.25H15C20.43 1.25 22.75 3.57 22.75 9V15C22.75 20.43 20.43 22.75 15 22.75ZM9 2.75C4.39 2.75 2.75 4.39 2.75 9V15C2.75 19.61 4.39 21.25 9 21.25H15C19.61 21.25 21.25 19.61 21.25 15V9C21.25 4.39 19.61 2.75 15 2.75H9Z\" fill=\"currentColor\"/>\n</svg>\n\n            </div> -->\n\n            <div class=\"head__action selector open--exit\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M9.16998 14.83L14.83 9.17004\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    <path d=\"M14.83 14.83L9.16998 9.17004\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    <path d=\"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>            \n            </div>\n            \n\n            <div class=\"head__action selector hide full-screen\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12 12L17 7M17 7H13.25M17 7V10.75\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M12 12L7 17M7 17H10.75M7 17V13.25\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28595 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12Z\" stroke=\"currentColor\" stroke-width=\"1.5\"/>\n</svg>\n\n            </div>\n        </div>\n\n        </div>\n    </div>\n</div>";

  var html$26 = "<div class=\"wrap layer--height layer--width\">\n    <div class=\"wrap__left wrap__left--hidden layer--height\"></div>\n    <div class=\"wrap__content layer--height layer--width\"></div>\n</div>";

  var html$25 = "<div class=\"menu\">\n    <div class=\"menu__header\">\n        <div class=\"menu__header-logo\">\n            <img src=\"./img/logo_menu.svg\" alt=\"PRISMA\" />\n        </div>\n        <div class=\"menu__header-time\">\n            <div class=\"menu__time-now time--clock\"></div>\n            <div class=\"menu__time-date time--full\"></div>\n            <div class=\"menu__time-week time--week\"></div>\n        </div>\n    </div> \n<div class=\"menu__case\">\n<ul class=\"menu__list\">\n        <li class=\"menu__item selector\" data-action=\"main\">\n        <div class=\"menu__ico\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M10.07 2.82009L3.14002 8.37008C2.36002 8.99008 1.86002 10.3001 2.03002 11.2801L3.36002 19.2401C3.60002 20.6601 4.96002 21.8101 6.40002 21.8101H17.6C19.03 21.8101 20.4 20.6501 20.64 19.2401L21.97 11.2801C22.13 10.3001 21.63 8.99008 20.86 8.37008L13.93 2.8301C12.86 1.9701 11.13 1.97009 10.07 2.82009Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M12 15.5C13.3807 15.5 14.5 14.3807 14.5 13C14.5 11.6193 13.3807 10.5 12 10.5C10.6193 10.5 9.5 11.6193 9.5 13C9.5 14.3807 10.6193 15.5 12 15.5Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>        \n        </div>\n        <div class=\"menu__text\">#{menu_main}</div>\n    </li>\n            <li class=\"menu__item selector\" data-action=\"movie\">\n              <div class=\"menu__ico\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              <path d=\"M9.1001 12V10.52C9.1001 8.60999 10.4501 7.83999 12.1001 8.78999L13.3801 9.52999L14.6601 10.27C16.3101 11.22 16.3101 12.78 14.6601 13.73L13.3801 14.47L12.1001 15.21C10.4501 16.16 9.1001 15.38 9.1001 13.48V12Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              </svg>              \n                </div>\n                <div class=\"menu__text\">#{menu_movies}</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"tv\">\n              <div class=\"menu__ico\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M7.25998 2H16.73C17.38 2 17.96 2.02003 18.48 2.09003C21.25 2.40003 22 3.70001 22 7.26001V13.58C22 17.14 21.25 18.44 18.48 18.75C17.96 18.82 17.39 18.84 16.73 18.84H7.25998C6.60998 18.84 6.02998 18.82 5.50998 18.75C2.73998 18.44 1.98999 17.14 1.98999 13.58V7.26001C1.98999 3.70001 2.73998 2.40003 5.50998 2.09003C6.02998 2.02003 6.60998 2 7.25998 2Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              <path d=\"M13.58 8.32007H17.2599\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              <path d=\"M6.73999 14.11H6.75998H17.27\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              <path d=\"M7 22H17\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              <path d=\"M7.1947 8.30005H7.20368\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              <path d=\"M10.4945 8.30005H10.5035\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              </svg>\n                </div>\n                <div class=\"menu__text\">#{menu_tv}</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"cartoons\">\n                <div class=\"menu__ico\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M15.5 9.75C16.3284 9.75 17 9.07843 17 8.25C17 7.42157 16.3284 6.75 15.5 6.75C14.6716 6.75 14 7.42157 14 8.25C14 9.07843 14.6716 9.75 15.5 9.75Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M8.5 9.75C9.32843 9.75 10 9.07843 10 8.25C10 7.42157 9.32843 6.75 8.5 6.75C7.67157 6.75 7 7.42157 7 8.25C7 9.07843 7.67157 9.75 8.5 9.75Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M8.4 13.3H15.6C16.1 13.3 16.5 13.7 16.5 14.2C16.5 16.69 14.49 18.7 12 18.7C9.51 18.7 7.5 16.69 7.5 14.2C7.5 13.7 7.9 13.3 8.4 13.3Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                </svg>                \n                </div>\n                <div class=\"menu__text\">#{menu_multmovie}</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"anime\">\n                <div class=\"menu__ico\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                   <path d=\"M22 20.07V12.18C22 6.57999 17.5 2 12 2C6.5 2 2 6.57999 2 12.18V20.07C2 21.33 2.74998 21.67 3.66998 20.83L4.66998 19.92C5.03998 19.58 5.64001 19.58 6.01001 19.92L8.01001 21.75C8.38001 22.09 8.97998 22.09 9.34998 21.75L11.35 19.92C11.72 19.58 12.32 19.58 12.69 19.92L14.69 21.75C15.06 22.09 15.66 22.09 16.03 21.75L18.03 19.92C18.4 19.58 19 19.58 19.37 19.92L20.37 20.83C21.25 21.67 22 21.33 22 20.07Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                      <path d=\"M8 14C10.37 15.78 13.63 15.78 16 14\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                         <path d=\"M12 11C13.1046 11 14 10.1046 14 9C14 7.89543 13.1046 7 12 7C10.8954 7 10 7.89543 10 9C10 10.1046 10.8954 11 12 11Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>\n\n                </div>\n                <div class=\"menu__text\">#{menu_anime}</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"collections\">\n            <div class=\"menu__ico\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M13.01 2.92007L18.91 5.54007C20.61 6.29007 20.61 7.53007 18.91 8.28007L13.01 10.9001C12.34 11.2001 11.24 11.2001 10.57 10.9001L4.67 8.28007C2.97 7.53007 2.97 6.29007 4.67 5.54007L10.57 2.92007C11.24 2.62007 12.34 2.62007 13.01 2.92007Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                    <path d=\"M3 11C3 11.84 3.63 12.81 4.4 13.15L11.19 16.17C11.71 16.4 12.3 16.4 12.81 16.17L19.6 13.15C20.37 12.81 21 11.84 21 11\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                       <path d=\"M3 16C3 16.93 3.55 17.77 4.4 18.15L11.19 21.17C11.71 21.4 12.3 21.4 12.81 21.17L19.6 18.15C20.45 17.77 21 16.93 21 16\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n             </svg>\n\n            </div>\n            <div class=\"menu__text\">#{menu_collections}</div>\n        </li>\n            <!-- <li class=\"menu__item selector\" data-action=\"catalog\">\n                <div class=\"menu__ico\">\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g>\n                <g id=\"SVGRepo_iconCarrier\"> <path d=\"M14 2.00522C13.3848 2 12.7199 2 12 2C7.28595 2 4.92893 2 3.46447 3.46447C2 4.92893 2 7.28595 2 12C2 16.714 2 19.0711 3.46447 20.5355C4.92893 22 7.28595 22 12 22C16.714 22 19.0711 22 20.5355 20.5355C22 19.0711 22 16.714 22 12C22 11.2801 22 10.6152 21.9948 10\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path> <circle cx=\"19\" cy=\"5\" r=\"3\" stroke=\"currentColor\" stroke-width=\"1.5\"></circle> <path d=\"M2 13H5.16026C6.06543 13 6.51802 13 6.91584 13.183C7.31367 13.3659 7.60821 13.7096 8.19729 14.3968L8.80271 15.1032C9.39179 15.7904 9.68633 16.1341 10.0842 16.317C10.482 16.5 10.9346 16.5 11.8397 16.5H12.1603C13.0654 16.5 13.518 16.5 13.9158 16.317C14.3137 16.1341 14.6082 15.7904 15.1973 15.1032L15.8027 14.3968C16.3918 13.7096 16.6863 13.3659 17.0842 13.183C17.482 13 17.9346 13 18.8397 13H22\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path>\n                </g></svg>\n                </div>\n                <div class=\"menu__text\">#{menu_catalog}</div>\n            </li> -->\n           <!-- <li class=\"menu__item selector\" data-action=\"relise\">\n                <div class=\"menu__ico\">\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                <g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g>\n                <g id=\"SVGRepo_iconCarrier\">\n                <path d=\"M2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28595 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12Z\" stroke=\"currentColor\" stroke-width=\"1.5\"></path> <path d=\"M5.5 8V10C5.5 11.1046 6.39543 12 7.5 12H10.5M10.5 8V12M10.5 12V16M13.5 8V13.2M13.5 13.2V16M13.5 13.2L15.4231 11.2M15.4231 11.2L18.5 8M15.4231 11.2L18.5 16\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\">\n                </path> </g></svg>\n                </div>\n                <div class=\"menu__text\">#{menu_relises}</div>\n            </li> -->\n            <li class=\"menu__item selector\" data-action=\"filter\">\n                <div class=\"menu__ico\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M12.37 8.87988H17.62\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M6.38 8.87988L7.13 9.62988L9.38 7.37988\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M12.37 15.8799H17.62\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M6.38 15.8799L7.13 16.6299L9.38 14.3799\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                </svg>                \n                </div>\n                <div class=\"menu__text\">#{menu_filter}</div>\n            </li>       \n            <li class=\"menu__item selector\" data-action=\"favorite\">\n                <div class=\"menu__ico\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.62 20.81C12.28 20.93 11.72 20.93 11.38 20.81C8.48 19.82 2 15.69 2 8.68998C2 5.59998 4.49 3.09998 7.56 3.09998C9.38 3.09998 10.99 3.97998 12 5.33998C13.01 3.97998 14.63 3.09998 16.44 3.09998C19.51 3.09998 22 5.59998 22 8.68998C22 15.69 15.52 19.82 12.62 20.81Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n\n                </div>\n                <div class=\"menu__text\">#{settings_input_links}</div>\n            </li>\n\n\n            <li class=\"menu__item selector\" data-action=\"history\">\n                <div class=\"menu__ico\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M10.33 7.51001C10.83 7.36001 11.38 7.26001 12 7.26001C14.76 7.26001 17 9.50001 17 12.26C17 15.02 14.76 17.26 12 17.26C9.24 17.26 7 15.02 7 12.26C7 11.23 7.31 10.28 7.84 9.48001\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M9.62 7.64999L11.28 5.73999\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M9.62 7.6499L11.56 9.0699\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n\n                </div>\n                <div class=\"menu__text\">#{menu_history}</div>\n            </li>          \n        </ul>\n    </div>\n  \n    <div class=\"menu__case nosort\">\n\n        <ul class=\"menu__list\">\n            <li class=\"menu__item selector\" data-action=\"settings\">\n                <div class=\"menu__ico\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M2 12.8799V11.1199C2 10.0799 2.85 9.21994 3.9 9.21994C5.71 9.21994 6.45 7.93994 5.54 6.36994C5.02 5.46994 5.33 4.29994 6.24 3.77994L7.97 2.78994C8.76 2.31994 9.78 2.59994 10.25 3.38994L10.36 3.57994C11.26 5.14994 12.74 5.14994 13.65 3.57994L13.76 3.38994C14.23 2.59994 15.25 2.31994 16.04 2.78994L17.77 3.77994C18.68 4.29994 18.99 5.46994 18.47 6.36994C17.56 7.93994 18.3 9.21994 20.11 9.21994C21.15 9.21994 22.01 10.0699 22.01 11.1199V12.8799C22.01 13.9199 21.16 14.7799 20.11 14.7799C18.3 14.7799 17.56 16.0599 18.47 17.6299C18.99 18.5399 18.68 19.6999 17.77 20.2199L16.04 21.2099C15.25 21.6799 14.23 21.3999 13.76 20.6099L13.65 20.4199C12.75 18.8499 11.27 18.8499 10.36 20.4199L10.25 20.6099C9.78 21.3999 8.76 21.6799 7.97 21.2099L6.24 20.2199C5.33 19.6999 5.02 18.5299 5.54 17.6299C6.45 16.0599 5.71 14.7799 3.9 14.7799C2.85 14.7799 2 13.9199 2 12.8799Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n                </div>\n                <div class=\"menu__text\">#{menu_settings}</div>\n            </li>\n            <li class=\"menu__item selector\" data-action=\"about\">\n                <div class=\"menu__ico\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M5.06107 20.0451L5.50191 19.4383L5.06107 20.0451ZM3.95491 18.9389L4.56168 18.4981L3.95491 18.9389ZM20.0451 18.9389L19.4383 18.4981L20.0451 18.9389ZM18.9389 20.0451L18.4981 19.4383L18.9389 20.0451ZM18.9389 3.95491L18.4981 4.56168L18.9389 3.95491ZM20.0451 5.06107L19.4383 5.50191L20.0451 5.06107ZM5.06107 3.95491L5.50191 4.56168L5.06107 3.95491ZM3.95491 5.06107L4.56168 5.50191L3.95491 5.06107ZM12.75 11C12.75 10.5858 12.4142 10.25 12 10.25C11.5858 10.25 11.25 10.5858 11.25 11H12.75ZM11.25 17C11.25 17.4142 11.5858 17.75 12 17.75C12.4142 17.75 12.75 17.4142 12.75 17H11.25ZM12 20.25C10.1084 20.25 8.74999 20.249 7.69804 20.135C6.66013 20.0225 6.00992 19.8074 5.50191 19.4383L4.62023 20.6518C5.42656 21.2377 6.37094 21.5 7.53648 21.6263C8.68798 21.751 10.1418 21.75 12 21.75V20.25ZM2.25 12C2.25 13.8582 2.24897 15.312 2.37373 16.4635C2.50001 17.6291 2.76232 18.5734 3.34815 19.3798L4.56168 18.4981C4.19259 17.9901 3.97745 17.3399 3.865 16.302C3.75103 15.25 3.75 13.8916 3.75 12H2.25ZM5.50191 19.4383C5.14111 19.1762 4.82382 18.8589 4.56168 18.4981L3.34815 19.3798C3.70281 19.8679 4.13209 20.2972 4.62023 20.6518L5.50191 19.4383ZM20.25 12C20.25 13.8916 20.249 15.25 20.135 16.302C20.0225 17.3399 19.8074 17.9901 19.4383 18.4981L20.6518 19.3798C21.2377 18.5734 21.5 17.6291 21.6263 16.4635C21.751 15.312 21.75 13.8582 21.75 12H20.25ZM12 21.75C13.8582 21.75 15.312 21.751 16.4635 21.6263C17.6291 21.5 18.5734 21.2377 19.3798 20.6518L18.4981 19.4383C17.9901 19.8074 17.3399 20.0225 16.302 20.135C15.25 20.249 13.8916 20.25 12 20.25V21.75ZM19.4383 18.4981C19.1762 18.8589 18.8589 19.1762 18.4981 19.4383L19.3798 20.6518C19.8679 20.2972 20.2972 19.8679 20.6518 19.3798L19.4383 18.4981ZM12 3.75C13.8916 3.75 15.25 3.75103 16.302 3.865C17.3399 3.97745 17.9901 4.19259 18.4981 4.56168L19.3798 3.34815C18.5734 2.76232 17.6291 2.50001 16.4635 2.37373C15.312 2.24897 13.8582 2.25 12 2.25V3.75ZM21.75 12C21.75 10.1418 21.751 8.68798 21.6263 7.53648C21.5 6.37094 21.2377 5.42656 20.6518 4.62023L19.4383 5.50191C19.8074 6.00992 20.0225 6.66013 20.135 7.69804C20.249 8.74999 20.25 10.1084 20.25 12H21.75ZM18.4981 4.56168C18.8589 4.82382 19.1762 5.14111 19.4383 5.50191L20.6518 4.62023C20.2972 4.13209 19.8679 3.70281 19.3798 3.34815L18.4981 4.56168ZM12 2.25C10.1418 2.25 8.68798 2.24897 7.53648 2.37373C6.37094 2.50001 5.42656 2.76232 4.62023 3.34815L5.50191 4.56168C6.00992 4.19259 6.66013 3.97745 7.69804 3.865C8.74999 3.75103 10.1084 3.75 12 3.75V2.25ZM3.75 12C3.75 10.1084 3.75103 8.74999 3.865 7.69804C3.97745 6.66013 4.19259 6.00992 4.56168 5.50191L3.34815 4.62023C2.76232 5.42656 2.50001 6.37094 2.37373 7.53648C2.24897 8.68798 2.25 10.1418 2.25 12H3.75ZM4.62023 3.34815C4.13209 3.70281 3.70281 4.13209 3.34815 4.62023L4.56168 5.50191C4.82382 5.14111 5.14111 4.82382 5.50191 4.56168L4.62023 3.34815ZM11.25 11V17H12.75V11H11.25Z\" fill=\"currentColor\"/>\n<path d=\"M13 8C13 8.55228 12.5523 9 12 9C11.4477 9 11 8.55228 11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8Z\" fill=\"currentColor\"/>\n</svg>\n\n                </div>\n                <div class=\"menu__text\">#{menu_about}</div>\n            </li>\n            </li>\n            </li>\n        </ul>\n\n    </div>\n</div>";

  var html$24 = "<div class=\"activitys layer--width\">\n    <div class=\"activitys__slides\"></div>\n</div>";

  var html$23 = "<div class=\"activity layer--width\">\n    <div class=\"activity__body\"></div>\n    <div class=\"activity__loader\"></div>\n</div>";

  var html$22 = "<div class=\"activity-wait-refresh\">\n    <div class=\"activity-wait-refresh__title\">\u041E\u0436\u0438\u0434\u0430\u044E</div>\n    <div class=\"activity-wait-refresh__text\">\u041D\u0430\u0436\u043C\u0438\u0442\u0435 (\u0432\u043D\u0438\u0437) \u0434\u043B\u044F \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u0430\u043A\u0442\u0438\u0432\u043D\u043E\u0441\u0442\u0438.</div>\n\n    <div class=\"activity-wait-refresh__items\">\n        <div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n        <div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n        <div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n        <div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n        <div>\n            <div></div>\n            <div></div>\n            <div></div>\n        </div>\n    </div>\n</div>";

  var html$21 = "<div class=\"scroll\">\n    <div class=\"scroll__content\">\n        <div class=\"scroll__body\">\n            \n        </div>\n    </div>\n</div>";

  var html$20 = "\n<div class=\"settings\">\n<div class=\"settings__layer\"></div>\n<div class=\"settings__content layer--height\">\n    <div class=\"settings__head\">\n        <div class=\"settings__title\">#{title_settings}</div>\n    </div>\n    <div class=\"settings__body\"></div>\n    </div>\n</div>\n";

  var html$1$ = "<div class=\"settings-grid\">\n<div class=\"settings-folder selector\" data-component=\"account\">\n    <div class=\"settings-folder__icon\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M18.14 21.62C17.26 21.88 16.22 22 15 22H8.99998C7.77998 22 6.73999 21.88 5.85999 21.62C6.07999 19.02 8.74998 16.97 12 16.97C15.25 16.97 17.92 19.02 18.14 21.62Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M15 2H9C4 2 2 4 2 9V15C2 18.78 3.14 20.85 5.86 21.62C6.08 19.02 8.75 16.97 12 16.97C15.25 16.97 17.92 19.02 18.14 21.62C20.86 20.85 22 18.78 22 15V9C22 4 20 2 15 2ZM12 14.17C10.02 14.17 8.42 12.56 8.42 10.58C8.42 8.60002 10.02 7 12 7C13.98 7 15.58 8.60002 15.58 10.58C15.58 12.56 13.98 14.17 12 14.17Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M15.58 10.58C15.58 12.56 13.98 14.17 12 14.17C10.02 14.17 8.42004 12.56 8.42004 10.58C8.42004 8.60002 10.02 7 12 7C13.98 7 15.58 8.60002 15.58 10.58Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n    </div>\n    <div class=\"settings-folder__name\">#{settings_prisma_sync}</div>\n</div>\n\n<div class=\"settings-folder selector\" data-component=\"interface\">\n    <div class=\"settings-folder__icon\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M13.01 2.92007L18.91 5.54007C20.61 6.29007 20.61 7.53007 18.91 8.28007L13.01 10.9001C12.34 11.2001 11.24 11.2001 10.57 10.9001L4.67 8.28007C2.97 7.53007 2.97 6.29007 4.67 5.54007L10.57 2.92007C11.24 2.62007 12.34 2.62007 13.01 2.92007Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M3 11C3 11.84 3.63 12.81 4.4 13.15L11.19 16.17C11.71 16.4 12.3 16.4 12.81 16.17L19.6 13.15C20.37 12.81 21 11.84 21 11\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M3 16C3 16.93 3.55 17.77 4.4 18.15L11.19 21.17C11.71 21.4 12.3 21.4 12.81 21.17L19.6 18.15C20.45 17.77 21 16.93 21 16\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n    </div>\n    <div class=\"settings-folder__name\">#{settings_main_interface}</div>\n</div>\n\n<div class=\"settings-folder selector\" data-component=\"player\">\n    <div class=\"settings-folder__icon\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M9.1001 12V10.52C9.1001 8.60999 10.4501 7.83999 12.1001 8.78999L13.3801 9.52999L14.6601 10.27C16.3101 11.22 16.3101 12.78 14.6601 13.73L13.3801 14.47L12.1001 15.21C10.4501 16.16 9.1001 15.38 9.1001 13.48V12Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n    </div>\n    <div class=\"settings-folder__name\">#{settings_main_player}</div>\n</div>\n\n<div class=\"settings-folder selector\" data-component=\"server\">\n    <div class=\"settings-folder__icon\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M7.80005 13.8001V9.6001\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M7.95001 18.0001C9.02697 18.0001 9.90002 17.127 9.90002 16.0501C9.90002 14.9731 9.02697 14.1001 7.95001 14.1001C6.87306 14.1001 6 14.9731 6 16.0501C6 17.127 6.87306 18.0001 7.95001 18.0001Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M7.79999 9.60001C8.7941 9.60001 9.59998 8.7941 9.59998 7.79999C9.59998 6.80588 8.7941 6 7.79999 6C6.80588 6 6 6.80588 6 7.79999C6 8.7941 6.80588 9.60001 7.79999 9.60001Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M16.2 9.60001C17.1941 9.60001 18 8.7941 18 7.79999C18 6.80588 17.1941 6 16.2 6C15.2059 6 14.4 6.80588 14.4 7.79999C14.4 8.7941 15.2059 9.60001 16.2 9.60001Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M7.88 13.8001C8.15 12.7501 9.10999 11.9701 10.24 11.9801L12.3 11.9901C13.87 12.0001 15.21 10.9901 15.7 9.58008\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M9 2H15C20 2 22 4 22 9V15C22 20 20 22 15 22H9C4 22 2 20 2 15V9C2 4 4 2 9 2Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n    </div>\n    <div class=\"settings-folder__name\">#{settings_main_torrserver}</div>\n</div>\n\n    <div class=\"settings-folder selector settings-folder--wide\" data-component=\"parser\">\n        <div class=\"settings-folder__icon\">\n            <img src=\"./img/icons/settings/parser.svg\" />\n        </div>\n        <div class=\"settings-folder__name\">#{settings_main_parser}</div>\n    </div>\n\n<div class=\"settings-folder selector settings-folder--wide\" data-component=\"more\">\n    <div class=\"settings-folder__icon\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M19.07 4.93L4.92999 19.07C3.11999 17.26 2 14.76 2 12C2 6.48 6.48 2 12 2C14.76 2 17.26 3.12 19.07 4.93Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M22 11.9999C22 17.5199 17.52 21.9999 12 21.9999C9.24 21.9999 6.73999 20.8799 4.92999 19.0699L19.07 4.92993C20.88 6.73993 22 9.23993 22 11.9999Z\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M7.76001 16.24L13.41 21.9\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M11.29 12.71L17.87 19.28\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M14.83 9.16992L21.12 15.4699\" stroke=\"#ffff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n    </div>\n    <div class=\"settings-folder__name\">#{settings_main_rest}</div>\n</div>\n</div>";

  var html$1_ = "<div>\n     <div class=\"settings-param selector\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_interface_lang}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"light_version\">\n        <div class=\"settings-param__name\">#{settings_interface_type}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param-title\"><span>#{settings_interface_background}</span></div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"background\">\n        <div class=\"settings-param__name\">#{settings_interface_background_use}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"select\" data-name=\"background_type\">\n        <div class=\"settings-param__name\">#{settings_interface_background_type}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"black_style\">\n        <div class=\"settings-param__name\">#{settings_interface_black_style}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param-title\"><span>#{title_card}</span></div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"select\" data-name=\"card_interfice_type\">\n        <div class=\"settings-param__name\">#{settings_interface_card_interfice}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"card_interfice_poster\">\n        <div class=\"settings-param__name\">#{settings_interface_card_poster}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"card_interfice_cover\">\n        <div class=\"settings-param__name\">#{settings_interface_card_cover}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"card_interfice_reactions\">\n        <div class=\"settings-param__name\">#{settings_interface_card_reactions}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param-title\"><span>#{settings_interface_glass}</span></div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"glass_style\">\n        <div class=\"settings-param__name\">#{settings_interface_glass}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_glass_descr}</div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"select\" data-name=\"glass_opacity\">\n        <div class=\"settings-param__name\">#{settings_interface_glass_opacity}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <div class=\"settings-param-title\"><span>#{settings_main_interface}</span></div>\n\n    <div class=\"settings-param selector is--tv\" data-type=\"select\" data-name=\"interface_style\">\n        <div class=\"settings-param__name\">#{settings_interface_style}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_style_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"interface_size\">\n    <div class=\"settings-param__name\">#{settings_interface_size}</div>\n    <div class=\"settings-param__value\"></div>\n    <div class=\"settings-param__descr\">#{settings_interface_size_descr}</div>\n    </div>\n\n        <div class=\"settings-param selector\" data-type=\"select\" data-name=\"interface_size_fixed\">\n        <div class=\"settings-param__name\">#{settings_interface_size_fixed}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_size_fixed_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"footer_card\">\n        <div class=\"settings-param__name\">#{settings_interface_footer_card}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_footer_card_descr}</div>\n    </div>  \n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"view_trailer\">\n        <div class=\"settings-param__name\">#{settings_interface_view_trailer}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"show_options_button\">\n        <div class=\"settings-param__name\">#{settings_interface_hide_ai}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"poster_trailer\">\n        <div class=\"settings-param__name\">#{settings_interface_poster_trailer}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_poster_trailer_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"background_trailer\">\n        <div class=\"settings-param__name\">#{settings_interface_background_trailer}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_background_trailer_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"animation\">\n        <div class=\"settings-param__name\">#{settings_interface_animation}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_animation_descr}</div>\n    </div>\n\n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"advanced_animation\">\n        <div class=\"settings-param__name\">#{settings_interface_advanced_animation}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_advanced_animation_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"mask\">\n        <div class=\"settings-param__name\">#{settings_interface_attenuation}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_attenuation_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"scroll_type\">\n        <div class=\"settings-param__name\">#{settings_interface_scroll}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"card_views_type\">\n        <div class=\"settings-param__name\">#{settings_interface_view_card}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_view_card_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"hide_outside_the_screen\">\n        <div class=\"settings-param__name\">#{settings_interface_hide_outside_the_screen}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_interface_hide_outside_the_screen_descr}</div>\n    </div>\n</div>";

  var html$1Z = "<div>\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"parser_use\" data-children=\"parser\">\n        <div class=\"settings-param__name\">#{settings_parser_use}</div>\n        <div class=\"settings-param__value\"></div>\n     <!--   <div class=\"settings-param__descr\">#{settings_parser_use_descr}</div> -->\n    </div>\n    <div data-parent=\"parser\">\n\n        <div data-parent=\"type\" data-visible-value=\"jackett\">\n            <div class=\"settings-param-title\"><span>Jackett</span></div>\n\n            <div class=\"settings-param selector\" data-type=\"input\" data-name=\"jackett_url\" placeholder=\"#{settings_parser_jackett_placeholder}\">\n                <div class=\"settings-param__name\">#{settings_parser_jackett_link}</div>\n                <div class=\"settings-param__value\"></div>\n                <div class=\"settings-param__descr\">#{settings_parser_jackett_link_descr}</div>\n            </div>\n\n            <div class=\"settings-param selector\" data-type=\"input\" data-name=\"jackett_key\" data-string=\"true\" placeholder=\"#{settings_parser_jackett_key_placeholder}\">\n                <div class=\"settings-param__name\">#{settings_parser_jackett_key}</div>\n                <div class=\"settings-param__value\"></div>\n                <div class=\"settings-param__descr\">#{settings_parser_jackett_key_descr}</div>\n            </div>\n\n            <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"jackett_interview\">\n                <div class=\"settings-param__name\">#{settings_parser_jackett_interview}</div>\n                <div class=\"settings-param__value\"></div>\n            </div>\n        </div>\n        \n        <div data-parent=\"type\" data-visible-value=\"prowlarr\" class=\"hide\">\n            <div class=\"settings-param-title\"><span>Prowlarr</span></div>\n\n            <div class=\"settings-param selector\" data-type=\"input\" data-name=\"prowlarr_url\" placeholder=\"#{settings_parser_jackett_placeholder}\">\n                <div class=\"settings-param__name\">#{settings_parser_jackett_link}</div>\n                <div class=\"settings-param__value\"></div>\n                <div class=\"settings-param__descr\">#{settings_parser_prowlarr_link_descr}</div>\n            </div>\n\n            <div class=\"settings-param selector\" data-type=\"input\" data-name=\"prowlarr_key\" data-string=\"true\" placeholder=\"#{settings_parser_jackett_key_placeholder}\">\n                <div class=\"settings-param__name\">#{settings_parser_jackett_key}</div>\n                <div class=\"settings-param__value\"></div>\n                <div class=\"settings-param__descr\">#{settings_parser_prowlarr_key_descr}</div>\n            </div>\n        </div>\n\n        <div class=\"settings-param-title\"><span>#{more}</span></div>\n\n        <div class=\"settings-param selector\" data-type=\"select\" data-name=\"parse_lang\">\n            <div class=\"settings-param__name\">#{settings_parser_search}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_parser_search_descr}</div>\n        </div>\n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"parse_timeout\">\n            <div class=\"settings-param__name\">#{settings_parser_timeout_title}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_parser_timeout_descr}</div>\n        </div>\n    <!--    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"parse_in_search\">\n            <div class=\"settings-param__name\">#{settings_parser_in_search}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_parser_in_search_descr}</div>\n        </div> -->\n    </div>\n</div>";

  var html$1Y = "<div>\n    <div class=\"settings-param selector is--android\" data-type=\"toggle\" data-name=\"internal_torrclient\" data-children=\"internal_torrclient\">\n        <div class=\"settings-param__name\">#{settings_server_client}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_server_client_descr}</div>\n    </div>\n\n    <div data-parent=\"internal_torrclient\">\n\n        <div class=\"settings-param-title\"><span>#{settings_server_links}</span></div>\n\n        <div class=\"settings-param selector\" data-type=\"input\" data-name=\"torrserver_url\" placeholder=\"#{settings_server_placeholder}\">\n            <div class=\"settings-param__name\">#{settings_server_link_one}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_server_link_one_localip}</div>\n            <div class=\"settings-param__status\"></div>\n        </div>\n\n    \n    \n        <!-- <div class=\"settings-param-title\"><span>#{settings_server_additionally}</span></div> -->\n\n        <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"torrserver_savedb\">\n            <div class=\"settings-param__name\">#{settings_server_base}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_server_base_descr}</div>\n        </div> -->\n        \n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"torrserver_preload\">\n            <div class=\"settings-param__name\">#{settings_server_preload}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_server_preload_descr}</div>\n        </div>\n\n        <div class=\"settings-param-title\"><span>#{settings_server_auth}</span></div>\n\n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"torrserver_auth\" data-children=\"login\">\n            <div class=\"settings-param__name\">#{settings_server_password_use}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_torrserver_auth}</div>\n        </div>\n        \n        <div data-parent=\"login\">\n            <div class=\"settings-param selector\" data-type=\"input\" data-name=\"torrserver_login\" placeholder=\"#{settings_server_not_specified}\">\n                <div class=\"settings-param__name\">#{settings_server_login}</div>\n                <div class=\"settings-param__value\"></div>\n            </div>\n\n            <div class=\"settings-param selector\" data-type=\"input\" data-name=\"torrserver_password\" data-string=\"true\" placeholder=\"#{settings_server_not_specified}\">\n                <div class=\"settings-param__name\">#{settings_server_password}</div>\n                <div class=\"settings-param__value\"></div>\n            </div>\n        </div>\n    </div>\n</div>";

  var html$1X = "<div>\n    <div class=\"settings-param-title\"><span>#{settings_main_player}</span></div>\n      \n    <div class=\"settings-param selector is--player\" data-type=\"select\" data-name=\"player\">\n        <div class=\"settings-param__name\">#{settings_player_type}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_type_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"video_quality_default\">\n         <div class=\"settings-param__name\">#{settings_player_quality}</div>\n         <div class=\"settings-param__value\"></div>\n         <div class=\"settings-param__descr\">#{settings_player_quality_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector is--player\" data-type=\"select\" data-name=\"player_torrent\">\n        <div class=\"settings-param__name\">#{settings_player_torrent_type}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_torrent_type_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector is--android\" data-type=\"select\" data-name=\"player_launch_trailers\">\n        <div class=\"settings-param__name\">#{settings_player_launch_trailers}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n    \n    <div class=\"settings-param selector is--android\" data-type=\"button\" data-name=\"reset_player\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_player_reset}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_reset_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector is--nw\" data-type=\"input\" data-name=\"player_nw_path\" placeholder=\"\">\n        <div class=\"settings-param__name\">#{settings_player_path}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_path_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"player_normalization\">\n        <div class=\"settings-param__name\">#{settings_player_normalization}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_normalization_descr}</div>\n    </div>\n    \n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"playlist_next\">\n        <div class=\"settings-param__name\">#{settings_player_next_episode}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_next_episode_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"player_timecode\">\n        <div class=\"settings-param__name\">#{settings_player_timecode}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_timecode_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"player_rewind\">\n        <div class=\"settings-param__name\">#{settings_player_rewind_title}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_rewind_descr}</div>\n    </div>\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"player_scale_method\">\n        <div class=\"settings-param__name\">#{settings_player_scale}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_scale_descr}</div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"player_hls_method\">\n        <div class=\"settings-param__name\">#{settings_player_hls_title}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_hls_descr}</div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"select\" data-name=\"player_rewind\">\n        <div class=\"settings-param__name\">#{settings_player_rewind_title}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_player_rewind_descr}</div>\n    </div> -->\n    \n    <div class=\"is--has_subs\">\n        <div class=\"settings-param-title\"><span>#{settings_player_subs}</span></div>\n\n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"subtitles_start\">\n            <div class=\"settings-param__name\">#{settings_player_subs_use}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_player_subs_use_descr}</div>\n        </div>\n\n        <div class=\"settings-param selector\" data-type=\"select\" data-name=\"subtitles_size\">\n            <div class=\"settings-param__name\">#{settings_player_subs_size}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_player_subs_size_descr}</div>\n        </div>\n        \n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"subtitles_stroke\">\n            <div class=\"settings-param__name\">#{settings_player_subs_stroke_use}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_player_subs_stroke_use_descr}</div>\n        </div>\n        \n        <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"subtitles_backdrop\">\n            <div class=\"settings-param__name\">#{settings_player_subs_backdrop_use}</div>\n            <div class=\"settings-param__value\"></div>\n            <div class=\"settings-param__descr\">#{settings_player_subs_backdrop_use_descr}</div>\n        </div>\n    </div>\n\n</div>";

  var html$1W = "<div>\n    <div class=\"settings-param-title\"><span>#{settings_main_more}</span></div>\n    \n    <!-- <div class=\"settings-param selector\" data-type=\"select\" data-name=\"source\">\n        <div class=\"settings-param__name\">#{settings_rest_source_use}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_source_descr}</div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"protocol\">\n        <div class=\"settings-param__name\">#{settings_rest_protocol_use}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_protocol_descr}</div>\n    </div> -->\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"poster_size\">\n        <div class=\"settings-param__name\">#{settings_rest_tmdb_posters}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"cache_images\">\n        <div class=\"settings-param__name\">#{settings_rest_cache_images}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_cache_images_descr}</div>\n    </div>\n\n    <!-- <div class=\"settings-param-title\"><span>#{settings_rest_helper}</span></div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"helper\">\n        <div class=\"settings-param__name\">#{settings_rest_helper_use}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector helper--start-again\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_rest_helper_reset}</div>\n    </div> -->\n    \n    <!-- <div class=\"settings-param-title\"><span>#{more}</span></div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"select\" data-name=\"pages_save_total\">\n        <div class=\"settings-param__name\">#{settings_rest_pages}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_pages_descr}</div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"select\" data-name=\"time_offset\">\n        <div class=\"settings-param__name\">#{settings_rest_time}</div>\n        <div class=\"settings-param__value\"></div>\n    </div> -->\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"navigation_type\">\n        <div class=\"settings-param__name\">#{settings_rest_navigation}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"keyboard_type\">\n        <div class=\"settings-param__name\">#{settings_rest_keyboard}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"start_page\">\n        <div class=\"settings-param__name\">#{settings_rest_start}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_start_descr}</div>\n    </div>\n\n    <div class=\"settings-param-title\"><span>#{settings_rest_screensaver}</span></div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"screensaver\">\n        <div class=\"settings-param__name\">#{settings_rest_screensaver_use}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"screensaver_type\">\n        <div class=\"settings-param__name\">#{settings_rest_screensaver_type}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"screensaver_time\">\n        <div class=\"settings-param__name\">#{settings_rest_screensaver_time}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"card_quality\">\n        <div class=\"settings-param__name\">#{settings_rest_card_quality}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_card_quality_descr}</div>\n    </div> -->\n\n    <!-- <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"card_episodes\">\n        <div class=\"settings-param__name\">#{settings_rest_card_episodes}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_card_episodes_descr}</div>\n    </div> -->\n\n    <div class=\"settings-param-title\"><span></span></div>\n\n    <div class=\"settings-param selector\" data-type=\"input\" data-name=\"device_name\" placeholder=\"#{settings_rest_device_placeholder}\">\n        <div class=\"settings-param__name\">#{settings_rest_device}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param settings-param--button layer--visible selector clear-storage\" data-static=\"true\">  \n        <div class=\"settings-param__name\">\n        #{settings_rest_cache}</div>\n        <!-- <div class=\"settings-param__descr\">#{title_left} - #{player_unknown}</div> -->\n    </div>\n</div>";

  var html$1V = "<div>\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"tmdb_lang\">\n        <div class=\"settings-param__name\">TMDB</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_tmdb_lang}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"select\" data-name=\"poster_size\">\n        <div class=\"settings-param__name\">#{settings_rest_tmdb_posters}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"proxy_tmdb_auto\">\n        <div class=\"settings-param__name\">#{settings_rest_tmdb_prox_auto}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"proxy_tmdb\" data-children=\"proxy\">\n        <div class=\"settings-param__name\">#{settings_rest_tmdb_prox}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector\" data-parent=\"proxy\" data-type=\"input\" data-name=\"tmdb_proxy_api\" placeholder=\"#{settings_rest_tmdb_example} api.proxy.com\">\n        <div class=\"settings-param__name\">Api</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_tmdb_api_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector\" data-parent=\"proxy\" data-type=\"input\" data-name=\"tmdb_proxy_image\" placeholder=\"#{settings_rest_tmdb_example} image.proxy.com\">\n        <div class=\"settings-param__name\">Image</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_rest_tmdb_image_descr}</div>\n    </div>\n</div>";

  var html$1U = "<div>\n    <div class=\"settings-param selector\" data-name=\"plugins\" data-static=\"true\" data-notice=\"#{settings_plugins_notice}\">\n        <div class=\"settings-param__name\">#{settings_plugins_add}</div>\n        <div class=\"settings-param__descr\">#{settings_plugins_add_descr}</div>\n    </div>\n    <div class=\"settings-param selector\" data-name=\"install\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_plugins_install}</div>\n        <div class=\"settings-param__descr\">#{settings_plugins_install_descr}</div>\n    </div>\n</div>";

  var html$1T = "<div>\n    <div class=\"faq-cloud\">\n     <!-- <img src=\"https://i.ibb.co/x8H0P5TD/adobe-express-qr-code.png\" class=\"faq-cloud__qr\"> -->\n         <div class=\"faq-cloud__text\">\n             #{settings_prisma_usercam_descr}\n         </div>\n         <div class=\"faq-cloud__label\">https://pris.cam/user</div>\n     </div>\n    <div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"account_use\">\n        <div class=\"settings-param__name\">#{settings_prisma_sync}</div>\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\">#{settings_prisma_sync_descr}</div>\n    </div>\n\n    <div class=\"settings-param-title settings--account-user hide\"><span>#{settings_prisma_account}</span> <img class=\"settings-param__label hide\" src=\"./img/icon_prem.png\" alt=\"PREMIUM\"></div>\n\n    <div class=\"settings-param selector settings--account-user settings--account-user-info hide\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_prisma_logged_in_as}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector settings--account-user settings--account-user-profile hide\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_prisma_profile}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param selector settings--account-user settings--account-user-out hide\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_prisma_logout}</div>\n    </div>\n\n    <div class=\"settings-param-title settings--account-signin\"><span>#{settings_prisma_signin}</span></div>\n\n    <div class=\"settings-param selector settings--account-signin settings--account-device-add\" data-type=\"button\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_prisma_signin_button}</div>\n        <div class=\"settings-param__value\"></div>\n    </div>\n\n    <div class=\"settings-param-title\"><span>#{settings_prisma_status}</span></div>\n\n    <div class=\"settings-param selector settings--account-status\" data-static=\"true\">\n        <div class=\"settings-param__value\"></div>\n        <div class=\"settings-param__descr\"></div>\n    </div>\n\n    <div class=\"settings-param-title settings--account-user hide\"><span>#{settings_prisma_backup}</span></div>\n\n    <div class=\"settings-param selector settings--account-user settings--account-user-sync hide\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_prisma_sync_btn}</div>\n        <div class=\"settings-param__value\">#{settings_prisma_sync_btn_descr}</div>\n    </div>\n\n    <div class=\"settings-param selector settings--account-user settings--account-user-backup hide\" data-static=\"true\">\n        <div class=\"settings-param__name\">#{settings_prisma_backup}</div>\n        <div class=\"settings-param__value\">#{settings_prisma_backup_descr}</div>\n    </div>\n\n    <!-- <div class=\"settings-param-title\"><span>Premium</span></div> -->\n\n   <!-- <div class=\"selectbox-item selector selectbox-item--checkbox settings--account-premium\" data-static=\"true\">\n        <div class=\"selectbox-item__title\">#{settings_prisma_sync_filters}</div>\n        <div class=\"selectbox-item__checkbox\"></div>\n    </div> -->\n   <!-- <div class=\"selectbox-item selector selectbox-item--checkbox settings--account-premium\" data-static=\"true\">\n        <div class=\"selectbox-item__title\">#{settings_prisma_sync_calendar}</div>\n        <div class=\"selectbox-item__checkbox\"></div>\n    </div> -->\n   <!-- <div class=\"selectbox-item selector selectbox-item--checkbox settings--account-premium\" data-static=\"true\">\n        <div class=\"selectbox-item__title\">#{settings_prisma_sync_timecodes}</div>\n        <div class=\"selectbox-item__checkbox\"></div>\n    </div> -->\n   <!-- <div class=\"selectbox-item selector selectbox-item--checkbox settings--account-premium\" data-static=\"true\">\n        <div class=\"selectbox-item__title\">#{settings_prisma_sync_search}</div>\n        <div class=\"selectbox-item__checkbox\"></div>\n    </div> -->\n</div>";

  var html$1S = "<div class=\"items-line layer--visible layer--render\">\n    <div class=\"items-line__head\">\n        <div class=\"items-line__title\">{title}</div>\n    </div>\n    <div class=\"items-line__body\"></div>\n</div>";

  var html$1R = "<div class=\"card selector layer--visible layer--render\">\n\n    <div class=\"card__view\">\n        <img src=\"./img/img_load.svg\" class=\"card__img\" />\n\n        <div class=\"card__icons\">\n            <div class=\"card__trailer\"></div>\n            <div class=\"card__icons-inner\">\n            </div>\n            \n        </div>\n        <div class=\"card__age\">{release_year}</div>\n    </div>\n    <div class=\"card__title\">{title}</div>\n    \n</div>";

  var html$1Q = "<div class=\"card-parser selector layer--visible layer--render\">\n    <div class=\"card-parser__title\">{Title}</div>\n\n    <div class=\"card-parser__footer\">\n        <div class=\"card-parser__details\">\n            <div>#{torrent_item_seeds}: <span>{Seeders}</span></div>\n            <div>#{torrent_item_grabs}: <span>{Peers}</span></div>\n        </div>\n        <div class=\"card-parser__size\">{size}</div>\n    </div>\n</div>";

  var html$1P = "<div class=\"card-watched\">\n    <div class=\"card-watched__inner\">\n        <div class=\"card-watched__body\"></div>\n    </div>\n</div>";

  var html$1O = "<div class=\"card-episode selector layer--visible layer--render\">\n    <div class=\"card-episode__body\">\n        <div class=\"full-episode\">\n            <div class=\"full-episode__img\">\n                <img />\n            </div>\n\n            <div class=\"full-episode__body\">\n                <div class=\"full-episode__num\">{num}</div>\n                <div class=\"full-episode__name\">{name}</div>\n                <div class=\"full-episode__date\">{date}</div>\n            </div>\n        </div>\n    </div>\n    <div class=\"card-episode__footer\">\n       <!-- <div class=\"card__imgbox\">\n            <div class=\"card__view\">\n                <img class=\"card__img\" />\n            </div>\n        </div> -->\n\n        <div class=\"card__left\">\n            <div class=\"card__title\">{title}</div>\n        </div>\n    </div>\n</div>";

  var html$1N = "<div class=\"full-start\">\n\n    <div class=\"full-start__body\">\n        <div class=\"full-start__right\">\n            <div class=\"full-start__poster\">\n                <img class=\"full-start__img full--poster\" />\n\n            </div>\n        </div>\n     \n        <div class=\"full-start__left\">\n        <div class=\"full-start__deta\">\n        <div class=\"full-start__status hide\"></div>\n        </div>\n        <div class=\"full-start__logo\"></div>       \n        <div class=\"full-start__deta\">\n        <div class=\"full-start__rate rate--imdb hide\"><div></div><div>IMDB</div></div>\n        <div class=\"full-start__rate rate--kp hide\"><div></div><div>KP</div></div>\n        <div class=\"full-start__rate\"><span>{rating}</span><div>TMDB</div></div>\n        </div>\n\n        <div class=\"full-start__title\"></div>\n\n            <div class=\"full-start__tags\">\n                <div class=\"full-start__tag tag--quality hide\">\n                    <div></div>\n                </div>\n                <!-- <div class=\"full-start__tag tag--year hide\">\n                    <img src=\"./img/icons/add.svg\" /> <div></div>\n                </div> --> \n                <!-- <div class=\"full-start__tag tag--countries\">\n                    <div>{countries}</div>\n                </div> -->\n                <div class=\"full-start__tag tag--genres\"> <div>{genres}</div>\n                </div>\n                <div class=\"full-start__tag tag--time\"><div>{time}</div>\n                </div>\n                <div class=\"full-start__tag hide is--serial\">\n                    <img src=\"./img/icons/menu/catalog.svg\" /> <div>{seasons}</div>\n                </div>\n                <div class=\"full-start__tag hide is--serial\">\n                    <img src=\"./img/icons/menu/movie.svg\" /> <div>{episodes}</div>\n                </div>\n                <div class=\"full-start__tag tag--episode hide\">\n                    <img src=\"./img/icons/time.svg\" /> <div></div>\n                </div>\n                <div class=\"full-start__pg hide\"></div>\n            </div>\n\n\n        \n            <div class=\"full-start__icons\">\n            \n            </div>\n            \n\n        </div>\n    </div>\n    <div class=\"full-start__footer\">\n            <div class=\"full-start__buttons-scroll\"></div>\n\n            <div class=\"full-start__buttons\">\n\n            <div class=\"full-start__button view--torrent hide\">\n            <svg height=\"200px\" width=\"200px\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 19.264 19.264\" xml:space=\"preserve\" fill=\"#000000\">\n                 <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                    <g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g>\n                        <g id=\"SVGRepo_iconCarrier\"><g><g>\n                            <path style=\"fill:#ffffff;\" d=\"M19.264,9.638c0-5.319-4.313-9.631-9.632-9.631C4.312,0.007,0,4.32,0,9.638 c0,4.1,2.567,7.593,6.177,8.982l-1.818-8.45L3.845,7.782l-0.91-4.224L6.46,2.799l1.303,6.059c0.352,1.636,1.094,2.514,2.316,2.25 c0.967-0.208,1.377-0.995,1.487-1.597c0.049-0.228,0.013-0.51-0.047-0.786L10.076,2.02L13.6,1.263l1.646,7.651 c0.662,3.077,2.454,3.548,2.454,3.548s-2.419,0.521-3.433,0.738c-1.012,0.219-1.694-1.591-1.694-1.591l-0.07,0.015 c-0.288,0.785-0.613,2.06-3.127,2.602c-0.184,0.039-0.364,0.064-0.542,0.083l1.064,4.948 C15.092,19.116,19.264,14.867,19.264,9.638z\"></path> \n                              </g></g></g>\n            </svg>\n            <!-- <span>#{full_torrents}</span> -->\n            </div>\n\n            <div class=\"full-start__button selector view--trailer\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M12.3845 22.9934C12.2569 22.9978 12.1287 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 15.7203 21.1531 19.0093 18.3262 21H22.5C23.0523 21 23.5 21.4477 23.5 22C23.5 22.5523 23.0523 23 22.5 23H12.5C12.4609 23 12.4224 22.9978 12.3845 22.9934ZM14 7C14 8.10457 13.1046 9 12 9C10.8954 9 10 8.10457 10 7C10 5.89543 10.8954 5 12 5C13.1046 5 14 5.89543 14 7ZM12 19C13.1046 19 14 18.1046 14 17C14 15.8954 13.1046 15 12 15C10.8954 15 10 15.8954 10 17C10 18.1046 10.8954 19 12 19ZM7 10C8.10457 10 9 10.8954 9 12C9 13.1046 8.10457 14 7 14C5.89543 14 5 13.1046 5 12C5 10.8954 5.89543 10 7 10ZM19 12C19 10.8954 18.1046 10 17 10C15.8954 10 15 10.8954 15 12C15 13.1046 15.8954 14 17 14C18.1046 14 19 13.1046 19 12Z\" fill=\"white\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"></path>\n            </svg>            \n            \n                    <!-- <span>#{full_trailers}</span> -->\n                </div>\n\n                <div class=\"full-start__button selector button--book\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.62 20.81C12.28 20.93 11.72 20.93 11.38 20.81C8.48 19.82 2 15.69 2 8.68998C2 5.59998 4.49 3.09998 7.56 3.09998C9.38 3.09998 10.99 3.97998 12 5.33998C13.01 3.97998 14.63 3.09998 16.44 3.09998C19.51 3.09998 22 5.59998 22 8.68998C22 15.69 15.52 19.82 12.62 20.81Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" fill=\"currentColor\"/>\n</svg>\n\n                </div>\n\n                <!-- <div class=\"full-start__button selector button--subscribe hide\">\n                    <svg width=\"25\" height=\"30\" viewBox=\"0 0 25 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M6.01892 24C6.27423 27.3562 9.07836 30 12.5 30C15.9216 30 18.7257 27.3562 18.981 24H15.9645C15.7219 25.6961 14.2632 27 12.5 27C10.7367 27 9.27804 25.6961 9.03542 24H6.01892Z\" fill=\"currentColor\"/>\n                    <path d=\"M3.81972 14.5957V10.2679C3.81972 5.41336 7.7181 1.5 12.5 1.5C17.2819 1.5 21.1803 5.41336 21.1803 10.2679V14.5957C21.1803 15.8462 21.5399 17.0709 22.2168 18.1213L23.0727 19.4494C24.2077 21.2106 22.9392 23.5 20.9098 23.5H4.09021C2.06084 23.5 0.792282 21.2106 1.9273 19.4494L2.78317 18.1213C3.46012 17.0709 3.81972 15.8462 3.81972 14.5957Z\" stroke=\"currentColor\" stroke-width=\"2.5\"/>\n                    </svg>\n                </div> -->\n            <div class=\"full-start__button selector button--options\">\n                    <svg width=\"38\" height=\"10\" viewBox=\"0 0 38 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <circle cx=\"4.88968\" cy=\"4.98563\" r=\"4.75394\" fill=\"currentColor\"/>\n                        <circle cx=\"18.9746\" cy=\"4.98563\" r=\"4.75394\" fill=\"currentColor\"/>\n                        <circle cx=\"33.0596\" cy=\"4.98563\" r=\"4.75394\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n            </div>\n    </div>\n\n</div>";

  var html$1M = "<div class=\"full-start-new\">\n    <div class=\"full-start-new__pg-container\">\n        <div class=\"full-start__status hide\"></div>\n        <div class=\"full-start__pg hide\"></div>\n    </div>\n\n    <div class=\"full-start-new__body\">\n        <div class=\"full-start-new__left\">\n            <div class=\"full-start-new__poster\">\n                <img class=\"full-start-new__img full--poster\" />\n            </div>\n        </div>\n\n        <div class=\"full-start-new__right\">\n            <div class=\"full-start__logo\"></div>\n            <div class=\"full-start-new__title\">{title}</div>\n            <div class=\"full-start-new__tagline full--tagline\">{tagline}</div>\n            <div class=\"full-start-new__head\"></div>\n            \n            <!-- \u041E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C \u043A\u043E\u043D\u0442\u0435\u0439\u043D\u0435\u0440 \u0434\u043B\u044F \u043C\u043E\u0431\u0438\u043B\u044C\u043D\u043E\u0439 \u0432\u0435\u0440\u0441\u0438\u0438, \u043D\u043E \u0441\u043A\u0440\u044B\u0432\u0430\u0435\u043C \u043D\u0430 \u0434\u0435\u0441\u043A\u0442\u043E\u043F\u0435 -->\n            <div class=\"full-start-new__rate-line mobile-only\">\n                <div class=\"full-start__rate rate--tmdb\"><div>{rating}</div><div class=\"source--name\">TMDB</div></div>\n                <div class=\"full-start__rate rate--imdb hide\"><div></div><div>IMDB</div></div>\n                <div class=\"full-start__rate rate--kp hide\"><div></div><div>KP</div></div>\n            </div>\n            \n            <div class=\"full-start-new__details\"></div>\n            <div class=\"full-start-new__reactions\">\n                <div>#{reactions_none}</div>\n            </div>\n\n            <div class=\"full-start-new__buttons\">\n                <div class=\"full-start__button view--torrent hide\">\n                 <svg height=\"200px\" width=\"200px\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 19.264 19.264\" xml:space=\"preserve\" fill=\"none\">\n                 <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n                 <g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g>\n                 <g id=\"SVGRepo_iconCarrier\">\n                 <g>\n                 <g>\n                 <path fill=\"currentColor\" d=\"M19.264,9.638c0-5.319-4.313-9.631-9.632-9.631C4.312,0.007,0,4.32,0,9.638 c0,4.1,2.567,7.593,6.177,8.982l-1.818-8.45L3.845,7.782l-0.91-4.224L6.46,2.799l1.303,6.059c0.352,1.636,1.094,2.514,2.316,2.25 c0.967-0.208,1.377-0.995,1.487-1.597c0.049-0.228,0.013-0.51-0.047-0.786L10.076,2.02L13.6,1.263l1.646,7.651 c0.662,3.077,2.454,3.548,2.454,3.548s-2.419,0.521-3.433,0.738c-1.012,0.219-1.694-1.591-1.694-1.591l-0.07,0.015 c-0.288,0.785-0.613,2.06-3.127,2.602c-0.184,0.039-0.364,0.064-0.542,0.083l1.064,4.948 C15.092,19.116,19.264,14.867,19.264,9.638z\"></path>\n                 </g>\n                 </g>\n                 </g>\n                 </svg>\n                </div>            \n\n                <div class=\"full-start__button selector button--book\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                     <path d=\"M19 8.77673C18.7932 8.10613 18.4228 7.47603 17.8547 6.91284C17.4075 6.46941 16.9433 6.17698 16.4776 6M10.3993 4.14593C8.72567 3.08425 6.02273 2.08032 3.68853 4.46071C-1.85248 10.1114 7.64984 21 12 21C16.3501 21 25.8525 10.1114 20.3115 4.46072C17.9773 2.08035 15.2744 3.08427 13.6007 4.14593C12.655 4.74582 11.345 4.74582 10.3993 4.14593Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n                    </svg>\n\n                    <span>#{settings_input_links}</span>\n                </div>\n\n                <div class=\"full-start__button selector button--reaction\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M8.39062 18.4907V8.33071C8.39062 7.93071 8.51062 7.54071 8.73062 7.21071L11.4606 3.15071C11.8906 2.50071 12.9606 2.04071 13.8706 2.38071C14.8506 2.71071 15.5006 3.81071 15.2906 4.79071L14.7706 8.06071C14.7306 8.36071 14.8106 8.63071 14.9806 8.84071C15.1506 9.03071 15.4006 9.15071 15.6706 9.15071H19.7806C20.5706 9.15071 21.2506 9.47071 21.6506 10.0307C22.0306 10.5707 22.1006 11.2707 21.8506 11.9807L19.3906 19.4707C19.0806 20.7107 17.7306 21.7207 16.3906 21.7207H12.4906C11.8206 21.7207 10.8806 21.4907 10.4506 21.0607L9.17062 20.0707C8.68062 19.7007 8.39062 19.1107 8.39062 18.4907Z\" fill=\"currentColor\"/>\n                           <path d=\"M5.21 6.37891H4.18C2.63 6.37891 2 6.97891 2 8.45891V18.5189C2 19.9989 2.63 20.5989 4.18 20.5989H5.21C6.76 20.5989 7.39 19.9989 7.39 18.5189V8.45891C7.39 6.97891 6.76 6.37891 5.21 6.37891Z\" fill=\"currentColor\"/>               \n                    </svg>\n                    <span>#{title_reactions}</span>\n                </div>\n\n                <!-- \u041A\u043D\u043E\u043F\u043A\u0438 \u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u0442\u0440\u0435\u0439\u043B\u0435\u0440\u043E\u043C -->\n                <div class=\"full-start__trailer-controls hide\">\n                    <div class=\"full-start__button selector button--mute\">\n                        <svg class=\"mute-icon\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M2 10.1595V14.1595C2 16.1595 3 17.1595 5 17.1595H6.43C6.8 17.1595 7.17 17.2695 7.49 17.4595L10.41 19.2895C12.93 20.8695 15 19.7195 15 16.7495V7.56946C15 4.58946 12.93 3.44946 10.41 5.02946L7.49 6.85946C7.17 7.04946 6.8 7.15946 6.43 7.15946H5C3 7.15946 2 8.15946 2 10.1595Z\" stroke=\"currentColor\" stroke-width=\"1.5\"/>\n                              <path d=\"M22 14.1194L18.04 10.1594\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                                <path d=\"M21.96 10.1995L18 14.1595\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                        </svg>\n                        <svg class=\"unmute-icon hide\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M2 10V14C2 16 3 17 5 17H6.43C6.8 17 7.17 17.11 7.49 17.3L10.41 19.13C12.93 20.71 15 19.56 15 16.59V7.41003C15 4.43003 12.93 3.29003 10.41 4.87003L7.49 6.70003C7.17 6.89003 6.8 7.00003 6.43 7.00003H5C3 7.00003 2 8.00003 2 10Z\" stroke=\"currentColor\" stroke-width=\"1.5\"/>\n                               <path d=\"M18 8C19.78 10.37 19.78 13.63 18 16\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                                  <path d=\"M19.83 5.5C22.72 9.35 22.72 14.65 19.83 18.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                        </svg>\n                        <span class=\"mute-text\">#{full_trailer_mute}</span>\n                        <span class=\"unmute-text hide\">#{full_trailer_unmute}</span>\n                    </div>\n                </div>\n\n                <div class=\"full-start__button selector button--play\">\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M15.5909 1.75C12.6209 1.75 10.2109 4.16 10.2109 7.13C10.2109 10.1 12.6209 12.51 15.5909 12.51C18.5609 12.51 20.9709 10.1 20.9709 7.13C20.9709 4.16 18.5609 1.75 15.5909 1.75Z\" fill=\"currentColor\"/>\n                        <path d=\"M6.3593 13.0312C4.5293 13.0312 3.0293 14.5213 3.0293 16.3613C3.0293 18.2013 4.5193 19.6913 6.3593 19.6913C8.1893 19.6913 9.6893 18.2013 9.6893 16.3613C9.6893 14.5213 8.1893 13.0312 6.3593 13.0312Z\" fill=\"currentColor\"/>\n                        <path d=\"M16.6205 16.6211C15.0705 16.6211 13.8105 17.8811 13.8105 19.4311C13.8105 20.9811 15.0705 22.2411 16.6205 22.2411C18.1705 22.2411 19.4305 20.9811 19.4305 19.4311C19.4305 17.8811 18.1705 16.6211 16.6205 16.6211Z\" fill=\"currentColor\"/>\n                    </svg>\n\n                    <span>#{full_more}</span>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <!-- \u0414\u043E\u0431\u0430\u0432\u043B\u044F\u0435\u043C \u0440\u0435\u0439\u0442\u0438\u043D\u0433\u0438 \u0444\u0438\u043B\u044C\u043C\u043E\u0432 \u0432 \u043F\u0440\u0430\u0432\u044B\u0439 \u043D\u0438\u0436\u043D\u0438\u0439 \u0443\u0433\u043E\u043B -->\n    <div class=\"full-start-new__ratings-container desktop-only\">\n        <div class=\"full-start__rate rate--tmdb\"><div>{rating}</div><div class=\"source--name\">TMDB</div></div>\n        <div class=\"full-start__rate rate--imdb hide\"><div></div><div>IMDB</div></div>\n        <div class=\"full-start__rate rate--kp hide\"><div></div><div>KP</div></div>\n    </div>\n\n    <div class=\"hide buttons--container\">\n\n        <div class=\"full-start__button selector view--trailer\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M17 4H7C4 4 2 6 2 9V15C2 18 4 20 7 20H17C20 20 22 18 22 15V9C22 6 20 4 17 4ZM13.89 13.03L11.42 14.51C10.42 15.11 9.59998 14.65 9.59998 13.48V10.51C9.59998 9.34001 10.42 8.88001 11.42 9.48001L13.89 10.96C14.84 11.54 14.84 12.46 13.89 13.03Z\" fill=\"currentColor\"/>\n            </svg>\n            <span>#{full_trailers}</span>\n        </div>\n\n        <div class=\"full-start__button selector button--options\">\n           <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM8 13C7.44 13 7 12.55 7 12C7 11.45 7.45 11 8 11C8.55 11 9 11.45 9 12C9 12.55 8.56 13 8 13ZM12 13C11.44 13 11 12.55 11 12C11 11.45 11.45 11 12 11C12.55 11 13 11.45 13 12C13 12.55 12.56 13 12 13ZM16 13C15.44 13 15 12.55 15 12C15 11.45 15.45 11 16 11C16.55 11 17 11.45 17 12C17 12.55 16.56 13 16 13Z\" fill=\"currentColor\"/>\n           </svg>\n            <span>OpenAI</span>\n         </div>\n    </div>\n</div>";

  var html$1L = "<div class=\"full-descr\">\n    <div class=\"full-descr__left\">\n    <div class=\"full-descr__text selector\">{text}</div>\n\n    <div class=\"full-descr__line full--networks\">\n            <div class=\"full-descr__line-name\"></div>\n            <div class=\"full-descr__line-body\">{networks}</div> \n        </div>\n\n        <div class=\"full-descr__line full--genres\">\n            <div class=\"full-descr__line-name\">#{full_genre}</div>\n            <div class=\"full-descr__line-body\">{genres}</div> \n        </div>\n\n\n        <!-- <div class=\"full-descr__line full--companies\">\n            <div class=\"full-descr__line-name\">#{full_production}</div>\n            <div class=\"full-descr__line-body\">{companies}</div>\n        </div> -->\n\n        <!-- <div class=\"full-descr__line full--keywords\">\n            <div class=\"full-descr__line-name\">#{full_keywords}</div>\n            <div class=\"full-descr__line-body\">{keywords}</div>\n        </div> -->\n\n    </div>\n\n    <div class=\"full-descr__right\">\n        <div class=\"full-descr__info\">\n            <div class=\"full-descr__info-name\">#{full_date_of_release}</div>\n            <div class=\"full-descr__info-body\">{relise}</div>\n        </div>\n\n        <div class=\"full-descr__info full--budget\">\n            <div class=\"full-descr__info-name\">#{full_budget}</div>\n            <div class=\"full-descr__info-body\">{budget}</div>\n        </div>\n\n        <div class=\"full-descr__info full--revenue\">\n            <div class=\"full-descr__info-name\">#{full_revenue}</div>\n            <div class=\"full-descr__info-body\">{revenue}</div>\n        </div>\n\n        <div class=\"full-descr__info full--countries\">\n            <div class=\"full-descr__info-name\">#{full_countries}</div>\n            <div class=\"full-descr__info-body\">{countries}</div>\n        </div>\n    </div>\n\n</div>";

  var html$1K = "<div class=\"full-person selector layer--visible\">\n    <div class=\"full-person__photo\">\n        <img />\n    </div>\n\n    <div class=\"full-person__body\">\n        <div class=\"full-person__name\">{name}</div>\n        <div class=\"full-person__role\">{role}</div>\n    </div>\n</div>";

  var html$1J = "<div class=\"full-review selector layer--visible\">\n    <div class=\"full-review__header\"></div>\n    \n    <div class=\"full-review__text\">{text}</div>\n    \n    <div class=\"full-review__type-bar\" data-type=\"{review_type}\">\n        <div class=\"full-review__type-indicator\"></div>\n    </div>\n</div>";

  var html$1I = "<div class=\"review-selector\">\n    <div class=\"review-selector__title\">{title}</div>\n    <div class=\"review-selector__buttons\">\n        <div class=\"review-selector__button selector\" data-type=\"neutral\">\n            <div class=\"review-selector__button-icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n                </svg>\n            </div>\n            <div class=\"review-selector__button-text\">{neutral}</div>\n        </div>\n        <div class=\"review-selector__button selector\" data-type=\"positive\">\n            <div class=\"review-selector__button-icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n                </svg>\n            </div>\n            <div class=\"review-selector__button-text\">{positive}</div>\n        </div>\n        <div class=\"review-selector__button selector\" data-type=\"negative\">\n            <div class=\"review-selector__button-icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"/>\n                </svg>\n            </div>\n            <div class=\"review-selector__button-text\">{negative}</div>\n        </div>\n    </div>\n</div>";

  var html$1H = "<div class=\"full-episode selector layer--visible\">\n    <div class=\"full-episode__img\">\n        <img />\n    </div>\n\n    <div class=\"full-episode__body\">\n        <div class=\"full-episode__num\">{num}</div>\n        <div class=\"full-episode__name\">{name}</div>\n        <div class=\"full-episode__date\">{date}</div>\n    </div>\n</div>";

  var html$1G = "<div class=\"player\">\n    \n</div>";

  var html$1F = "<div class=\"player-panel\">\n    <div class=\"player-panel__body\">\n    <div class=\"player-panel__logo\"></div>\n        <div class=\"player-panel__timeline selector\">\n            <div class=\"player-panel__timenow\"></div>\n            <div class=\"player-panel__timeend\"></div>\n            <div class=\"player-panel__peding\"></div>\n            <div class=\"player-panel__position\"><div></div></div>\n            <div class=\"player-panel__time hide\"></div>\n            <div class=\"player-panel__time-touch-zone hide\"></div>\n        </div>\n\n        <div class=\"player-panel__iptv\">\n            <div class=\"player-panel-iptv\">\n                <div class=\"player-panel-iptv__channel\"></div>\n                <!--<div class=\"player-panel-iptv__arrow-up\">\n                    <svg width=\"32\" height=\"19\" viewBox=\"0 0 32 19\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M2.17163 17.4122L15.9606 3.62323L29.7496 17.4122\" stroke=\"white\" stroke-width=\"4\"/>\n                    </svg>                \n                </div>-->\n                <!--<div class=\"player-panel-iptv__position\">001</div>-->\n                <!--<div class=\"player-panel-iptv__arrow-down\">\n                    <svg width=\"32\" height=\"19\" viewBox=\"0 0 32 19\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M2.17163 1.98059L15.9606 15.7696L29.7496 1.98059\" stroke=\"white\" stroke-width=\"4\"/>\n                    </svg>                \n                </div>-->\n            </div>\n        </div>\n\n        <div class=\"player-panel__line player-panel__line-one\">\n            <!-- <div class=\"player-panel__timenow\"></div> -->\n            <!-- <div class=\"player-panel__timeend\"></div> -->\n        </div>\n\n        <div class=\"player-panel__line player-panel__line-two\">\n            <div class=\"player-panel__left\">\n                <!-- <div class=\"player-panel__prev button selector hide\">\n                    <svg width=\"23\" height=\"24\" viewBox=\"0 0 23 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M2.75 13.7698C1.41666 13 1.41667 11.0755 2.75 10.3057L20 0.34638C21.3333 -0.42342 23 0.538831 23 2.07843L23 21.997C23 23.5366 21.3333 24.4989 20 23.7291L2.75 13.7698Z\" fill=\"currentColor\"/>\n                    <rect x=\"6\" y=\"24\" width=\"6\" height=\"24\" rx=\"2\" transform=\"rotate(180 6 24)\" fill=\"currentColor\"/>\n                    </svg>\n                </div> -->\n                <!--<div class=\"player-panel__next button selector hide\">\n                    <svg width=\"23\" height=\"24\" viewBox=\"0 0 23 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M20.25 10.2302C21.5833 11 21.5833 12.9245 20.25 13.6943L3 23.6536C1.66666 24.4234 -6.72981e-08 23.4612 0 21.9216L8.70669e-07 2.00298C9.37967e-07 0.463381 1.66667 -0.498867 3 0.270933L20.25 10.2302Z\" fill=\"currentColor\"/>\n                    <rect x=\"17\" width=\"6\" height=\"24\" rx=\"2\" fill=\"currentColor\"/>\n                    </svg>\n                </div> -->\n\n                <div class=\"player-panel__pip button selector\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M12.6 18.5H16.4C17.9 18.5 18.5 17.9 18.5 16.4V14.6C18.5 13.1 17.9 12.5 16.4 12.5H12.6C11.1 12.5 10.5 13.1 10.5 14.6V16.4C10.5 17.9 11.1 18.5 12.6 18.5Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                </svg>                \n                </div>\n\n                <div class=\"player-panel__volume button selector\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M2 10V14C2 16 3 17 5 17H6.43C6.8 17 7.17 17.11 7.49 17.3L10.41 19.13C12.93 20.71 15 19.56 15 16.59V7.41003C15 4.43003 12.93 3.29003 10.41 4.87003L7.49 6.70003C7.17 6.89003 6.8 7.00003 6.43 7.00003H5C3 7.00003 2 8.00003 2 10Z\" stroke=\"currentColor\" stroke-width=\"1.5\"/>\n                <path d=\"M18 8C19.78 10.37 19.78 13.63 18 16\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M19.83 5.5C22.72 9.35 22.72 14.65 19.83 18.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              </svg>              \n                    <div class=\"player-panel__volume-drop\">\n                        <input type=\"range\" orient=\"vertical\" class=\"player-panel__volume-range\" max=\"1\" min=\"0\" step=\"0.01\" />\n                    </div>\n                </div>\n\n                <div class=\"player-panel__next-episode-name hide\"></div>\n            </div>\n            <div class=\"player-panel__center\">\n                <div class=\"player-panel__prev button selector\">\n                    <svg width=\"23\" height=\"24\" viewBox=\"0 0 23 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M2.75 13.7698C1.41666 13 1.41667 11.0755 2.75 10.3057L20 0.34638C21.3333 -0.42342 23 0.538831 23 2.07843L23 21.997C23 23.5366 21.3333 24.4989 20 23.7291L2.75 13.7698Z\" fill=\"currentColor\"/>\n                    <rect x=\"6\" y=\"24\" width=\"6\" height=\"24\" rx=\"2\" transform=\"rotate(180 6 24)\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n                <div class=\"player-panel__rprev button selector\">\n                    <svg width=\"35\" height=\"25\" viewBox=\"0 0 35 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M14 10.7679C12.6667 11.5377 12.6667 13.4622 14 14.232L31.25 24.1913C32.5833 24.9611 34.25 23.9989 34.25 22.4593L34.25 2.5407C34.25 1.0011 32.5833 0.0388526 31.25 0.808653L14 10.7679Z\" fill=\"currentColor\"/>\n                    <path d=\"M0.999998 10.7679C-0.333335 11.5377 -0.333333 13.4622 1 14.232L18.25 24.1913C19.5833 24.9611 21.25 23.9989 21.25 22.4593L21.25 2.5407C21.25 1.0011 19.5833 0.0388526 18.25 0.808653L0.999998 10.7679Z\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n                <div class=\"player-panel__playpause button selector\">\n                    <div>\n                    <svg width=\"24\" height=\"25\" viewBox=\"-3 0 25 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M4 11.9999V8.43989C4 4.01989 7.13 2.2099 10.96 4.4199L14.05 6.1999L17.14 7.9799C20.97 10.1899 20.97 13.8099 17.14 16.0199L14.05 17.7999L10.96 19.5799C7.13 21.7899 4 19.9799 4 15.5599V11.9999Z\" fill=\"currentColor\"/>\n                    </svg>                    \n                    </div>\n                    <div>\n                    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M10.65 19.11V4.89C10.65 3.54 10.08 3 8.64 3H5.01C3.57 3 3 3.54 3 4.89V19.11C3 20.46 3.57 21 5.01 21H8.64C10.08 21 10.65 20.46 10.65 19.11Z\" fill=\"currentColor\"/>\n                    <path d=\"M21 19.11V4.89C21 3.54 20.43 3 18.99 3H15.36C13.93 3 13.35 3.54 13.35 4.89V19.11C13.35 20.46 13.92 21 15.36 21H18.99C20.43 21 21 20.46 21 19.11Z\" fill=\"currentColor\"/>\n                    </svg>                                        \n                    </div>\n                </div>\n                <div class=\"player-panel__rnext button selector\">\n                    <svg width=\"35\" height=\"25\" viewBox=\"0 0 35 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M20.25 10.7679C21.5833 11.5377 21.5833 13.4622 20.25 14.232L3 24.1913C1.66666 24.9611 -6.72981e-08 23.9989 0 22.4593L8.70669e-07 2.5407C9.37967e-07 1.0011 1.66667 0.0388526 3 0.808653L20.25 10.7679Z\" fill=\"currentColor\"/>\n                    <path d=\"M33.25 10.7679C34.5833 11.5377 34.5833 13.4622 33.25 14.232L16 24.1913C14.6667 24.9611 13 23.9989 13 22.4593L13 2.5407C13 1.0011 14.6667 0.0388526 16 0.808653L33.25 10.7679Z\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n                <div class=\"player-panel__next button selector\">\n                    <svg width=\"23\" height=\"24\" viewBox=\"0 0 23 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M20.25 10.2302C21.5833 11 21.5833 12.9245 20.25 13.6943L3 23.6536C1.66666 24.4234 -6.72981e-08 23.4612 0 21.9216L8.70669e-07 2.00298C9.37967e-07 0.463381 1.66667 -0.498867 3 0.270933L20.25 10.2302Z\" fill=\"currentColor\"/>\n                    <rect x=\"17\" width=\"6\" height=\"24\" rx=\"2\" fill=\"currentColor\"/>\n                    </svg>\n                </div>\n            </div>\n            <div class=\"player-panel__right\">\n                <div class=\"player-panel__quality button selector\">auto</div>\n                  <div class=\"player-panel__flow button selector hide\">\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12.0011 14.3811C13.3155 14.3811 14.3811 13.3155 14.3811 12.0011C14.3811 10.6867 13.3155 9.62109 12.0011 9.62109C10.6867 9.62109 9.62109 10.6867 9.62109 12.0011C9.62109 13.3155 10.6867 14.3811 12.0011 14.3811Z\" fill=\"currentColor\"/>\n<path d=\"M20.0003 18.7503C19.8403 18.7503 19.6903 18.7003 19.5503 18.6003C19.2203 18.3503 19.1503 17.8803 19.4003 17.5503C20.6103 15.9403 21.2503 14.0203 21.2503 12.0003C21.2503 9.98027 20.6103 8.06027 19.4003 6.45027C19.1503 6.12027 19.2203 5.65027 19.5503 5.40027C19.8803 5.15027 20.3503 5.22027 20.6003 5.55027C22.0103 7.42027 22.7503 9.65027 22.7503 12.0003C22.7503 14.3503 22.0103 16.5803 20.6003 18.4503C20.4503 18.6503 20.2303 18.7503 20.0003 18.7503Z\" fill=\"currentColor\"/>\n<path d=\"M4 18.7503C3.77 18.7503 3.55 18.6503 3.4 18.4503C1.99 16.5803 1.25 14.3503 1.25 12.0003C1.25 9.65027 1.99 7.42027 3.4 5.55027C3.65 5.22027 4.12 5.15027 4.45 5.40027C4.78 5.65027 4.85 6.12027 4.6 6.45027C3.39 8.06027 2.75 9.98027 2.75 12.0003C2.75 14.0203 3.39 15.9403 4.6 17.5503C4.85 17.8803 4.78 18.3503 4.45 18.6003C4.32 18.7003 4.16 18.7503 4 18.7503Z\" fill=\"currentColor\"/>\n<path d=\"M16.8011 16.3487C16.6411 16.3487 16.4911 16.2987 16.3511 16.1987C16.0211 15.9487 15.9511 15.4787 16.2011 15.1487C16.8911 14.2387 17.2511 13.1487 17.2511 11.9987C17.2511 10.8487 16.8911 9.75871 16.2011 8.84871C15.9511 8.51871 16.0211 8.04871 16.3511 7.79871C16.6811 7.54871 17.1511 7.61871 17.4011 7.94871C18.2811 9.12871 18.7511 10.5287 18.7511 11.9987C18.7511 13.4687 18.2811 14.8787 17.4011 16.0487C17.2511 16.2487 17.0311 16.3487 16.8011 16.3487Z\" fill=\"currentColor\"/>\n<path d=\"M7.2 16.3487C6.97 16.3487 6.75 16.2487 6.6 16.0487C5.72 14.8787 5.25 13.4687 5.25 11.9987C5.25 10.5287 5.72 9.11871 6.6 7.94871C6.85 7.61871 7.32 7.54871 7.65 7.79871C7.98 8.04871 8.05 8.51871 7.8 8.84871C7.11 9.75871 6.75 10.8487 6.75 11.9987C6.75 13.1487 7.11 14.2387 7.8 15.1487C8.05 15.4787 7.98 15.9487 7.65 16.1987C7.52 16.2987 7.36 16.3487 7.2 16.3487Z\" fill=\"currentColor\"/>\n</svg>\n                 </div>\n                <div class=\"player-panel__playlist button selector\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M17 10H19C21 10 22 9 22 7V5C22 3 21 2 19 2H17C15 2 14 3 14 5V7C14 9 15 10 17 10Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M5 22H7C9 22 10 21 10 19V17C10 15 9 14 7 14H5C3 14 2 15 2 17V19C2 21 3 22 5 22Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M6 10C8.20914 10 10 8.20914 10 6C10 3.79086 8.20914 2 6 2C3.79086 2 2 3.79086 2 6C2 8.20914 3.79086 10 6 10Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M18 22C20.2091 22 22 20.2091 22 18C22 15.7909 20.2091 14 18 14C15.7909 14 14 15.7909 14 18C14 20.2091 15.7909 22 18 22Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                </svg>                \n                </div>\n                <div class=\"player-panel__subs button selector hide\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M8.5 19H8C4 19 2 18 2 13V8C2 4 4 2 8 2H16C20 2 22 4 22 8V13C22 17 20 19 16 19H15.5C15.19 19 14.89 19.15 14.7 19.4L13.2 21.4C12.54 22.28 11.46 22.28 10.8 21.4L9.3 19.4C9.14 19.18 8.77 19 8.5 19Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M15.9965 11H16.0054\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M11.9955 11H12.0045\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M7.99451 11H8.00349\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              </svg>              \n                </div>\n                <div class=\"player-panel__tracks button selector hide\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M12 19C15.31 19 18 16.31 18 13V8C18 4.69 15.31 2 12 2C8.69 2 6 4.69 6 8V13C6 16.31 8.69 19 12 19Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M3 11V13C3 17.97 7.03 22 12 22C16.97 22 21 17.97 21 13V11\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M9.11011 7.47993C10.8901 6.82993 12.8301 6.82993 14.6101 7.47993\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M10.03 10.4799C11.23 10.1499 12.5 10.1499 13.7 10.4799\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              </svg>              \n                </div>\n                \n                \n                <div class=\"player-panel__settings button selector\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  <path d=\"M2 12.8799V11.1199C2 10.0799 2.85 9.21994 3.9 9.21994C5.71 9.21994 6.45 7.93994 5.54 6.36994C5.02 5.46994 5.33 4.29994 6.24 3.77994L7.97 2.78994C8.76 2.31994 9.78 2.59994 10.25 3.38994L10.36 3.57994C11.26 5.14994 12.74 5.14994 13.65 3.57994L13.76 3.38994C14.23 2.59994 15.25 2.31994 16.04 2.78994L17.77 3.77994C18.68 4.29994 18.99 5.46994 18.47 6.36994C17.56 7.93994 18.3 9.21994 20.11 9.21994C21.15 9.21994 22.01 10.0699 22.01 11.1199V12.8799C22.01 13.9199 21.16 14.7799 20.11 14.7799C18.3 14.7799 17.56 16.0599 18.47 17.6299C18.99 18.5399 18.68 19.6999 17.77 20.2199L16.04 21.2099C15.25 21.6799 14.23 21.3999 13.76 20.6099L13.65 20.4199C12.75 18.8499 11.27 18.8499 10.36 20.4199L10.25 20.6099C9.78 21.3999 8.76 21.6799 7.97 21.2099L6.24 20.2199C5.33 19.6999 5.02 18.5299 5.54 17.6299C6.45 16.0599 5.71 14.7799 3.9 14.7799C2.85 14.7799 2 13.9199 2 12.8799Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n\n              \n                </div>\n                <div class=\"player-panel__fullscreen button selector\">\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M12 12L17 7M17 7H13.25M17 7V10.75\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M12 12L7 17M7 17H10.75M7 17V13.25\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                <path d=\"M2 12C2 7.28595 2 4.92893 3.46447 3.46447C4.92893 2 7.28595 2 12 2C16.714 2 19.0711 2 20.5355 3.46447C22 4.92893 22 7.28595 22 12C22 16.714 22 19.0711 20.5355 20.5355C19.0711 22 16.714 22 12 22C7.28595 22 4.92893 22 3.46447 20.5355C2 19.0711 2 16.714 2 12Z\" stroke=\"currentColor\" stroke-width=\"1.5\"/>\n                </svg>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>";

  var html$1E = "<div class=\"player-video\">\n\n<div class=\"player-video__display\"></div>\n    <div class=\"player-video__loader\"></div>\n    <div class=\"player-video__backwork-icon\">\n        <i class=\"left-triangle triangle\">\u25C0\u25C0\u25C0</i><span></span>\n    </div>\n    <div class=\"player-video__forward-icon\">\n        <span></span><i class=\"right-triangle triangle\">\u25B6\u25B6\u25B6</i>\n    </div>\n    <div class=\"player-video__subtitles hide\">\n        <div class=\"player-video__subtitles-text\"></div>\n    </div>\n</div>";

  var html$1D = "<div class=\"player-info\">\n    <div class=\"player-info__body\">\n        <div class=\"player-info__line\">\n            <div class=\"player-info__name\">\n    </div>\n            <div class=\"player-info__time\"><span class=\"time--clock\"></span></div>\n            \n        </div>\n\n        <div class=\"player-info__values\">\n        <div class=\"value--stat\">\n            <span></span>\n        </div>\n        <div class=\"value--speed\">\n            <span></span>\n        </div>\n        <div class=\"value--format\">\n            <span></span>\n        </div>\n        <div class=\"value--pieces\"></div>\n    </div>\n\n    <div class=\"player-info__error hide\"></div>\n</div>\n</div>";

  var html$1C = "<div class=\"player-footer\">\n    <div class=\"player-footer__body\">\n        \n    </div>\n</div>";

  var html$1B = "<div class=\"player-footer-card\">\n    <div class=\"player-footer-card__left\">\n        <div class=\"player-footer-card__poster\">\n            <img class=\"player-footer-card__poster-img\" />\n        </div>\n    </div>\n    <div class=\"player-footer-card__body\">\n        <div class=\"player-footer-card__title\"></div>\n        <div class=\"player-footer-card__tags\"></div>\n        <div class=\"player-footer-card__text\"></div>\n    </div>\n</div>";

  var html$1A = "<div class=\"selectbox\">\n    <div class=\"selectbox__layer\"></div>\n    <div class=\"selectbox__content layer--height\">\n        <div class=\"selectbox__head\">\n            <div class=\"selectbox__title\"></div>\n        </div>\n        <div class=\"selectbox__body\"></div>\n    </div>\n</div>";

  var html$1z = "<div class=\"selectbox-item selector\">\n    <div class=\"selectbox-item__title\">{title}</div>\n    <div class=\"selectbox-item__subtitle\">{subtitle}</div>\n</div>";

  var html$1y = "<div class=\"selectbox-item selectbox-item--icon selector\">\n    <div class=\"selectbox-item__icon\">{icon}</div>\n    <div>\n        <div class=\"selectbox-item__title\">{title}</div>\n        <div class=\"selectbox-item__subtitle\">{subtitle}</div>\n    </div>\n</div>";

  var html$1x = "<div class=\"info layer--width\">\n    <div class=\"info__left\">\n        <div class=\"info__title\"></div>\n        <div class=\"info__footer\">\n            <div class=\"info__vote\">\n                <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M8.39409 0.192139L10.99 5.30994L16.7882 6.20387L12.5475 10.4277L13.5819 15.9311L8.39409 13.2425L3.20626 15.9311L4.24065 10.4277L0 6.20387L5.79819 5.30994L8.39409 0.192139Z\" fill=\"#fff\"/>\n                </svg>\n                <span></span>\n            </div>\n            <div class=\"info__title-original\"></div>\n        </div>\n    </div>\n    <div class=\"info__right\">\n        <div class=\"info__icon icon--book\"></div>\n        <div class=\"info__icon icon--like\"></div>\n        <div class=\"info__icon icon--wath\"></div>\n    </div>\n</div>";

  var html$1w = "<div>\n    <div class=\"simple-button simple-button--filter selector filter--sort\">\n        <span>#{filter_sorted}</span><div class=\"hide\"></div>\n    </div>\n\n    <div class=\"simple-button simple-button--filter selector filter--filter\">\n        <span>#{filter_filtred}</span><div class=\"hide\"></div>\n    </div>\n\n    <div class=\"simple-button simple-button--filter selector filter--search\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M11 20C15.9706 20 20 15.9706 20 11C20 6.02944 15.9706 2 11 2C6.02944 2 2 6.02944 2 11C2 15.9706 6.02944 20 11 20Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n            <path d=\"M18.9299 20.6898C19.4599 22.2898 20.6699 22.4498 21.5999 21.0498C22.4499 19.7698 21.8899 18.7198 20.3499 18.7198C19.2099 18.7098 18.5699 19.5998 18.9299 20.6898Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n        </svg>\n        <div class=\"hide\"></div>\n    </div>\n</div>";

  var html$1v = "<div class=\"card-more selector\">\n    <div class=\"card-more__box\">\n    <div class=\"card-more__title\">\n             #{more}\n        </div>\n    </div>\n</div>";

  var html$1u = "<div class=\"card-back selector\">\n    <div class=\"card-back__box\">\n    <div class=\"card-back__title\">\n             #{back_to_start}\n        </div>\n    </div>\n</div>";

  var html$1t = "<div class=\"search__body\">\n    <div class=\"search__input\">#{search_input}...</div>\n    <div class=\"search__keypad\"><div class=\"simple-keyboard\"></div></div>\n    <div class=\"search__history\" data-area=\"history\"></div>\n    <!-- <div class=\"search__sources\" data-area=\"sources\"></div> -->\n    <div class=\"search__results\"></div>\n</div>";

  var html$1s = "<div class=\"settings-input\">\n    <div class=\"settings-input__content\">\n        <div class=\"settings-input__input\"></div>\n\n        <div class=\"simple-keyboard\"></div>\n\n        <div class=\"settings-input__links\">#{settings_input_links}</div>\n    </div>\n</div>";

  var html$1r = "<div class=\"modal\">\n    <div class=\"modal__content\">\n        <div class=\"modal__head\">\n            <div class=\"modal__title\">{title}</div>\n        </div>\n        <div class=\"modal__body\">\n            \n        </div>\n    </div>\n</div>";

  var html$1q = "<div class=\"company-start\">\n    <div class=\"company-start__left\">\n        <div class=\"company-start__icon\">\n            <img src=\"{img}\" class=\"company-start__img\" />\n        </div>\n    </div>\n\n    <div class=\"company-start__right\">\n        <div class=\"company-start__name\">{name}</div>\n        <div class=\"company-start__place\">{place}</div>\n    </div>\n</div>";

  var html$1p = "<div class=\"modal-loading\">\n    \n</div>";

  var html$1o = "<div class=\"modal-pending\">\n    <div class=\"modal-pending__loading\"></div>\n    <div class=\"modal-pending__text\">{text}</div>\n</div>";

  var html$1n = "<div class=\"person-start\">\n\n    <div class=\"person-start__body\">\n        <div class=\"person-start__right\">\n            <div class=\"person-start__poster\">\n                <img src=\"{img}\" class=\"person-start__img\" />\n            </div>\n        </div>\n\n        <div class=\"person-start__left\">\n            <div class=\"person-start__tags\">\n                <div class=\"person-start__tag\">\n                    <img src=\"./img/icons/pulse.svg\" /> <div>{birthday}</div>\n                </div>\n            </div>\n            \n            <div class=\"person-start__name\">{name}</div>\n            <div class=\"person-start__place\">{place}</div>\n\n            <div class=\"person-start__descr\">{descr}</div>\n        </div>\n    </div>\n\n    <div class=\"person-start__descr-mobile\">{descr}</div>\n</div>";

  var html$1m = "<div class=\"empty\">\n    <div class=\"empty__img selector\"></div>\n    <div class=\"empty__title\">{title}</div>\n    <div class=\"empty__descr\">{descr}</div>\n</div>";

  var html$1l = "<div class=\"empty-filter\">\n    <div class=\"empty-filter__title\">#{empty_title}</div>\n    <div class=\"empty-filter__subtitle\">#{empty_text}</div>\n    <div class=\"empty-filter__buttons hide\"></div>\n    <div class=\"empty-filter__templates\">\n        <div class=\"empty-template\">\n            <div class=\"empty-template__ico\"></div>\n            <div class=\"empty-template__body\"></div>\n        </div>\n        <div class=\"empty-template\">\n            <div class=\"empty-template__ico\"></div>\n            <div class=\"empty-template__body\"></div>\n        </div>\n        <div class=\"empty-template\">\n            <div class=\"empty-template__ico\"></div>\n            <div class=\"empty-template__body\"></div>\n        </div>\n    </div>\n</div>";

  var html$1k = "<div class=\"notice selector\">\n    <div class=\"notice__head\">\n        <div class=\"notice__title\">{title}</div>\n        <div class=\"notice__time\">{time}</div>\n    </div>\n    \n    <div class=\"notice__descr\">{descr}</div>\n</div>";

  var html$1j = "<div class=\"notice notice--card selector layer--visible layer--render\">\n    <div class=\"notice__left\">\n        <div class=\"notice__img\">\n            <img />\n        </div>\n    </div>\n    <div class=\"notice__body\">\n        <div class=\"notice__head\">\n            <div class=\"notice__title\">{title}</div>\n            <div class=\"notice__time\">{time}</div>\n        </div>\n        \n        <div class=\"notice__descr\">{descr}</div>\n    </div>\n</div>";

  var html$1i = "<div class=\"torrent-item selector layer--visible layer--render\">\n    <div class=\"torrent-item__title\">{title}</div>\n    <div class=\"torrent-item__ffprobe hide\"></div>\n    <div class=\"torrent-item__details\">\n        <div class=\"torrent-item__date\">{date}</div>\n        <div class=\"torrent-item__tracker\">{tracker}</div>\n\n        <div class=\"torrent-item__bitrate bitrate\">#{torrent_item_bitrate}: <span>{bitrate} #{torrent_item_mb}</span></div>\n        <div class=\"torrent-item__seeds\">#{torrent_item_seeds}: <span>{seeds}</span></div>\n        <div class=\"torrent-item__grabs\">#{torrent_item_grabs}: <span>{grabs}</span></div>\n        \n        <div class=\"torrent-item__size\">{size}</div>\n    </div>\n</div>";

  var html$1h = "<div class=\"torrent-file selector\">\n    <div class=\"torrent-file__title\">{title}<span class=\"exe\">.{exe}</span></div>\n    <div class=\"torrent-file__size\">{size}</div>\n</div>";

  var html$1g = "<div class=\"files\">\n    <div class=\"files__left\">\n        <div class=\"full-start__poster selector\">\n            <img src=\"{img}\" class=\"full-start__img\" />\n        </div>\n\n        <div class=\"files__info\">\n            <div class=\"files__title\">{title}</div>\n            <div class=\"files__title-original\">{original_title}</div>\n        </div>\n    </div>\n    <div class=\"files__body\">\n        \n    </div>\n</div>";

  var html$1f = "<div class=\"about\">\n    <div>#{about_text}</div>\n    <div>#{about_android}</div>\n    <div>#{about_mobile}</div>\n    <div>#{about_abuse}</div>\n\n\n    <div class=\"overhide\">\n        <div class=\"about__contacts\">\n            <div>\n                <small>#{about_channel}</small><br>\n            <div class=\"about__contacts__link\">\n                <div>@prisma_party</div>\n            </div>\n            </div>\n\n            <div>\n                <!-- <small>#{about_version}</small><br>\n                <span class=\"version_app\"></span> -->\n            </div>\n\n            <div class=\"hide platform_android\">\n                <small>#{about_version} Android</small><br>\n                <span class=\"version_android\"></span>\n            </div>\n        </div>\n    </div>\n</div>";

  var html$1e = "<div class=\"error\">\n    <div class=\"error__ico\"></div>\n    <div class=\"error__body\">\n        <div class=\"error__title\">{title}</div>\n        <div class=\"error__text\">{text}</div>\n    </div>\n</div>";

  var html$1d = "<div class=\"season-episode selector layer--visible\">\n    <div class=\"season-episode__img\">\n        <img alt=\"\">\n        <div class=\"season-episode__loader\"></div>\n    </div>\n    <div class=\"season-episode__body\">\n        <div class=\"season-episode__head\">\n            <div class=\"season-episode__title\">{title}</div>\n            <div class=\"season-episode__time\">{time}</div>\n        </div>\n        <div class=\"season-episode__timeline\"></div>\n        <div class=\"season-episode__footer\">\n            <div class=\"season-episode__info\">{info}</div>\n            <div class=\"season-episode__quality\">{quality}</div>\n        </div>\n    </div>\n</div>";

  var html$1c = "<div class=\"season-episode-rate\">\n    <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M8.39409 0.192139L10.99 5.30994L16.7882 6.20387L12.5475 10.4277L13.5819 15.9311L8.39409 13.2425L3.20626 15.9311L4.24065 10.4277L0 6.20387L5.79819 5.30994L8.39409 0.192139Z\" fill=\"currentColor\"></path>\n    </svg>\n    <span>{rate}</span>\n</div>";

  var html$1b = "<div class=\"season-info selector\">\n    <div class=\"season-info__title\">{name}</div>\n    <div class=\"season-info__head\">{head}</div>\n    <div class=\"season-info__overview\">{overview}</div>\n</div>";

  var html$1a = "<div class=\"error\">\n    <div class=\"error__ico\"></div>\n    <div class=\"error__body\">\n        <div class=\"error__title\">{title}</div>\n        <div class=\"error__text\">{text}</div>\n    </div>\n</div>\n\n<div class=\"torrent-error noconnect\">\n    <div>\n        <div>\u041F\u0440\u0438\u0447\u0438\u043D\u044B</div>\n        <ul>\n            <li>\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F \u0430\u0434\u0440\u0435\u0441: <code>{ip}</code></li>\n            <li class=\"nocorect\">\u0422\u0435\u043A\u0443\u0449\u0438\u0439 \u0430\u0434\u0440\u0435\u0441 <code>{ip}</code> \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043D\u0435\u0432\u0435\u0440\u043D\u044B\u043C!</li>\n            <li>\u0422\u0435\u043A\u0443\u0449\u0438\u0439 \u043E\u0442\u0432\u0435\u0442: <code>{echo}</code></li>\n        </ul>\n    </div>\n\n    <div>\n        <div>\u041A\u0430\u043A \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u043E?</div>\n        <ul>\n            <li>\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u0430\u0434\u0440\u0435\u0441: <code>192.168.0.\u0445\u0445\u0445:8090</code></li>\n            <li>\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u0432\u0435\u0440\u0441\u0438\u044E Matrix</li>\n        </ul>\n    </div>\n\n    <div>\n        <div>\u041A\u0430\u043A \u043F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C?</div>\n        <ul>\n            <li>\u041D\u0430 \u044D\u0442\u043E\u043C \u0436\u0435 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0435, \u043E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u0437\u0430\u0439\u0434\u0438\u0442\u0435 \u043F\u043E \u0430\u0434\u0440\u0435\u0441\u0443 <code>{ip}/echo</code></li>\n            <li>\u0415\u0441\u043B\u0438 \u0436\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043D\u0435 \u043E\u0442\u0432\u0435\u0442\u0438\u0442, \u043F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u0437\u0430\u043F\u0443\u0449\u0435\u043D \u043B\u0438 TorrServe, \u0438\u043B\u0438 \u043F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0435\u0433\u043E.</li>\n            <li>\u0415\u0441\u043B\u0438 \u0436\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u043E\u0442\u0432\u0435\u0442\u0438\u043B, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C \u0447\u0442\u043E \u0432 \u043E\u0442\u0432\u0435\u0442\u0435 \u0435\u0441\u0442\u044C \u0441\u0442\u0440\u043E\u043A\u0430 <code>MatriX</code></li>\n        </ul>\n    </div>\n</div>";

  var html$19 = "<div class=\"error\">\n    <div class=\"error__ico\"></div>\n    <div class=\"error__body\">\n        <div class=\"error__title\">{title}</div>\n        <div class=\"error__text\">{text}</div>\n    </div>\n</div>\n\n<div class=\"torrent-error noconnect\">\n    <div>\n        <div>\u041F\u0440\u0438\u0447\u0438\u043D\u044B</div>\n        <ul>\n            <li>\u0417\u0430\u043F\u0440\u043E\u0441 \u043D\u0430 \u043F\u0438\u043D\u0433 \u0432\u0435\u0440\u043D\u0443\u043B \u043D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442</li>\n            <li>\u041E\u0442\u0432\u0435\u0442 \u043E\u0442 TorServer: <code>{echo}</code></li>\n        </ul>\n    </div>\n\n    <div>\n        <div>\u0427\u0442\u043E \u0434\u0435\u043B\u0430\u0442\u044C?</div>\n        <ul>\n            <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C \u0447\u0442\u043E \u0443 \u0432\u0430\u0441 \u0441\u0442\u043E\u0438\u0442 \u0432\u0435\u0440\u0441\u0438\u044F Matrix</li>\n        </ul>\n    </div>\n\n    <div>\n        <div>\u041A\u0430\u043A \u043F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C?</div>\n        <ul>\n            <li>\u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u0437\u0430\u0439\u0434\u0438\u0442\u0435 \u043F\u043E \u0430\u0434\u0440\u0435\u0441\u0443 <code>{ip}/echo</code></li>\n            <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044C \u0447\u0442\u043E \u0432 \u043E\u0442\u0432\u0435\u0442\u0435 \u0435\u0441\u0442\u044C \u043D\u0430\u043B\u0438\u0447\u0438\u0435 \u043A\u043E\u0434\u0430 <code>MatriX</code></li>\n        </ul>\n    </div>\n</div>";

  var html$18 = "<div class=\"error\">\n    <div class=\"error__ico\"></div>\n    <div class=\"error__body\">\n        <div class=\"error__title\">{title}</div>\n        <div class=\"error__text\">{text}</div>\n    </div>\n</div>\n\n<div class=\"torrent-error noconnect\">\n    <div>\n        <div>#{torent_nohash_reasons}</div>\n        <ul>\n            <li>#{torent_nohash_reason_one}</li>\n            <li>#{torent_nohash_reason_two}: {echo}</li>\n            <li>#{torent_nohash_reason_three}: <code>{url}</code></li>\n        </ul>\n    </div>\n\n    <div class=\"is--jackett\">\n        <div>#{torent_nohash_do}</div>\n        <ul>\n            <li>#{torent_nohash_do_one}</li>\n            <li>#{torent_nohash_do_two}</li>\n            <li>#{torent_nohash_do_three}</li>\n        </ul>\n    </div>\n\n    <div class=\"is--torlook\">\n        <div>#{torent_nohash_do}</div>\n        <ul>\n            <li>#{torent_nohash_do_four}</li>\n            <li>#{torent_nohash_do_five}</li>\n        </ul>\n    </div>\n</div>";

  var html$17 = "<div class=\"torrent-install\">\n    <div class=\"torrent-install__left\">\n        <img src=\"/img/ili/tv.png\" class=\"torrent-install\"/>\n    </div>\n    <div class=\"torrent-install__details\">\n        <div class=\"torrent-install__title\">#{torrent_install_need}</div>\n        <div class=\"torrent-install__descr\">#{torrent_install_text}</div>\n        \n        <div class=\"torrent-install__label\">#{torrent_install_contact}\n        </div>\n\n            <div class=\"torrent-install__link\">\n                <div>@prisma_party</div>\n            </div>\n        </div>\n    </div>\n</div>";

  var html$16 = "<div class=\"torrent-checklist\">\n    <div class=\"torrent-checklist__descr\">#{torrent_error_text}</div>\n\n    <div class=\"torrent-checklist__progress-steps\"></div>\n    <div class=\"torrent-checklist__progress-bar\">\n        <div style=\"width: 0\"></div>\n    </div>\n\n    <div class=\"torrent-checklist__content\">\n        <div class=\"torrent-checklist__steps\">\n            <ul class=\"torrent-checklist__list\">\n                <li>#{torrent_error_step_1}</li>\n                <li>#{torrent_error_step_2}</li>\n                <li>#{torrent_error_step_3}</li>\n                <li>#{torrent_error_step_4}</li>\n                <li>#{torrent_error_step_5}</li>\n                <li>#{torrent_error_step_6}</li>\n            </ul>\n        </div>\n\n        <div class=\"torrent-checklist__info\">\n            <div class=\"hide\">#{torrent_error_info_1}</div>\n            <div class=\"hide\">#{torrent_error_info_2}</div>\n            <div class=\"hide\">#{torrent_error_info_3}</div>\n            <div class=\"hide\">#{torrent_error_info_4}</div>\n            <div class=\"hide\">#{torrent_error_info_5}</div>\n            <div class=\"hide\">#{torrent_error_info_6}</div>\n            <div class=\"hide\">#{torrent_error_info_7}</div>\n        </div>\n    </div>\n\n    <div class=\"torrent-checklist__footer\">\n        <div class=\"simple-button selector\">#{torrent_error_start}</div><div class=\"torrent-checklist__next-step\"></div>\n    </div>\n</div>";

  var html$15 = "<div class=\"torrent-serial selector layer--visible layer--render\">\n    <img data-src=\"{img}\" class=\"torrent-serial__img\" />\n    <div class=\"torrent-serial__content\">\n        <div class=\"torrent-serial__body\">\n            <div class=\"torrent-serial__title\">{fname}</div>\n            <div class=\"torrent-serial__line\"><span>#{torrent_serial_season} - <b>{season}</b></span><span>#{torrent_serial_date} - {air_date}</span></div>\n        </div>\n        <div class=\"torrent-serial__detail\">\n            <div class=\"torrent-serial__size\">{size}</div>\n            <div class=\"torrent-serial__exe\">.{exe}</div>\n        </div>\n        <div class=\"torrent-serial__clear\"></div>\n    </div>\n    <div class=\"torrent-serial__episode\">{episode}</div>\n</div>";

  var html$14 = "<div class=\"search-box\">\n    <div class=\"search-box__input search__input\"></div>\n    <div class=\"search-box__keypad\"><div class=\"simple-keyboard\"></div></div>\n</div>";

  var html$13 = "<div class=\"console\">\n<!--    <div class=\"console__tabs\"></div> -->\n    <div class=\"console__body\"></div>\n</div>";

  var html$12 = "\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M13.26 3.59997L5.04997 12.29C4.73997 12.62 4.43997 13.27 4.37997 13.72L4.00997 16.96C3.87997 18.13 4.71997 18.93 5.87997 18.73L9.09997 18.18C9.54997 18.1 10.18 17.77 10.49 17.43L18.7 8.73997C20.12 7.23997 20.76 5.52997 18.55 3.43997C16.35 1.36997 14.68 2.09997 13.26 3.59997Z\" stroke=\"#FDFDFD\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M11.89 5.05005C12.32 7.81005 14.56 9.92005 17.34 10.2\" stroke=\"#FDFDFD\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>\n\n";

  var html$11 = "\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M9.46992 15.2799C9.27992 15.2799 9.08992 15.2099 8.93992 15.0599C8.11992 14.2399 7.66992 13.1499 7.66992 11.9999C7.66992 9.60992 9.60992 7.66992 11.9999 7.66992C13.1499 7.66992 14.2399 8.11992 15.0599 8.93992C15.1999 9.07992 15.2799 9.26992 15.2799 9.46992C15.2799 9.66992 15.1999 9.85992 15.0599 9.99992L9.99992 15.0599C9.84992 15.2099 9.65992 15.2799 9.46992 15.2799ZM11.9999 9.16992C10.4399 9.16992 9.16992 10.4399 9.16992 11.9999C9.16992 12.4999 9.29992 12.9799 9.53992 13.3999L13.3999 9.53992C12.9799 9.29992 12.4999 9.16992 11.9999 9.16992Z\" fill=\"#fff\"/>\n<path d=\"M5.59984 18.51C5.42984 18.51 5.24984 18.45 5.10984 18.33C4.03984 17.42 3.07984 16.3 2.25984 15C1.19984 13.35 1.19984 10.66 2.25984 8.99998C4.69984 5.17998 8.24984 2.97998 11.9998 2.97998C14.1998 2.97998 16.3698 3.73998 18.2698 5.16998C18.5998 5.41998 18.6698 5.88998 18.4198 6.21998C18.1698 6.54998 17.6998 6.61998 17.3698 6.36998C15.7298 5.12998 13.8698 4.47998 11.9998 4.47998C8.76984 4.47998 5.67984 6.41998 3.51984 9.80998C2.76984 10.98 2.76984 13.02 3.51984 14.19C4.26984 15.36 5.12984 16.37 6.07984 17.19C6.38984 17.46 6.42984 17.93 6.15984 18.25C6.01984 18.42 5.80984 18.51 5.59984 18.51Z\" fill=\"#fff\"/>\n<path d=\"M12.0006 21.02C10.6706 21.02 9.37055 20.75 8.12055 20.22C7.74055 20.06 7.56055 19.62 7.72055 19.24C7.88055 18.86 8.32055 18.68 8.70055 18.84C9.76055 19.29 10.8706 19.52 11.9906 19.52C15.2206 19.52 18.3106 17.58 20.4706 14.19C21.2206 13.02 21.2206 10.98 20.4706 9.81C20.1606 9.32 19.8205 8.85 19.4606 8.41C19.2006 8.09 19.2506 7.62 19.5706 7.35C19.8906 7.09 20.3605 7.13 20.6306 7.46C21.0206 7.94 21.4006 8.46 21.7406 9C22.8006 10.65 22.8006 13.34 21.7406 15C19.3006 18.82 15.7506 21.02 12.0006 21.02Z\" fill=\"#fff\"/>\n<path d=\"M12.6896 16.2701C12.3396 16.2701 12.0196 16.0201 11.9496 15.6601C11.8696 15.2501 12.1396 14.8601 12.5496 14.7901C13.6496 14.5901 14.5696 13.6701 14.7696 12.5701C14.8496 12.1601 15.2396 11.9001 15.6496 11.9701C16.0596 12.0501 16.3296 12.4401 16.2496 12.8501C15.9296 14.5801 14.5496 15.9501 12.8296 16.2701C12.7796 16.2601 12.7396 16.2701 12.6896 16.2701Z\" fill=\"#fff\"/>\n<path d=\"M1.99945 22.75C1.80945 22.75 1.61945 22.68 1.46945 22.53C1.17945 22.24 1.17945 21.76 1.46945 21.47L8.93945 14C9.22945 13.71 9.70945 13.71 9.99945 14C10.2895 14.29 10.2895 14.77 9.99945 15.06L2.52945 22.53C2.37945 22.68 2.18945 22.75 1.99945 22.75Z\" fill=\"#fff\"/>\n<path d=\"M14.5307 10.2199C14.3407 10.2199 14.1507 10.1499 14.0007 9.99994C13.7107 9.70994 13.7107 9.22994 14.0007 8.93994L21.4707 1.46994C21.7607 1.17994 22.2407 1.17994 22.5307 1.46994C22.8207 1.75994 22.8207 2.23994 22.5307 2.52994L15.0607 9.99994C14.9107 10.1499 14.7207 10.2199 14.5307 10.2199Z\" fill=\"#fff\"/>\n</svg>\n";

  var html$10 = "\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"512\" height=\"512\" viewBox=\"0 0 401.998 401.998\" xml:space=\"preserve\"><path d=\"M357.45 190.721c-5.331-5.33-11.8-7.993-19.417-7.993h-9.131v-54.821c0-35.022-12.559-65.093-37.685-90.218C266.093 12.563 236.025 0 200.998 0c-35.026 0-65.1 12.563-90.222 37.688-25.126 25.126-37.685 55.196-37.685 90.219v54.821h-9.135c-7.611 0-14.084 2.663-19.414 7.993-5.33 5.326-7.994 11.799-7.994 19.417V374.59c0 7.611 2.665 14.086 7.994 19.417 5.33 5.325 11.803 7.991 19.414 7.991H338.04c7.617 0 14.085-2.663 19.417-7.991 5.325-5.331 7.994-11.806 7.994-19.417V210.135c.004-7.612-2.669-14.084-8.001-19.414zm-83.363-7.993H127.909v-54.821c0-20.175 7.139-37.402 21.414-51.675 14.277-14.275 31.501-21.411 51.678-21.411 20.179 0 37.399 7.135 51.677 21.411 14.271 14.272 21.409 31.5 21.409 51.675v54.821z\" fill=\"currentColor\"></path></svg>\n";

  var html$$ = "\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8.39062 18.4907V8.33071C8.39062 7.93071 8.51062 7.54071 8.73062 7.21071L11.4606 3.15071C11.8906 2.50071 12.9606 2.04071 13.8706 2.38071C14.8506 2.71071 15.5006 3.81071 15.2906 4.79071L14.7706 8.06071C14.7306 8.36071 14.8106 8.63071 14.9806 8.84071C15.1506 9.03071 15.4006 9.15071 15.6706 9.15071H19.7806C20.5706 9.15071 21.2506 9.47071 21.6506 10.0307C22.0306 10.5707 22.1006 11.2707 21.8506 11.9807L19.3906 19.4707C19.0806 20.7107 17.7306 21.7207 16.3906 21.7207H12.4906C11.8206 21.7207 10.8806 21.4907 10.4506 21.0607L9.17062 20.0707C8.68062 19.7007 8.39062 19.1107 8.39062 18.4907Z\" fill=\"currentColor\"/>\n<path d=\"M5.21 6.37891H4.18C2.63 6.37891 2 6.97891 2 8.45891V18.5189C2 19.9989 2.63 20.5989 4.18 20.5989H5.21C6.76 20.5989 7.39 19.9989 7.39 18.5189V8.45891C7.39 6.97891 6.76 6.37891 5.21 6.37891Z\" fill=\"currentColor\"/>\n</svg>\n\n";

  var html$_ = "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 125\" enable-background=\"new 0 0 100 100\" xml:space=\"preserve\"><g><g><path d=\"M76.703,41.593h17.802c0.273,0,0.495-0.221,0.495-0.495s-0.221-0.495-0.495-0.495H76.703    c-0.273,0-0.495,0.221-0.495,0.495S76.43,41.593,76.703,41.593z\"/><path d=\"M5.494,41.593h62.308c0.273,0,0.495-0.221,0.495-0.495s-0.221-0.495-0.495-0.495H5.494C5.221,40.604,5,40.826,5,41.099    S5.221,41.593,5.494,41.593z\"/><path d=\"M5.494,50.495h17.802c0.273,0,0.494-0.221,0.494-0.495s-0.221-0.495-0.494-0.495H5.494C5.221,49.505,5,49.727,5,50    S5.221,50.495,5.494,50.495z\"/><path d=\"M41.099,49.505h-8.901c-0.273,0-0.495,0.221-0.495,0.495s0.221,0.495,0.495,0.495h8.901c0.273,0,0.495-0.221,0.495-0.495    S41.372,49.505,41.099,49.505z\"/><path d=\"M94.505,49.505H50c-0.273,0-0.495,0.221-0.495,0.495s0.221,0.495,0.495,0.495h44.505C94.779,50.495,95,50.273,95,50    S94.779,49.505,94.505,49.505z\"/><path d=\"M36.648,58.407H5.494C5.221,58.407,5,58.628,5,58.901c0,0.273,0.221,0.495,0.495,0.495h31.154    c0.273,0,0.495-0.221,0.495-0.495C37.143,58.628,36.922,58.407,36.648,58.407z\"/></g></g></svg>";

  var html$Z = "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"-5.0 -10.0 110.0 135.0\">\n <path d=\"m11.551 14.82h76.898c3.6172 0.003907 6.5469 2.9336 6.5508 6.5508v57.258c-0.003906 3.6172-2.9336 6.5469-6.5508 6.5508h-76.898c-3.6172-0.003907-6.5469-2.9336-6.5508-6.5508v-57.258c0.003906-3.6172 2.9336-6.5469 6.5508-6.5508zm48.602 41.5 9.8477-10.84c0.98438-1.0938 2.3906-1.7148 3.8594-1.7109 1.4688 0 2.8711 0.61719 3.8594 1.6992l13.57 14.902v-39c-0.003906-1.5664-1.2734-2.8359-2.8398-2.8398h-76.898c-1.5664 0.003906-2.8359 1.2734-2.8398 2.8398v39l22.449-24.672c1.3086-1.4375 3.1641-2.2578 5.1094-2.2578 1.9453 0 3.8008 0.82031 5.1094 2.2578l18.77 20.621zm31.141 9.5508-16.293-17.871c-0.28906-0.3125-0.69531-0.49609-1.1211-0.5-0.42578-0.003906-0.83594 0.17578-1.1289 0.48828l-10.102 11.102 4.4102 4.8398c0.6875 0.75781 0.63281 1.9258-0.125 2.6172-0.75391 0.6875-1.9258 0.62891-2.6133-0.125l-25.68-28.223c-0.60547-0.66797-1.4688-1.0508-2.3711-1.0508-0.90234 0-1.7617 0.38281-2.3711 1.0508l-25.188 27.672v12.758c0.003906 1.5664 1.2734 2.8359 2.8398 2.8398h76.898c1.5664-0.003906 2.8359-1.2734 2.8398-2.8398v-12.758zm-28.371-35.582c-0.9375-0.9375-2.3438-1.2148-3.5664-0.71094-1.2227 0.50781-2.0195 1.6992-2.0195 3.0234 0 1.3203 0.79687 2.5156 2.0195 3.0195 1.2227 0.50781 2.6289 0.22656 3.5664-0.71094 1.2734-1.2773 1.2734-3.3438 0-4.6211zm-2.3086-4.6719-0.003906 0.003906c-2.832 0-5.3828 1.7031-6.4648 4.3203-1.0859 2.6172-0.48438 5.625 1.5156 7.6289 2.0039 2 5.0117 2.6016 7.6289 1.5156 2.6172-1.082 4.3203-3.6328 4.3203-6.4648 0-3.8672-3.1328-7-7-7z\" fill-rule=\"evenodd\"/>\n</svg>";

  var html$Y = "<div class=\"time-line\" data-hash=\"{hash}\">\n    <div style=\"width: {percent}%\"></div>\n</div>";

  var html$X = "<span class=\"time-line-details\" data-hash=\"{hash}\">\n#{time_viewed} - <b a=\"t\">{time}</b> #{time_from} <b a=\"d\">{duration} / <b a=\"p\">{percent}</b></b>\n</span>";

  var html$W = "<div class=\"empty empty--list\">\n    <div class=\"empty__title\">#{empty_title}</div>\n    <div class=\"empty__descr\">#{empty_text}</div>\n</div>";

  var html$V = "<div class=\"screensaver\">\n    <div class=\"screensaver__slides\">\n        <img class=\"screensaver__slides-one\" />\n        <img class=\"screensaver__slides-two\" />\n    </div>\n    <div class=\"screensaver__gradient\"></div>\n    <div class=\"screensaver__datetime\">\n        <div class=\"screensaver__datetime-time\"><span class=\"time--clock\"></span></div>\n        <div class=\"screensaver__datetime-date\"><span class=\"time--full\"></span></div>\n    </div>\n</div>";

  var html$U = "<div class=\"plugins-catalog\">\n\n    <div class=\"plugins-catalog__block\">\n        <div class=\"plugins-catalog__title selector\">#{plugins_catalog_work}</div>\n        <div class=\"plugins-catalog__descr\">#{plugins_catalog_work_descr}</div>\n        <div class=\"plugins-catalog__list\">\n            \n        </div>\n    </div>\n\n    <div class=\"plugins-catalog__block\">\n        <div class=\"plugins-catalog__title\">#{plugins_catalog_popular}</div>\n        <div class=\"plugins-catalog__descr\">#{plugins_catalog_popular_descr}</div>\n        <div class=\"plugins-catalog__list\">\n            \n        </div>\n    </div>\n</div>";

  var html$T = "<div class=\"broadcast\">\n    <div class=\"broadcast__text\">{text}</div>\n\n    <div class=\"broadcast__scan\"><div></div></div>\n\n    <div class=\"broadcast__devices\">\n    \n    </div>\n</div>";

  var html$S = "<div class=\"lang\">\n    <div class=\"lang__body\">\n        <div class=\"lang__logo\">\n            <img src=\"./img/lang_logo.svg\" />\n        </div>\n        <div class=\"lang__title\"></div>\n        <div class=\"lang__subtitle\"></div>\n        <div class=\"lang__selector\"></div>\n    </div>\n</div>";

  var html$R = "<div class=\"extensions\">\n    <div class=\"extensions__body\"></div>\n</div>";

  var html$Q = "<div class=\"extensions__block layer--visible layer--render\">\n    <div class=\"extensions__block-head\">\n        <div class=\"extensions__block-title\">{title}</div>\n    </div>\n    <div class=\"extensions__block-body\"></div>\n</div>";

  var html$P = "<div class=\"extensions__item selector layer--visible layer--render\">\n    <div class=\"extensions__item-author\"></div>\n    <div class=\"extensions__item-name\"></div>\n    <div class=\"extensions__item-descr\"></div>\n    <div class=\"extensions__item-footer\">\n        <div class=\"extensions__item-included hide\"></div>\n        <div class=\"extensions__item-check hide\"></div>\n        <div class=\"extensions__item-code hide success\"></div>\n        <div class=\"extensions__item-status hide\"></div>\n        <div class=\"extensions__item-disabled hide\">#{player_disabled}</div>\n    </div>\n</div>";

  var html$O = "<div class=\"extensions__item extensions__item--recomend selector layer--visible layer--render\">\n    <div class=\"extensions__item-imagebox\">\n        <img class=\"extensions__item-image\" />\n    </div>\n    <div class=\"extensions__item-body\">\n        <div class=\"extensions__item-author\"></div>\n        <div class=\"extensions__item-name\"></div>\n        <div class=\"extensions__item-descr\"></div>\n        <div class=\"extensions__item-footer\">\n            <div class=\"extensions__item-included hide\"></div>\n            <div class=\"extensions__item-check hide\"></div>\n            <div class=\"extensions__item-code hide success\"></div>\n            <div class=\"extensions__item-status hide\"></div>\n            <div class=\"extensions__item-disabled hide\">#{player_disabled}</div>\n        </div>\n    </div>\n</div>";

  var html$N = "<div class=\"extensions-info\">\n    <div class=\"extensions-info__descr\"></div>\n    <div class=\"extensions-info__instruction\"></div>\n\n    <div class=\"extensions-info__footer\"> </div>\n</div>";

  var html$M = "<div class=\"extensions__item extensions__item--theme selector layer--visible layer--render\">\n    <div class=\"extensions__item-imagebox\">\n        <img class=\"extensions__item-image\" />\n    </div>\n    <div class=\"extensions__item-body\">\n        <div class=\"extensions__item-name\"></div>\n    </div>\n</div>";

  var html$L = "<div class=\"extensions__item extensions__item--screensaver selector layer--visible layer--render\">\n    <div class=\"extensions__item-imagebox\">\n        <img class=\"extensions__item-image\" />\n    </div>\n    <div class=\"extensions__item-overlay\">\n        <div class=\"extensions__item-name\"></div>\n        <div class=\"extensions__item-time\"></div>\n    </div>\n</div>";

  var html$K = "<div class=\"iframe\">\n    <div class=\"iframe__body\">\n        <iframe src=\"\" class=\"iframe__window\"></iframe>\n    </div>\n</div>";

  var html$J = "<div class=\"account-modal\">\n    <div class=\"account-modal__icon\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M18.75 8V10.1C18.31 10.04 17.81 10.01 17.25 10V8C17.25 4.85 16.36 2.75 12 2.75C7.64 2.75 6.75 4.85 6.75 8V10C6.19 10.01 5.69 10.04 5.25 10.1V8C5.25 5.1 5.95 1.25 12 1.25C18.05 1.25 18.75 5.1 18.75 8Z\" fill=\"#00FFCC\"/>\n            <path opacity=\"0.4\" d=\"M22 15V17C22 21 21 22 17 22H7C3 22 2 21 2 17V15C2 11.66 2.7 10.41 5.25 10.1C5.69 10.04 6.19 10.01 6.75 10H17.25C17.81 10.01 18.31 10.04 18.75 10.1C21.3 10.41 22 11.66 22 15Z\" fill=\"url(#paint0_linear_3195_4555)\"/>\n            <path d=\"M8 17.0001C7.87 17.0001 7.74 16.9701 7.62 16.9201C7.49 16.8701 7.39001 16.8001 7.29001 16.7101C7.11001 16.5201 7 16.2601 7 16.0001C7 15.8701 7.02999 15.7401 7.07999 15.6201C7.12999 15.5001 7.20001 15.3901 7.29001 15.2901C7.39001 15.2001 7.49 15.1301 7.62 15.0801C7.99 14.9201 8.42999 15.0101 8.70999 15.2901C8.79999 15.3901 8.87001 15.5001 8.92001 15.6201C8.97001 15.7401 9 15.8701 9 16.0001C9 16.2601 8.88999 16.5201 8.70999 16.7101C8.51999 16.8901 8.26 17.0001 8 17.0001Z\" fill=\"#C3CAC9\"/>\n            <path d=\"M12 17C11.73 17 11.48 16.89 11.29 16.71C11.2 16.61 11.13 16.5 11.08 16.38C11.03 16.26 11 16.13 11 16C11 15.73 11.11 15.48 11.29 15.29C11.66 14.92 12.33 14.92 12.71 15.29C12.89 15.48 13 15.73 13 16C13 16.13 12.97 16.26 12.92 16.38C12.87 16.5 12.8 16.61 12.71 16.71C12.52 16.89 12.26 17 12 17Z\" fill=\"#ADADAD\"/>\n            <path d=\"M16 17C15.74 17 15.48 16.89 15.29 16.71C15.11 16.52 15 16.27 15 16C15 15.73 15.11 15.48 15.29 15.29C15.67 14.92 16.34 14.92 16.71 15.29C16.75 15.34 16.79 15.39 16.83 15.45C16.87 15.5 16.9 15.56 16.92 15.62C16.95 15.68 16.97 15.74 16.98 15.8C16.99 15.87 17 15.94 17 16C17 16.26 16.89 16.52 16.71 16.71C16.52 16.89 16.26 17 16 17Z\" fill=\"#BEBBBB\"/>\n            <defs>\n            <linearGradient id=\"paint0_linear_3195_4555\" x1=\"12\" y1=\"10\" x2=\"12\" y2=\"22\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color=\"#00FFCC\"/>\n            </linearGradient>\n            </defs>\n        </svg>\n    </div>\n\n    <div class=\"account-modal__desc\">\n        #{account_create}\n    </div>\n</div>";

  var html$I = "<div class=\"account-modal\">\n    <div class=\"account-modal__icon-svg\">\n        <svg height=\"184\" viewBox=\"0 0 199 184\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"100\" cy=\"92\" r=\"92\" fill=\"#D9D9D9\" fill-opacity=\"0.06\"/>\n            <path d=\"M161.917 23H78.1668C75.2052 23 72.365 24.1765 70.2708 26.2706C68.1767 28.3648 67.0002 31.2051 67.0002 34.1667V109.542H55.8335V115.125H89.3335C90.0739 115.125 90.784 114.831 91.3075 114.307C91.831 113.784 92.1252 113.074 92.1252 112.333V106.529L112.381 120.708L92.1252 134.887V129.083C92.1252 128.343 91.831 127.633 91.3075 127.109C90.784 126.586 90.0739 126.292 89.3335 126.292H55.8335V131.875H67.0002V145.833C67.0002 148.795 68.1767 151.635 70.2708 153.729C72.365 155.824 75.2052 157 78.1668 157H161.917C164.878 157 167.719 155.824 169.813 153.729C171.907 151.635 173.083 148.795 173.083 145.833V34.1667C173.083 31.2051 171.907 28.3648 169.813 26.2706C167.719 24.1765 164.878 23 161.917 23V23ZM78.1668 28.5833H161.917C163.398 28.5833 164.818 29.1716 165.865 30.2187C166.912 31.2657 167.5 32.6859 167.5 34.1667V38.7701L160.434 47.603C159.609 48.6389 158.561 49.4751 157.368 50.0489C156.174 50.6227 154.866 50.9194 153.542 50.9167H133.721C133.08 47.7613 131.368 44.9244 128.875 42.8868C126.382 40.8491 123.262 39.736 120.042 39.736C116.822 39.736 113.701 40.8491 111.208 42.8868C108.715 44.9244 107.003 47.7613 106.363 50.9167H86.5418C85.2175 50.9194 83.9097 50.6227 82.7162 50.0489C81.5226 49.4751 80.4742 48.6389 79.6492 47.603L72.5835 38.7701V34.1667C72.5835 32.6859 73.1717 31.2657 74.2188 30.2187C75.2659 29.1716 76.686 28.5833 78.1668 28.5833V28.5833ZM128.417 53.7083C128.417 55.3648 127.926 56.984 127.005 58.3612C126.085 59.7385 124.777 60.8119 123.247 61.4458C121.716 62.0797 120.033 62.2456 118.408 61.9224C116.783 61.5993 115.291 60.8016 114.12 59.6304C112.949 58.4591 112.151 56.9668 111.828 55.3422C111.505 53.7176 111.67 52.0337 112.304 50.5034C112.938 48.973 114.012 47.665 115.389 46.7448C116.766 45.8245 118.385 45.3333 120.042 45.3333C122.263 45.3333 124.393 46.2157 125.964 47.7863C127.534 49.3569 128.417 51.4871 128.417 53.7083ZM161.917 151.417H78.1668C76.686 151.417 75.2659 150.828 74.2188 149.781C73.1717 148.734 72.5835 147.314 72.5835 145.833V131.875H86.5418V140.25C86.5421 140.76 86.6823 141.261 86.9472 141.697C87.2121 142.134 87.5915 142.489 88.0443 142.725C88.497 142.96 89.0057 143.067 89.515 143.034C90.0243 143.001 90.5148 142.829 90.9331 142.536L118.85 122.995C119.217 122.737 119.517 122.395 119.724 121.997C119.931 121.599 120.04 121.157 120.04 120.708C120.04 120.26 119.931 119.818 119.724 119.42C119.517 119.022 119.217 118.679 118.85 118.422L90.9331 98.8803C90.5148 98.5878 90.0243 98.4156 89.515 98.3825C89.0057 98.3493 88.497 98.4564 88.0443 98.6921C87.5915 98.9278 87.2121 99.2831 86.9472 99.7194C86.6823 100.156 86.5421 100.656 86.5418 101.167V109.542H72.5835V47.709L75.2914 51.0925C76.6378 52.7836 78.3491 54.1484 80.2973 55.0848C82.2455 56.0212 84.3803 56.505 86.5418 56.5H106.363C107.003 59.6554 108.715 62.4922 111.208 64.5299C113.701 66.5675 116.822 67.6807 120.042 67.6807C123.262 67.6807 126.382 66.5675 128.875 64.5299C131.368 62.4922 133.08 59.6554 133.721 56.5H153.542C155.703 56.505 157.838 56.0212 159.786 55.0848C161.735 54.1484 163.446 52.7836 164.792 51.0925L167.5 47.709V145.833C167.5 147.314 166.912 148.734 165.865 149.781C164.818 150.828 163.398 151.417 161.917 151.417V151.417Z\" fill=\"white\"/>\n            <path d=\"M117.25 50.9166H122.833V56.5H117.25V50.9166Z\" fill=\"white\"/>\n            <path d=\"M22.3335 36.9584H55.8335V42.5417H22.3335V36.9584Z\" fill=\"white\"/>\n            <path d=\"M11.1665 36.9584H16.7498V42.5417H11.1665V36.9584Z\" fill=\"white\"/>\n            <path d=\"M0 56.5H33.5V62.0833H0V56.5Z\" fill=\"white\"/>\n            <path d=\"M30.7085 151.417H55.8335V157H30.7085V151.417Z\" fill=\"white\"/>\n            <path d=\"M19.5415 151.417H25.1248V157H19.5415V151.417Z\" fill=\"white\"/>\n            <path d=\"M0 137.458H47.4583V143.042H0V137.458Z\" fill=\"white\"/>\n            <path d=\"M44.6665 90H61.4165V95.5833H44.6665V90Z\" fill=\"white\"/>\n            <path d=\"M33.5 90H39.0833V95.5833H33.5V90Z\" fill=\"white\"/>\n            <path d=\"M145.167 129.083H161.917V134.667H145.167V129.083Z\" fill=\"white\"/>\n            <path d=\"M122.833 140.25H161.917V145.833H122.833V140.25Z\" fill=\"white\"/>\n            <circle cx=\"169\" cy=\"32\" r=\"30\" fill=\"white\"/>\n            <rect x=\"159.808\" y=\"18.5649\" width=\"32\" height=\"6\" rx=\"3\" transform=\"rotate(45 159.808 18.5649)\" fill=\"#0C0C0C\"/>\n            <rect x=\"155.565\" y=\"41.1924\" width=\"32\" height=\"6\" rx=\"3\" transform=\"rotate(-45 155.565 41.1924)\" fill=\"#0C0C0C\"/>\n        </svg>\n    </div>\n\n    <div class=\"account-modal__desc\">\n        #{account_limited}\n    </div>\n</div>";

  var html$H = "<div class=\"prisma-premium\">\n    <div class=\"prisma-premium__title\">PREMIUM</div>\n    <div class=\"prisma-premium__descr\">\n        #{account_premium}\n    </div>\n  <!--  <div class=\"prisma-premium__descr\">#{account_premium_more}</div> -->\n  <div class=\"prisma-premium__url\">Telegram: @prismalk_bot</div>\n</div>";

  var html$G = "<div class=\"prisma-premium prisma-premium--detail\">\n    <div class=\"prisma-premium__icon selector\">\n    <img src=\"./img/icon_logo.png\" />\n    </div>\n    <div class=\"prisma-premium__descr\">\n        #{account_premium}\n    </div>\n    <div class=\"prisma-premium__includes\">\n        <div class=\"selector\">\n            <div class=\"prisma-premium__qr selector\">\n            <div><img src=\"./img/qr_donate.png\" /></div>\n            <!-- <div>#{filter_rating_from} 360 #{filter_rating_to} 5 040</div> -->\n        </div>\n        </div>\n    </div>\n    <div class=\"prisma-premium__descr\">#{account_premium_more}</div>\n    <div class=\"prisma-premium__url selector\">https://prisma.ws/donate</div>\n</div>";

  var html$F = "<div class=\"explorer layer--width\">\n    <div class=\"explorer__left\">\n        <div class=\"explorer__card\">\n            <div class=\"explorer-card\">\n                <div class=\"explorer-card__head\">\n                    <div class=\"explorer-card__head-left\">\n                        <div class=\"explorer-card__head-img selector\">\n                            <img alt=\"\">\n                        </div>\n                </div>\n            <div class=\"explorer-card__head-body\">\n                        <div class=\"explorer-card__head-create\"></div>\n                        <div class=\"explorer-card__head-rate\">\n                            <svg width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M8.39409 0.192139L10.99 5.30994L16.7882 6.20387L12.5475 10.4277L13.5819 15.9311L8.39409 13.2425L3.20626 15.9311L4.24065 10.4277L0 6.20387L5.79819 5.30994L8.39409 0.192139Z\" fill=\"currentColor\"/>\n                            </svg>\n                            <span></span>\n                        </div>\n                </div>\n            </div>\n                <div class=\"explorer-card__body\">\n                    <div class=\"explorer-card__title\"></div>\n                    <div class=\"explorer-card__genres\"></div>\n                    <div class=\"explorer-card__descr\"></div>\n                </div>\n        </div>\n    </div>\n</div>\n<div class=\"explorer__files\">\n    <div class=\"explorer__files-head\">\n        <div class=\"explorer-card__qr-block explorer-card__qr-block--top\">\n            <div class=\"explorer-card__qr-image\">\n                <img src=\"./img/qr-guide.svg\" alt=\"QR Code\">\n            </div>\n            <div class=\"explorer-card__qr-text\">\n                <span>\u0422\u0435\u0445\u043D\u0438\u0447\u0435\u0441\u043A\u0438\u0439 FAQ \u043F\u043E \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430\u043C</span>\n                <p>\u043F\u0440\u043E\u0441\u043A\u0430\u043D\u0438\u0440\u0443\u0439\u0442\u0435 QR \u041A\u043E\u0434 \u0438\u043B\u0438 \u043F\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043F\u043E \u0441\u0441\u044B\u043B\u043A\u0435 <b>start.prisma.ws</b></p>\n            </div>\n        </div>\n    </div>\n    <div class=\"explorer__files-body\"></div>\n</div>\n</div>";

  var html$E = "<div class=\"simple-button selector filter--back\">\n    <svg width=\"38\" height=\"30\" viewBox=\"0 0 38 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect x=\"1.5\" y=\"1.5\" width=\"35\" height=\"27\" rx=\"1.5\" stroke=\"currentColor\" stroke-width=\"3\"/>\n        <rect x=\"6\" y=\"7\" width=\"25\" height=\"3\" fill=\"currentColor\"/>\n        <rect x=\"6\" y=\"13\" width=\"13\" height=\"3\" fill=\"currentColor\"/>\n        <rect x=\"6\" y=\"19\" width=\"19\" height=\"3\" fill=\"currentColor\"/>\n    </svg>\n</div>";

  var html$D = "<div class=\"https\">\n    <div class=\"https__icon\">\n        <svg width=\"146\" height=\"61\" viewBox=\"0 0 146 61\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M72.3059 41.0263V46H76.3571V38.4905L72.3059 41.0263Z\" fill=\"currentColor\"/>\n            <path d=\"M93.1293 27.9919V46H97.1804V33.7812H104.499C107.101 33.7812 109.236 33.3075 110.902 32.3601C112.568 31.4017 113.799 30.1167 114.594 28.505C115.4 26.8932 115.803 25.1018 115.803 23.1307C115.803 21.1596 115.4 19.3736 114.594 17.7727C114.177 16.9454 113.644 16.2067 112.995 15.5568L109.612 17.6744C110.242 18.186 110.727 18.8068 111.065 19.5369C111.566 20.5933 111.817 21.7912 111.817 23.1307C111.817 24.4702 111.566 25.6735 111.065 26.7408C110.575 27.7971 109.786 28.6357 108.697 29.2564C107.608 29.8771 106.165 30.1875 104.368 30.1875H97.1804V25.4561L93.1293 27.9919Z\" fill=\"currentColor\"/>\n            <path d=\"M80.8456 12.5455L72.3059 17.8909V16.1392H61.7861V12.5455H80.8456Z\" fill=\"currentColor\"/>\n            <path d=\"M46.8434 33.8292V16.1392H57.3633V12.5455H32.2724V16.1392H42.7923V36.365L46.8434 33.8292Z\" fill=\"currentColor\"/>\n            <path d=\"M138.239 17.054C139.633 17.9687 140.428 19.2538 140.624 20.9091H144.544C144.49 19.2211 143.967 17.7128 142.976 16.3842C141.996 15.0556 140.667 14.0102 138.99 13.2479C137.313 12.4747 135.397 12.0881 133.24 12.0881C131.106 12.0881 129.173 12.4801 127.441 13.2642C125.721 14.0374 124.349 15.1264 123.325 16.5312C122.312 17.9252 121.806 19.5587 121.806 21.4318C121.806 23.6861 122.568 25.5102 124.093 26.9041C125.617 28.2981 127.686 29.3707 130.3 30.1222L134.417 31.2983C135.593 31.625 136.687 32.0062 137.7 32.4418C138.713 32.8774 139.529 33.4437 140.15 34.1406C140.771 34.8376 141.081 35.7415 141.081 36.8523C141.081 38.072 140.722 39.1392 140.003 40.054C139.284 40.9579 138.31 41.6657 137.079 42.1776C135.849 42.6785 134.46 42.929 132.914 42.929C131.585 42.929 130.344 42.733 129.189 42.3409C128.046 41.938 127.098 41.3281 126.347 40.5114C125.606 39.6837 125.182 38.6383 125.073 37.375H120.891C121.022 39.2045 121.583 40.8108 122.574 42.1939C123.575 43.5769 124.948 44.6551 126.69 45.4283C128.443 46.2015 130.518 46.5881 132.914 46.5881C135.484 46.5881 137.667 46.1579 139.464 45.2976C141.272 44.4373 142.644 43.2775 143.581 41.8182C144.528 40.3589 145.002 38.7254 145.002 36.9176C145.002 35.3494 144.681 34.0263 144.038 32.9482C143.395 31.87 142.579 30.9879 141.588 30.3018C140.608 29.6049 139.578 29.0549 138.5 28.652C137.433 28.2491 136.464 27.9332 135.593 27.7045L132.195 26.7898C131.574 26.6264 130.894 26.4141 130.153 26.1527C129.413 25.8804 128.705 25.5374 128.029 25.1236C127.354 24.6989 126.799 24.1707 126.363 23.5391C125.939 22.8965 125.726 22.1288 125.726 21.2358C125.726 20.1686 126.031 19.2157 126.641 18.3771C127.262 17.5386 128.122 16.8797 129.222 16.4006C130.333 15.9214 131.629 15.6818 133.11 15.6818C135.135 15.6818 136.845 16.1392 138.239 17.054Z\" fill=\"currentColor\"/>\n            <path d=\"M0.0511475 46V12.5455H4.10228V27.4432H21.9404V12.5455H25.9915V46H21.9404V31.0369H4.10228V46H0.0511475Z\" fill=\"currentColor\"/>\n            <rect x=\"25.9064\" y=\"54.3732\" width=\"102.368\" height=\"7\" transform=\"rotate(-32.0445 25.9064 54.3732)\" fill=\"currentColor\"/>\n        </svg>\n    </div>\n    <div class=\"https__text\">\n        #{https_text}\n    </div>\n</div>";

  var html$C = "<div class=\"navigation-bar\">\n    <div class=\"navigation-bar__body\">\n        <div class=\"navigation-bar__item\" data-action=\"back\">\n            <div class=\"navigation-bar__icon\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M15 19.9201L8.47997 13.4001C7.70997 12.6301 7.70997 11.3701 8.47997 10.6001L15 4.08008\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>            \n            </div>\n            <div class=\"navigation-bar__label\">#{back}</div>\n        </div>\n\n        <div class=\"navigation-bar__item\" data-action=\"main\">\n            <div class=\"navigation-bar__icon\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M10.07 2.82009L3.14002 8.37008C2.36002 8.99008 1.86002 10.3001 2.03002 11.2801L3.36002 19.2401C3.60002 20.6601 4.96002 21.8101 6.40002 21.8101H17.6C19.03 21.8101 20.4 20.6501 20.64 19.2401L21.97 11.2801C22.13 10.3001 21.63 8.99008 20.86 8.37008L13.93 2.8301C12.86 1.9701 11.13 1.97009 10.07 2.82009Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M12 15.5C13.3807 15.5 14.5 14.3807 14.5 13C14.5 11.6193 13.3807 10.5 12 10.5C10.6193 10.5 9.5 11.6193 9.5 13C9.5 14.3807 10.6193 15.5 12 15.5Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>            \n            </div>\n            <div class=\"navigation-bar__label\">#{title_main}</div>\n        </div>\n\n        <div class=\"navigation-bar__item\" data-action=\"movie\">\n            <div class=\"navigation-bar__icon\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M9 22H15C20 22 22 20 22 15V9C22 4 20 2 15 2H9C4 2 2 4 2 9V15C2 20 4 22 9 22Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              <path d=\"M9.1001 12V10.52C9.1001 8.60999 10.4501 7.83999 12.1001 8.78999L13.3801 9.52999L14.6601 10.27C16.3101 11.22 16.3101 12.78 14.6601 13.73L13.3801 14.47L12.1001 15.21C10.4501 16.16 9.1001 15.38 9.1001 13.48V12Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n              </svg>                   \n            </div>\n            <div class=\"navigation-bar__label\">#{menu_movies}</div>\n        </div>\n\n        <div class=\"navigation-bar__item\" data-action=\"tv\">\n        <div class=\"navigation-bar__icon\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M7.25998 2H16.73C17.38 2 17.96 2.02003 18.48 2.09003C21.25 2.40003 22 3.70001 22 7.26001V13.58C22 17.14 21.25 18.44 18.48 18.75C17.96 18.82 17.39 18.84 16.73 18.84H7.25998C6.60998 18.84 6.02998 18.82 5.50998 18.75C2.73998 18.44 1.98999 17.14 1.98999 13.58V7.26001C1.98999 3.70001 2.73998 2.40003 5.50998 2.09003C6.02998 2.02003 6.60998 2 7.25998 2Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M13.58 8.32007H17.2599\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M6.73999 14.11H6.75998H17.27\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M7 22H17\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M7.1947 8.30005H7.20368\" stroke=\"#fff\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        <path d=\"M10.4945 8.30005H10.5035\" stroke=\"#fff\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n        </div>\n        <div class=\"navigation-bar__label\">#{menu_tv}</div>\n    </div>\n\n        <div class=\"navigation-bar__item\" data-action=\"search\">\n            <div class=\"navigation-bar__icon\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M11 20C15.9706 20 20 15.9706 20 11C20 6.02944 15.9706 2 11 2C6.02944 2 2 6.02944 2 11C2 15.9706 6.02944 20 11 20Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M18.9299 20.6898C19.4599 22.2898 20.6699 22.4498 21.5999 21.0498C22.4499 19.7698 21.8899 18.7198 20.3499 18.7198C19.2099 18.7098 18.5699 19.5998 18.9299 20.6898Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>            \n            </div>\n            <div class=\"navigation-bar__label\">#{search}</div>\n        </div>\n\n        <!-- <div class=\"navigation-bar__item\" data-action=\"settings\">\n            <div class=\"navigation-bar__icon\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            <path d=\"M2 12.8799V11.1199C2 10.0799 2.85 9.21994 3.9 9.21994C5.71 9.21994 6.45 7.93994 5.54 6.36994C5.02 5.46994 5.33 4.29994 6.24 3.77994L7.97 2.78994C8.76 2.31994 9.78 2.59994 10.25 3.38994L10.36 3.57994C11.26 5.14994 12.74 5.14994 13.65 3.57994L13.76 3.38994C14.23 2.59994 15.25 2.31994 16.04 2.78994L17.77 3.77994C18.68 4.29994 18.99 5.46994 18.47 6.36994C17.56 7.93994 18.3 9.21994 20.11 9.21994C21.15 9.21994 22.01 10.0699 22.01 11.1199V12.8799C22.01 13.9199 21.16 14.7799 20.11 14.7799C18.3 14.7799 17.56 16.0599 18.47 17.6299C18.99 18.5399 18.68 19.6999 17.77 20.2199L16.04 21.2099C15.25 21.6799 14.23 21.3999 13.76 20.6099L13.65 20.4199C12.75 18.8499 11.27 18.8499 10.36 20.4199L10.25 20.6099C9.78 21.3999 8.76 21.6799 7.97 21.2099L6.24 20.2199C5.33 19.6999 5.02 18.5299 5.54 17.6299C6.45 16.0599 5.71 14.7799 3.9 14.7799C2.85 14.7799 2 13.9199 2 12.8799Z\" stroke=\"#fff\" stroke-width=\"1.5\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>            \n            </div>\n            <div class=\"navigation-bar__label\">#{menu_settings}</div>\n        </div> -->\n    </div>\n</div>";

  var html$B = "<div class=\"head-backward selector\">\n    <div class=\"head-backward__button\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"512\" height=\"512\" x=\"0\" y=\"0\" viewBox=\"0 0 492 492\" xml:space=\"preserve\">\n            <path d=\"M198.608 246.104 382.664 62.04c5.068-5.056 7.856-11.816 7.856-19.024 0-7.212-2.788-13.968-7.856-19.032l-16.128-16.12C361.476 2.792 354.712 0 347.504 0s-13.964 2.792-19.028 7.864L109.328 227.008c-5.084 5.08-7.868 11.868-7.848 19.084-.02 7.248 2.76 14.028 7.848 19.112l218.944 218.932c5.064 5.072 11.82 7.864 19.032 7.864 7.208 0 13.964-2.792 19.032-7.864l16.124-16.12c10.492-10.492 10.492-27.572 0-38.06L198.608 246.104z\" fill=\"currentColor\"></path>\n        </svg>\n    </div>\n    <div class=\"head-backward__title\">{title}</div>\n</div>";

  var html$A = "<div class=\"account-add-device\">\n    <img src=\"./icons/qr-auth.png\" class=\"account-add-device__qr\" />\n\n    <div class=\"about\">\n        #{account_code_where}\n    </div> \n\n        <div class=\"about-info\">\n        #{account_code_info}\n    </div> \n\n    <div class=\"simple-button selector\">#{account_code_input}</div>\n</div>";

  var html$z = "<div class=\"feed-item layer--visible\">\n    <div class=\"feed-item__head\">\n        <div class=\"feed-item__icon\">\n            <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M9 0L11.4308 6.56918L18 9L11.4308 11.4308L9 18L6.56918 11.4308L0 9L6.56918 6.56918L9 0Z\" fill=\"currentColor\"/>\n            </svg>\n        </div>\n        <div class=\"feed-item__label\"></div>\n    </div>\n\n    <div class=\"feed-item__right\">\n        <div class=\"feed-item__poster-box\">\n            <img class=\"feed-item__poster-img\" />\n        </div>\n    </div>\n\n    <div class=\"feed-item__body\">\n        <div class=\"feed-item__title\"></div>\n        <div class=\"feed-item__info\"></div>\n        <div class=\"feed-item__descr\"></div>\n        <div class=\"feed-item__tags\"></div>\n        <div class=\"feed-item__buttons\"></div>\n    </div>\n</div>";

  var html$y = "<div class=\"feed-head selector layer--visible\">\n    <div class=\"feed-head__icon\">\n        <img src=\"http://cub.watch/img/other/prisma_movie.jpg\" class=\"feed-head__img\" />\n    </div>\n\n    <div class=\"feed-head__body\">\n        <div class=\"feed-head__title\"></div>\n        <div class=\"feed-head__info\"></div>\n    </div>\n</div>";

  var html$x = "<div class=\"feed-item layer--visible\">\n    <div class=\"feed-item__head\">\n        <div class=\"feed-item__icon\">\n            <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M9 0L11.4308 6.56918L18 9L11.4308 11.4308L9 18L6.56918 11.4308L0 9L6.56918 6.56918L9 0Z\" fill=\"currentColor\"/>\n            </svg>\n        </div>\n        <div class=\"feed-item__label\"></div>\n    </div>\n\n    <div class=\"feed-item__right\">\n        <div class=\"feed-item__image-box\">\n            <img class=\"feed-item__image-img\" />\n        </div>\n        <div class=\"feed-item__minicard\">\n            <div>\n                <div class=\"feed-item__title\"></div>\n                <div class=\"feed-item__info\"></div>\n            </div>\n            <div class=\"feed-item__minicard-poster\">\n                <div class=\"feed-item__poster-box\">\n                    <img class=\"feed-item__poster-img\" />\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"feed-item__body\">\n        <div class=\"feed-item__descr\"></div>\n        <div class=\"feed-item__tags\"></div>\n        <div class=\"feed-item__buttons\"></div>\n    </div>\n</div>";

  var html$w = "<div class=\"register\">\n    <div class=\"register__name\"></div>\n    <div class=\"register__counter\"></div>\n</div>";

  var html$v = "<div class=\"speedtest\">\n    <div class=\"speedtest__body\">\n        <svg viewBox=\"-250 -250 500 305\" width=\"100%\">\n            <g class=\"scale\">\n                <circle r=\"200\" fill=\"none\" stroke-width=\"15\" class=\"speedtest__progress\" id=\"speedtest_progress\"></circle>\n                <circle r=\"200\" fill=\"none\" stroke-width=\"5\" stroke=\"currentColor\" class=\"speedtest__frequency\"></circle>\n                <circle r=\"200\" fill=\"none\" stroke-width=\"10\" class=\"speedtest__fill\"></circle>\n            </g>\n        \n            <path d=\"m-220 0 a120 -120 0 0 1 440 0\" fill=\"none\" stroke=\"blue\" stroke-width=\"0\" id=\"speedtest_path\"></path>\n\n            <text font-size=\"20px\" x=\"0\">\n                <textpath href=\"#speedtest_path\" data-text=\"0\">0</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"69\">\n                <textpath href=\"#speedtest_path\" data-text=\"5\">5</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"139\">\n                <textpath href=\"#speedtest_path\" data-text=\"10\">10</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"216\">\n                <textpath href=\"#speedtest_path\" data-text=\"15\">15</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"293\">\n                <textpath href=\"#speedtest_path\" data-text=\"20\">20</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"371\">\n                <textpath href=\"#speedtest_path\" data-text=\"30\">30</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"447\">\n                <textpath href=\"#speedtest_path\" data-text=\"60\">60</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"515\">\n                <textpath href=\"#speedtest_path\" data-text=\"100\">100</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"595\">\n                <textpath href=\"#speedtest_path\" data-text=\"200\">200</textpath>\n            </text>\n            <text font-size=\"20px\" x=\"655\">\n                <textpath href=\"#speedtest_path\" data-text=\"500\">500</textpath>\n            </text>\n        \n            <text id=\"speedtest_num\" text-anchor=\"middle\" alignment-baseline=\"central\" y=\"-80\" font-size=\"70\">0.000</text>\n            <text id=\"speedtest_num-text\" text-anchor=\"middle\" alignment-baseline=\"central\" y=\"-20\" font-size=\"25\">Mbps</text>\n            <text id=\"speedtest_status\" text-anchor=\"middle\" alignment-baseline=\"central\" y=\"35\" font-size=\"20\"></text>\n        </svg>\n\n        <svg viewBox=\"-250 -300 500 55\" width=\"100%\">\n            <polyline id=\"speedtest_graph\" points=\"-250,-250\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"></polyline>\n        </svg>\n    </div>\n</div>";

  var html$u = "<div class=\"ad-bot selector\">\n    <div class=\"ad-bot__content\">\n        <div class=\"ad-bot__body\">\n            <div class=\"ad-bot__left\">\n                <div class=\"smart\">\n                    <div class=\"smart__camera\"></div>\n                    <div class=\"smart__power\"></div>\n                    <div class=\"smart__body\">\n                        <div class=\"ad-bot__imgbox\">\n                            <img class=\"ad-bot__img\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ad-bot__right\">\n                <div class=\"ad-bot__title\"></div>\n                <div class=\"ad-bot__text\"></div>\n                <div class=\"ad-bot__more\"></div>\n            </div>\n        </div>\n\n        <div class=\"ad-bot__marker\"></div>\n    </div>\n    <div class=\"ad-bot__info\"></div>\n</div>";

  var html$t = "<div class=\"ad-video-block\">\n<div class=\"ad-video-block__loader\"></div>\n\n    <video class=\"ad-video-block__video\" type=\"video/mp4\" poster=\"./img/video_poster.png\" crossorigin=\"anonymous\" playsinline></video>\n\n    <div class=\"ad-video-block__vast\"></div>\n\n    <div class=\"player-video__paused hide\">\n        <svg width=\"19\" height=\"25\" viewBox=\"0 0 19 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"6\" height=\"25\" rx=\"2\" fill=\"white\"></rect>\n            <rect x=\"13\" width=\"6\" height=\"25\" rx=\"2\" fill=\"white\"></rect>\n        </svg>\n    </div>\n\n    <div class=\"ad-video-block__footer\">\n        <div class=\"ad-video-block__text\"></div>\n        <div class=\"ad-video-block__progress\">\n            <div class=\"ad-video-block__progress-fill\"></div>\n        </div>\n    </div>\n\n    <div class=\"ad-video-block__info\"></div>\n\n    <div class=\"ad-video-block__skip\"><span></span></div>\n</div>";

  var html$s = "<div class=\"discuss-rules\">\n    <div class=\"discuss-rules__body\">\n        <!-- <div class=\"discuss-rules__title\">\n            #{discuss_rules_title}\n        </div> -->\n\n        <!-- <div class=\"discuss-rules__items\">\n            <div>#{discuss_rules_rule_1}</div>\n            <div>#{discuss_rules_rule_2}</div>\n            <div>#{discuss_rules_rule_3}</div>\n            <div>#{discuss_rules_rule_4}</div>\n            <div>#{discuss_rules_rule_5}</div>\n            <div>#{discuss_rules_rule_6}</div>\n            <div>#{discuss_rules_rule_7}</div>\n        </div> -->\n    </div> \n</div>";

  var html$r = "<div class=\"bookmarks-folder card selector layer--visible layer--render\">\n    <div class=\"bookmarks-folder__inner card__view\">\n        <div class=\"bookmarks-folder__layer\">\n            <div class=\"bookmarks-folder__head\">\n                <div class=\"bookmarks-folder__title\"></div>\n                <div class=\"bookmarks-folder__num\"></div>\n            </div>\n\n            <div class=\"bookmarks-folder__body\"></div>\n        </div>\n    </div>\n</div>";

  var html$q = "<div class=\"ai-search-animation\">\n    <div class=\"ai-search-animation__data\">{icon}</div>\n    <div class=\"ai-search-animation__loupe\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"100\" height=\"100\" viewBox=\"0 0 50 50\" fill=\"currentColor\">\n                        <path d=\"M45.403,25.562c-0.506-1.89-1.518-3.553-2.906-4.862c1.134-2.665,0.963-5.724-0.487-8.237\tc-1.391-2.408-3.636-4.131-6.322-4.851c-1.891-0.506-3.839-0.462-5.669,0.088C28.276,5.382,25.562,4,22.647,4\tc-4.906,0-9.021,3.416-10.116,7.991c-0.01,0.001-0.019-0.003-0.029-0.002c-2.902,0.36-5.404,2.019-6.865,4.549\tc-1.391,2.408-1.76,5.214-1.04,7.9c0.507,1.891,1.519,3.556,2.909,4.865c-1.134,2.666-0.97,5.714,0.484,8.234\tc1.391,2.408,3.636,4.131,6.322,4.851c0.896,0.24,1.807,0.359,2.711,0.359c1.003,0,1.995-0.161,2.957-0.45\tC21.722,44.619,24.425,46,27.353,46c4.911,0,9.028-3.422,10.12-8.003c2.88-0.35,5.431-2.006,6.891-4.535\tC45.754,31.054,46.123,28.248,45.403,25.562z M35.17,9.543c2.171,0.581,3.984,1.974,5.107,3.919c1.049,1.817,1.243,4,0.569,5.967\tc-0.099-0.062-0.193-0.131-0.294-0.19l-9.169-5.294c-0.312-0.179-0.698-0.177-1.01,0.006l-10.198,6.041l-0.052-4.607l8.663-5.001\tC30.733,9.26,33,8.963,35.17,9.543z M29.737,22.195l0.062,5.504l-4.736,2.805l-4.799-2.699l-0.062-5.504l4.736-2.805L29.737,22.195z M14.235,14.412C14.235,9.773,18.009,6,22.647,6c2.109,0,4.092,0.916,5.458,2.488C28,8.544,27.891,8.591,27.787,8.651l-9.17,5.294\tc-0.312,0.181-0.504,0.517-0.5,0.877l0.133,11.851l-4.015-2.258V14.412z M6.528,23.921c-0.581-2.17-0.282-4.438,0.841-6.383\tc1.06-1.836,2.823-3.074,4.884-3.474c-0.004,0.116-0.018,0.23-0.018,0.348V25c0,0.361,0.195,0.694,0.51,0.872l10.329,5.81\tL19.11,34.03l-8.662-5.002C8.502,27.905,7.11,26.092,6.528,23.921z M14.83,40.457c-2.171-0.581-3.984-1.974-5.107-3.919\tc-1.053-1.824-1.249-4.001-0.573-5.97c0.101,0.063,0.196,0.133,0.299,0.193l9.169,5.294c0.154,0.089,0.327,0.134,0.5,0.134\tc0.177,0,0.353-0.047,0.51-0.14l10.198-6.041l0.052,4.607l-8.663,5.001C19.269,40.741,17.001,41.04,14.83,40.457z M35.765,35.588\tc0,4.639-3.773,8.412-8.412,8.412c-2.119,0-4.094-0.919-5.459-2.494c0.105-0.056,0.216-0.098,0.32-0.158l9.17-5.294\tc0.312-0.181,0.504-0.517,0.5-0.877L31.75,23.327l4.015,2.258V35.588z M42.631,32.462c-1.056,1.83-2.84,3.086-4.884,3.483\tc0.004-0.12,0.018-0.237,0.018-0.357V25c0-0.361-0.195-0.694-0.51-0.872l-10.329-5.81l3.964-2.348l8.662,5.002\tc1.946,1.123,3.338,2.937,3.92,5.107C44.053,28.249,43.754,30.517,42.631,32.462z\"></path>\n                    </svg>\n    </div>\n</div>";

  var html$p = "\n<div class=\"news-cards-info\">\n    <div class=\"news-cards-info__body\">\n        <div class=\"news-cards-info__logo\"></div>\n        <div class=\"news-cards-info__title\"></div>\n        <div class=\"news-cards-info__description\"></div>\n    </div>\n    <div class=\"news-cards-info__age-restriction\"></div>\n    <div class=\"news-cards-info__footer\">\n        <div class=\"news-cards-info__head\"></div>\n        <div class=\"news-cards-info__meta\"></div>\n    </div>\n</div>\n";

  var html$o = "<div class=\"remote-helper\">\n    <div class=\"remote-helper__textbox\">\n        <div class=\"remote-helper__text\">{text}</div>\n    </div>\n    <div class=\"remote-helper__remote\">\n        <svg width=\"156\" height=\"424\" viewBox=\"0 0 156 424\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect width=\"154\" height=\"424\" rx=\"12\" fill=\"white\" fill-opacity=\"0.3\"/>\n            <rect x=\"146\" y=\"97\" width=\"10\" height=\"55\" rx=\"4\" fill=\"#9D9D9D\" fill-opacity=\"0.5\"/>\n            <rect x=\"2\" y=\"2\" width=\"150\" height=\"420\" rx=\"12\" fill=\"#1C1C1C\" fill-opacity=\"0.9\"/>\n            <path class=\"remote-helper__button-ok\" d=\"M77 162C97.9868 162 115 144.987 115 124C115 103.013 97.9868 86 77 86C56.0132 86 39 103.013 39 124C39 144.987 56.0132 162 77 162Z\" fill=\"#595959\" fill-opacity=\"0.51\"/>\n            <circle class=\"remote-helper__button-back\" cx=\"41.1304\" cy=\"238.087\" r=\"26.087\" fill=\"#8C8C8C\" fill-opacity=\"0.55\"/>\n            <circle class=\"remote-helper__button-right\" cx=\"110.261\" cy=\"238.087\" r=\"26.087\" fill=\"#8C8C8C\" fill-opacity=\"0.55\"/>\n            <circle cx=\"128.522\" cy=\"30.6956\" r=\"7.82609\" fill=\"#FF0000\"/>\n            <path d=\"M128.522 18.9565C126.458 18.9565 124.44 19.5685 122.724 20.7151C121.008 21.8617 119.671 23.4914 118.881 25.3981C118.091 27.3048 117.885 29.4029 118.287 31.427C118.69 33.4512 119.684 35.3105 121.143 36.7699C122.603 38.2292 124.462 39.223 126.486 39.6256C128.51 40.0283 130.608 39.8216 132.515 39.0319C134.422 38.2421 136.051 36.9046 137.198 35.1885C138.344 33.4725 138.956 31.4551 138.956 29.3912C138.956 26.6238 137.857 23.9697 135.9 22.0128C133.943 20.0558 131.289 18.9565 128.522 18.9565ZM127.444 24.2906C127.444 24.1491 127.472 24.0089 127.526 23.8782C127.58 23.7474 127.66 23.6286 127.76 23.5285C127.86 23.4284 127.978 23.349 128.109 23.2948C128.24 23.2407 128.38 23.2128 128.522 23.2128C128.663 23.2128 128.803 23.2407 128.934 23.2948C129.065 23.349 129.184 23.4284 129.284 23.5285C129.384 23.6286 129.463 23.7474 129.517 23.8782C129.572 24.0089 129.6 24.1491 129.6 24.2906V28.967C129.6 29.1086 129.572 29.2487 129.517 29.3795C129.463 29.5103 129.384 29.6291 129.284 29.7292C129.184 29.8293 129.065 29.9087 128.934 29.9628C128.803 30.017 128.663 30.0449 128.522 30.0449C128.38 30.0449 128.24 30.017 128.109 29.9628C127.978 29.9087 127.86 29.8293 127.76 29.7292C127.66 29.6291 127.58 29.5103 127.526 29.3795C127.472 29.2487 127.444 29.1086 127.444 28.967V24.2906ZM128.522 35.5698C127.246 35.5698 126.003 35.1723 124.964 34.4328C123.925 33.6933 123.142 32.6485 122.724 31.4436C122.307 30.2387 122.275 28.9336 122.633 27.7098C122.992 26.4858 123.722 25.404 124.724 24.6146C124.874 24.4986 125.058 24.4358 125.247 24.4361C125.424 24.4342 125.597 24.4878 125.741 24.5894C125.886 24.6911 125.995 24.8356 126.053 25.0025C126.111 25.1695 126.115 25.3505 126.064 25.5198C126.014 25.6892 125.911 25.8385 125.772 25.9464C125.045 26.5182 124.516 27.302 124.255 28.1888C123.996 29.0757 124.018 30.0215 124.321 30.8948C124.623 31.768 125.19 32.5253 125.943 33.0614C126.696 33.5973 127.597 33.8854 128.522 33.8854C129.446 33.8854 130.347 33.5973 131.1 33.0614C131.853 32.5253 132.42 31.768 132.723 30.8948C133.025 30.0215 133.048 29.0757 132.788 28.1888C132.528 27.302 131.998 26.5182 131.272 25.9464C131.133 25.838 131.031 25.6887 130.981 25.5197C130.931 25.3506 130.936 25.1701 130.993 25.0035C131.051 24.837 131.16 24.6927 131.304 24.5909C131.448 24.4891 131.62 24.435 131.796 24.4361C131.985 24.435 132.169 24.4991 132.317 24.6174C133.318 25.4064 134.048 26.4879 134.407 27.7112C134.765 28.9346 134.733 30.2392 134.316 31.4437C133.898 32.6482 133.116 33.6928 132.078 34.4323C131.039 35.1716 129.796 35.5692 128.522 35.5698Z\" fill=\"#595959\"/>\n            <path d=\"M146.783 123.957C146.783 162.496 115.54 193.739 77 193.739C38.4601 193.739 7.21741 162.496 7.21741 123.957C7.21741 85.4167 38.4601 54.174 77 54.174C115.54 54.174 146.783 85.4167 146.783 123.957ZM37.6306 123.957C37.6306 145.7 55.2569 163.326 77 163.326C98.7431 163.326 116.369 145.7 116.369 123.957C116.369 102.213 98.7431 84.5871 77 84.5871C55.2569 84.5871 37.6306 102.213 37.6306 123.957Z\" fill=\"#8C8C8C\" fill-opacity=\"0.55\"/>\n            <circle cx=\"41.1304\" cy=\"298.087\" r=\"26.087\" fill=\"#8C8C8C\" fill-opacity=\"0.55\"/>\n            <circle cx=\"41.1304\" cy=\"359.391\" r=\"26.087\" fill=\"#8C8C8C\" fill-opacity=\"0.55\"/>\n            <rect x=\"86.7826\" y=\"272\" width=\"48.2609\" height=\"113.478\" rx=\"24.1304\" fill=\"#8C8C8C\" fill-opacity=\"0.55\"/>\n            <circle class=\"remote-helper__button-up\" cx=\"77\" cy=\"60.0434\" r=\"1.95652\" fill=\"white\"/>\n            <circle class=\"remote-helper__button-down\" cx=\"77\" cy=\"187.87\" r=\"1.95652\" fill=\"white\"/>\n            <circle class=\"remote-helper__button-right\" cx=\"142.217\" cy=\"123.957\" r=\"1.95652\" fill=\"white\"/>\n            <circle class=\"remote-helper__button-left\" cx=\"13.087\" cy=\"123.957\" r=\"1.95652\" fill=\"white\"/>\n            <rect x=\"71.1304\" y=\"25.4783\" width=\"13.0435\" height=\"2.6087\" rx=\"1\" fill=\"#3C3C3C\"/>\n            <rect x=\"110.261\" y=\"290.261\" width=\"1.30435\" height=\"14.3478\" fill=\"#D9D9D9\"/>\n            <rect x=\"33.3043\" y=\"239.072\" width=\"1.30435\" height=\"12.6173\" transform=\"rotate(-49.0556 33.3043 239.072)\" fill=\"#D9D9D9\"/>\n            <rect x=\"34.0477\" y=\"239.71\" width=\"1.30435\" height=\"13.561\" transform=\"rotate(-139.556 34.0477 239.71)\" fill=\"#D9D9D9\"/>\n            <rect x=\"118.087\" y=\"296.783\" width=\"1.30435\" height=\"14.3478\" transform=\"rotate(90 118.087 296.783)\" fill=\"#D9D9D9\"/>\n            <rect x=\"118.087\" y=\"360.696\" width=\"1.30435\" height=\"14.3478\" transform=\"rotate(90 118.087 360.696)\" fill=\"#D9D9D9\"/>\n        </svg>\n    </div>\n</div>";

  var templates = {
    head: html$27,
    wrap: html$26,
    menu: html$25,
    activitys: html$24,
    activity: html$23,
    activity_wait_refresh: html$22,
    settings: html$20,
    settings_main: html$1$,
    settings_interface: html$1_,
    settings_parser: html$1Z,
    settings_server: html$1Y,
    settings_player: html$1X,
    settings_more: html$1W,
    settings_tmdb: html$1V,
    settings_plugins: html$1U,
    settings_account: html$1T,
    scroll: html$21,
    items_line: html$1S,
    card: html$1R,
    card_parser: html$1Q,
    card_watched: html$1P,
    card_episode: html$1O,
    full_start: html$1N,
    full_start_new: html$1M,
    full_descr: html$1L,
    full_person: html$1K,
    full_review: html$1J,
    review_selector: html$1I,
    full_episode: html$1H,
    player: html$1G,
    player_panel: html$1F,
    player_video: html$1E,
    player_info: html$1D,
    player_footer: html$1C,
    player_footer_card: html$1B,
    selectbox: html$1A,
    selectbox_item: html$1z,
    info: html$1x,
    more: html$1v,
    back: html$1u,
    search: html$1t,
    settings_input: html$1s,
    modal: html$1r,
    company: html$1q,
    modal_loading: html$1p,
    modal_pending: html$1o,
    person_start: html$1n,
    empty: html$1m,
    empty_filter: html$1l,
    notice: html$1k,
    notice_card: html$1j,
    torrent: html$1i,
    torrent_file: html$1h,
    files: html$1g,
    about: html$1f,
    error: html$1e,
    torrent_noconnect: html$1a,
    torrent_file_serial: html$15,
    torrent_nocheck: html$19,
    torrent_nohash: html$18,
    torrent_install: html$17,
    torrent_error: html$16,
    filter: html$1w,
    search_box: html$14,
    console: html$13,
    icon_star: html$12,
    icon_viewed: html$11,
    icon_lock: html$10,
    icon_like: html$$,
    icon_text: html$_,
    icon_card: html$Z,
    timeline: html$Y,
    timeline_details: html$X,
    list_empty: html$W,
    screensaver: html$V,
    plugins_catalog: html$U,
    broadcast: html$T,
    lang_choice: html$S,
    extensions: html$R,
    extensions_block: html$Q,
    extensions_item: html$P,
    extensions_recomend: html$O,
    extensions_info: html$N,
    extensions_theme: html$M,
    extensions_screensaver: html$L,
    iframe: html$K,
    account: html$J,
    account_limited: html$I,
    prisma_premium: html$H,
    prisma_premium_modal: html$G,
    selectbox_icon: html$1y,
    explorer: html$F,
    explorer_button_back: html$E,
    https: html$D,
    navigation_bar: html$C,
    head_backward: html$B,
    account_add_device: html$A,
    feed_item: html$z,
    feed_head: html$y,
    feed_episode: html$x,
    register: html$w,
    speedtest: html$v,
    season_episode: html$1d,
    season_episode_rate: html$1c,
    season_info: html$1b,
    ad_bot: html$u,
    ad_video_block: html$t,
    discuss_rules: html$s,
    bookmarks_folder: html$r,
    ai_search_animation: html$q,
    news_cards: html$p,
    remote_helper: html$o
  };
  var created = {};
  function get$e(name) {
    var vars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var like_static = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var tpl = templates[name];
    if (!tpl) throw 'Template [' + name + '] not found';
    tpl = Lang.translate(tpl);
    for (var n in vars) {
      tpl = tpl.replace(new RegExp('{' + n + '}', 'g'), vars[n]);
    }
    tpl = tpl.replace(/{\@([a-z_-]+)}/g, function (e, s) {
      return templates[s] || '';
    });
    return like_static ? tpl : $(tpl);
  }
  function build$a(tree) {
    function create(item) {
      var elem = item.elem.cloneNode(); //document.createElement(item.tag)

      /*
      if(!item.elem && item.attributes){
          for(let i = 0; i < item.attributes.length; i++){
              elem.setAttribute(item.attributes[i].name, item.attributes[i].value)
          }
      }
      */

      item.clildrens.forEach(function (child_data) {
        var child = create(child_data);
        elem.appendChild(child);
      });
      return elem;
    }
    var root = create(tree);
    return root;
  }
  function js(name, vars) {
    if (!created[name]) {
      var _extract = function extract(elem) {
        var data = {
          tag: elem.tagName,
          attributes: elem.attributes,
          elem: elem,
          clildrens: []
        };
        for (var i = 0; i < elem.childNodes.length; i++) {
          if (elem.childNodes[i].tagName) data.clildrens.push(_extract(elem.childNodes[i]));
        }
        return data;
      };
      var tpl = get$e(name);
      var tree = _extract(tpl[0]);
      created[name] = tree;
    }
    return build$a(created[name]);
  }
  function add$d(name, html) {
    templates[name] = html;
  }
  function all$4() {
    return templates;
  }
  var Template = {
    get: get$e,
    js: js,
    add: add$d,
    all: all$4
  };

  var Base64 = {
    // private property
    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    // public method for encoding
    encode: function encode(input) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;
      input = Base64._utf8_encode(input);
      while (i < input.length) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
        enc4 = chr3 & 63;
        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
          enc4 = 64;
        }
        output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
      }
      return output;
    },
    // public method for decoding
    decode: function decode(input) {
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      while (i < input.length) {
        enc1 = this._keyStr.indexOf(input.charAt(i++));
        enc2 = this._keyStr.indexOf(input.charAt(i++));
        enc3 = this._keyStr.indexOf(input.charAt(i++));
        enc4 = this._keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output = output + String.fromCharCode(chr1);
        if (enc3 != 64) {
          output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
          output = output + String.fromCharCode(chr3);
        }
      }
      output = Base64._utf8_decode(output);
      return output;
    },
    // private method for UTF-8 encoding
    _utf8_encode: function _utf8_encode(string) {
      string = string.replace(/\r\n/g, "\n");
      var utftext = "";
      for (var n = 0; n < string.length; n++) {
        var c = string.charCodeAt(n);
        if (c < 128) {
          utftext += String.fromCharCode(c);
        } else if (c > 127 && c < 2048) {
          utftext += String.fromCharCode(c >> 6 | 192);
          utftext += String.fromCharCode(c & 63 | 128);
        } else {
          utftext += String.fromCharCode(c >> 12 | 224);
          utftext += String.fromCharCode(c >> 6 & 63 | 128);
          utftext += String.fromCharCode(c & 63 | 128);
        }
      }
      return utftext;
    },
    // private method for UTF-8 decoding
    _utf8_decode: function _utf8_decode(utftext) {
      var string = "";
      var i = 0;
      var c = 0;
      var c2 = 0;
      var c3 = 0;
      while (i < utftext.length) {
        c = utftext.charCodeAt(i);
        if (c < 128) {
          string += String.fromCharCode(c);
          i++;
        } else if (c > 191 && c < 224) {
          c2 = utftext.charCodeAt(i + 1);
          string += String.fromCharCode((c & 31) << 6 | c2 & 63);
          i += 2;
        } else {
          c2 = utftext.charCodeAt(i + 1);
          c3 = utftext.charCodeAt(i + 2);
          string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
          i += 3;
        }
      }
      return string;
    }
  };

  var html$n = $('<div class="noty"><div class="noty__body"><div class="noty__text"></div></div></div>'),
    body$3 = html$n.find('.noty__text'),
    time$4;

  // Добавляем noty в body при инициализации
  $('body').append(html$n);
  function show$b(text) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    clearTimeout(time$4);
    html$n.attr('class', 'noty');
    if (params.style) html$n.addClass('noty--style--' + params.style);
    time$4 = setTimeout(function () {
      html$n.removeClass('noty--visible');
    }, params.time || 3000);
    body$3.html(text);
    html$n.addClass('noty--visible');
  }
  function render$i() {
    return html$n;
  }
  var Noty$1 = {
    show: show$b,
    render: render$i
  };

  var card_fields = ['poster_path', 'overview', 'release_date', 'genre_ids', 'id', 'original_title', 'original_language', 'title', 'backdrop_path', 'popularity', 'vote_count', 'vote_average', 'imdb_id', 'kinopoisk_id', 'original_name', 'name', 'first_air_date', 'origin_country', 'status', 'pg', 'release_quality', 'imdb_rating', 'kp_rating', 'source', 'number_of_seasons', 'number_of_episodes', 'next_episode_to_air', 'img', 'poster', 'background_image'];

  /**
   * Преобразование секунд в формат времени
   * @doc
   * @name secondsToTime
   * @alias Utils
   * @param {integer} sec время в секундах
   * @param {boolean} short короткое время
   * @returns {string} (hours : minutes : seconds) или (minutes : seconds)
   */

  function secondsToTime(sec, _short) {
    var sec_num = parseInt(sec, 10);
    var hours = Math.floor(sec_num / 3600);
    var minutes = Math.floor((sec_num - hours * 3600) / 60);
    var seconds = sec_num - hours * 3600 - minutes * 60;
    if (hours < 10) {
      hours = "0" + hours;
    }
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    if (isNaN(hours)) hours = '00';
    if (isNaN(minutes)) minutes = '00';
    if (isNaN(seconds)) seconds = '00';
    if (_short) return hours + ':' + minutes;
    return hours + ':' + minutes + ':' + seconds;
  }

  /**
   * Преабразует первую букву строки в верхний регистр
   * @doc
   * @name capitalizeFirstLetter
   * @alias Utils
   * @param {string} string значение
   * @returns {string}
   */

  function capitalizeFirstLetter(string) {
    string = string + '';
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  /**
   * Сокращает строку до указанной длины
   * @doc
   * @name substr
   * @alias Utils
   * @param {string} txt текст
   * @param {integer} len длина
   * @returns {string}
   */

  function substr(txt, len) {
    txt = txt || '';
    return txt.length > len ? txt.substr(0, len) + '...' : txt;
  }
  function numberWithSpaces(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
  }
  function declOfNum(n, text_forms) {
    n = Math.abs(n) % 100;
    var n1 = n % 10;
    if (n > 10 && n < 20) {
      return text_forms[2];
    }
    if (n1 > 1 && n1 < 5) {
      return text_forms[1];
    }
    if (n1 == 1) {
      return text_forms[0];
    }
    return text_forms[2];
  }
  function bytesToSize(bytes, speed) {
    if (bytes == 0) {
      return Lang.translate('size_zero');
    }
    var unitMultiple = 1024;
    var unitNames = [Lang.translate('size_byte'), Lang.translate('size_kb'), Lang.translate('size_mb'), Lang.translate('size_gb'), Lang.translate('size_tb'), Lang.translate('size_pp')];
    if (speed) {
      unitMultiple = 1000;
      unitNames = [Lang.translate('speed_bit'), Lang.translate('speed_kb'), Lang.translate('speed_mb'), Lang.translate('speed_gb'), Lang.translate('speed_tb'), Lang.translate('speed_pp')];
    }
    var unitChanges = Math.floor(Math.log(bytes) / Math.log(unitMultiple));
    return parseFloat((bytes / Math.pow(unitMultiple, unitChanges)).toFixed(2)) + ' ' + unitNames[unitChanges];
  }
  function sizeToBytes(str) {
    var gsize = str.match(/([0-9\\.,]+)\s+(Mb|МБ|GB|ГБ|TB|ТБ)/i);
    if (gsize) {
      var size = parseFloat(gsize[1].replace(',', '.'));
      if (/gb|гб/.test(gsize[2].toLowerCase())) size *= 1024;
      if (/tb|тб/.test(gsize[2].toLowerCase())) size *= 1048576;
      return size * 1048576;
    }
    return 0;
  }
  function calcBitrate(byteSize, minutes) {
    if (!minutes) return 0;
    var sec = minutes * 60;
    var bitSize = byteSize * 8;
    return (bitSize / Math.pow(1000, 2) / sec).toFixed(2);
  }
  function getMoths(ended) {
    var need = ended ? '_e' : '';
    var all = [];
    for (var i = 1; i <= 12; i++) {
      all.push(Lang.translate('month_' + i + need));
    }
    return all;
  }
  function time$3(html) {
    var create = function create() {
      var where = html instanceof jQuery ? html[0] : html;
      var months = getMoths();
      var months_end = getMoths(true);
      var days = [Lang.translate('day_7'), Lang.translate('day_1'), Lang.translate('day_2'), Lang.translate('day_3'), Lang.translate('day_4'), Lang.translate('day_5'), Lang.translate('day_6')];
      var elem_clock = where.querySelector('.time--clock');
      var elem_week = where.querySelector('.time--week');
      var elem_day = where.querySelector('.time--day');
      var elem_moth = where.querySelector('.time--moth');
      var elem_full = where.querySelector('.time--full');
      this.tik = function () {
        var date = new Date(),
          time = date.getTime(),
          ofst = parseInt((localStorage.getItem('time_offset') == null ? 'n0' : localStorage.getItem('time_offset')).replace('n', ''));
        date = new Date(time + ofst * 1000 * 60 * 60);
        time = [date.getHours(), date.getMinutes(), date.getSeconds(), date.getFullYear()];
        if (time[0] < 10) {
          time[0] = "0" + time[0];
        }
        if (time[1] < 10) {
          time[1] = "0" + time[1];
        }
        if (time[2] < 10) {
          time[2] = "0" + time[2];
        }
        var current_time = [time[0], time[1]].join(':'),
          current_week = date.getDay(),
          current_day = date.getDate();
        if (elem_clock) elem_clock.innerText = current_time;
        if (elem_week) elem_week.innerText = days[current_week];
        if (elem_day) elem_day.innerText = current_day;
        if (elem_moth) elem_moth.innerText = months[date.getMonth()];
        if (elem_full) elem_full.innerText = current_day + ' ' + months_end[date.getMonth()] + ' ' + time[3];
      };
      this.timer = setInterval(this.tik.bind(this), 60000);
      this.tik();
    };
    return new create();
  }
  function parseToDate(str) {
    if (typeof str == 'string') {
      str = str.toLowerCase().split('t')[0].replace(/-/g, '/');
    }
    return new Date(str);
  }
  function parseTime(str) {
    var months = getMoths();
    var months_end = getMoths(true);
    var days = [Lang.translate('day_7'), Lang.translate('day_1'), Lang.translate('day_2'), Lang.translate('day_3'), Lang.translate('day_4'), Lang.translate('day_5'), Lang.translate('day_6')];
    var date = parseToDate(str);
    var time = [date.getHours(), date.getMinutes(), date.getSeconds(), date.getFullYear()];
    if (time[0] < 10) {
      time[0] = "0" + time[0];
    }
    if (time[1] < 10) {
      time[1] = "0" + time[1];
    }
    if (time[2] < 10) {
      time[2] = "0" + time[2];
    }
    var current_time = [time[0], time[1]].join(':'),
      current_week = date.getDay(),
      current_day = date.getDate();
    return {
      time: current_time,
      week: days[current_week],
      day: current_day,
      mouth: months[date.getMonth()],
      full: current_day + ' ' + months_end[date.getMonth()] + (new Date().getFullYear() == time[3] ? '' : ' ' + time[3]),
      "short": current_day + ' ' + months_end[date.getMonth()],
      briefly: current_day + ' ' + months_end[date.getMonth()] + ' ' + current_time
    };
  }

  // function secondsToTimeHuman(sec_num) {
  //     let hours   = Math.trunc(sec_num / 3600)
  //     let minutes = Math.floor((sec_num - hours * 3600) / 60)

  //     return (hours ? hours + ' '+Lang.translate('time_h')+' ' : '') + (minutes ? minutes + ' '+Lang.translate('time_m')+' ' : Math.round(sec_num) + ' '+Lang.translate('time_s'))
  // }

  function secondsToTimeHuman(sec_num) {
    var hours = Math.trunc(sec_num / 3600);
    var minutes = Math.trunc(sec_num % 3600 / 60); // Остаток от деления используется для вычисления минут
    var seconds = Math.round(sec_num % 60); // Остаток от деления для секунд

    return (hours ? hours + ' ' + Lang.translate('time_h') + ' ' : '') + (minutes ? minutes + ' ' + Lang.translate('time_m') + ' ' : '') + (hours === 0 && minutes === 0 ? seconds + ' ' + Lang.translate('time_s') : '');
  }
  function strToTime(str) {
    var date = new Date(str);
    return date.getTime();
  }
  function checkHttp(url, http_only) {
    url = url + '';
    if (url.indexOf("http://") == 0 || url.indexOf("https://") == 0) return url;
    url = (http_only ? 'http://' : protocol()) + url;
    return url;
  }
  function checkEmptyUrl(url) {
    url = url + '';
    if (url.indexOf("http://") == 0 || url.indexOf("https://") == 0) return url;
    url = (window.location.protocol == 'https:' ? 'https://' : 'http://') + url;
    return url;
  }
  function rewriteIfHTTPS(u) {
    return window.location.protocol == 'https:' ? u.replace(/^(http:\/\/|https:\/\/)/, 'https://') : u;
  }
  function fixProtocolLink(u) {
    return rewriteIfHTTPS((localStorage.getItem('protocol') || 'https') + '://' + u.replace(/^(http:\/\/|https:\/\/)/, ''));
  }
  function fixMirrorLink(u) {
    object$2.cub_mirrors.forEach(function (mirror) {
      u = u.replace('://' + mirror, '://' + object$2.cub_domain);
    });
    return u;
  }
  function shortText(fullStr, strLen, separator) {
    if (fullStr.length <= strLen) return fullStr;
    separator = separator || '...';
    var sepLen = separator.length,
      charsToShow = strLen - sepLen,
      frontChars = Math.ceil(charsToShow / 2),
      backChars = Math.floor(charsToShow / 2);
    return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);
  }
  function protocol() {
    return window.location.protocol == 'https:' ? 'https://' : (localStorage.getItem('protocol') || 'https') + '://';
  }
  function addUrlComponent(url, params) {
    return url + (/\?/.test(url) ? '&' : '?') + params;
  }
  function putScript(items, complite, error, success, show_logs) {
    var p = 0;
    var l = typeof show_logs !== 'undefined' ? show_logs : true;
    function next() {
      if (p == items.length) return complite();
      var u = items[p];
      if (!u) {
        p++;
        return next();
      }
      u = u.replace('cub.watch', Prisma.Manifest.cub_domain);
      if (l) console.log('Script', 'create:', u);
      var s = document.createElement('script');
      s.onload = function () {
        if (l) console.log('Script', 'include:', u);
        if (success) success(u);
        next();
      };
      s.onerror = function () {
        if (l) console.log('Script', 'error:', u);
        if (error) error(u);
        next();
      };
      s.setAttribute('src', u);
      document.body.appendChild(s);
      p++;
    }
    next();
  }
  function putScriptAsync(items, complite, error, success, show_logs) {
    var p = 0;
    var l = typeof show_logs !== 'undefined' ? show_logs : true;
    function check() {
      p++;
      if (p == items.length && complite) complite();
    }
    function put(u) {
      u = u.replace('cub.watch', Prisma.Manifest.cub_domain);
      if (l) console.log('Script', 'create:', u);
      var s = document.createElement('script');
      s.onload = function () {
        if (l) console.log('Script', 'include:', u);
        if (success) success(u);
        check();
      };
      s.onerror = function () {
        if (l) console.log('Script', 'error:', u);
        if (error) error(u);
        check();
      };
      s.setAttribute('src', u);
      document.body.appendChild(s);
    }
    for (var i = 0; i < items.length; i++) put(items[i]);
  }
  function putStyle(items, complite, error) {
    var p = 0;
    function next() {
      if (p >= items.length) return complite();
      var u = items[p];
      $.get(u, function (css) {
        css = css.replace(/\.\.\//g, './');
        var style = document.createElement('style');
        style.type = 'text/css';
        if (style.styleSheet) {
          // This is required for IE8 and below.
          style.styleSheet.cssText = css;
        } else {
          style.appendChild(document.createTextNode(css));
        }
        document.body.appendChild(style);
        next();
      }, function () {
        if (error) error(u);
        next();
      }, 'TEXT');
      p++;
    }
    next(items[0]);
  }
  function clearTitle(title) {
    return title.replace(/[^a-zа-я0-9\s]/gi, '');
  }
  function cardImgBackground(card_data) {
    if (Storage.field('background')) {
      if (Storage.field('background_type') == 'poster' && window.innerWidth > 790) {
        return card_data.backdrop_path ? Api.img(card_data.backdrop_path, 'w1280') : card_data.background_image ? card_data.background_image : '';
      }
      return card_data.poster_path || card_data.profile_path ? Api.img(card_data.poster_path || card_data.profile_path) : card_data.poster || card_data.img || '';
    }
    return '';
  }
  function cardImgBackgroundBlur(card_data) {
    var uri = card_data.poster_path || card_data.profile_path ? Api.img(card_data.poster_path || card_data.profile_path, 'w200') : card_data.poster || card_data.img || '';
    var pos = window.innerWidth > 400 && Storage.field('background_type') == 'poster' && !Storage.field('card_interfice_cover');
    if (Storage.field('background')) {
      if (card_data.backdrop_path) uri = Api.img(card_data.backdrop_path, pos ? 'w1280' : 'w200');else if (card_data.background_image && pos) uri = card_data.background_image;
    }
    return uri;
  }
  function stringToHslColor(str, s, l) {
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
      hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    var h = hash % 360;
    return 'hsl(' + h + ', ' + s + '%, ' + l + '%)';
  }
  function pathToNormalTitle(path) {
    var add_exe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var name = path.split('.');
    var exe = name[name.length - 1];
    name = name.join('.');
    return (name + '').replace(/_|\./g, ' ') + (add_exe ? ' <span class="exe">.' + exe + '</span>' : '');
  }
  function hash$2(input) {
    var str = (input || '') + '';
    var hash = 0;
    if (str.length == 0) return hash;
    for (var i = 0; i < str.length; i++) {
      var _char = str.charCodeAt(i);
      hash = (hash << 5) - hash + _char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash) + '';
  }
  function uid(len) {
    var ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var ID_LENGTH = len || 8;
    var id = '';
    for (var i = 0; i < ID_LENGTH; i++) {
      id += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET.length));
    }
    return id;
  }
  function copyTextToClipboard(text, succes, error) {
    if (!text) return error && error();
    var textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
      var successful = document.execCommand('copy');
      if (successful) succes();else error();
    } catch (err) {
      error();
    }
    document.body.removeChild(textArea);
  }
  function imgLoad(image, src, onload, onerror) {
    var img = $(image)[0];
    img.onload = function () {
      if (onload) onload();
    };
    img.onerror = function (e) {
      img.src = './img/img_broken.svg';
      if (onerror) onerror();
    };
    img.src = src;
  }
  function isTouchDevice() {
    var touch = 'ontouchstart' in window;
    var points = navigator.maxTouchPoints > 0 && navigator.maxTouchPoints !== 256 || navigator.msMaxTouchPoints > 0 && navigator.msMaxTouchPoints !== 256;
    var win = navigator.userAgent.toLowerCase().indexOf('windows nt') !== -1;
    return touch || points && !win;
  }
  function canFullScreen() {
    var doc = window.document;
    var elem = doc.documentElement;
    return elem.requestFullscreen || elem.mozRequestFullScreen || elem.webkitRequestFullScreen || elem.msRequestFullscreen;
  }
  function toggleFullscreen() {
    // Check if the User-Agent string contains the word "Tesla"
    if (navigator.userAgent.indexOf("Tesla") >= 0) {
      // Get the current domain from the URL
      var currentDomain = window.location.hostname;

      // Construct the YouTube redirect URL with the current domain
      var targetURL = "https://www.youtube.com/redirect?q=".concat(currentDomain);
      // If it's Tesla's browser, redirect to the YouTube URL (which will open the current domain in full-screen, thank you Elon, sarcasm)
      location.href = targetURL;
    } else {
      var doc = window.document;
      var elem = doc.documentElement;
      var requestFullScreen = elem.requestFullscreen || elem.mozRequestFullScreen || elem.webkitRequestFullScreen || elem.msRequestFullscreen;
      var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;
      if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
        requestFullScreen.call(elem);
      } else {
        cancelFullScreen.call(doc);
      }
    }
  }
  function countSeasons(movie) {
    var seasons = movie.seasons || [];
    var count = 0;
    for (var i = 0; i < seasons.length; i++) {
      if (seasons[i].episode_count > 0) count++;
    }
    if (count > movie.number_of_seasons) count = movie.number_of_seasons;
    return count;
  }
  function countDays(time_a, time_b) {
    var d1 = new Date(time_a);
    var d2 = new Date(time_b);
    var days = (d2 - d1) / (1000 * 60 * 60 * 24);
    days = Math.round(days);
    return days <= 0 ? 0 : days;
  }
  function decodePG(pg) {
    var lang = Storage.field('language');
    var keys = {
      'G': '3+',
      'PG': '6+',
      'PG-13': '13+',
      'R': '17+',
      'NC-17': '18+',
      'TV-Y': '0+',
      'TV-Y7': '7+',
      'TV-G': '3+',
      'TV-PG': '6+',
      'TV-14': '14+',
      'TV-MA': '17+'
    };
    if (lang == 'ru' || lang == 'uk' || lang == 'be') {
      for (var key in keys) {
        if (pg == key) return keys[key];
      }
    }
    return pg;
  }
  function trigger$2(element, event_name) {
    var event = document.createEvent('Event');
    event.initEvent(event_name, false, true);
    element.dispatchEvent(event);
  }
  function isPWA() {
    var pwa = false;
    try {
      pwa = window.matchMedia('(display-mode: standalone)').matches;
    } catch (e) {}
    return pwa;
  }
  function bigNumberToShort(number) {
    var suffixes = ['', 'K', 'M', 'M']; // Суффиксы для различных форматов
    var absoluteNumber = Math.abs(number); // Получаем абсолютное значение числа
    var suffixIndex = Math.floor((absoluteNumber.toFixed(0).length - 1) / 3); // Определение индекса суффикса

    // Проверяем, если число меньше 1000, возвращаем его без изменений
    if (absoluteNumber < 1000) {
      return number.toString();
    }

    // Округление числа и преобразование в строку
    var roundedNumber = (number / Math.pow(1000, suffixIndex)).toFixed(1).replace('.0', '');
    return roundedNumber + suffixes[suffixIndex]; // Возвращаем округленное число с суффиксом
  }
  function gup(name, url) {
    if (!url) url = location.href;
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regexS = "[\\?&]" + name + "=([^&#]*)";
    var regex = new RegExp(regexS);
    var results = regex.exec(url);
    return results == null ? null : results[1];
  }
  function dcma(media, id) {
    return window.prisma_settings.dcma && window.prisma_settings.dcma.find(function (a) {
      return a.cat == media && a.id == id;
    });
  }
  function inputDisplay(value) {
    var f = value.trim();
    var d = f.length - value.length;
    var e = d < 0 ? value.slice(d).replace(/\s/g, '&nbsp;') : '';
    return f + e;
  }
  function filterCardsByType(items, need) {
    var filtred = [];
    var genres = function genres(card, id) {
      var gen = card.genres || card.genre_ids;
      if (gen && Object.prototype.toString.call(gen) === '[object Array]') {
        return gen.find(function (g) {
          if (_typeof(g) == 'object') return g.id == id;
        });
      }
      return false;
    };
    if (need == 'movies') filtred = items.filter(function (a) {
      return !a.name && !genres(a, 16);
    });
    if (need == 'tv') filtred = items.filter(function (a) {
      return a.name && !genres(a, 16);
    });
    if (need == 'multmovie') filtred = items.filter(function (a) {
      return !a.name && genres(a, 16);
    });
    if (need == 'multtv') filtred = items.filter(function (a) {
      return a.name && genres(a, 16);
    });
    return filtred;
  }
  function buildUrl(baseUrl, path, queryParams) {
    // Убираем все, что идет после хоста (например, /ts)
    var host = baseUrl.split('/').slice(0, 3).join('/');

    // Убираем лишние "/" в начале и конце пути
    var url = host + '/' + path.replace(/^\/+/, '');

    // Формируем строку запроса из массива объектов
    var queryString = queryParams.map(function (param) {
      return encodeURIComponent(param.name) + '=' + encodeURIComponent(param.value);
    }).join('&');

    // Добавляем строку запроса к URL, если есть параметры
    return url + (queryString ? '?' + queryString : '');
  }
  function simpleMarkdownParser(input) {
    // Обработка заголовков #
    input = input.replace(/^# (.*$)/gim, '<h1>$1</h1>');
    input = input.replace(/^#+ (.*$)/gim, '<h4>$1</h4>');

    // Обработка жирного текста **текст**
    input = input.replace(/\*\*(.*?)\*\*/gim, '<b>$1</b>');

    // Обработка списков * пункт
    input = input.replace(/^\* (.*$)/gim, '<li>$1</li>');

    // Обработка курсивного текста *текст*
    input = input.replace(/\*(.*?)\*/gim, '<i>$1</i>');

    // Оборачивание текста в <p>, если он не является частью других тегов
    input = input.replace(/^(?!<h1>|<h4>|<li>|<b>|<i>)(.+)$/gim, '<p>$1</p>');
    input = input.replace(/<li>/gim, '<p>');
    input = input.replace(/<\/li>/gim, '</p>');

    // Удаление лишних переносов строк
    input = input.replace(/\n/gim, '');
    return input;
  }
  function callWaiting(needCall, emergencyCall) {
    var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10000;
    var timer = setTimeout(emergencyCall, time);
    needCall(function () {
      clearTimeout(timer);
    });
  }
  function clearCard(card) {
    var new_card = {};
    var empty = ['original_name', 'name', 'first_air_date'];
    var num = ['popularity', 'vote_count', 'vote_average', 'imdb_rating', 'kp_rating', 'number_of_episodes', 'number_of_seasons'];
    card_fields.forEach(function (f) {
      if (typeof card[f] !== 'undefined') {
        var val = card[f];
        if (val == null || val == 'NaN') val = '';
        if (num.indexOf(f) >= 0 && !val) val = 0;
        new_card[f] = val;
        if (empty.indexOf(f) >= 0 && !val) delete new_card[f];
      }
    });
    if (new_card.poster_path) new_card.img = Prisma.Api.img(new_card.poster_path, 'w300');
    return new_card;
  }
  function qualityToText(quality) {
    var text = '';
    switch (quality) {
      case '2160p':
        text = '4K';
        break;
      case '1440p':
        text = '2K';
        break;
      case '1080p':
        text = 'FHD';
        break;
      case '720p':
        text = 'HD';
        break;
      case '480p':
        text = 'SD';
        break;
      case '360p':
        text = 'SD';
        break;
      default:
        text = quality;
        break;
    }
    return text;
  }
  function guid() {
    var hex = "0123456789ABCDEF";
    var gi = "";
    for (var i = 0; i < 36; i++) {
      if (i === 8 || i === 13 || i === 18 || i === 23) {
        gi += "-";
      } else {
        var r = Math.floor(Math.random() * 16);
        // Устанавливаем версию и variant по UUIDv4 спецификации
        if (i === 14) r = 4; // версия 4
        if (i === 19) r = r & 0x3 | 0x8; // variant
        gi += hex[r];
      }
    }
    return gi;
  }
  var Utils$2 = {
    secondsToTime: secondsToTime,
    declOfNum: declOfNum,
    secondsToTimeHuman: secondsToTimeHuman,
    capitalizeFirstLetter: capitalizeFirstLetter,
    substr: substr,
    numberWithSpaces: numberWithSpaces,
    time: time$3,
    bytesToSize: bytesToSize,
    calcBitrate: calcBitrate,
    parseTime: parseTime,
    parseToDate: parseToDate,
    checkHttp: checkHttp,
    shortText: shortText,
    protocol: protocol,
    addUrlComponent: addUrlComponent,
    sizeToBytes: sizeToBytes,
    putScript: putScript,
    putScriptAsync: putScriptAsync,
    putStyle: putStyle,
    clearTitle: clearTitle,
    cardImgBackground: cardImgBackground,
    cardImgBackgroundBlur: cardImgBackgroundBlur,
    strToTime: strToTime,
    stringToHslColor: stringToHslColor,
    pathToNormalTitle: pathToNormalTitle,
    hash: hash$2,
    uid: uid,
    guid: guid,
    copyTextToClipboard: copyTextToClipboard,
    imgLoad: imgLoad,
    isTouchDevice: isTouchDevice,
    toggleFullscreen: toggleFullscreen,
    canFullScreen: canFullScreen,
    countSeasons: countSeasons,
    countDays: countDays,
    decodePG: decodePG,
    trigger: trigger$2,
    isPWA: isPWA,
    bigNumberToShort: bigNumberToShort,
    rewriteIfHTTPS: rewriteIfHTTPS,
    checkEmptyUrl: checkEmptyUrl,
    gup: gup,
    dcma: dcma,
    inputDisplay: inputDisplay,
    filterCardsByType: filterCardsByType,
    buildUrl: buildUrl,
    simpleMarkdownParser: simpleMarkdownParser,
    fixProtocolLink: fixProtocolLink,
    fixMirrorLink: fixMirrorLink,
    callWaiting: callWaiting,
    clearCard: clearCard,
    qualityToText: qualityToText
  };

  var widgetAPI,
    tvKey,
    pluginAPI,
    loader$2,
    orsay_loaded,
    orsay_call = Date.now();
  function init$V() {
    $('body').append($("<div style=\"position: absolute; left: -1000px; top: -1000px;\">  \n    <object id=\"pluginObjectNNavi\" border=\"0\" classid=\"clsid:SAMSUNG-INFOLINK-NNAVI\" style=\"opacity: 0.0; background-color: #000; width: 1px; height: 1px;\"></object>\n    <object id=\"pluginObjectTVMW\" border=\"0\" classid=\"clsid:SAMSUNG-INFOLINK-TVMW\" style=\"opacity: 0.0; background-color: #000; width: 1px; height: 1px;\"></object>\n    <object id=\"pluginObjectScreen\" border=0 classid=\"clsid:SAMSUNG-INFOLINK-SCREEN\" style=\"opacity: 0.0; background-color: #000; width: 1px; height: 1px;\"></object>\n</div>"));
    Utils$2.putScript(['$MANAGER_WIDGET/Common/API/Widget.js', '$MANAGER_WIDGET/Common/API/TVKeyValue.js', '$MANAGER_WIDGET/Common/API/Plugin.js', '$MANAGER_WIDGET/Common/webapi/1.0/webapis.js', '$MANAGER_WIDGET/Common/IME_XT9/ime.js', '$MANAGER_WIDGET/Common/IME_XT9/inputCommon/ime_input.js'], function () {
      try {
        if (typeof Common !== 'undefined' && Common.API && Common.API.TVKeyValue && Common.API.Plugin && Common.API.Widget) {
          widgetAPI = new Common.API.Widget();
          tvKey = new Common.API.TVKeyValue();
          pluginAPI = new Common.API.Plugin();
          window.onShow = orsayOnshow;
          setTimeout(function () {
            orsayOnshow();
          }, 2000);
          widgetAPI.sendReadyEvent();
        } else {
          if (orsay_call + 5 * 1000 > Date.now()) setTimeout(orsayOnLoad, 50);
        }
      } catch (e) {}
    });

    /**
    * Скрывает ненужные параметры для плеера
    */

    if (Platform.is('orsay')) {
      var hidePlayerParams = function hidePlayerParams() {
        $('[data-name="player_normalization"],[data-name="player_scale_method"],[data-name="player_hls_method"]').toggleClass('hide', Prisma.Storage.field('player') == 'orsay');
      };
      /* Подписываемся на открытие настроек плера*/
      Prisma.Settings.listener.follow('open', function (e) {
        if (e.name == 'player') hidePlayerParams();
      });

      /* Подписываемся на изменение плера*/
      Prisma.Storage.listener.follow('change', function (e) {
        if (e.name == 'player') hidePlayerParams();
      });
    }
  }
  function orsayOnshow() {
    if (orsay_loaded) return;
    orsay_loaded = true;
    try {
      //Включает анимацию изменения громкости на ТВ и т.д.
      pluginAPI.SetBannerState(1);
      //Отключает перехват кнопок, этими кнопками управляет система ТВ
      pluginAPI.unregistKey(tvKey.KEY_INFO);
      pluginAPI.unregistKey(tvKey.KEY_TOOLS);
      pluginAPI.unregistKey(tvKey.KEY_MENU);
      pluginAPI.unregistKey(tvKey.KEY_VOL_UP);
      pluginAPI.unregistKey(tvKey.KEY_VOL_DOWN);
      pluginAPI.unregistKey(tvKey.KEY_MUTE);
      // Отключаем заставку ТВ
      pluginAPI.setOffScreenSaver();
      console.log('App', 'Version widget ', Platform.version('orsay'));
    } catch (e) {}
  }
  function isNewWidget() {
    if (typeof window.top.WidgetLoader != 'undefined') {
      loader$2 = window.top.WidgetLoader;
      return true;
    } else {
      return false;
    }
  }
  function getLoaderUrl() {
    if (isNewWidget()) {
      return loader$2.getUrl();
    }
  }
  function setLoaderUrl(_url) {
    if (isNewWidget()) {
      return loader$2.setUrl(_url);
    }
  }
  function changeLoaderUrl() {
    if (isNewWidget()) {
      return loader$2.changeUrl();
    }
  }
  function exit$1() {
    if (widgetAPI) widgetAPI.sendReturnEvent();
  }
  var Orsay$1 = {
    init: init$V,
    isNewWidget: isNewWidget,
    getLoaderUrl: getLoaderUrl,
    setLoaderUrl: setLoaderUrl,
    changeLoaderUrl: changeLoaderUrl,
    exit: exit$1
  };

  var WorkerClass = null;

  try {
      var WorkerThreads =
          typeof module !== 'undefined' && typeof module.require === 'function' && module.require('worker_threads') ||
          typeof __non_webpack_require__ === 'function' && __non_webpack_require__('worker_threads') ||
          typeof require === 'function' && require('worker_threads');
      WorkerClass = WorkerThreads.Worker;
  } catch(e) {} // eslint-disable-line

  function decodeBase64$1(base64, enableUnicode) {
      return Buffer.from(base64, 'base64').toString(enableUnicode ? 'utf16' : 'utf8');
  }

  function createBase64WorkerFactory$2(base64, sourcemapArg, enableUnicodeArg) {
      var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
      var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
      var source = decodeBase64$1(base64, enableUnicode);
      var start = source.indexOf('\n', 10) + 1;
      var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
      return function WorkerFactory(options) {
          return new WorkerClass(body, Object.assign({}, options, { eval: true }));
      };
  }

  function decodeBase64(base64, enableUnicode) {
      var binaryString = atob(base64);
      if (enableUnicode) {
          var binaryView = new Uint8Array(binaryString.length);
          for (var i = 0, n = binaryString.length; i < n; ++i) {
              binaryView[i] = binaryString.charCodeAt(i);
          }
          return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
      }
      return binaryString;
  }

  function createURL(base64, sourcemapArg, enableUnicodeArg) {
      var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
      var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
      var source = decodeBase64(base64, enableUnicode);
      var start = source.indexOf('\n', 10) + 1;
      var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
      var blob = new Blob([body], { type: 'application/javascript' });
      return URL.createObjectURL(blob);
  }

  function createBase64WorkerFactory$1(base64, sourcemapArg, enableUnicodeArg) {
      var url;
      return function WorkerFactory(options) {
          url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
          return new Worker(url, options);
      };
  }

  var kIsNodeJS = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';

  function isNodeJS() {
      return false;
  }

  function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
      if (isNodeJS()) {
          return createBase64WorkerFactory$2(base64, sourcemapArg, enableUnicodeArg);
      }
      return createBase64WorkerFactory$1(base64, sourcemapArg, enableUnicodeArg);
  }

  var WorkerFactory$2 = createBase64WorkerFactory('', null, false);
  /* eslint-enable */

  var WorkerFactory$1 = createBase64WorkerFactory('Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIGZ1bmN0aW9uIHBhcnNlKHN0cmluZywgZW1wdHkpIHsKICAgICAgdmFyIGpzb24gPSBlbXB0eSB8fCB7fTsKICAgICAgaWYgKHN0cmluZykgewogICAgICAgIHRyeSB7CiAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShzdHJpbmcpOwogICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgIH0KICAgICAgcmV0dXJuIGpzb247CiAgICB9CiAgICBmdW5jdGlvbiBzdHJpbmdpZnkoZGF0YSkgewogICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgICB9CiAgICBvbm1lc3NhZ2UgPSBmdW5jdGlvbiBvbm1lc3NhZ2UoZSkgewogICAgICB2YXIgbXNnID0gZS5kYXRhOwogICAgICBpZiAobXNnLnR5cGUgPT0gJ3N0cmluZ2lmeScpIHsKICAgICAgICBwb3N0TWVzc2FnZShzdHJpbmdpZnkobXNnLmRhdGEpKTsKICAgICAgfSBlbHNlIGlmIChtc2cudHlwZSA9PSAncGFyc2UnKSB7CiAgICAgICAgcG9zdE1lc3NhZ2UocGFyc2UobXNnLmRhdGEsIG1zZy5lbXB0eSkpOwogICAgICB9CiAgICB9OwoKfSkoKTsKCg==', null, false);
  /* eslint-enable */

  var WorkerFactory = createBase64WorkerFactory('Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIG9ubWVzc2FnZSA9IGZ1bmN0aW9uIG9ubWVzc2FnZShlKSB7CiAgICAgIHZhciBtc2cgPSBlLmRhdGE7CiAgICAgIGlmIChtc2cudHlwZSA9PSAnYWNjb3VudF9ib29rbWFya3NfcGFyc2UnKSB7CiAgICAgICAgdmFyIGJvb2ttYXJrcyA9IG1zZy5kYXRhLm1hcChmdW5jdGlvbiAoZWxlbSkgewogICAgICAgICAgaWYgKHR5cGVvZiBlbGVtLmRhdGEgPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgZWxlbS5kYXRhID0gSlNPTi5wYXJzZShlbGVtLmRhdGEpOwogICAgICAgICAgICBkZWxldGUgZWxlbS5kYXRhLnJlbGVhc2VfcXVhbGl0eTsKICAgICAgICAgICAgZGVsZXRlIGVsZW0uZGF0YS5xdWFsaXR5OwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIGVsZW07CiAgICAgICAgfSkucmV2ZXJzZSgpOwogICAgICAgIHBvc3RNZXNzYWdlKGJvb2ttYXJrcyk7CiAgICAgIH0KICAgIH07Cgp9KSgpOwoK', null, false);
  /* eslint-enable */

  var agent = navigator.userAgent.toLowerCase();
  function WebWorker(worker, nosuport) {
    var callback = false;
    var timer;
    worker.onmessage = function (data) {
      clearTimeout(timer);
      if (callback) {
        callback(data);
        callback = false;
      }
    };
    this.call = function (data, call) {
      callback = call;
      worker.postMessage(data);
      timer = setTimeout(function () {
        nosuport.call(data, call);
      }, 1500);
    };
  }
  function createWorker(extend, nosuport) {
    var worker;
    if (agent.indexOf("netcast") > -1 || agent.indexOf("maple") > -1) return nosuport || {
      call: function call() {}
    };
    try {
      worker = new WebWorker(new extend(), nosuport || {
        call: function call() {}
      });
    } catch (e) {
      worker = nosuport || {
        call: function call() {}
      };
    }
    return worker;
  }
  var blurWorker = createWorker(WorkerFactory$2, {
    call: function call(msg, _call) {
      var imageData = Blur.imageDataRGB(msg.imageData, msg.topX, msg.topY, msg.width, msg.height, msg.radius);
      _call({
        data: imageData
      });
    }
  });
  var jsonWorker = createWorker(WorkerFactory$1, {
    call: function call(msg, _call2) {
      _call2({
        data: msg.type == 'parse' ? Arrays.decodeJson(msg.data, msg.empty) : JSON.stringify(msg.data)
      });
    }
  });
  var utilsWorker = createWorker(WorkerFactory, {
    call: function call(msg, _call3) {
      if (msg.type == 'account_bookmarks_parse') {
        var bookmarks = msg.data.map(function (elem) {
          if (typeof elem.data == 'string') {
            elem.data = JSON.parse(elem.data);
            delete elem.data.release_quality;
            delete elem.data.quality;
          }
          return elem;
        }).reverse();
        _call3({
          data: bookmarks
        });
      }
    }
  });
  var AppWorker = {
    blur: blurWorker.call,
    json: jsonWorker.call,
    utils: utilsWorker.call
  };

  /* eslint-disable no-bitwise -- used for calculations */
  /* eslint-disable unicorn/prefer-query-selector -- aiming at
    backward-compatibility */
  /**
  * StackBlur - a fast almost Gaussian Blur For Canvas
  *
  * In case you find this class useful - especially in commercial projects -
  * I am not totally unhappy for a small donation to my PayPal account
  * mario@quasimondo.de
  *
  * Or support me on flattr:
  * {@link https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript}.
  *
  * @module StackBlur
  * @author Mario Klingemann
  * Contact: mario@quasimondo.com
  * Website: {@link http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html}
  * Twitter: @quasimondo
  *
  * @copyright (c) 2010 Mario Klingemann
  *
  * Permission is hereby granted, free of charge, to any person
  * obtaining a copy of this software and associated documentation
  * files (the "Software"), to deal in the Software without
  * restriction, including without limitation the rights to use,
  * copy, modify, merge, publish, distribute, sublicense, and/or sell
  * copies of the Software, and to permit persons to whom the
  * Software is furnished to do so, subject to the following
  * conditions:
  *
  * The above copyright notice and this permission notice shall be
  * included in all copies or substantial portions of the Software.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  * OTHER DEALINGS IN THE SOFTWARE.
  */

  var mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
  var shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];

  /**
   * @param {string|HTMLImageElement} img
   * @param {string|HTMLCanvasElement} canvas
   * @param {Float} radius
   * @param {boolean} blurAlphaChannel
   * @param {boolean} useOffset
   * @param {boolean} skipStyles
   * @returns {undefined}
   */
  function processImage(img, canvas, radius, blurAlphaChannel, useOffset, skipStyles) {
    if (typeof img === 'string') {
      img = document.getElementById(img);
    }
    if (!img || !('naturalWidth' in img)) {
      return;
    }
    var dimensionType = useOffset ? 'offset' : 'natural';
    var w = img[dimensionType + 'Width'];
    var h = img[dimensionType + 'Height'];
    if (typeof canvas === 'string') {
      canvas = document.getElementById(canvas);
    }
    if (!canvas || !('getContext' in canvas)) {
      return;
    }
    if (!skipStyles) {
      canvas.style.width = w + 'px';
      canvas.style.height = h + 'px';
    }
    canvas.width = w;
    canvas.height = h;
    var context = canvas.getContext('2d');
    context.clearRect(0, 0, w, h);
    context.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight, 0, 0, w, h);
    if (isNaN(radius) || radius < 1) {
      return;
    }
    if (blurAlphaChannel) {
      processCanvasRGBA(canvas, 0, 0, w, h, radius);
    } else {
      processCanvasRGB(canvas, 0, 0, w, h, radius);
    }
  }

  /**
   * @param {string|HTMLCanvasElement} canvas
   * @param {Integer} topX
   * @param {Integer} topY
   * @param {Integer} width
   * @param {Integer} height
   * @throws {Error|TypeError}
   * @returns {ImageData} See {@link https://html.spec.whatwg.org/multipage/canvas.html#imagedata}
   */
  function getImageDataFromCanvas(canvas, topX, topY, width, height) {
    if (typeof canvas === 'string') {
      canvas = document.getElementById(canvas);
    }
    if (!canvas || _typeof(canvas) !== 'object' || !('getContext' in canvas)) ;
    var context = canvas.getContext('2d');
    try {
      return context.getImageData(topX, topY, width, height);
    } catch (e) {
      //throw new Error('unable to access image data: ' + e);
    }
  }

  /**
   * @param {HTMLCanvasElement} canvas
   * @param {Integer} topX
   * @param {Integer} topY
   * @param {Integer} width
   * @param {Integer} height
   * @param {Float} radius
   * @returns {undefined}
   */
  function processCanvasRGBA(canvas, topX, topY, width, height, radius) {
    if (isNaN(radius) || radius < 1) {
      return;
    }
    radius |= 0;
    var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);
    if (imageData) {
      imageData = processImageDataRGBA(imageData, topX, topY, width, height, radius);
      try {
        canvas.getContext('2d').putImageData(imageData, topX, topY);
      } catch (e) {}
    }
  }

  /**
   * @param {ImageData} imageData
   * @param {Integer} topX
   * @param {Integer} topY
   * @param {Integer} width
   * @param {Integer} height
   * @param {Float} radius
   * @returns {ImageData}
   */
  function processImageDataRGBA(imageData, topX, topY, width, height, radius) {
    var pixels = imageData ? imageData.data : [];
    var div = 2 * radius + 1;
    // const w4 = width << 2;
    var widthMinus1 = width - 1;
    var heightMinus1 = height - 1;
    var radiusPlus1 = radius + 1;
    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
    var stackStart = new BlurStack();
    var stack = stackStart;
    var stackEnd;
    for (var i = 1; i < div; i++) {
      stack = stack.next = new BlurStack();
      if (i === radiusPlus1) {
        stackEnd = stack;
      }
    }
    stack.next = stackStart;
    var stackIn = null,
      stackOut = null,
      yw = 0,
      yi = 0;
    var mulSum = mulTable[radius];
    var shgSum = shgTable[radius];
    for (var y = 0; y < height; y++) {
      stack = stackStart;
      var pr = pixels[yi],
        pg = pixels[yi + 1],
        pb = pixels[yi + 2],
        pa = pixels[yi + 3];
      for (var _i = 0; _i < radiusPlus1; _i++) {
        stack.r = pr;
        stack.g = pg;
        stack.b = pb;
        stack.a = pa;
        stack = stack.next;
      }
      var rInSum = 0,
        gInSum = 0,
        bInSum = 0,
        aInSum = 0,
        rOutSum = radiusPlus1 * pr,
        gOutSum = radiusPlus1 * pg,
        bOutSum = radiusPlus1 * pb,
        aOutSum = radiusPlus1 * pa,
        rSum = sumFactor * pr,
        gSum = sumFactor * pg,
        bSum = sumFactor * pb,
        aSum = sumFactor * pa;
      for (var _i2 = 1; _i2 < radiusPlus1; _i2++) {
        var p = yi + ((widthMinus1 < _i2 ? widthMinus1 : _i2) << 2);
        var r = pixels[p],
          g = pixels[p + 1],
          b = pixels[p + 2],
          a = pixels[p + 3];
        var rbs = radiusPlus1 - _i2;
        rSum += (stack.r = r) * rbs;
        gSum += (stack.g = g) * rbs;
        bSum += (stack.b = b) * rbs;
        aSum += (stack.a = a) * rbs;
        rInSum += r;
        gInSum += g;
        bInSum += b;
        aInSum += a;
        stack = stack.next;
      }
      stackIn = stackStart;
      stackOut = stackEnd;
      for (var x = 0; x < width; x++) {
        var paInitial = aSum * mulSum >> shgSum;
        pixels[yi + 3] = paInitial;
        if (paInitial !== 0) {
          var _a = 255 / paInitial;
          pixels[yi] = (rSum * mulSum >> shgSum) * _a;
          pixels[yi + 1] = (gSum * mulSum >> shgSum) * _a;
          pixels[yi + 2] = (bSum * mulSum >> shgSum) * _a;
        } else {
          pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
        }
        rSum -= rOutSum;
        gSum -= gOutSum;
        bSum -= bOutSum;
        aSum -= aOutSum;
        rOutSum -= stackIn.r;
        gOutSum -= stackIn.g;
        bOutSum -= stackIn.b;
        aOutSum -= stackIn.a;
        var _p = x + radius + 1;
        _p = yw + (_p < widthMinus1 ? _p : widthMinus1) << 2;
        rInSum += stackIn.r = pixels[_p];
        gInSum += stackIn.g = pixels[_p + 1];
        bInSum += stackIn.b = pixels[_p + 2];
        aInSum += stackIn.a = pixels[_p + 3];
        rSum += rInSum;
        gSum += gInSum;
        bSum += bInSum;
        aSum += aInSum;
        stackIn = stackIn.next;
        var _stackOut = stackOut,
          _r = _stackOut.r,
          _g = _stackOut.g,
          _b = _stackOut.b,
          _a2 = _stackOut.a;
        rOutSum += _r;
        gOutSum += _g;
        bOutSum += _b;
        aOutSum += _a2;
        rInSum -= _r;
        gInSum -= _g;
        bInSum -= _b;
        aInSum -= _a2;
        stackOut = stackOut.next;
        yi += 4;
      }
      yw += width;
    }
    for (var _x = 0; _x < width; _x++) {
      yi = _x << 2;
      var _pr = pixels[yi],
        _pg = pixels[yi + 1],
        _pb = pixels[yi + 2],
        _pa = pixels[yi + 3],
        _rOutSum = radiusPlus1 * _pr,
        _gOutSum = radiusPlus1 * _pg,
        _bOutSum = radiusPlus1 * _pb,
        _aOutSum = radiusPlus1 * _pa,
        _rSum = sumFactor * _pr,
        _gSum = sumFactor * _pg,
        _bSum = sumFactor * _pb,
        _aSum = sumFactor * _pa;
      stack = stackStart;
      for (var _i3 = 0; _i3 < radiusPlus1; _i3++) {
        stack.r = _pr;
        stack.g = _pg;
        stack.b = _pb;
        stack.a = _pa;
        stack = stack.next;
      }
      var yp = width;
      var _gInSum = 0,
        _bInSum = 0,
        _aInSum = 0,
        _rInSum = 0;
      for (var _i4 = 1; _i4 <= radius; _i4++) {
        yi = yp + _x << 2;
        var _rbs = radiusPlus1 - _i4;
        _rSum += (stack.r = _pr = pixels[yi]) * _rbs;
        _gSum += (stack.g = _pg = pixels[yi + 1]) * _rbs;
        _bSum += (stack.b = _pb = pixels[yi + 2]) * _rbs;
        _aSum += (stack.a = _pa = pixels[yi + 3]) * _rbs;
        _rInSum += _pr;
        _gInSum += _pg;
        _bInSum += _pb;
        _aInSum += _pa;
        stack = stack.next;
        if (_i4 < heightMinus1) {
          yp += width;
        }
      }
      yi = _x;
      stackIn = stackStart;
      stackOut = stackEnd;
      for (var _y = 0; _y < height; _y++) {
        var _p2 = yi << 2;
        pixels[_p2 + 3] = _pa = _aSum * mulSum >> shgSum;
        if (_pa > 0) {
          _pa = 255 / _pa;
          pixels[_p2] = (_rSum * mulSum >> shgSum) * _pa;
          pixels[_p2 + 1] = (_gSum * mulSum >> shgSum) * _pa;
          pixels[_p2 + 2] = (_bSum * mulSum >> shgSum) * _pa;
        } else {
          pixels[_p2] = pixels[_p2 + 1] = pixels[_p2 + 2] = 0;
        }
        _rSum -= _rOutSum;
        _gSum -= _gOutSum;
        _bSum -= _bOutSum;
        _aSum -= _aOutSum;
        _rOutSum -= stackIn.r;
        _gOutSum -= stackIn.g;
        _bOutSum -= stackIn.b;
        _aOutSum -= stackIn.a;
        _p2 = _x + ((_p2 = _y + radiusPlus1) < heightMinus1 ? _p2 : heightMinus1) * width << 2;
        _rSum += _rInSum += stackIn.r = pixels[_p2];
        _gSum += _gInSum += stackIn.g = pixels[_p2 + 1];
        _bSum += _bInSum += stackIn.b = pixels[_p2 + 2];
        _aSum += _aInSum += stackIn.a = pixels[_p2 + 3];
        stackIn = stackIn.next;
        _rOutSum += _pr = stackOut.r;
        _gOutSum += _pg = stackOut.g;
        _bOutSum += _pb = stackOut.b;
        _aOutSum += _pa = stackOut.a;
        _rInSum -= _pr;
        _gInSum -= _pg;
        _bInSum -= _pb;
        _aInSum -= _pa;
        stackOut = stackOut.next;
        yi += width;
      }
    }
    return imageData;
  }

  /**
   * @param {HTMLCanvasElement} canvas
   * @param {Integer} topX
   * @param {Integer} topY
   * @param {Integer} width
   * @param {Integer} height
   * @param {Float} radius
   * @returns {undefined}
   */
  function processCanvasRGB(canvas, topX, topY, width, height, radius, callback) {
    if (isNaN(radius) || radius < 1) {
      return;
    }
    radius |= 0;
    var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);
    AppWorker.blur({
      imageData: imageData,
      topX: topX,
      topY: topY,
      width: width,
      height: height,
      radius: radius
    }, function (imageBlurData) {
      try {
        canvas.getContext('2d').putImageData(imageBlurData.data, topX, topY);
      } catch (e) {}
      callback();
    });
    /*
    imageData = processImageDataRGB(
      imageData, topX, topY, width, height, radius
    );
    try{
    canvas.getContext('2d').putImageData(imageData, topX, topY);
    }
    catch(e){}
    */
  }

  /**
   * @param {ImageData} imageData
   * @param {Integer} topX
   * @param {Integer} topY
   * @param {Integer} width
   * @param {Integer} height
   * @param {Float} radius
   * @returns {ImageData}
   */
  function processImageDataRGB(imageData, topX, topY, width, height, radius) {
    var pixels = imageData ? imageData.data : [];
    var div = 2 * radius + 1;
    // const w4 = width << 2;
    var widthMinus1 = width - 1;
    var heightMinus1 = height - 1;
    var radiusPlus1 = radius + 1;
    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
    var stackStart = new BlurStack();
    var stack = stackStart;
    var stackEnd;
    for (var i = 1; i < div; i++) {
      stack = stack.next = new BlurStack();
      if (i === radiusPlus1) {
        stackEnd = stack;
      }
    }
    stack.next = stackStart;
    var stackIn = null;
    var stackOut = null;
    var mulSum = mulTable[radius];
    var shgSum = shgTable[radius];
    var p, rbs;
    var yw = 0,
      yi = 0;
    for (var y = 0; y < height; y++) {
      var pr = pixels[yi],
        pg = pixels[yi + 1],
        pb = pixels[yi + 2],
        rOutSum = radiusPlus1 * pr,
        gOutSum = radiusPlus1 * pg,
        bOutSum = radiusPlus1 * pb,
        rSum = sumFactor * pr,
        gSum = sumFactor * pg,
        bSum = sumFactor * pb;
      stack = stackStart;
      for (var _i5 = 0; _i5 < radiusPlus1; _i5++) {
        stack.r = pr;
        stack.g = pg;
        stack.b = pb;
        stack = stack.next;
      }
      var rInSum = 0,
        gInSum = 0,
        bInSum = 0;
      for (var _i6 = 1; _i6 < radiusPlus1; _i6++) {
        p = yi + ((widthMinus1 < _i6 ? widthMinus1 : _i6) << 2);
        rSum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - _i6);
        gSum += (stack.g = pg = pixels[p + 1]) * rbs;
        bSum += (stack.b = pb = pixels[p + 2]) * rbs;
        rInSum += pr;
        gInSum += pg;
        bInSum += pb;
        stack = stack.next;
      }
      stackIn = stackStart;
      stackOut = stackEnd;
      for (var x = 0; x < width; x++) {
        pixels[yi] = rSum * mulSum >> shgSum;
        pixels[yi + 1] = gSum * mulSum >> shgSum;
        pixels[yi + 2] = bSum * mulSum >> shgSum;
        rSum -= rOutSum;
        gSum -= gOutSum;
        bSum -= bOutSum;
        rOutSum -= stackIn.r;
        gOutSum -= stackIn.g;
        bOutSum -= stackIn.b;
        p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;
        rInSum += stackIn.r = pixels[p];
        gInSum += stackIn.g = pixels[p + 1];
        bInSum += stackIn.b = pixels[p + 2];
        rSum += rInSum;
        gSum += gInSum;
        bSum += bInSum;
        stackIn = stackIn.next;
        rOutSum += pr = stackOut.r;
        gOutSum += pg = stackOut.g;
        bOutSum += pb = stackOut.b;
        rInSum -= pr;
        gInSum -= pg;
        bInSum -= pb;
        stackOut = stackOut.next;
        yi += 4;
      }
      yw += width;
    }
    for (var _x2 = 0; _x2 < width; _x2++) {
      yi = _x2 << 2;
      var _pr2 = pixels[yi],
        _pg2 = pixels[yi + 1],
        _pb2 = pixels[yi + 2],
        _rOutSum2 = radiusPlus1 * _pr2,
        _gOutSum2 = radiusPlus1 * _pg2,
        _bOutSum2 = radiusPlus1 * _pb2,
        _rSum2 = sumFactor * _pr2,
        _gSum2 = sumFactor * _pg2,
        _bSum2 = sumFactor * _pb2;
      stack = stackStart;
      for (var _i7 = 0; _i7 < radiusPlus1; _i7++) {
        stack.r = _pr2;
        stack.g = _pg2;
        stack.b = _pb2;
        stack = stack.next;
      }
      var _rInSum2 = 0,
        _gInSum2 = 0,
        _bInSum2 = 0;
      for (var _i8 = 1, yp = width; _i8 <= radius; _i8++) {
        yi = yp + _x2 << 2;
        _rSum2 += (stack.r = _pr2 = pixels[yi]) * (rbs = radiusPlus1 - _i8);
        _gSum2 += (stack.g = _pg2 = pixels[yi + 1]) * rbs;
        _bSum2 += (stack.b = _pb2 = pixels[yi + 2]) * rbs;
        _rInSum2 += _pr2;
        _gInSum2 += _pg2;
        _bInSum2 += _pb2;
        stack = stack.next;
        if (_i8 < heightMinus1) {
          yp += width;
        }
      }
      yi = _x2;
      stackIn = stackStart;
      stackOut = stackEnd;
      for (var _y2 = 0; _y2 < height; _y2++) {
        p = yi << 2;
        pixels[p] = _rSum2 * mulSum >> shgSum;
        pixels[p + 1] = _gSum2 * mulSum >> shgSum;
        pixels[p + 2] = _bSum2 * mulSum >> shgSum;
        _rSum2 -= _rOutSum2;
        _gSum2 -= _gOutSum2;
        _bSum2 -= _bOutSum2;
        _rOutSum2 -= stackIn.r;
        _gOutSum2 -= stackIn.g;
        _bOutSum2 -= stackIn.b;
        p = _x2 + ((p = _y2 + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;
        _rSum2 += _rInSum2 += stackIn.r = pixels[p];
        _gSum2 += _gInSum2 += stackIn.g = pixels[p + 1];
        _bSum2 += _bInSum2 += stackIn.b = pixels[p + 2];
        stackIn = stackIn.next;
        _rOutSum2 += _pr2 = stackOut.r;
        _gOutSum2 += _pg2 = stackOut.g;
        _bOutSum2 += _pb2 = stackOut.b;
        _rInSum2 -= _pr2;
        _gInSum2 -= _pg2;
        _bInSum2 -= _pb2;
        stackOut = stackOut.next;
        yi += width;
      }
    }
    return imageData;
  }

  /**
   *
   */
  var BlurStack = /*#__PURE__*/_createClass(
  /**
   * Set properties.
   */
  function BlurStack() {
    _classCallCheck(this, BlurStack);
    this.r = 0;
    this.g = 0;
    this.b = 0;
    this.a = 0;
    this.next = null;
  });
  var Blur = {
    /**
      * @function module:StackBlur.image
      * @see module:StackBlur~processImage
      */
    image: processImage,
    /**
      * @function module:StackBlur.canvasRGBA
      * @see module:StackBlur~processCanvasRGBA
      */
    canvasRGBA: processCanvasRGBA,
    /**
      * @function module:StackBlur.canvasRGB
      * @see module:StackBlur~processCanvasRGB
      */
    canvasRGB: processCanvasRGB,
    /**
      * @function module:StackBlur.imageDataRGBA
      * @see module:StackBlur~processImageDataRGBA
      */
    imageDataRGBA: processImageDataRGBA,
    /**
      * @function module:StackBlur.imageDataRGB
      * @see module:StackBlur~processImageDataRGB
      */
    imageDataRGB: processImageDataRGB
  };

  var canvas$1 = document.createElement('canvas'),
    ctx$1 = canvas$1.getContext('2d');
  canvas$1.width = 30;
  canvas$1.height = 17;
  var canvas_poster = document.createElement('canvas'),
    ctx_poster = canvas_poster.getContext('2d');
  function extract$2(img_data) {
    var data = img_data.data,
      colors = [];
    for (var i = 0, n = data.length; i < n; i += 4) {
      colors.push([data[i], data[i + 1], data[i + 2]]);
    }
    return colors;
  }
  function palette(palette) {
    var colors = {
      bright: [0, 0, 0],
      average: [127, 127, 127],
      dark: [255, 255, 255]
    };
    var ar = 0,
      ag = 0,
      ab = 0,
      at = palette.length;
    var bg = 0,
      dk = 765;
    for (var i = 0; i < palette.length; i++) {
      var p = palette[i],
        a = p[0] + p[1] + p[2];
      ar += p[0];
      ag += p[1];
      ab += p[2];
      if (a > bg) {
        bg = a;
        colors.bright = p;
      }
      if (a < dk) {
        dk = a;
        colors.dark = p;
      }
    }
    colors.average = [Math.round(ar / at), Math.round(ag / at), Math.round(ab / at)];
    return colors;
  }
  function rgba(c) {
    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    return 'rgba(' + c.join(',') + ',' + o + ')';
  }
  function tone(c) {
    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
    var l = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 80;
    var hls = rgbToHsl(c[0], c[1], c[2]);
    var rgb = hslToRgb$1(hls[0], Math.min(s, hls[1]), l);
    return rgba(rgb, o);
  }

  /**
   * Converts an RGB color value to HSL.
   *
   * @param   {number}  r       The red color value
   * @param   {number}  g       The green color value
   * @param   {number}  b       The blue color value
   * @return  {Array}           The HSL representation
   */
  function rgbToHsl(r, g, b) {
    var rabs, gabs, babs, rr, gg, bb, h, s, v, diff, diffc, percentRoundFn;
    rabs = r / 255;
    gabs = g / 255;
    babs = b / 255;
    v = Math.max(rabs, gabs, babs), diff = v - Math.min(rabs, gabs, babs);
    diffc = function diffc(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    percentRoundFn = function percentRoundFn(num) {
      return Math.round(num * 100) / 100;
    };
    if (diff == 0) {
      h = s = 0;
    } else {
      s = diff / v;
      rr = diffc(rabs);
      gg = diffc(gabs);
      bb = diffc(babs);
      if (rabs === v) {
        h = bb - gg;
      } else if (gabs === v) {
        h = 1 / 3 + rr - bb;
      } else if (babs === v) {
        h = 2 / 3 + gg - rr;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [Math.round(h * 360), percentRoundFn(s * 100), percentRoundFn(v * 100)];
  }

  /**
   * Converts an HSL color value to RGB.
   *
   * @param   {number}  h       The hue
   * @param   {number}  s       The saturation
   * @param   {number}  l       The lightness
   * @return  {Array}           The RGB representation
   */
  function hslToRgb$1(h, s, l) {
    s /= 100;
    l /= 100;
    var C = (1 - Math.abs(2 * l - 1)) * s;
    var hue = h / 60;
    var X = C * (1 - Math.abs(hue % 2 - 1));
    var r = 0,
      g = 0,
      b = 0;
    if (hue >= 0 && hue < 1) {
      r = C;
      g = X;
    } else if (hue >= 1 && hue < 2) {
      r = X;
      g = C;
    } else if (hue >= 2 && hue < 3) {
      g = C;
      b = X;
    } else if (hue >= 3 && hue < 4) {
      g = X;
      b = C;
    } else if (hue >= 4 && hue < 5) {
      r = X;
      b = C;
    } else {
      r = C;
      b = X;
    }
    var m = l - C / 2;
    r += m;
    g += m;
    b += m;
    r *= 255.0;
    g *= 255.0;
    b *= 255.0;
    return [Math.round(r), Math.round(g), Math.round(b)];
  }
  function reset$1(width, height) {
    canvas$1.width = width;
    canvas$1.height = height;
  }
  function get$d(img) {
    reset$1(30, 17);
    var ratio = Math.max(canvas$1.width / img.width, canvas$1.height / img.height);
    var nw = img.width * ratio,
      nh = img.height * ratio;
    ctx$1.drawImage(img, -(nw - canvas$1.width) / 2, -(nh - canvas$1.height) / 2, nw, nh);
    return extract$2(ctx$1.getImageData(0, 0, canvas$1.width, canvas$1.height));
  }
  function blur$1(img, callback) {
    reset$1(200, 130);
    var ratio = Math.max(canvas$1.width / img.width, canvas$1.height / img.height);
    var nw = img.width * ratio,
      nh = img.height * ratio;
    ctx$1.drawImage(img, -(nw - canvas$1.width) / 2, -(nh - canvas$1.height) / 2, nw, nh);
    Blur.canvasRGB(canvas$1, 0, 0, canvas$1.width, canvas$1.height, 80, function () {
      var nimg = new Image();
      try {
        nimg.src = canvas$1.toDataURL();
      } catch (e) {}
      setTimeout(function () {
        callback(nimg);
      }, 100);
    });
  }
  function getImg(callback) {
    var im = new Image();
    try {
      im.src = canvas_poster.toDataURL();
    } catch (e) {}
    setTimeout(function () {
      callback(im);
    }, 100);
  }
  function blurPoster(img, w, h, callback) {
    canvas_poster.width = w;
    canvas_poster.height = h;
    var ratio = Math.max(canvas_poster.width / img.width, canvas_poster.height / img.height);
    var nw = img.width * ratio,
      nh = img.height * ratio;
    setTimeout(function () {
      ctx_poster.drawImage(img, -(nw - canvas_poster.width) / 2, -(nh - canvas_poster.height) / 2, nw, nh);
      Blur.canvasRGB(canvas_poster, 0, 0, canvas_poster.width, canvas_poster.height, 50, function () {
        var gradient = ctx_poster.createLinearGradient(0, 0, 0, canvas_poster.height);
        gradient.addColorStop(0.5, 'rgba(0, 0, 0, 1)');
        gradient.addColorStop(0.6, 'rgba(0, 0, 0, 0)');
        gradient.addColorStop(1, 'rgba(0, 0, 0, 1)');
        ctx_poster.globalCompositeOperation = 'destination-out';
        ctx_poster.fillStyle = gradient;
        ctx_poster.fillRect(0, 0, canvas_poster.width, canvas_poster.height);
        ctx_poster.globalCompositeOperation = 'source-over';
        getImg(function (blured) {
          canvas_poster.width = w;
          canvas_poster.height = h;
          ctx_poster.drawImage(img, -(nw - canvas_poster.width) / 2, -(nh - canvas_poster.height) / 2, nw, nh);
          var gradient = ctx_poster.createLinearGradient(0, 0, 0, canvas_poster.height);
          gradient.addColorStop(0, 'rgba(0, 0, 0, 1)');
          gradient.addColorStop(0.6, 'rgba(0, 0, 0, 1)');
          gradient.addColorStop(0.65, 'rgba(0, 0, 0, 0)');
          gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
          ctx_poster.globalCompositeOperation = 'destination-in';
          ctx_poster.fillStyle = gradient;
          ctx_poster.fillRect(0, 0, canvas_poster.width, canvas_poster.height);
          ctx_poster.globalCompositeOperation = 'source-over';
          ctx_poster.drawImage(blured, 0, 0);
          getImg(callback);
        });
      });
    }, 100);
  }
  function rgbToHex(r, g, b) {
    return "#" + (1 << 24 | r << 16 | g << 8 | b).toString(16).slice(1);
  }
  var Color = {
    get: get$d,
    extract: extract$2,
    palette: palette,
    rgba: rgba,
    blur: blur$1,
    tone: tone,
    rgbToHsl: rgbToHsl,
    rgbToHex: rgbToHex,
    hslToRgb: hslToRgb$1,
    blurPoster: blurPoster
  };

  var IndexedDB = /*#__PURE__*/function () {
    function IndexedDB(database_name) {
      var tables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
      _classCallCheck(this, IndexedDB);
      this.listener = start$8();
      this.database_name = 'prisma_' + database_name;
      this.tables = tables;
      this.version = version;
      this.db = null;
      this.logs = true;
    }
    return _createClass(IndexedDB, [{
      key: "log",
      value: function log(err, store_name, key) {
        if (this.logs) console.log('DB', this.database_name + (store_name ? '_' + store_name : '') + (key ? ' -> [' + key + ']' : ''), err);
      }
    }, {
      key: "openDatabase",
      value: function openDatabase() {
        var _this = this;
        return new Promise(function (resolve, reject) {
          if (!('indexedDB' in window)) return _this.log('Not supported'), reject('Not supported');
          if (!_this.tables.length) return _this.log('No tables'), reject('No tables');
          var request = indexedDB.open(_this.database_name, _this.version);
          request.onerror = function (event) {
            _this.log(request.error || 'An error occurred while opening the database');
            reject(request.error || 'An error occurred while opening the database');
          };
          request.onsuccess = function (event) {
            _this.db = event.target.result;
            resolve();
          };
          request.onupgradeneeded = function (event) {
            var db = event.target.result;
            _this.log('OnUpgradeNeeded');
            _this.tables.forEach(function (name) {
              if (!db.objectStoreNames.contains(name)) {
                _this.log('Create table - ' + name);
                db.createObjectStore(name, {
                  keyPath: 'key'
                });
              }
            });
          };
        });
      }
    }, {
      key: "addData",
      value: function addData(store_name, key, value) {
        var _this2 = this;
        return new Promise(function (resolve, reject) {
          if (!_this2.db) {
            return _this2.log('Database not open', store_name, key), reject('Database not open');
          }
          var transaction = _this2.db.transaction([store_name], 'readwrite');
          var objectStore = transaction.objectStore(store_name);
          var addRequest = objectStore.add({
            key: key,
            value: value,
            time: Date.now()
          });
          addRequest.onerror = function (event) {
            _this2.log(addRequest.error || 'An error occurred while adding data', store_name, key);
            reject(addRequest.error || 'An error occurred while adding data');
          };
          addRequest.onsuccess = resolve;
        });
      }
    }, {
      key: "getData",
      value: function getData(store_name, key) {
        var _this3 = this;
        var life_time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
        return new Promise(function (resolve, reject) {
          if (!_this3.db) {
            return _this3.log('Database not open', store_name, key), reject('Database not open');
          }
          var transaction = _this3.db.transaction([store_name], 'readonly');
          var objectStore = transaction.objectStore(store_name);
          var getRequest = key ? objectStore.get(key) : objectStore.getAll();
          getRequest.onerror = function (event) {
            _this3.log(getRequest.error || 'An error occurred while retrieving data', store_name, key);
            reject(getRequest.error || 'An error occurred while retrieving data');
          };
          getRequest.onsuccess = function (event) {
            var result = event.target.result;
            if (result) {
              if (key) {
                if (life_time == -1) resolve(result.value);else {
                  if (Date.now() < result.time + life_time * 1000 * 60) resolve(result.value);else resolve(null);
                }
              } else resolve(result.map(function (r) {
                return r.value;
              }));
            } else {
              resolve(null);
            }
          };
        });
      }
    }, {
      key: "getDataAnyCase",
      value: function getDataAnyCase(store_name, key, life_time) {
        var _this4 = this;
        return new Promise(function (resolve, reject) {
          _this4.getData(store_name, key, life_time).then(resolve)["catch"](function () {
            resolve(null);
          });
        });
      }
    }, {
      key: "updateData",
      value: function updateData(store_name, key, value) {
        var _this5 = this;
        return new Promise(function (resolve, reject) {
          if (!_this5.db) {
            return _this5.log('Database not open', store_name, key), reject('Database not open');
          }
          var transaction = _this5.db.transaction([store_name], 'readwrite');
          var objectStore = transaction.objectStore(store_name);
          var getRequest = objectStore.get(key);
          getRequest.onerror = function (event) {
            _this5.log(getRequest.error || 'An error occurred while updating data', store_name, key);
            reject(getRequest.error || 'An error occurred while updating data');
          };
          getRequest.onsuccess = function (event) {
            var result = event.target.result;
            if (result) {
              result.value = value;
              result.time = Date.now();
              var updateRequest = objectStore.put(result);
              updateRequest.onerror = function (event) {
                _this5.log(updateRequest.error || 'An error occurred while updating data', store_name, key);
                reject(updateRequest.error || 'An error occurred while updating data');
              };
              updateRequest.onsuccess = resolve;
            } else {
              _this5.log('No data found with the given key', store_name, key);
              reject('No data found with the given key');
            }
          };
        });
      }
    }, {
      key: "rewriteData",
      value: function rewriteData(store_name, key, value) {
        var _this6 = this;
        return new Promise(function (resolve, reject) {
          if (!_this6.db) {
            return _this6.log('Database not open', store_name, key), reject('Database not open');
          }
          var transaction = _this6.db.transaction([store_name], 'readwrite');
          var objectStore = transaction.objectStore(store_name);
          var addRequest = objectStore.put({
            key: key,
            value: value,
            time: Date.now()
          });
          addRequest.onerror = function (event) {
            _this6.log(addRequest.error || 'An error occurred while rewrite data', store_name, key);
            reject(addRequest.error || 'An error occurred while rewrite data');
          };
          addRequest.onsuccess = resolve;
        });
      }
    }, {
      key: "deleteData",
      value: function deleteData(store_name, key) {
        var _this7 = this;
        return new Promise(function (resolve, reject) {
          if (!_this7.db) {
            return _this7.log('Database not open', store_name, key), reject('Database not open');
          }
          var transaction = _this7.db.transaction([store_name], 'readwrite');
          var objectStore = transaction.objectStore(store_name);
          var deleteRequest = objectStore["delete"](key);
          deleteRequest.onerror = function (event) {
            _this7.log(deleteRequest.error || 'An error occurred while deleting data', store_name, key);
            reject(deleteRequest.error || 'An error occurred while deleting data');
          };
          deleteRequest.onsuccess = resolve;
        });
      }
    }, {
      key: "clearTable",
      value: function clearTable(store_name) {
        var _this8 = this;
        return new Promise(function (resolve, reject) {
          if (!_this8.db) {
            return _this8.log('Database not open', store_name), reject('Database not open');
          }
          var transaction = _this8.db.transaction([store_name], 'readwrite');
          var objectStore = transaction.objectStore(store_name);
          var clearRequest = objectStore.clear();
          clearRequest.onerror = function (event) {
            _this8.log(clearRequest.error || 'An error occurred while clearing the table', store_name);
            reject(clearRequest.error || 'An error occurred while clearing the table');
          };
          clearRequest.onsuccess = function () {
            resolve();
          };
        });
      }
    }, {
      key: "clearAll",
      value: function clearAll() {
        var _this9 = this;
        return new Promise(function (resolve, reject) {
          if (!_this9.db) {
            return _this9.log('Database not open'), reject('Database not open');
          }
          var objectStoreNames = _this9.db.objectStoreNames;
          var tableNames = Array.from(objectStoreNames);
          tableNames.forEach(function (n) {
            _this9.clearTable(n);
          });
          resolve();
        });
      }
    }]);
  }();

  var Cache = new IndexedDB('cache', ['screensavers', 'plugins', 'backgrounds', 'images', 'themes', 'other', 'timetable', 'cards', 'storage'], 7);
  Cache.openDatabase().then(function () {
    console.log('Cache', 'worked');
  })["catch"](function () {
    console.log('Cache', 'error', 'no open database');
  });

  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d');
  var waiting = {};
  function write(img, src) {
    if (!Storage.field('cache_images')) return;
    if (src.indexOf('http') === 0) {
      if (waiting[src]) return;
      waiting[src] = true;
      img.crossOrigin = "Anonymous";
      Cache.getData('images', src).then(function (str) {
        if (!str || typeof src == 'string') {
          setTimeout(function () {
            canvas.width = img.naturalWidth || img.width;
            canvas.height = img.naturalHeight || img.height;
            try {
              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
              canvas.toBlob(function (blob) {
                Cache.addData('images', src, blob).then(function () {
                  console.log('ImagesCache', 'save to cache', src);
                  delete waiting[src];
                })["catch"](function () {
                  delete waiting[src];
                });
              }, 'image/jpeg', 1);
            } catch (e) {
              delete waiting[src];
            }
          }, 1500 + Math.round(500 * Math.random()));
        } else delete waiting[src];
      })["catch"](function (e) {
        delete waiting[src];
      });
    }
  }
  function read$1(img, src) {
    if (Storage.field('cache_images')) {
      Cache.getData('images', src).then(function (str) {
        if (str) {
          if (typeof str == 'string') img.src = str;else {
            img.src = URL.createObjectURL(str);
          }
        } else img.src = src;
      })["catch"](function () {
        img.src = src;
      });
    } else img.src = src;
  }
  var ImageCache = {
    write: write,
    read: read$1
  };

  function AVPlay$1(call_video) {
    var stream_url, loaded;
    console.log('Player', 'run Tizen');
    var object = $('<object class="player-video_video" type="application/avplayer"</object>');
    var video = object[0];
    var listener = start$8();
    var change_scale_later;
    var change_speed_later;
    object.width(window.innerWidth);
    object.height(window.innerHeight);

    /**
     * Установить урл
     */
    Object.defineProperty(video, "src", {
      set: function set(url) {
        if (url) {
          stream_url = url;
          try {
            webapis.avplay.open(url);
            webapis.avplay.setDisplayRect(0, 0, window.innerWidth, window.innerHeight);
            webapis.avplay.setDisplayMethod('PLAYER_DISPLAY_MODE_LETTER_BOX');
          } catch (e) {
            listener.send('error', {
              error: {
                code: 'tizen',
                message: 'failed to initialize player'
              }
            });
          }
          try {
            webapis.avplay.setSilentSubtitle(false);
          } catch (e) {}
        }
      },
      get: function get() {}
    });

    /**
     * Позиция
     */
    Object.defineProperty(video, "currentTime", {
      set: function set(t) {
        try {
          webapis.avplay.seekTo(t * 1000);
        } catch (e) {}
      },
      get: function get() {
        var d = 0;
        try {
          d = webapis.avplay.getCurrentTime();
        } catch (e) {}
        return d ? d / 1000 : 0;
      }
    });

    /**
     * Длительность
     */
    Object.defineProperty(video, "duration", {
      set: function set() {},
      get: function get() {
        var d = 0;
        try {
          d = webapis.avplay.getDuration();
        } catch (e) {}
        return d ? d / 1000 : 0;
      }
    });

    /**
     * Пауза
     */
    Object.defineProperty(video, "paused", {
      set: function set() {},
      get: function get() {
        try {
          return webapis.avplay.getState() == 'PAUSED';
        } catch (e) {
          return false;
        }
      }
    });

    /**
     * Аудиодорожки
     */
    Object.defineProperty(video, "audioTracks", {
      set: function set() {},
      get: function get() {
        try {
          var totalTrackInfo = webapis.avplay.getTotalTrackInfo();
          var tracks = totalTrackInfo.filter(function (track) {
            return track.type === 'AUDIO';
          }).map(function (track) {
            var info = JSON.parse(track.extra_info);
            var item = {
              extra: JSON.parse(track.extra_info),
              index: parseInt(track.index),
              language: info.language
            };
            Object.defineProperty(item, "enabled", {
              set: function set(v) {
                if (v) {
                  try {
                    webapis.avplay.setSelectTrack('AUDIO', item.index);
                  } catch (e) {
                    console.log('Player', 'no change audio:', e.message);
                  }
                }
              },
              get: function get() {}
            });
            return item;
          }).sort(function (a, b) {
            return a.index - b.index;
          });
          return tracks;
        } catch (e) {
          return [];
        }
      }
    });

    /**
     * Субтитры
     */
    Object.defineProperty(video, "textTracks", {
      set: function set() {},
      get: function get() {
        try {
          var totalTrackInfo = webapis.avplay.getTotalTrackInfo();
          var tracks = totalTrackInfo.filter(function (track) {
            return track.type === 'TEXT';
          }).map(function (track) {
            var info = JSON.parse(track.extra_info),
              item = {
                extra: JSON.parse(track.extra_info),
                index: parseInt(track.index),
                language: info.track_lang
              };
            Object.defineProperty(item, "mode", {
              set: function set(v) {
                if (v == 'showing') {
                  try {
                    webapis.avplay.setSelectTrack('TEXT', item.index);
                  } catch (e) {
                    console.log('Player', 'no change text:', e.message);
                  }
                }
              },
              get: function get() {}
            });
            return item;
          }).sort(function (a, b) {
            return a.index - b.index;
          });
          console.log('Tizen', 'tracks', tracks);
          console.log('Tizen', 'tracks index', tracks.map(function (a) {
            return a.index;
          }));
          return tracks;
        } catch (e) {
          return [];
        }
      }
    });

    /**
     * Ширина видео
     */
    Object.defineProperty(video, "videoWidth", {
      set: function set() {},
      get: function get() {
        var info = videoInfo();
        return info.Width || 0;
      }
    });

    /**
     * Высота видео
     */
    Object.defineProperty(video, "videoHeight", {
      set: function set() {},
      get: function get() {
        var info = videoInfo();
        return info.Height || 0;
      }
    });

    /**
     * Получить информацию о видео
     * @returns {object}
     */
    function videoInfo() {
      try {
        var info = webapis.avplay.getCurrentStreamInfo(),
          json = {};
        for (var i = 0; i < info.length; i++) {
          var detail = info[i];
          if (detail.type == 'VIDEO') {
            json = JSON.parse(detail.extra_info);
          }
        }
        return json;
      } catch (e) {
        return {};
      }
    }

    /**
     * Меняем размер видео
     * @param {string} scale - default|cover
     */
    function changeScale(scale) {
      try {
        if (scale == 'cover') {
          webapis.avplay.setDisplayMethod('PLAYER_DISPLAY_MODE_FULL_SCREEN');
        } else {
          webapis.avplay.setDisplayMethod('PLAYER_DISPLAY_MODE_LETTER_BOX');
        }
      } catch (e) {
        change_scale_later = scale;
      }
    }
    function changeSpeed(speed) {
      try {
        webapis.avplay.setSpeed(speed);
      } catch (e) {
        change_speed_later = speed;
      }
    }

    /**
     * Всегда говорим да, мы можем играть
     */
    video.canPlayType = function () {
      return true;
    };

    /**
     * Вешаем кастомные события
     */
    video.addEventListener = listener.follow.bind(listener);

    /**
     * Вешаем события от плеера тайзен
     */
    webapis.avplay.setListener({
      onbufferingstart: function onbufferingstart() {
        listener.send('progress', {
          percent: 0
        });
        listener.send('waiting');
      },
      onbufferingprogress: function onbufferingprogress(percent) {
        listener.send('progress', {
          percent: percent
        });
      },
      onbufferingcomplete: function onbufferingcomplete() {
        listener.send('progress', {
          percent: 0
        });
        listener.send('playing');
      },
      onstreamcompleted: function onstreamcompleted() {
        webapis.avplay.stop();
        listener.send('ended');
      },
      oncurrentplaytime: function oncurrentplaytime() {
        listener.send('timeupdate');
        if (change_scale_later) {
          change_scale_later = false;
          changeScale(change_scale_later);
        }
        if (change_speed_later) {
          change_speed_later = false;
          changeSpeed(change_speed_later);
        }
      },
      onerror: function onerror(eventType) {
        listener.send('error', {
          error: {
            code: 'tizen',
            message: eventType
          }
        });
      },
      onevent: function onevent(eventType, eventData) {
        console.log('Player', 'event type:', eventType, 'data:', eventData);
      },
      onsubtitlechange: function onsubtitlechange(duration, text, data3, data4) {
        listener.send('subtitle', {
          text: text
        });
      },
      ondrmevent: function ondrmevent(drmEvent, drmData) {}
    });

    /**
     * Загрузить
     */
    video.load = function () {
      if (stream_url) {
        webapis.avplay.prepareAsync(function () {
          loaded = true;
          webapis.avplay.play();
          try {
            webapis.avplay.setSilentSubtitle(false);
          } catch (e) {}
          listener.send('canplay');
          listener.send('playing');
          listener.send('loadeddata');
        }, function (e) {
          listener.send('error', {
            error: 'code [' + e.code + '] ' + e.message
          });
        });
      }
    };

    /**
     * Играть
     */
    video.play = function () {
      if (loaded) webapis.avplay.play();
    };

    /**
     * Пауза
     */
    video.pause = function () {
      if (loaded) webapis.avplay.pause();
    };

    /**
     * Установить масштаб
     */
    video.size = function (type) {
      changeScale(type);
    };

    /**
     * Установить скорость
     */
    video.speed = function (speed) {
      changeSpeed(speed);
    };

    /**
     * Уничтожить
     */
    video.destroy = function () {
      try {
        webapis.avplay.close();
      } catch (e) {}
      video.remove();
      listener.destroy();
    };
    call_video(video);
    return object;
  }

  function create$q(object) {
    this.state = object.state;
    this.start = function () {
      this.dispath(this.state);
    };
    this.dispath = function (action_name) {
      var action = object.transitions[action_name];
      if (action) {
        action.call(this);
      } else {
        console.log('invalid action');
      }
    };
  }

  var sounds = {};
  function Sound(option) {
    this.option = option;
    this.loaded = false;
    this.audio = new Audio();
    this.audio.src = option.url;
    this.audio.volume = option.volume || 1;
    this.audio.load();
    var volume = option.volume || 1;
    var isplay = false;
    this.audio.addEventListener("playing", function (event) {
      isplay = true;
    });
    this.audio.addEventListener("pause", function (event) {
      isplay = false;
    });
    this.play = function () {
      this.stop();
      var playPromise;
      try {
        this.audio.currentTime = 0;
        this.audio.volume = volume * (Prisma.Storage.field('interface_sound_level') / 100);
        playPromise = this.audio.play();
      } catch (e) {}
      if (playPromise !== undefined) {
        playPromise.then(function () {})["catch"](function (e) {
          console.log('Sound', 'play promise error:', e.message);
        });
      }
      return this;
    };
    this.stop = function () {
      if (!isplay) return this;
      var stopPromise;
      try {
        stopPromise = this.audio.pause();
      } catch (e) {}
      if (stopPromise !== undefined) {
        stopPromise.then(function () {})["catch"](function (e) {
          console.log('Sound', 'stop promise error:', e.message);
        });
      }
      return this;
    };
    return this;
  }
  function init$U() {
    if (Platform.is('android') || Platform.is('browser') || Platform.is('apple_tv') || Platform.desktop()) {
      add$c('hover', {
        url: object$2.github_prisma + 'sound/hover.ogg'
      });
      add$c('enter', {
        url: object$2.github_prisma + 'sound/hover.ogg'
      });
      add$c('bell', {
        url: object$2.github_prisma + 'sound/bell.ogg'
      });
    }
  }
  function play$4(name) {
    if (sounds[name] && Storage.field('interface_sound_play')) sounds[name].play();
  }
  function add$c(name, params) {
    try {
      sounds[name] = new Sound(params);
      return sounds[name];
    } catch (e) {
      return false;
    }
  }
  var Sound$1 = {
    init: init$U,
    add: add$c,
    play: play$4
  };

  var philipse = {
    play: typeof VK_PLAY !== 'undefined' ? VK_PLAY : typeof KEYCODE_MEDIA_PLAY !== 'undefined' ? KEYCODE_MEDIA_PLAY : -1,
    stop: typeof VK_STOP !== 'undefined' ? VK_STOP : typeof KEYCODE_MEDIA_STOP !== 'undefined' ? KEYCODE_MEDIA_STOP : -1,
    pause: typeof VK_PAUSE !== 'undefined' ? VK_PAUSE : typeof KEYCODE_MEDIA_PAUSE !== 'undefined' ? KEYCODE_MEDIA_PAUSE : -1,
    play_pause: typeof VK_PLAY_PAUSE !== 'undefined' ? VK_PLAY_PAUSE : typeof KEYCODE_MEDIA_PLAY_PAUSE !== 'undefined' ? KEYCODE_MEDIA_PLAY_PAUSE : -1
  };
  var enabled$2 = false;
  var listener$m = start$8();
  var time$2 = 0;
  var lastdown = 0;
  var timer$7;
  var longpress;
  var keydown = false;
  var canianimate$1 = typeof requestAnimationFrame !== 'undefined';
  var frame_time = 0;
  function toggle$c(new_status) {
    enabled$2 = new_status;
    listener$m.send('toggle', {
      status: enabled$2
    });
  }
  function enable$1() {
    toggle$c(true);
  }
  function disable() {
    toggle$c(false);
  }
  function isEnter(keycode) {
    return keycode == 13 || keycode == 29443 || keycode == 117 || keycode == 65385;
  }
  function keyCode(e) {
    var keycode;
    if (window.event) {
      keycode = e.keyCode;
    } else if (e.which) {
      keycode = e.which;
    }
    return keycode;
  }
  function requestFrame$1() {
    keydownTrigger(keydown);
    keydown = false;
    frame_time = Date.now();
  }
  function keydownTrigger(e) {
    var keycode = keyCode(e);
    if (time$2 > Date.now() - 100) return;
    time$2 = Date.now();
    listener$m.send('keydown', {
      code: keycode,
      enabled: enabled$2,
      event: e
    });
    if (e.defaultPrevented) return;
    if (isEnter(keycode)) return;
    if (!enabled$2) return; //отключить все

    //4 - Samsung orsay
    if (keycode == 37 || keycode == 4) {
      Sound$1.play('hover');
      Controller.move('left');
    }
    //29460 - Samsung orsay
    if (keycode == 38 || keycode == 29460) {
      Sound$1.play('hover');
      Controller.move('up');
    }
    //5 - Samsung orsay
    if (keycode == 39 || keycode == 5) {
      Sound$1.play('hover');
      Controller.move('right');
    }
    //5 - Samsung orsay
    //29461 - Samsung orsay
    if (keycode == 40 || keycode == 29461) {
      Sound$1.play('hover');
      Controller.move('down');
    }
    //33 - LG; 427 - Samsung
    if (keycode == 33 || keycode == 427) {
      Sound$1.play('hover');
      Controller.move('toup');
    }
    //34 - LG; 428 - Samsung
    if (keycode == 34 || keycode == 428) {
      Sound$1.play('hover');
      Controller.move('todown');
    }

    //Space
    //10252 - Samsung tizen
    if (keycode == 32 || keycode == 179 || keycode == 10252 || keycode == philipse.play_pause) {
      Controller.trigger('playpause');
    }

    //Samsung media
    //71 - Samsung orsay
    if (keycode == 415 || keycode == 71 || keycode == philipse.play) {
      Controller.trigger('play');
    }

    //Samsung stop
    //70 - Samsung orsay
    if (keycode == 413 || keycode == philipse.stop || keycode == 70) {
      Controller.trigger('stop');
    }

    //69 - Samsung orsay
    if (keycode == 412 || keycode == 69 || keycode == 177) {
      Controller.trigger('rewindBack');
    }

    //72 - Samsung orsay
    if (keycode == 418 || keycode == 417 || keycode == 72 || keycode == 176) {
      Controller.trigger('rewindForward');
    }

    //74 - Samsung orsay
    if (keycode == 19 || keycode == 74 || keycode == philipse.pause) {
      Controller.trigger('pause');
    }
    if (keycode == 457) {
      Controller.trigger('info');
    }

    //E-Manual
    if (keycode == 10146) {
      e.preventDefault();
    }
    if (keycode == 10133) {
      Controller.toggle('settings');
    }

    //Кнопка назад
    //8 - браузер
    //27
    //461 - LG
    //10009 - Samsung
    //88 - Samsung orsay
    if (keycode == 8 || keycode == 27 || keycode == 461 || keycode == 10009 || keycode == 88) {
      e.preventDefault();
      if (window.god_enabled) Prisma.Noty.show('Keypad - [' + keycode + ']' + '[' + window.appready + '] run controller back');
      if (window.appready) Controller.back();
      return false;
    }
    //Exit orsay
    if (keycode == 45) {
      Orsay$1.exit();
    }
    //Кнопка pre-ch вызывает окно смены адреса в Loader
    //259 - Samsung orsay
    if (keycode == 259) {
      if (Orsay$1.isNewWidget()) {
        Orsay$1.changeLoaderUrl();
      }
    }
    e.preventDefault();
  }
  function init$T() {
    window.addEventListener("keydown", function (e) {
      lastdown = keyCode(e);
      if (!timer$7) {
        timer$7 = setTimeout(function () {
          if (isEnter(lastdown)) {
            longpress = true;
            listener$m.send('longdown', {});
            Controller["long"]();
          }
        }, 800);
      }
    });
    window.addEventListener("keyup", function (e) {
      clearTimeout(timer$7);
      time$2 = 0;
      timer$7 = null;
      listener$m.send('keyup', {
        code: keyCode(e),
        enabled: enabled$2,
        event: e
      });
      if (!longpress) {
        if (isEnter(keyCode(e)) && !e.defaultPrevented) {
          Sound$1.play('enter');
          Controller.enter();
        }
      } else longpress = false;
    });
    window.addEventListener("keydown", function (e) {
      if (canianimate$1) {
        var cannow = Date.now() - frame_time > 500;
        var presed = keydown;
        keydown = e;
        if (presed === false) {
          if (cannow) requestFrame$1();else requestAnimationFrame(requestFrame$1);
        }
      } else {
        keydownTrigger(e);
      }
    });
  }
  var Keypad = {
    listener: listener$m,
    init: init$T,
    enable: enable$1,
    disable: disable
  };

  var keydown_time = 0;
  var duble_click_time = 0;
  var move_time = 0;
  var touch = false;
  function init$S() {
    Keypad.listener.follow('keydown', function () {
      keydown_time = Date.now();
      move_time = 0;
    });
    $(window).on('mousemove', function (e) {
      move_time = Date.now();
    }).on('touchstart', function () {
      touch = true;
    });
    detect$9();
  }
  function showModal$1(text, onselect) {
    var controller = Controller.enabled().name;
    Modal.open({
      title: '',
      align: 'center',
      zIndex: 300,
      html: $('<div class="about">' + text + '</div>'),
      buttons: [{
        name: Lang.translate('settings_param_no'),
        onSelect: function onSelect() {
          Modal.close();
          Controller.toggle(controller);
        }
      }, {
        name: Lang.translate('settings_param_yes'),
        onSelect: onselect
      }],
      onBack: function onBack() {
        Modal.close();
        Controller.toggle(controller);
      }
    });
  }
  function detect$9() {
    var show_touch, show_mouse, show_remote;
    $(document).on('touchstart', function (e) {
      if ($('.modal').length || show_touch) return;
      if (!Storage.get('is_true_mobile', 'false') && Platform.screen('tv')) {
        show_touch = true;
        showModal$1(Lang.translate('input_detection_touch'), function () {
          Storage.set('is_true_mobile', 'true');
          window.location.reload();
        });
      }
    }).on('click', function (e) {
      if ($('.modal').length || show_mouse || !canClick(e.originalEvent)) return;
      if (Storage.field('navigation_type') !== 'mouse' && Platform.screen('tv')) {
        show_mouse = true;
        showModal$1(Lang.translate('input_detection_mouse'), function () {
          Storage.set('navigation_type', 'mouse');
          window.location.reload();
        });
      }
    });
    Keypad.listener.follow('keydown', function () {
      if ($('.modal').length || show_remote || document.activeElement.tagName == 'INPUT') return;
      if (Storage.get('is_true_mobile', 'false')) {
        show_remote = true;
        showModal$1(Lang.translate('input_detection_remote'), function () {
          Storage.set('is_true_mobile', 'false');
          window.location.reload();
        });
      }
    });
  }
  function canClick(e) {
    //Noty.show('pointerType: ' + e.pointerType + '; type: ' + e.type + '; isTrusted: ' + e.isTrusted)

    if (e && e.custom_trigger) return true;
    return Date.now() - keydown_time < 500 ? false : touch || Platform.is('browser') || Platform.tv() || Platform.desktop() || Date.now() - move_time < 500;
  }
  function noDubleClick(e) {
    if (Date.now() - duble_click_time < 500) {
      e.preventDefault();
      e.stopPropagation();
      return false;
    }
    duble_click_time = Date.now();
    return true;
  }
  var DeviceInput = {
    init: init$S,
    canClick: canClick,
    noDubleClick: noDubleClick
  };

  var html$m;
  var scroll$2;
  var active$6;
  var listener$l = start$8();
  function init$R() {
    html$m = Template.get('selectbox');
    scroll$2 = new create$f({
      mask: true,
      over: true
    });
    html$m.find('.selectbox__body').append(scroll$2.render());
    html$m.find('.selectbox__layer').on('click', function (e) {
      if (DeviceInput.canClick(e.originalEvent)) Controller.back();
    });
    scroll$2.addSwipeDown(function () {
      html$m.addClass('animate-down');
      setTimeout(function () {
        Controller.back();
      }, 200);
    });
    $('body').append(html$m);
  }
  function bind$3() {
    scroll$2.clear();
    html$m.find('.selectbox__title').text(active$6.title);
    html$m.toggleClass('selectbox--fullsize', active$6.fullsize ? true : false);
    active$6.items.forEach(function (element) {
      if (element.hide) return;
      element.title = Utils$2.capitalizeFirstLetter(element.title || '');
      if (element.separator) {
        var _item = $('<div class="settings-param-title"><span>' + element.title + '</span></div>');
        return scroll$2.append(_item);
      }
      var item = Template.get(element.template || 'selectbox_item', element);
      if (!element.subtitle) item.find('.selectbox-item__subtitle').remove();
      if (element.checkbox) {
        item.addClass('selectbox-item--checkbox');
        item.append('<div class="selectbox-item__checkbox"></div>');
        if (element.checked) item.addClass('selectbox-item--checked');
      }
      if (element.ghost) item.css('opacity', 0.5);
      item.on('hover:focus', function (e) {
        scroll$2.update($(e.target), true);
        if (active$6.onFocus) active$6.onFocus(element, e.target);
      });
      if (!element.noenter) {
        var goclose = function goclose() {
          if (!active$6.nohide) hide$2();else {
            scroll$2.render().find('.selected').removeClass('selected');
            item.addClass('selected');
          }
          if (element.onSelect) element.onSelect(element, item);else if (active$6.onSelect) active$6.onSelect(element, item);
        };
        item.on('hover:enter', function () {
          if (element.checkbox) {
            element.checked = !element.checked;
            item.toggleClass('selectbox-item--checked', element.checked);
            if (element.onCheck) element.onCheck(element, item);else if (active$6.onCheck) active$6.onCheck(element, item);
          } else if (active$6.onBeforeClose) {
            if (active$6.onBeforeClose()) goclose();
          } else goclose();
        }).on('hover:long', function (e) {
          if (active$6.onLong) active$6.onLong(element, e.target);
        });
      }
      if (element.selected) item.addClass('selected');
      if (element.picked) item.addClass('picked');
      if (active$6.nomark) item.addClass('nomark');
      if (active$6.onDraw) active$6.onDraw(item, element);
      scroll$2.append(item);
    });
    if (active$6.onFullDraw) active$6.onFullDraw(scroll$2);
  }
  function show$a(object) {
    active$6 = object;
    listener$l.send('preshow', {
      active: active$6
    });
    bind$3();
    $('body').toggleClass('selectbox--open', true);
    html$m.find('.selectbox__body').addClass('layer--wheight').css('max-height', window.innerWidth <= 480 ? window.innerHeight * 0.6 : 'unset').data('mheight', html$m.find('.selectbox__head'));
    html$m.addClass('animate');
    Activity$1.mixState('select=open');
    listener$l.send('fullshow', {
      active: active$6,
      html: html$m
    });
    toggle$b();
  }
  function toggle$b() {
    Controller.add('select', {
      toggle: function toggle() {
        var selected = scroll$2.render().find('.selected');
        Controller.collectionSet(html$m);
        Controller.collectionFocus(selected.length ? selected[0] : false, html$m);
        listener$l.send('toggle', {
          active: active$6,
          html: html$m
        });
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      left: close$8,
      back: close$8
    });
    Controller.toggle('select');
  }
  function hide$2() {
    $('body').toggleClass('selectbox--open', false);
    html$m.removeClass('animate animate-down');
    listener$l.send('hide', {
      active: active$6
    });
  }
  function close$8() {
    hide$2();
    Activity$1.mixState();
    if (active$6.onBack) active$6.onBack();
    listener$l.send('close', {
      active: active$6
    });
  }
  function render$h() {
    return html$m;
  }
  var Select = {
    listener: listener$l,
    init: init$R,
    show: show$a,
    hide: hide$2,
    close: close$8,
    render: render$h
  };

  var listener$k = start$8();
  var status$3 = {
    active: false,
    channel: false,
    select: false,
    program: false
  };
  var numpad = {
    timer: false,
    prev: ''
  };
  function init$Q() {
    Keypad.listener.follow('keydown', function (e) {
      if (!playning()) return;
      PlayerPanel.rewind();

      //PG-
      if (e.code === 428 || e.code === 34 || e.code === 4 || e.code === 65) {
        prevChannel();
        playDelay();
      }

      //PG+
      if (e.code === 427 || e.code === 33 || e.code === 5 || e.code === 68) {
        nextChannel();
        playDelay();
      }
      var digid = 0;
      if (e.code >= 48 && e.code <= 57) digid = e.code - 48;else if (e.code >= 96 && e.code <= 105) digid = e.code - 96;
      if (digid) {
        clearTimeout(numpad.timer);
        numpad.prev += digid;
        toChannel(parseInt(numpad.prev));
        numpad.timer = setTimeout(function () {
          play$3();
          numpad.prev = '';
        }, 2000);
      }
    });
  }
  function start$7(object) {
    status$3.position_view = object.position;
    status$3.position_channel = object.position;
    status$3.active = object;
    status$3.channel = channel$1();
    listener$k.send('channel', {
      channel: status$3.channel,
      dir: 0,
      position: status$3.position_view
    });
    if (status$3.active.onPlay) status$3.active.onPlay(status$3.channel);
    listener$k.send('play', {
      channel: status$3.channel,
      position: status$3.position_view
    });
  }
  function playning() {
    return status$3.active;
  }
  function channel$1(position) {
    status$3.select = status$3.active.onGetChannel(position || status$3.position_view);
    return status$3.select;
  }
  function play$3() {
    if (status$3.select !== status$3.channel) {
      status$3.channel = status$3.select;
      status$3.position_channel = status$3.position_view;
      if (status$3.active.onPlay) status$3.active.onPlay(status$3.channel);
      listener$k.send('play', {
        channel: status$3.channel,
        position: status$3.position_view
      });
    }
  }
  function playDelay() {
    clearTimeout(status$3.timer);
    status$3.timer = setTimeout(play$3, 2000);
  }
  function reset() {
    status$3.position_view = status$3.position_channel;
    moveChannel(0);
  }
  function programReady(data) {
    setTimeout(function () {
      if (status$3.select == data.channel) {
        status$3.program = data;
        status$3.position_program = data.position;
        listener$k.send('draw-program', {
          dir: 0
        });
      }
    }, 10);
  }
  function select$2() {
    return status$3.select;
  }
  function moveChannel(dir) {
    channel$1(status$3.position_view);
    listener$k.send('channel', {
      channel: status$3.select,
      dir: dir,
      position: status$3.position_view
    });
  }
  function nextChannel() {
    if (status$3.position_view + 1 < status$3.active.total) {
      status$3.position_view++;
      moveChannel(1);
    }
  }
  function prevChannel() {
    if (status$3.position_view - 1 >= 0) {
      status$3.position_view--;
      moveChannel(-1);
    }
  }
  function toChannel(num) {
    num = Math.max(1, num);
    if (num <= status$3.active.total) {
      status$3.position_view = num - 1;
      moveChannel(1);
    }
  }
  function redrawChannel() {
    moveChannel(0);
  }
  function moveProgram(dir) {
    if (status$3.program) {
      status$3.position_program += dir;
      status$3.position_program = Math.max(0, Math.min(status$3.program.total, status$3.position_program));
      listener$k.send('draw-program', {
        dir: dir
      });
    }
  }
  function nextProgram() {
    moveProgram(1);
  }
  function prevProgram() {
    moveProgram(-1);
  }
  function drawProgram(container) {
    status$3.active.onGetProgram(status$3.select, status$3.position_program, container);
  }
  function playlistProgram() {
    if (status$3.active.onPlaylistProgram) status$3.active.onPlaylistProgram(status$3.select, status$3.position_program);
  }
  function openMenu() {
    if (status$3.active.onMenu) status$3.active.onMenu(status$3.select, status$3.position_program);else if (status$3.active.onPlaylistProgram) status$3.active.onPlaylistProgram(status$3.select, status$3.position_program);
  }
  function destroy$a() {
    clearTimeout(status$3.timer);
    clearTimeout(numpad.timer);
    status$3 = {
      active: false,
      channel: false,
      select: false,
      program: false
    };
  }
  var PlayerIPTV = {
    listener: listener$k,
    init: init$Q,
    start: start$7,
    playning: playning,
    channel: channel$1,
    programReady: programReady,
    reset: reset,
    play: play$3,
    select: select$2,
    nextChannel: nextChannel,
    prevChannel: prevChannel,
    prevProgram: prevProgram,
    nextProgram: nextProgram,
    drawProgram: drawProgram,
    playlistProgram: playlistProgram,
    openMenu: openMenu,
    redrawChannel: redrawChannel,
    destroy: destroy$a
  };

  // import Footer from './footer'

  var html$l;
  var listener$j = start$8();
  var state;
  var elems$1;
  var panel_visible = false;
  var timeline_last = {
    position: 0,
    peding: 0
  };
  var condition = {};
  var timer$6 = {};
  var tracks = [];
  var subs = [];
  var flows = false;
  var qualitys = false;
  var translates = {};
  var last_settings_action;
  var last_panel_focus;
  function init$P() {
    html$l = Template.get('player_panel');
    elems$1 = {
      peding: $('.player-panel__peding', html$l),
      position: $('.player-panel__position', html$l),
      time: $('.player-panel__time', html$l),
      timenow: $('.player-panel__timenow', html$l),
      timeend: $('.player-panel__timeend', html$l),
      title: $('.player-panel__filename', html$l),
      tracks: $('.player-panel__tracks', html$l),
      subs: $('.player-panel__subs', html$l),
      timeline: $('.player-panel__timeline', html$l),
      quality: $('.player-panel__quality', html$l),
      episode: $('.player-panel__next-episode-name', html$l),
      flow: $('.player-panel__flow', html$l),
      rewind_touch: $('.player-panel__time-touch-zone', html$l),
      iptv_channel: $('.player-panel-iptv__channel', html$l)
      // iptv_position: $('.player-panel-iptv__position',html),
      // iptv_arrow_up: $('.player-panel-iptv__arrow-up',html),
      // iptv_arrow_down: $('.player-panel-iptv__arrow-down',html),
    };

    /**
     * Отсеживаем состояние, 
     * когда надо показать панель, а когда нет
     */
    state = new create$q({
      state: 'start',
      transitions: {
        start: function start() {
          clearTimeout(timer$6.hide);
          clearTimeout(timer$6.rewind);
          this.dispath('canplay');
        },
        canplay: function canplay() {
          if (condition.canplay) this.dispath('visible');else _visible(true);
        },
        visible: function visible() {
          if (condition.visible) _visible(true);else this.dispath('rewind');
        },
        rewind: function rewind() {
          var _this = this;
          clearTimeout(timer$6.rewind);
          if (condition.rewind) {
            _visible(true);
            timer$6.rewind = setTimeout(function () {
              condition.rewind = false;
              _this.dispath('mousemove');
            }, 1000);
          } else {
            this.dispath('mousemove');
          }
        },
        mousemove: function mousemove() {
          if (condition.mousemove) {
            _visible(true);
          }
          this.dispath('hide');
        },
        hide: function hide() {
          clearTimeout(timer$6.hide);
          timer$6.hide = setTimeout(function () {
            if (PlayerIPTV.playning()) {
              PlayerIPTV.reset();
              Controller.toggle('player');
            } else if (!PlayerVideo.video().paused) _visible(false);
          }, PlayerIPTV.playning() ? 5000 : 3000);
        }
      }
    });
    html$l.find('.selector').on('hover:focus', function (e) {
    });
    html$l.find('.player-panel__playpause').on('hover:enter', function (e) {
      listener$j.send('playpause', {});
    });
    html$l.find('.player-panel__next').on('hover:enter', function (e) {
      listener$j.send('next', {});
    });
    html$l.find('.player-panel__prev').on('hover:enter', function (e) {
      listener$j.send('prev', {});
    });
    html$l.find('.player-panel__rprev').on('hover:enter', function (e) {
      listener$j.send('rprev', {});
    });
    html$l.find('.player-panel__rnext').on('hover:enter', function (e) {
      listener$j.send('rnext', {});
    });
    html$l.find('.player-panel__playlist').on('hover:enter', function (e) {
      listener$j.send('playlist', {});
    });
    html$l.find('.player-panel__tstart').on('hover:enter', function (e) {
      listener$j.send('to_start', {});
    });
    html$l.find('.player-panel__tend').on('hover:enter', function (e) {
      listener$j.send('to_end', {});
    });
    html$l.find('.player-panel__fullscreen').on('hover:enter', function (e) {
      listener$j.send('fullscreen', {});
    });
    html$l.find('.player-panel__settings').on('hover:enter', settings);
    html$l.find('.player-panel__pip,.player-panel__volume').toggleClass('hide', !Boolean(Platform.is('nw') || Platform.is('browser') || Platform.is('apple') && !Utils$2.isPWA()));
    html$l.find('.player-panel__pip').on('hover:enter', function () {
      listener$j.send('pip', {});
    });
    elems$1.timeline.attr('data-controller', 'player_rewind');
    elems$1.rewind_touch.toggleClass('hide', !Platform.screen('mobile'));
    elems$1.timeline.on('mousemove', function (e) {
      if (!Platform.screen('mobile')) listener$j.send('mouse_rewind', {
        method: 'move',
        time: elems$1.time,
        percent: percent(e)
      });
    }).on('mouseout', function () {
      if (!Platform.screen('mobile')) elems$1.time.addClass('hide');
    }).on('click', function (e) {
      if (DeviceInput.canClick(e.originalEvent) && !Platform.screen('mobile')) listener$j.send('mouse_rewind', {
        method: 'click',
        time: elems$1.time,
        percent: percent(e)
      });
    });
    if (!html$l.find('.player-panel__volume').hasClass('hide')) {
      html$l.find('.player-panel__volume-range').val(Storage.get('player_volume', '1')).on('input', function () {
        listener$j.send('change_volume', {
          volume: $(this).val()
        });
        PlayerVideo.changeVolume($(this).val());
      });
    }
    var touch;
    var _touchEnd = function touchEnd(e) {
      window.removeEventListener('touchend', _touchEnd);
      PlayerVideo.video().rewind = false;
      listener$j.send('mouse_rewind', {
        method: 'click',
        time: elems$1.time,
        percent: touch.to / 100
      });
      touch = false;
    };
    elems$1.rewind_touch.on('touchstart', function (e) {
      var point = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
      touch = {
        now: percent({
          clientX: elems$1.position.width()
        }) * 100,
        from: percent(point) * 100
      };
      touch.move = touch.from;
      touch.to = touch.from;
      window.addEventListener('touchend', _touchEnd);
    }).on('touchmove', function (e) {
      var point = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
      if (touch) {
        touch.move = percent(point) * 100;
        touch.to = Math.max(0, Math.min(100, touch.now + (touch.move - touch.from)));
        elems$1.position.width(touch.to + '%');
        PlayerVideo.video().rewind = true;
        rewind$1();
      }
    });
    html$l.find('.player-panel__line:eq(1) .selector').attr('data-controller', 'player_panel');
    html$l.find('.player-panel__left .selector,.player-panel__center .selector,.player-panel__right .selector').on('hover:focus', function () {
      last_panel_focus = $(this)[0];
    });

    /**
      * Выбор потока
      */
    elems$1.flow.on('hover:enter', function () {
      if (flows) {
        var enabled = Controller.enabled().name;
        Select.show({
          title: Lang.translate('player_flow'),
          items: flows,
          onSelect: function onSelect(a) {
            flows.forEach(function (element) {
              element.enabled = false;
              element.selected = false;
            });
            a.enabled = true;
            a.selected = true;
            Controller.toggle(enabled);
            listener$j.send('flow', {
              url: a.url
            });
          },
          onBack: function onBack() {
            Controller.toggle(enabled);
          }
        });
      }
    });

    /**
     * Выбор качества
     */
    elems$1.quality.text('auto').on('hover:enter', function () {
      if (qualitys) {
        var qs = [];
        var nw = elems$1.quality.text();
        if (Arrays.isArray(qualitys)) {
          qs = qualitys;
        } else {
          for (var i in qualitys) {
            var qa = qualitys[i];
            var qu = _typeof(qa) == 'object' ? qa.url : typeof qa == 'string' ? qa : '';
            var lb = _typeof(qa) == 'object' ? qa.label : '';
            qs.push({
              quality: i,
              title: i + (lb ? '<sub>' + lb + '</sub>' : ''),
              url: qu,
              selected: nw == Utils$2.qualityToText(i),
              call: _typeof(qa) == 'object' ? qa.call : false,
              instance: qa
            });
          }
        }
        if (!qs.length) return;
        var enabled = Controller.enabled().name;
        Select.show({
          title: Lang.translate('player_quality'),
          items: qs,
          onSelect: function onSelect(a) {
            if (a.call) {
              Controller.toggle(enabled);
              a.call(a.instance, function (url) {
                elems$1.quality.text(Utils$2.qualityToText(a.quality));
                qs.forEach(function (q) {
                  return q.selected = false;
                });
                a.selected = true;
                listener$j.send('quality', {
                  name: a.quality,
                  url: url
                });
                if (a.instance && a.instance.trigger) a.instance.trigger();
              });
            } else {
              elems$1.quality.text(Utils$2.qualityToText(a.quality));
              qs.forEach(function (q) {
                return q.selected = false;
              });
              a.enabled = true;
              a.selected = true;
              if (!Arrays.isArray(qualitys) || a.change_quality) listener$j.send('quality', {
                name: a.quality,
                url: a.url
              });
              if (a.instance && a.instance.trigger) a.instance.trigger();
              Controller.toggle(enabled);
            }
          },
          onBack: function onBack() {
            Controller.toggle(enabled);
          }
        });
      }
    });

    /**
     * Выбор аудиодорожки
     */
    elems$1.tracks.on('hover:enter', function (e) {
      if (tracks.length) {
        tracks.forEach(function (element, p) {
          var name = [];
          var from = translates.tracks && Arrays.isArray(translates.tracks) && translates.tracks[p] ? translates.tracks[p] : element;
          name.push(p + 1);
          name.push(normalName(from.language || from.name || Lang.translate('player_unknown')));
          if (from.label) name.push(normalName(from.label));
          if (from.extra) {
            if (from.extra.channels) name.push(from.extra.channels + ' Ch');
            if (from.extra.fourCC) name.push(from.extra.fourCC);
          }
          element.title = name.join(' / ');
        });
        var enabled = Controller.enabled();
        Select.show({
          title: Lang.translate('player_tracks'),
          items: tracks,
          onSelect: function onSelect(a) {
            tracks.forEach(function (element) {
              element.enabled = false;
              element.selected = false;
            });
            a.enabled = true;
            a.selected = true;
            Controller.toggle(enabled.name);
          },
          onBack: function onBack() {
            Controller.toggle(enabled.name);
          }
        });
      }
    });

    /**
     * Выбор субтитров
     */
    elems$1.subs.on('hover:enter', function (e) {
      if (subs.length) {
        if (subs[0].index !== -1) {
          var any_select = subs.find(function (s) {
            return s.selected;
          });
          Arrays.insert(subs, 0, {
            title: Lang.translate('player_disabled'),
            selected: any_select ? false : true,
            index: -1
          });
        }
        subs.forEach(function (element, p) {
          if (element.index !== -1) {
            var track_num = element.extra && element.extra.track_num ? parseInt(element.extra.track_num) : element.index;
            var from = translates.subs && Arrays.isArray(translates.subs) && translates.subs[track_num] ? translates.subs[track_num] : element;
            element.title = p + ' / ' + normalName(from.language && from.label ? from.language + ' / ' + from.label : from.language || from.label || Lang.translate('player_unknown'));
          }
        });
        var enabled = Controller.enabled();
        Select.show({
          title: Lang.translate('player_subs'),
          items: subs,
          onSelect: function onSelect(a) {
            subs.forEach(function (element) {
              element.mode = 'disabled';
              element.selected = false;
            });
            a.mode = 'showing';
            a.selected = true;
            listener$j.send('subsview', {
              status: a.index > -1
            });
            Controller.toggle(enabled.name);
          },
          onBack: function onBack() {
            Controller.toggle(enabled.name);
          }
        });
      }
    });
    PlayerIPTV.listener.follow('channel', channel);
    PlayerIPTV.listener.follow('draw-program', program);

    // Footer.listener.follow('open',()=>{
    //     html.addClass('panel--footer-open')
    // })

    // Footer.listener.follow('close',()=>{
    //     html.removeClass('panel--footer-open')

    //     Controller.toggle('player_panel')
    // })
  }
  function hideRewind() {
    html$l.addClass('panel--norewind');
  }
  function showParams() {
    var enabled = Controller.enabled().name;
    var items = [];
    items.push({
      title: Lang.translate('player_tracks'),
      trigger: elems$1.tracks,
      ghost: elems$1.tracks.hasClass('hide'),
      noenter: elems$1.tracks.hasClass('hide')
    });
    items.push({
      title: Lang.translate('player_subs'),
      trigger: elems$1.subs,
      ghost: elems$1.subs.hasClass('hide'),
      noenter: elems$1.subs.hasClass('hide')
    });
    items.push({
      title: Lang.translate('player_quality'),
      trigger: elems$1.quality,
      ghost: !qualitys,
      noenter: !qualitys
    });
    items.push({
      title: Lang.translate('settings_main_rest'),
      trigger: html$l.find('.player-panel__settings')
    });
    Select.show({
      title: Lang.translate('title_settings'),
      items: items,
      onSelect: function onSelect(a) {
        Controller.toggle(enabled);
        a.trigger.trigger('hover:enter');
      },
      onBack: function onBack() {
        Controller.toggle(enabled);
      }
    });
  }
  function program(data) {
    if (elems$1.iptv_channel_active) {
      var prog = elems$1.iptv_channel_active.find('.player-panel-iptv-item__prog');
      PlayerIPTV.drawProgram(prog);
      playAnimation(prog, data.dir > 0 ? 'endless-left' : 'endless-right');
    }
  }
  function playAnimation(elem, anim) {
    elem.css('animation', 'none');
    elem[0].offsetHeight;
    elem.css('animation', (anim || 'pulse') + ' 0.2s ease');
  }
  function channel(data) {
    var select = PlayerIPTV.select();
    elems$1.iptv_channel.removeClass('up down');
    var active = elems$1.iptv_channel.find('.active');
    elems$1.iptv_channel.find('> div:not(.active)').remove();
    var new_item = $("\n        <div class=\"player-panel-iptv-item active\">\n            <div class=\"player-panel-iptv-item__body\">\n                <div class=\"player-panel-iptv-item__group\">".concat(select.group, "</div>\n                <div class=\"player-panel-iptv-item__name\">").concat(select.name, "</div>\n                <div class=\"player-panel-iptv-item__prog\">\n                    <div class=\"player-panel-iptv-item__prog-load\">").concat(Lang.translate('loading'), "...</div>\n                </div>\n            </div>\n        </div>\n    "));
    new_item.css({
      '-webkit-transform': 'translate3d(0,' + (data.dir > 0 ? '100%' : '-100%') + ',0)'
    });
    elems$1.iptv_channel.append(new_item);
    elems$1.iptv_channel_active = new_item;
    setTimeout(function () {
      new_item.css({
        '-webkit-transform': 'translate3d(0,0,0)',
        opacity: 1
      });
      if (active.length) active.removeClass('active').css({
        '-webkit-transform': 'translate3d(0,' + (data.dir > 0 ? '-100%' : '100%') + ',0)',
        opacity: 0
      });
    }, 10);
  }
  function settings() {
    var speed = Storage.get('player_speed', 'default');
    var items = [{
      title: Lang.translate('player_video_size'),
      subtitle: Lang.translate('player_size_' + Storage.get('player_size', 'default') + '_title'),
      method: 'size'
    }, {
      title: Lang.translate('player_video_speed'),
      subtitle: speed == 'default' ? Lang.translate('player_speed_default_title') : speed,
      method: 'speed'
    }
    // Так как все ссылки через прокси идут или зашифрованы. Нет пока смысла в этом...
    // {
    //     title: Lang.translate('player_share_title'),
    //     subtitle: Lang.translate('player_share_descr'),
    //     method: 'share'
    // }
    ];
    if (Storage.field('player_normalization')) {
      items.push({
        title: Lang.translate('player_normalization'),
        separator: true
      });
      items.push({
        title: Lang.translate('player_normalization_power_title'),
        subtitle: Lang.translate('player_normalization_step_' + Storage.get('player_normalization_power', 'hight')),
        method: 'normalization_power'
      });
      items.push({
        title: Lang.translate('player_normalization_smooth_title'),
        subtitle: Lang.translate('player_normalization_step_' + Storage.get('player_normalization_smooth', 'medium')),
        method: 'normalization_smooth'
      });
      items.push({
        title: Lang.translate('player_normalization_type_title'),
        subtitle: Lang.translate('player_normalization_type_' + Storage.get('player_normalization_type', 'all')),
        method: 'normalization_type'
      });
    }
    if (last_settings_action) {
      items.find(function (a) {
        return a.method == last_settings_action;
      }).selected = true;
    }
    Select.show({
      title: Lang.translate('title_settings'),
      items: items,
      nomark: true,
      onSelect: function onSelect(a) {
        last_settings_action = a.method;
        if (a.method == 'size') selectSize();
        if (a.method == 'speed') selectSpeed();
        if (a.method == 'normalization_power') selectNormalizationStep('power', 'hight');
        if (a.method == 'normalization_smooth') selectNormalizationStep('smooth', 'medium');
        if (a.method == 'normalization_type') selectNormalizationType();
        if (a.method == 'share') {
          Controller.toggle(Platform.screen('mobile') ? 'player' : 'player_panel');
          listener$j.send('share', {});
        }
      },
      onBack: function onBack() {
        Controller.toggle(Platform.screen('mobile') ? 'player' : 'player_panel');
      }
    });
  }
  function selectNormalizationType() {
    var select = Storage.get('player_normalization_type', 'all');
    var items = [{
      title: Lang.translate('player_normalization_type_all'),
      value: 'all',
      selected: select == 'all'
    }, {
      title: Lang.translate('player_normalization_type_up'),
      value: 'up',
      selected: select == 'up'
    }, {
      title: Lang.translate('player_normalization_type_down'),
      value: 'down',
      selected: select == 'down'
    }];
    Select.show({
      title: Lang.translate('player_normalization_type_title'),
      items: items,
      nohide: true,
      onBack: settings,
      onSelect: function onSelect(a) {
        Storage.set('player_normalization_type', a.value);
        settings();
      }
    });
  }
  function selectNormalizationStep(type, def) {
    var select = Storage.get('player_normalization_' + type, def);
    var items = [{
      title: Lang.translate('player_normalization_step_none'),
      value: 'none',
      selected: select == 'none'
    }, {
      title: Lang.translate('player_normalization_step_low'),
      value: 'low',
      selected: select == 'low'
    }, {
      title: Lang.translate('player_normalization_step_medium'),
      value: 'medium',
      selected: select == 'medium'
    }, {
      title: Lang.translate('player_normalization_step_hight'),
      value: 'hight',
      selected: select == 'hight'
    }];
    Select.show({
      title: Lang.translate('player_normalization_' + type + '_title'),
      items: items,
      nohide: true,
      onBack: settings,
      onSelect: function onSelect(a) {
        Storage.set('player_normalization_' + type, a.value);
        settings();
      }
    });
  }

  /**
   * Выбор масштаба видео
   */
  function selectSize() {
    var select = Storage.get('player_size', 'default');
    var items = [{
      title: Lang.translate('player_size_default_title'),
      subtitle: Lang.translate('player_size_default_descr'),
      value: 'default',
      selected: select == 'default'
    }, {
      title: Lang.translate('player_size_cover_title'),
      subtitle: Lang.translate('player_size_cover_descr'),
      value: 'cover',
      selected: select == 'cover'
    }];
    if (Platform.is('orsay') && Storage.field('player') == 'orsay') {
      items.splice(1, 1);
    }
    if (!(Platform.is('tizen') && Storage.field('player') == 'tizen')) {
      items = items.concat([{
        title: Lang.translate('player_size_fill_title'),
        subtitle: Lang.translate('player_size_fill_descr'),
        value: 'fill',
        selected: select == 'fill'
      }, {
        title: Lang.translate('player_size_s115_title'),
        subtitle: Lang.translate('player_size_s115_descr'),
        value: 's115',
        selected: select == 's115'
      }, {
        title: Lang.translate('player_size_s130_title'),
        subtitle: Lang.translate('player_size_s130_descr'),
        value: 's130',
        selected: select == 's130'
      }, {
        title: Lang.translate('player_size_v115_title'),
        subtitle: Lang.translate('player_size_v115_descr'),
        value: 'v115',
        selected: select == 'v115'
      }, {
        title: Lang.translate('player_size_v130_title'),
        subtitle: Lang.translate('player_size_v130_descr'),
        value: 'v130',
        selected: select == 'v130'
      }]);
    } else {
      if (select == 's130' || select == 'fill') {
        items[0].selected = true;
      }
    }
    Select.show({
      title: Lang.translate('player_video_size'),
      items: items,
      nohide: true,
      onSelect: function onSelect(a) {
        listener$j.send('size', {
          size: a.value
        });
      },
      onBack: settings
    });
  }
  function selectSpeed() {
    var select = Storage.get('player_speed', 'default');
    var items = [{
      title: '0.25',
      value: '0.25'
    }, {
      title: '0.50',
      value: '0.50'
    }, {
      title: '0.75',
      value: '0.75'
    }, {
      title: Lang.translate('player_speed_default_title'),
      value: 'default'
    }, {
      title: '1.25',
      value: '1.25'
    }, {
      title: '1.50',
      value: '1.50'
    }, {
      title: '1.75',
      value: '1.75'
    }, {
      title: '2',
      value: '2'
    }];
    if (Platform.is('tizen') && Storage.field('player') == 'tizen' || Platform.is('orsay') && Storage.field('player') == 'orsay') {
      items = [{
        title: Lang.translate('player_speed_default_title'),
        value: 'default',
        selected: select == 'default'
      }, {
        title: '2',
        subtitle: Platform.is('orsay') && Storage.field('player') == 'orsay' ? Lang.translate('player_speed_two_descr') : '',
        value: '2'
      }];
    }
    var any;
    items.forEach(function (e) {
      if (e.value == select) {
        any = true;
        e.selected = true;
      }
    });
    if (!any) {
      Storage.set('player_speed', 'default');
      if (items.length == 3) items[0].selected = true;else items[3].selected = true;
    }
    Select.show({
      title: Lang.translate('player_video_speed'),
      items: items,
      nohide: true,
      onSelect: function onSelect(a) {
        Storage.set('player_speed', a.value);
        listener$j.send('speed', {
          speed: a.value
        });
        settings();
      },
      onBack: settings
    });
  }
  function isTV() {
    return $('body > .player').hasClass('tv');
  }
  function normalName(name) {
    return name.replace(/^[0-9]+(\.)?([\t ]+)?/, '').replace(/\s#[0-9]+/, '');
  }

  /**
   * Добавить контроллеры
   */
  function addController() {
    Controller.add('player_tv', {
      invisible: true,
      toggle: function toggle() {
        Controller.clear();
        condition.visible = false;
        state.start();
      },
      up: function up() {
        PlayerIPTV.prevChannel();
        state.start();
      },
      down: function down() {
        PlayerIPTV.nextChannel();
        state.start();
      },
      left: function left() {
        condition.visible = true;
        PlayerIPTV.openMenu();
        state.start();
      },
      right: function right() {
        condition.visible = true;
        showParams();
        state.start();
      },
      enter: function enter() {
        PlayerIPTV.play();
        state.start();
      },
      back: function back() {
        PlayerIPTV.reset();
        Controller.toggle('player');
        hide$1();
      }
    });
    Controller.add('player_rewind', {
      toggle: function toggle() {
        Controller.collectionSet(render$g());
        Controller.collectionFocus(false, render$g());
      },
      up: function up() {
        Controller.toggle('player');
      },
      down: function down() {
        toggleButtons();
      },
      right: function right() {
        listener$j.send('rnext', {});
      },
      left: function left() {
        listener$j.send('rprev', {});
      },
      gone: function gone() {
        html$l.find('.selector').removeClass('focus');
      },
      back: function back() {
        Controller.toggle('player');
        hide$1();
      }
    });
    Controller.add('player_panel', {
      toggle: function toggle() {
        if (PlayerIPTV.playning()) Controller.toggle('player_tv');else {
          Controller.collectionSet(render$g());
          Controller.collectionFocus(last_panel_focus ? last_panel_focus : $(isTV() ? '.player-panel__next' : '.player-panel__playpause', html$l)[0], render$g());
        }
      },
      up: function up() {
        isTV() || html$l.hasClass('panel--norewind') ? Controller.toggle('player') : toggleRewind();
      },
      right: function right() {
        Navigator.move('right');
      },
      left: function left() {
        Navigator.move('left');
      },
      down: function down() {
        listener$j.send('playlist', {});
      },
      gone: function gone() {
        html$l.find('.selector').removeClass('focus');
      },
      back: function back() {
        Controller.toggle('player');
        hide$1();
      }
    });
  }

  /**
   * Рассчитать проценты
   * @param {object} e 
   * @returns {number}
   */
  function percent(e) {
    var offset = elems$1.timeline.offset();
    var width = elems$1.timeline.width();
    return (e.clientX - offset.left) / width;
  }

  /**
   * Обновляем состояние панели
   * @param {string} need - что нужно обновить
   * @param {string|number} value - значение
   */
  function update$b(need, value) {
    if (need == 'position') {
      timeline_last.position = value;
      if (panel_visible) elems$1.position.css({
        width: value
      });
    }
    if (need == 'peding') {
      timeline_last.peding = value;
      if (panel_visible) elems$1.peding.css({
        width: value
      });
    }
    if (need == 'timeend') {
      elems$1.timeend.text('/ ' + value);
    }
    if (need == 'timenow') {
      elems$1.timenow.text(value);
    }
    if (need == 'play') {
      html$l.toggleClass('panel--paused', false);
    }
    if (need == 'pause') {
      html$l.toggleClass('panel--paused', true);
    }
  }

  /**
   * Показать или скрыть панель
   * @param {boolean} status 
   */
  function _visible(status) {
    listener$j.send('visible', {
      status: status
    });
    html$l.toggleClass('panel--visible', status);
    panel_visible = status;
    elems$1.position.css({
      width: timeline_last.position
    });
    elems$1.peding.css({
      width: timeline_last.peding
    });
  }

  /**
   * Можем играть, далее отслеживаем статус
   */
  function canplay() {
    condition.canplay = true;
    state.start();
  }

  /**
   * Перемотка
   */
  function rewind$1() {
    condition.rewind = true;
    state.start();
  }

  /**
   * Переключить на контроллер перемотки
   */
  function toggleRewind() {
    Controller.toggle(isTV() || html$l.hasClass('panel--norewind') ? 'player_panel' : 'player_rewind');
  }

  /**
   * Переключить на контроллер кнопки
   */
  function toggleButtons() {
    if (!Platform.screen('mobile')) Controller.toggle('player_panel');
  }

  /**
   * Контроллер
   */
  function toggle$a() {
    condition.visible = true;
    state.start();
    if (PlayerIPTV.playning()) Controller.toggle('player_tv');else if (!Platform.screen('mobile')) toggleRewind();
  }

  /**
   * Показать панель
   */
  function show$9() {
    state.start();
    html$l.find('.player-panel__fullscreen').toggleClass('hide', Platform.tv() || Platform.is('android') || !Utils$2.canFullScreen());
    addController();
  }

  /**
   * Если двигали мышку
   */
  function mousemove() {
    condition.mousemove = true;
    state.start();
  }

  /**
   * Скрыть панель
   */
  function hide$1() {
    condition.visible = false;
    _visible(false);
  }
  function visibleStatus() {
    return html$l.hasClass('panel--visible');
  }

  /**
   * Установить субтитры
   * @param {[{index:integer, language:string, label:string}]} su 
   */
  function setSubs(su) {
    subs = su;
    elems$1.subs.toggleClass('hide', false);
  }

  /**
   * Установить дорожки
   * @param {[{index:integer, language:string, label:string}]} tr 
   */
  function setTracks(tr) {
    tracks = tr;
    elems$1.tracks.toggleClass('hide', false);
  }

  /**
   * Устанавливает качество из M3U8
   * @param {[{title:string, url:string}]} levels 
   * @param {string} current 
   */
  function setLevels(levels, current) {
    if (qualitys && Object.keys(qualitys).length) return;
    qualitys = levels;
    elems$1.quality.text(Utils$2.qualityToText(current));
  }

  /**
   * Показать текущие качество и записать в переменную для показа в панели
   * @param {{"1080p":"url", "720p":"url"}} qs список качеств
   * @param {string} url текущее качество url
   */
  function quality$1(qs, url) {
    if (qs) {
      elems$1.quality.toggleClass('hide', false);
      qualitys = qs;
      for (var i in qs) {
        var qa = qs[i];
        var qu = _typeof(qa) == 'object' ? qa.url : typeof qa == 'string' ? qa : '';
        if (qu == url) {
          elems$1.quality.text(Utils$2.qualityToText(i));
          break;
        }
      }
    }
  }

  /**
   * Показать название следующего эпизода 
   * @param {{position:integer, playlist:[{title:string, url:string}]}} e 
   */
  function showNextEpisodeName(e) {
    if (e.playlist[e.position + 1]) {
      elems$1.episode.text(e.playlist[e.position + 1].title).toggleClass('hide', false);
    } else elems$1.episode.toggleClass('hide', true);
  }

  /**
   * Установить перевод для дорожек и сабов
   * @param {{subs:[],tracks:[]}} data 
   */
  function setTranslate(data) {
    if (_typeof(data) == 'object') translates = data;
  }
  function updateTranslate(where, data) {
    if (!translates[where]) translates[where] = data;
  }
  function setFlows(data) {
    flows = _typeof(data) == 'object' ? data : false;
    elems$1.flow.toggleClass('hide', flows ? false : true);
  }

  /**
   * Уничтожить
   */
  function destroy$9() {
    condition = {};
    tracks = [];
    subs = [];
    qualitys = false;
    flows = false;
    translates = {};
    timeline_last.position = 0;
    timeline_last.peding = 0;
    last_panel_focus = false;
    panel_visible = false;
    elems$1.peding.css({
      width: 0
    });
    elems$1.position.css({
      width: 0
    });
    elems$1.time.text('00:00');
    elems$1.timenow.text('00:00');
    elems$1.timeend.text('00:00');
    elems$1.quality.text('auto');
    elems$1.subs.toggleClass('hide', true);
    elems$1.tracks.toggleClass('hide', true);
    elems$1.episode.toggleClass('hide', true);
    elems$1.flow.toggleClass('hide', true);
    html$l.toggleClass('panel--paused', false);
    html$l.toggleClass('panel--norewind', false);
  }

  /**
   * Получить html
   * @returns {object}
   */
  function render$g() {
    return html$l;
  }
  var PlayerPanel = {
    init: init$P,
    listener: listener$j,
    render: render$g,
    toggle: toggle$a,
    show: show$9,
    destroy: destroy$9,
    hide: hide$1,
    canplay: canplay,
    update: update$b,
    rewind: rewind$1,
    setTracks: setTracks,
    setSubs: setSubs,
    setLevels: setLevels,
    mousemove: mousemove,
    quality: quality$1,
    showNextEpisodeName: showNextEpisodeName,
    setTranslate: setTranslate,
    updateTranslate: updateTranslate,
    visible: _visible,
    visibleStatus: visibleStatus,
    showParams: showParams,
    hideRewind: hideRewind,
    setFlows: setFlows
  };

  var subparams;
  var listener$i = function listener(e) {
    if (e.code == 405) getWebosmediaId(setSubtitleColor);
    if (e.code == 406) getWebosmediaId(setSubtitleBackgroundColor);
    if (e.code == 403) getWebosmediaId(setSubtitleFontSize);
    if (e.code == 404) getWebosmediaId(setSubtitlePosition);
    if (e.code == 55) getWebosmediaId(setSubtitleBackgroundOpacity);
    if (e.code == 57) getWebosmediaId(setSubtitleCharacterOpacity);
  };
  Keypad.listener.follow('keydown', listener$i);
  function luna$1(params, call, fail) {
    if (call) params.onSuccess = call;
    params.onFailure = function (result) {
      console.log('WebOS', params.method + " [fail][" + result.errorCode + "] " + result.errorText);
      if (fail) fail();
    };
    webOS.service.request("luna://com.webos.media", params);
  }
  function initStorage() {
    if (!subparams) {
      subparams = Storage.get('webos_subs_params', '{}');
      Arrays.extend(subparams, {
        color: 2,
        font_size: 1,
        bg_color: 'black',
        position: -1,
        bg_opacity: 0,
        char_opacity: 255
      });
    }
  }
  function subCallParams(mediaId, method, func_params) {
    var parameters = {
      mediaId: mediaId
    };
    Arrays.extend(parameters, func_params);
    luna$1({
      parameters: parameters,
      method: method
    });
    Storage.set('webos_subs_params', subparams);
  }
  function getWebosmediaId(func) {
    var video = document.querySelector('video');
    if (video && video.mediaId) {
      initStorage();
      setTimeout(function () {
        subCallParams(video.mediaId, func.name, func());
      }, 300);
    }
  }
  function setSubtitleColor() {
    subparams.color++;
    if (subparams.color == 6) subparams.color = 0;
    return {
      color: subparams.color
    };
  }
  function setSubtitleBackgroundColor() {
    var bgcolors = ['black', 'white', 'yellow', 'red', 'green', 'blue'];
    var ixcolors = bgcolors.indexOf(subparams.bg_color);
    ixcolors++;
    if (ixcolors == -1) ixcolors = 0;
    subparams.bg_color = bgcolors[ixcolors];
    return {
      bgColor: subparams.bg_color
    };
  }
  function setSubtitleFontSize() {
    subparams.font_size++;
    if (subparams.font_size == 5) subparams.font_size = 0;
    return {
      fontSize: subparams.font_size
    };
  }
  function setSubtitlePosition() {
    subparams.position++;
    if (subparams.position == 5) subparams.position = -3;
    return {
      position: subparams.position
    };
  }
  function setSubtitleBackgroundOpacity() {
    subparams.bg_opacity += 15;
    if (subparams.bg_opacity > 255) subparams.bg_opacity = 0;
    return {
      bgOpacity: subparams.bg_opacity
    };
  }
  function setSubtitleCharacterOpacity() {
    subparams.char_opacity += 15;
    if (subparams.char_opacity > 255) subparams.char_opacity = 45;
    return {
      charOpacity: subparams.char_opacity
    };
  }
  function initialize() {
    var video = document.querySelector('video');
    if (video && video.mediaId) {
      initStorage();
      var methods = ['setSubtitleColor', 'setSubtitleBackgroundColor', 'setSubtitleFontSize', 'setSubtitlePosition', 'setSubtitleBackgroundOpacity', 'setSubtitleCharacterOpacity'];
      var parameters = {
        mediaId: video.mediaId,
        color: subparams.color,
        bgColor: subparams.bg_color,
        position: subparams.position,
        fontSize: subparams.font_size,
        bgOpacity: subparams.bg_opacity,
        charOpacity: subparams.char_opacity
      };
      Arrays.extend(parameters, subparams);
      methods.forEach(function (method) {
        luna$1({
          parameters: parameters,
          method: method
        });
      });
    }
  }
  var WebosSubs = {
    initialize: initialize
  };

  /**
   * Для запросов в луну
   * @param {object} params 
   * @param {function} call 
   * @param {function} fail 
   */
  function luna(params, call, fail) {
    if (call) params.onSuccess = call;
    params.onFailure = function (result) {
      console.log('WebOS', params.method + " [fail][" + result.errorCode + "] " + result.errorText);
      if (fail) fail();
    };
    webOS.service.request("luna://com.webos.media", params);
  }
  function create$p(_video) {
    var video = _video;
    var media_id;
    var subtitle_visible = false;
    var timer;
    var timer_repet;
    var count = 0;
    var count_message = 0;
    var data = {
      subs: [],
      tracks: []
    };
    this.subscribed = false;
    this.repeted = false;

    /**
     * Начинаем поиск видео
     */
    this.start = function () {
      timer = setInterval(this.search.bind(this), 300);
    };

    /**
     * Включить/выключить сабы
     * @param {boolean} status 
     */
    this.toggleSubtitles = function (status) {
      subtitle_visible = status;
      luna({
        method: 'setSubtitleEnable',
        parameters: {
          'mediaId': media_id,
          'enable': status
        }
      });
      if (status) WebosSubs.initialize();
    };

    /**
     * Получили сабы, выводим в панель
     * @param {object} info 
     */
    this.subtitles = function (info) {
      var _this = this;
      if (info.numSubtitleTracks) {
        var all = [];
        var add = function add(sub, index) {
          sub.index = index;
          sub.language = sub.language == '(null)' ? '' : sub.language;
          Object.defineProperty(sub, 'mode', {
            set: function set(v) {
              if (v == 'showing') {
                _this.toggleSubtitles(sub.index == -1 ? false : true);
                console.log('WebOS', 'change subtitles for id: ', media_id, ' index:', sub.index);
                if (sub.index !== -1) {
                  setTimeout(function () {
                    luna({
                      method: 'selectTrack',
                      parameters: {
                        'type': 'text',
                        'mediaId': media_id,
                        'index': sub.index
                      }
                    });
                  }, 500);
                }
              }
            },
            get: function get() {}
          });
          all.push(sub);
        };
        add({
          title: Lang.translate('player_disabled'),
          selected: true
        }, -1);
        for (var i = 0; i < info.subtitleTrackInfo.length; i++) add(info.subtitleTrackInfo[i], i);
        data.subs = all;
        PlayerVideo.listener.send('webos_subs', {
          subs: data.subs
        });
        PlayerPanel.setSubs(data.subs);
      }
    };

    /**
     * Получили дорожки, выводим в панель
     * @param {object} info 
     */
    this.tracks = function (info) {
      if (info.numAudioTracks) {
        var all = [];
        var add = function add(track, index) {
          track.index = index;
          track.selected = index == -1;
          track.extra = {
            channels: track.channels,
            fourCC: track.codec
          };
          Object.defineProperty(track, 'enabled', {
            set: function set(v) {
              if (v) {
                console.log('WebOS', 'change audio for id:', media_id, ' index:', track.index);
                luna({
                  method: 'selectTrack',
                  parameters: {
                    'type': 'audio',
                    'mediaId': media_id,
                    'index': track.index
                  }
                });
                if (video.audioTracks) {
                  for (var i = 0; i < video.audioTracks.length; i++) {
                    video.audioTracks[i].enabled = false;
                  }
                  if (video.audioTracks[track.index]) {
                    video.audioTracks[track.index].enabled = true;
                    console.log('WebOS', 'change audio two method:', track.index);
                  }
                }
              }
            },
            get: function get() {}
          });
          all.push(track);
        };
        for (var i = 0; i < info.audioTrackInfo.length; i++) add(info.audioTrackInfo[i], i);
        data.tracks = all;
        PlayerVideo.listener.send('webos_tracks', {
          tracks: data.tracks
        });
        PlayerPanel.setTracks(data.tracks, true);
      }
    };

    /**
     * Подписываемся на видео и ждем события
     */
    this.subscribe = function () {
      var _this2 = this;
      this.subscribed = true;
      luna({
        method: 'subscribe',
        parameters: {
          'mediaId': media_id,
          'subscribe': true
        }
      }, function (result) {
        if (result.sourceInfo && !_this2.sourceInfo) {
          _this2.sourceInfo = true;
          var info = result.sourceInfo.programInfo[0];
          _this2.subtitles(info);
          _this2.tracks(info);
          _this2.unsubscribe();
          _this2.call();
        }
        if (result.bufferRange) {
          count_message++;
          if (count_message == 30) {
            _this2.unsubscribe();
            _this2.call();
          }
        }
      }, function () {
        _this2.call();
      });
    };

    /**
     * Отписка от видео
     */
    this.unsubscribe = function () {
      luna({
        method: 'unload',
        parameters: {
          'mediaId': media_id
        }
      });
    };

    /**
     * Сканируем наличия видео
     */
    this.search = function () {
      var _this3 = this;
      count++;
      if (count > 3) {
        clearInterval(timer);
        clearInterval(timer_repet);
      }
      var rootSubscribe = function rootSubscribe() {
        console.log('WebOS', 'Run root', 'version:', webOS.sdk_version);
        _this3.toggleSubtitles(false);
        if (_this3.subscribed) clearInterval(timer_repet);
        if (!_this3.subscribed) _this3.subscribe();else {
          if (data.tracks.length) {
            PlayerVideo.listener.send('webos_tracks', {
              tracks: data.tracks
            });
            PlayerPanel.setTracks(data.tracks, true);
          }
          if (data.subs.length) {
            PlayerVideo.listener.send('webos_subs', {
              subs: data.subs
            });
            PlayerPanel.setSubs(data.subs);
          }
        }
        clearInterval(timer);
      };
      console.log('WebOS', 'try get id:', video.mediaId);
      if (video.mediaId) {
        media_id = video.mediaId;
        console.log('WebOS', 'video id:', media_id);
        rootSubscribe();
      }
    };

    /**
     * Вызываем и завершаем работу
     */
    this.call = function () {
      if (this.callback) this.callback();
      this.callback = false;
    };
    this.speed = function (v) {
      luna({
        method: 'setPlayRate',
        parameters: {
          'mediaId': media_id,
          'playRate': v,
          'audioOutput': true
        }
      });
    };

    /**
     * Создаем новое видео
     * @param {object} new_video 
     */
    this.repet = function (new_video) {
      video = new_video;
      console.log('WebOS', 'repeat to new video', new_video ? true : false);
      media_id = '';
      clearInterval(timer);
      count = 0;
      this.repeted = true;
      timer_repet = setInterval(this.search.bind(this), 300);
    };

    /**
     * После перемотки включаем состояние сабов
     */
    this.rewinded = function () {
      this.toggleSubtitles(subtitle_visible);
    };

    /**
     * Уничтожить
     */
    this.destroy = function () {
      clearInterval(timer);
      clearInterval(timer_repet);
      if (media_id) this.unsubscribe();
      data = null;
      this.subscribed = false;
      this.callback = false;
    };
  }

  var FORMAT_NAME$7 = "vtt";
  var helper$5 = {
    toMilliseconds: function toMilliseconds(s) {
      var match = /^\s*(\d{1,2}:)?(\d{1,2}):(\d{1,2})([.,](\d{1,3}))?\s*$/.exec(s);
      var hh = match[1] ? parseInt(match[1].replace(":", "")) : 0;
      var mm = parseInt(match[2]);
      var ss = parseInt(match[3]);
      var ff = match[5] ? parseInt(match[5]) : 0;
      var ms = hh * 3600 * 1000 + mm * 60 * 1000 + ss * 1000 + ff;
      return ms;
    },
    toTimeString: function toTimeString(ms) {
      var hh = Math.floor(ms / 1000 / 3600);
      var mm = Math.floor(ms / 1000 / 60 % 60);
      var ss = Math.floor(ms / 1000 % 60);
      var ff = Math.floor(ms % 1000);
      var time = (hh < 10 ? "0" : "") + hh + ":" + (mm < 10 ? "0" : "") + mm + ":" + (ss < 10 ? "0" : "") + ss + "." + (ff < 100 ? "0" : "") + (ff < 10 ? "0" : "") + ff;
      return time;
    }
  };

  /******************************************************************************************
   * Parses captions in WebVTT format (Web Video Text Tracks Format)
   ******************************************************************************************/
  function parse$c(content, options) {
    var index = 1;
    var captions = [];
    var eol = options.eol || "\r\n";
    var parts = content.split(/\r?\n\s+\r?\n/);
    for (var i = 0; i < parts.length; i++) {
      //WebVTT data
      var regex = /^([^\r\n]+\r?\n)?((\d{1,2}:)?\d{1,2}:\d{1,2}([.,]\d{1,3})?)\s*\-\-\>\s*((\d{1,2}:)?\d{1,2}:\d{1,2}([.,]\d{1,3})?)\r?\n([\s\S]*)(\r?\n)*$/gi;
      var match = regex.exec(parts[i]);
      if (match) {
        var caption = {};
        caption.type = "caption";
        caption.index = index++;
        if (match[1]) {
          caption.cue = match[1].replace(/[\r\n]*/gi, "");
        }
        caption.start = helper$5.toMilliseconds(match[2]);
        caption.end = helper$5.toMilliseconds(match[5]);
        caption.duration = caption.end - caption.start;
        var lines = match[8].split(/\r?\n/);
        caption.content = lines.join(eol);
        caption.text = caption.content.replace(/\<[^\>]+\>/g, "") //<b>bold</b> or <i>italic</i>
        .replace(/\{[^\}]+\}/g, ""); //{b}bold{/b} or {i}italic{/i}
        captions.push(caption);
        continue;
      }

      //WebVTT meta
      var meta = /^([A-Z]+)(\r?\n([\s\S]*))?$/.exec(parts[i]);
      if (!meta) {
        //Try inline meta
        meta = /^([A-Z]+)\s+([^\r\n]*)?$/.exec(parts[i]);
      }
      if (meta) {
        var caption = {};
        caption.type = "meta";
        caption.name = meta[1];
        if (meta[3]) {
          caption.data = meta[3];
        }
        captions.push(caption);
        continue;
      }
      if (options.verbose) {
        console.log("WARN: Unknown part", parts[i]);
      }
    }
    return captions;
  }

  /******************************************************************************************
   * Builds captions in WebVTT format (Web Video Text Tracks Format)
   ******************************************************************************************/
  function build$9(captions, options) {
    var eol = options.eol || "\r\n";
    var content = "WEBVTT" + eol + eol;
    for (var i = 0; i < captions.length; i++) {
      var caption = captions[i];
      if (caption.type == "meta") {
        if (caption.name == "WEBVTT") continue;
        content += caption.name + eol;
        content += caption.data ? caption.data + eol : "";
        content += eol;
        continue;
      }
      if (typeof caption.type === "undefined" || caption.type == "caption") {
        content += (i + 1).toString() + eol;
        content += helper$5.toTimeString(caption.start) + " --> " + helper$5.toTimeString(caption.end) + eol;
        content += caption.text + eol;
        content += eol;
        continue;
      }
      if (options.verbose) {
        console.log("SKIP:", caption);
      }
    }
    return content;
  }

  /******************************************************************************************
   * Detects a subtitle format from the content.
   ******************************************************************************************/
  function detect$8(content) {
    if (typeof content !== "string") {
      throw new Error("Expected string content!");
    }
    if (/^[\s\r\n]*WEBVTT\r?\n/g.test(content)) {
      /*
      WEBVTT
      ...
      */
      return "vtt";
    }
  }

  /******************************************************************************************
   * Export
   ******************************************************************************************/
  var vttFormatter = {
    name: FORMAT_NAME$7,
    helper: helper$5,
    detect: detect$8,
    parse: parse$c,
    build: build$9
  };

  var FORMAT_NAME$6 = "lrc";
  var helper$4 = {
    toMilliseconds: function toMilliseconds(s) {
      var match = /^\s*(\d+):(\d{1,2})([.,](\d{1,3}))?\s*$/.exec(s);
      var mm = parseInt(match[1]);
      var ss = parseInt(match[2]);
      var ff = match[4] ? parseInt(match[4]) : 0;
      var ms = mm * 60 * 1000 + ss * 1000 + ff * 10;
      return ms;
    },
    toTimeString: function toTimeString(ms) {
      var mm = Math.floor(ms / 1000 / 60);
      var ss = Math.floor(ms / 1000 % 60);
      var ff = Math.floor(ms % 1000);
      var time = (mm < 10 ? "0" : "") + mm + ":" + (ss < 10 ? "0" : "") + ss + "." + (ff < 100 ? "0" : "") + (ff < 10 ? "0" : Math.floor(ff / 10));
      return time;
    }
  };

  /******************************************************************************************
   * Parses captions in LRC format: https://en.wikipedia.org/wiki/LRC_%28file_format%29
   ******************************************************************************************/
  function parse$b(content, options) {
    var prev = null;
    var captions = [];
    options.eol || "\r\n";
    var parts = content.split(/\r?\n/);
    for (var i = 0; i < parts.length; i++) {
      if (!parts[i] || parts[i].trim().length == 0) {
        continue;
      }

      //LRC content
      var regex = /^\[(\d{1,2}:\d{1,2}([.,]\d{1,3})?)\](.*)(\r?\n)*$/gi;
      var match = regex.exec(parts[i]);
      if (match) {
        var caption = {};
        caption.type = "caption";
        caption.start = helper$4.toMilliseconds(match[1]);
        caption.end = caption.start + 2000;
        caption.duration = caption.end - caption.start;
        caption.content = match[3];
        caption.text = caption.content;
        captions.push(caption);

        //Update previous
        if (prev) {
          prev.end = caption.start;
          prev.duration = prev.end - prev.start;
        }
        prev = caption;
        continue;
      }

      //LRC meta
      var meta = /^\[([\w\d]+):([^\]]*)\](\r?\n)*$/gi.exec(parts[i]);
      if (meta) {
        var caption = {};
        caption.type = "meta";
        caption.tag = meta[1];
        if (meta[2]) {
          caption.data = meta[2];
        }
        captions.push(caption);
        continue;
      }
      if (options.verbose) {
        console.log("WARN: Unknown part", parts[i]);
      }
    }
    return captions;
  }

  /******************************************************************************************
   * Builds captions in LRC format: https://en.wikipedia.org/wiki/LRC_%28file_format%29
   ******************************************************************************************/
  function build$8(captions, options) {
    var content = "";
    var lyrics = false;
    var eol = options.eol || "\r\n";
    for (var i = 0; i < captions.length; i++) {
      var caption = captions[i];
      if (caption.type == "meta") {
        if (caption.tag && caption.data) {
          content += "[" + caption.tag + ":" + caption.data.replace(/[\r\n]+/g, " ") + "]" + eol;
        }
        continue;
      }
      if (typeof caption.type === "undefined" || caption.type == "caption") {
        if (!lyrics) {
          content += eol; //New line when lyrics start
          lyrics = true;
        }
        content += "[" + helper$4.toTimeString(caption.start) + "]" + caption.text + eol;
        continue;
      }
      if (options.verbose) {
        console.log("SKIP:", caption);
      }
    }
    return content;
  }

  /******************************************************************************************
   * Detects a subtitle format from the content.
   ******************************************************************************************/
  function detect$7(content) {
    if (typeof content === "string") {
      if (/\r?\n\[(\d+:\d{1,2}([.,]\d{1,3})?)\](.*)\r?\n/.test(content)) {
        /*
        [04:48.28]Sister, perfume?
        */
        //return "lrc";
        return true;
      }
    }
  }

  /******************************************************************************************
   * Export
   ******************************************************************************************/
  var lrcFormatter = {
    name: FORMAT_NAME$6,
    helper: helper$4,
    detect: detect$7,
    parse: parse$b,
    build: build$8
  };

  var FORMAT_NAME$5 = "smi";
  var helper$3 = {
    htmlEncode: function htmlEncode(text) {
      return text.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/\</g, '&lt;').replace(/\>/g, '&gt;')
      //.replace(/\s/g, '&nbsp;')
      .replace(/\r?\n/g, '<BR>');
    },
    htmlDecode: function htmlDecode(html, eol) {
      return html.replace(/\<BR\s*\/?\>/gi, eol || '\r\n').replace(/&nbsp;/g, ' ').replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
    }
  };

  /******************************************************************************************
   * Parses captions in SAMI format (.smi)
   ******************************************************************************************/
  function parse$a(content, options) {
    var captions = [];
    var eol = options.eol || "\r\n";
    var title = /\<TITLE[^\>]*\>([\s\S]*)\<\/TITLE\>/gi.exec(content);
    if (title) {
      var caption = {};
      caption.type = "meta";
      caption.name = "title";
      caption.data = title[1].replace(/^[\s\r\n]*/g, "").replace(/[\s\r\n]*$/g, "");
      captions.push(caption);
    }
    var style = /\<STYLE[^\>]*\>([\s\S]*)\<\/STYLE\>/gi.exec(content);
    if (style) {
      var caption = {};
      caption.type = "meta";
      caption.name = "style";
      caption.data = style[1];
      captions.push(caption);
    }
    var sami = content.replace(/^[\s\S]*\<BODY[^\>]*\>/gi, "") //Remove content before body
    .replace(/\<\/BODY[^\>]*\>[\s\S]*$/gi, ""); //Remove content after body

    var prev = null;
    var parts = sami.split(/\<SYNC/gi);
    for (var i = 0; i < parts.length; i++) {
      if (!parts[i] || parts[i].trim().length == 0) {
        continue;
      }
      var part = '<SYNC' + parts[i];

      //<SYNC Start = 1000>
      var match = /^\<SYNC[^\>]+Start\s*=\s*["']?(\d+)["']?[^\>]*\>([\s\S]*)/gi.exec(part);
      if (match) {
        var caption = {};
        caption.type = "caption";
        caption.start = parseInt(match[1]);
        caption.end = caption.start + 2000;
        caption.duration = caption.end - caption.start;
        caption.content = match[2].replace(/^\<\/SYNC[^\>]*>/gi, "");
        var blank = true;
        var p = /^\<P[^\>]+Class\s*=\s*["']?([\w\d\-_]+)["']?[^\>]*\>([\s\S]*)/gi.exec(caption.content);
        if (!p) {
          p = /^\<P([^\>]*)\>([\s\S]*)/gi.exec(caption.content);
        }
        if (p) {
          var html = p[2].replace(/\<P[\s\S]+$/gi, ""); //Remove string after another <P> tag
          html = html.replace(/\<BR\s*\/?\>[\s\r\n]+/gi, eol).replace(/\<BR\s*\/?\>/gi, eol).replace(/\<[^\>]+\>/g, ""); //Remove all tags
          html = html.replace(/^[\s\r\n]+/g, "").replace(/[\s\r\n]+$/g, ""); //Trim new lines and spaces
          blank = html.replace(/&nbsp;/gi, " ").replace(/[\s\r\n]+/g, "").length == 0;
          caption.text = helper$3.htmlDecode(html, eol);
        }
        if (!options.preserveSpaces && blank) {
          if (options.verbose) {
            console.log("INFO: Skipping white space caption at " + caption.start);
          }
        } else {
          captions.push(caption);
        }

        //Update previous
        if (prev) {
          prev.end = caption.start;
          prev.duration = prev.end - prev.start;
        }
        prev = caption;
        continue;
      }
      if (options.verbose) {
        console.log("WARN: Unknown part", parts[i]);
      }
    }
    return captions;
  }

  /******************************************************************************************
   * Builds captions in SAMI format (.smi)
   ******************************************************************************************/
  function build$7(captions, options) {
    var eol = options.eol || "\r\n";
    var content = "";
    content += '<SAMI>' + eol;
    content += '<HEAD>' + eol;
    content += '<TITLE>' + (options.title || "") + '</TITLE>' + eol;
    content += '<STYLE TYPE="text/css">' + eol;
    content += '<!--' + eol;
    content += 'P { font-family: Arial; font-weight: normal; color: white; background-color: black; text-align: center; }' + eol;
    content += '.LANG { Name: ' + (options.langName || "English") + '; lang: ' + (options.langCode || "en-US") + '; SAMIType: CC; }' + eol;
    content += '-->' + eol;
    content += '</STYLE>' + eol;
    content += '</HEAD>' + eol;
    content += '<BODY>' + eol;
    for (var i = 0; i < captions.length; i++) {
      var caption = captions[i];
      if (caption.type == "meta") {
        continue;
      }
      if (typeof caption.type === "undefined" || caption.type == "caption") {
        //Start of caption
        content += '<SYNC Start=' + caption.start + '>' + eol;
        content += '  <P Class=LANG>' + helper$3.htmlEncode(caption.text || "") + (options.closeTags ? '</P>' : "") + eol;
        if (options.closeTags) {
          content += '</SYNC>' + eol;
        }

        //Blank line indicates the end of caption
        content += '<SYNC Start=' + caption.end + '>' + eol;
        content += '  <P Class=LANG>' + '&nbsp;' + (options.closeTags ? '</P>' : "") + eol;
        if (options.closeTags) {
          content += '</SYNC>' + eol;
        }
        continue;
      }
      if (options.verbose) {
        console.log("SKIP:", caption);
      }
    }
    content += '</BODY>' + eol;
    content += '</SAMI>' + eol;
    return content;
  }

  /******************************************************************************************
   * Detects a subtitle format from the content.
   ******************************************************************************************/
  function detect$6(content) {
    if (typeof content === "string") {
      if (/\<SAMI[^\>]*\>[\s\S]*\<BODY[^\>]*\>/g.test(content)) {
        /*
        <SAMI>
        <BODY>
        <SYNC Start=...
        ...
        </BODY>
        </SAMI>
        */
        return "smi";
      }
    }
  }

  /******************************************************************************************
   * Export
   ******************************************************************************************/
  var smiFormatter = {
    name: FORMAT_NAME$5,
    helper: helper$3,
    detect: detect$6,
    parse: parse$a,
    build: build$7
  };

  var FORMAT_NAME$4 = "ssa";
  var helper$2 = {
    toMilliseconds: function toMilliseconds(s) {
      var match = /^\s*(\d+:)?(\d{1,2}):(\d{1,2})([.,](\d{1,3}))?\s*$/.exec(s);
      var hh = match[1] ? parseInt(match[1].replace(":", "")) : 0;
      var mm = parseInt(match[2]);
      var ss = parseInt(match[3]);
      var ff = match[5] ? parseInt(match[5]) : 0;
      var ms = hh * 3600 * 1000 + mm * 60 * 1000 + ss * 1000 + ff * 10;
      return ms;
    },
    toTimeString: function toTimeString(ms) {
      var hh = Math.floor(ms / 1000 / 3600);
      var mm = Math.floor(ms / 1000 / 60 % 60);
      var ss = Math.floor(ms / 1000 % 60);
      var ff = Math.floor(ms % 1000 / 10); //2 digits
      var time = hh + ":" + (mm < 10 ? "0" : "") + mm + ":" + (ss < 10 ? "0" : "") + ss + "." + (ff < 10 ? "0" : "") + ff;
      return time;
    }
  };

  /******************************************************************************************
   * Parses captions in SubStation Alpha format (.ssa)
   ******************************************************************************************/
  function parse$9(content, options) {
    var meta;
    var columns = null;
    var captions = [];
    var eol = options.eol || "\r\n";
    var parts = content.split(/\r?\n\s*\r?\n/);
    for (var i = 0; i < parts.length; i++) {
      var regex = /^\s*\[([^\]]+)\]\r?\n([\s\S]*)(\r?\n)*$/gi;
      var match = regex.exec(parts[i]);
      if (match) {
        var tag = match[1];
        var lines = match[2].split(/\r?\n/);
        var _loop = function _loop() {
            line = lines[l];
            if (/^\s*;/.test(line)) {
              return 0; // continue
              //Skip comment
            }
            m = /^\s*([^:]+):\s*(.*)(\r?\n)?$/.exec(line);
            if (m) {
              if (tag == "Script Info") {
                if (!meta) {
                  meta = {};
                  meta.type = "meta";
                  meta.data = {};
                  captions.push(meta);
                }
                name = m[1].trim();
                value = m[2].trim();
                meta.data[name] = value;
                return 0; // continue
              }
              if (tag == "V4 Styles" || tag == "V4+ Styles") {
                name = m[1].trim();
                value = m[2].trim();
                if (name == "Format") {
                  columns = value.split(/\s*,\s*/g);
                  return 0; // continue
                }
                if (name == "Style") {
                  values = value.split(/\s*,\s*/g);
                  caption = {};
                  caption.type = "style";
                  caption.data = {};
                  for (c = 0; c < columns.length && c < values.length; c++) {
                    caption.data[columns[c]] = values[c];
                  }
                  captions.push(caption);
                  return 0; // continue
                }
              }
              if (tag == "Events") {
                name = m[1].trim();
                value = m[2].trim();
                if (name == "Format") {
                  columns = value.split(/\s*,\s*/g);
                  return 0; // continue
                }
                if (name == "Dialogue") {
                  //Work-around for missing text (when the text contains ',' char)
                  var getPosition = function getPosition(s, search, index) {
                    return s.split(search, index).join(search).length;
                  };
                  values = value.split(/\s*,\s*/g);
                  caption = {};
                  caption.type = "caption";
                  caption.data = {};
                  for (c = 0; c < columns.length && c < values.length; c++) {
                    caption.data[columns[c]] = values[c];
                  }
                  caption.start = helper$2.toMilliseconds(caption.data["Start"]);
                  caption.end = helper$2.toMilliseconds(caption.data["End"]);
                  caption.duration = caption.end - caption.start;
                  caption.content = caption.data["Text"];
                  indexOfText = getPosition(value, ',', columns.length - 1) + 1;
                  caption.content = value.substr(indexOfText);
                  caption.data["Text"] = caption.content;
                  caption.text = caption.content.replace(/\\N/g, eol) //"\N" for new line
                  .replace(/\{[^\}]+\}/g, ""); //{\pos(400,570)}
                  captions.push(caption);
                  return 0; // continue
                }
              }
            }
          },
          line,
          m,
          name,
          value,
          name,
          value,
          values,
          caption,
          c,
          name,
          value,
          values,
          caption,
          c,
          indexOfText,
          _ret;
        for (var l = 0; l < lines.length; l++) {
          _ret = _loop();
          if (_ret === 0) continue;
        }
      }
      if (options.verbose) {
        console.log("WARN: Unknown part", parts[i]);
      }
    }
    return captions;
  }

  /******************************************************************************************
   * Builds captions in SubStation Alpha format (.ssa)
   ******************************************************************************************/
  function build$6(captions, options) {
    var eol = options.eol || "\r\n";
    var ass = options.format == "ass";
    var content = "";
    content += "[Script Info]" + eol;
    content += "; Script generated by subsrt " + eol;
    content += "ScriptType: v4.00" + (ass ? "+" : "") + eol;
    content += "Collisions: Normal" + eol;
    content += eol;
    if (ass) {
      content += "[V4+ Styles]" + eol;
      content += "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding" + eol;
      content += "Style: DefaultVCD, Arial,28,&H00B4FCFC,&H00B4FCFC,&H00000008,&H80000008,-1,0,0,0,100,100,0.00,0.00,1,1.00,2.00,2,30,30,30,0" + eol;
    } else {
      content += "[V4 Styles]" + eol;
      content += "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, TertiaryColour, BackColour, Bold, Italic, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, AlphaLevel, Encoding" + eol;
      content += "Style: DefaultVCD, Arial,28,11861244,11861244,11861244,-2147483640,-1,0,1,1,2,2,30,30,30,0,0" + eol;
    }
    content += eol;
    content += "[Events]" + eol;
    content += "Format: " + (ass ? "Layer" : "Marked") + ", Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text" + eol;
    for (var i = 0; i < captions.length; i++) {
      var caption = captions[i];
      if (caption.type == "meta") {
        continue;
      }
      if (typeof caption.type === "undefined" || caption.type == "caption") {
        content += "Dialogue: " + (ass ? "0" : "Marked=0") + "," + helper$2.toTimeString(caption.start) + "," + helper$2.toTimeString(caption.end) + ",DefaultVCD, NTP,0000,0000,0000,," + caption.text.replace(/\r?\n/g, "\\N") + eol;
        continue;
      }
      if (options.verbose) {
        console.log("SKIP:", caption);
      }
    }
    return content;
  }

  /******************************************************************************************
   * Detects a subtitle format from the content.
   ******************************************************************************************/
  function detect$5(content) {
    if (typeof content !== "string") {
      throw new Error("Expected string content!");
    }
    if (/^[\s\r\n]*\[Script Info\]\r?\n/g.test(content) && /[\s\r\n]*\[Events\]\r?\n/g.test(content)) {
      /*
      [Script Info]
      ...
      [Events]
      */

      //Advanced (V4+) styles for ASS format
      return content.indexOf("[V4+ Styles]") > 0 ? "ass" : "ssa";
    }
  }

  /******************************************************************************************
   * Export
   ******************************************************************************************/
  var ssaFormatter = {
    name: FORMAT_NAME$4,
    helper: helper$2,
    detect: detect$5,
    parse: parse$9,
    build: build$6
  };

  //Compatible format
  var assFormatter = {
    name: "ass",
    helper: ssaFormatter.helper,
    detect: ssaFormatter.detect,
    parse: ssaFormatter.parse,
    build: ssaFormatter.build
  };

  var FORMAT_NAME$3 = "sub";
  var DEFAULT_FPS = 25;

  /******************************************************************************************
   * Parses captions in MicroDVD format: https://en.wikipedia.org/wiki/MicroDVD
   ******************************************************************************************/
  function parse$8(content, options) {
    var fps = options.fps > 0 ? options.fps : DEFAULT_FPS;
    var captions = [];
    var eol = options.eol || "\r\n";
    var parts = content.split(/\r?\n/g);
    for (var i = 0; i < parts.length; i++) {
      var regex = /^\{(\d+)\}\{(\d+)\}(.*)$/gi;
      var match = regex.exec(parts[i]);
      if (match) {
        var caption = {};
        caption.type = "caption";
        caption.index = i + 1;
        caption.frame = {
          start: parseInt(match[1]),
          end: parseInt(match[2])
        };
        caption.frame.count = caption.frame.end - caption.frame.start;
        caption.start = Math.round(caption.frame.start / fps);
        caption.end = Math.round(caption.frame.end / fps);
        caption.duration = caption.end - caption.start;
        var lines = match[3].split(/\|/g);
        caption.content = lines.join(eol);
        caption.text = caption.content.replace(/\{[^\}]+\}/g, ""); //{0}{25}{c:$0000ff}{y:b,u}{f:DeJaVuSans}{s:12}Hello!
        captions.push(caption);
        continue;
      }
      if (options.verbose) {
        console.log("WARN: Unknown part", parts[i]);
      }
    }
    return captions;
  }

  /******************************************************************************************
   * Builds captions in MicroDVD format: https://en.wikipedia.org/wiki/MicroDVD
   ******************************************************************************************/
  function build$5(captions, options) {
    var fps = options.fps > 0 ? options.fps : DEFAULT_FPS;
    var sub = "";
    var eol = options.eol || "\r\n";
    for (var i = 0; i < captions.length; i++) {
      var caption = captions[i];
      if (typeof caption.type === "undefined" || caption.type == "caption") {
        var startFrame = _typeof(caption.frame) == "object" && caption.frame.start >= 0 ? caption.frame.start : caption.start * fps;
        var endFrame = _typeof(caption.frame) == "object" && caption.frame.end >= 0 ? caption.frame.end : caption.end * fps;
        var text = caption.text.replace(/\r?\n/, "|");
        sub += "{" + startFrame + "}" + "{" + endFrame + "}" + text + eol;
        continue;
      }
      if (options.verbose) {
        console.log("SKIP:", caption);
      }
    }
    return sub;
  }

  /******************************************************************************************
   * Detects a subtitle format from the content.
   ******************************************************************************************/
  function detect$4(content) {
    if (typeof content === "string") {
      if (/^\{\d+\}\{\d+\}(.*)/.test(content)) {
        /*
        {7207}{7262}Sister, perfume?
        */
        return FORMAT_NAME$3;
      }
    }
  }

  /******************************************************************************************
   * Export
   ******************************************************************************************/
  var subFormatter = {
    name: FORMAT_NAME$3,
    detect: detect$4,
    parse: parse$8,
    build: build$5
  };

  var FORMAT_NAME$2 = "srt";
  var helper$1 = {
    toMilliseconds: function toMilliseconds(s) {
      var match = /^\s*(\d{1,2}):(\d{1,2}):(\d{1,2})([.,](\d{1,3}))?\s*$/.exec(s);
      var hh = parseInt(match[1]);
      var mm = parseInt(match[2]);
      var ss = parseInt(match[3]);
      var ff = match[5] ? parseInt(match[5]) : 0;
      var ms = hh * 3600 * 1000 + mm * 60 * 1000 + ss * 1000 + ff;
      return ms;
    },
    toTimeString: function toTimeString(ms) {
      var hh = Math.floor(ms / 1000 / 3600);
      var mm = Math.floor(ms / 1000 / 60 % 60);
      var ss = Math.floor(ms / 1000 % 60);
      var ff = Math.floor(ms % 1000);
      var time = (hh < 10 ? "0" : "") + hh + ":" + (mm < 10 ? "0" : "") + mm + ":" + (ss < 10 ? "0" : "") + ss + "," + (ff < 100 ? "0" : "") + (ff < 10 ? "0" : "") + ff;
      return time;
    }
  };

  /******************************************************************************************
   * Parses captions in SubRip format (.srt)
   ******************************************************************************************/
  function parse$7(content, options) {
    var captions = [];
    var eol = options.eol || "\r\n";
    var parts = content.split(/\r?\n\s+\r?\n/g);
    for (var i = 0; i < parts.length; i++) {
      var regex = /^(\d+)\r?\n(\d{1,2}:\d{1,2}:\d{1,2}([.,]\d{1,3})?)\s*\-\-\>\s*(\d{1,2}:\d{1,2}:\d{1,2}([.,]\d{1,3})?)\r?\n([\s\S]*)(\r?\n)*$/gi;
      var match = regex.exec(parts[i]);
      if (match) {
        var caption = {};
        caption.type = "caption";
        caption.index = parseInt(match[1]);
        caption.start = helper$1.toMilliseconds(match[2]);
        caption.end = helper$1.toMilliseconds(match[4]);
        caption.duration = caption.end - caption.start;
        var lines = match[6].split(/\r?\n/);
        caption.content = lines.join(eol);
        caption.text = caption.content.replace(/\<[^\>]+\>/g, "") //<b>bold</b> or <i>italic</i>
        .replace(/\{[^\}]+\}/g, "") //{b}bold{/b} or {i}italic{/i}
        .replace(/\>\>\s*[^:]*:\s*/g, ""); //>> SPEAKER NAME: 
        captions.push(caption);
        continue;
      }
      if (options.verbose) {
        console.log("WARN: Unknown part", parts[i]);
      }
    }
    return captions;
  }

  /******************************************************************************************
   * Builds captions in SubRip format (.srt)
   ******************************************************************************************/
  function build$4(captions, options) {
    var srt = "";
    var eol = options.eol || "\r\n";
    for (var i = 0; i < captions.length; i++) {
      var caption = captions[i];
      if (typeof caption.type === "undefined" || caption.type == "caption") {
        srt += (i + 1).toString() + eol;
        srt += helper$1.toTimeString(caption.start) + " --> " + helper$1.toTimeString(caption.end) + eol;
        srt += caption.text + eol;
        srt += eol;
        continue;
      }
      if (options.verbose) {
        console.log("SKIP:", caption);
      }
    }
    return srt;
  }

  /******************************************************************************************
   * Detects a subtitle format from the content.
   ******************************************************************************************/
  function detect$3(content) {
    if (typeof content === "string") {
      if (/\d+\r?\n\d{1,2}:\d{1,2}:\d{1,2}([.,]\d{1,3})?\s*\-\-\>\s*\d{1,2}:\d{1,2}:\d{1,2}([.,]\d{1,3})?/g.test(content)) {
        /*
        3
        00:04:48,280 --> 00:04:50,510
        Sister, perfume?
        */
        return FORMAT_NAME$2;
      }
    }
  }

  /******************************************************************************************
   * Export
   ******************************************************************************************/
  var srtFormatter = {
    name: FORMAT_NAME$2,
    helper: helper$1,
    detect: detect$3,
    parse: parse$7,
    build: build$4
  };

  var FORMAT_NAME$1 = "sbv";
  var helper = {
    toMilliseconds: function toMilliseconds(s) {
      var match = /^\s*(\d{1,2}):(\d{1,2}):(\d{1,2})([.,](\d{1,3}))?\s*$/.exec(s);
      var hh = parseInt(match[1]);
      var mm = parseInt(match[2]);
      var ss = parseInt(match[3]);
      var ff = match[5] ? parseInt(match[5]) : 0;
      var ms = hh * 3600 * 1000 + mm * 60 * 1000 + ss * 1000 + ff;
      return ms;
    },
    toTimeString: function toTimeString(ms) {
      var hh = Math.floor(ms / 1000 / 3600);
      var mm = Math.floor(ms / 1000 / 60 % 60);
      var ss = Math.floor(ms / 1000 % 60);
      var ff = Math.floor(ms % 1000);
      var time = (hh < 10 ? "0" : "") + hh + ":" + (mm < 10 ? "0" : "") + mm + ":" + (ss < 10 ? "0" : "") + ss + "." + (ff < 100 ? "0" : "") + (ff < 10 ? "0" : "") + ff;
      return time;
    }
  };

  /******************************************************************************************
   * Parses captions in SubViewer format (.sbv)
   ******************************************************************************************/
  function parse$6(content, options) {
    var captions = [];
    var eol = options.eol || "\r\n";
    var parts = content.split(/\r?\n\s+\r?\n/);
    for (var i = 0; i < parts.length; i++) {
      var regex = /^(\d{1,2}:\d{1,2}:\d{1,2}([.,]\d{1,3})?)\s*[,;]\s*(\d{1,2}:\d{1,2}:\d{1,2}([.,]\d{1,3})?)\r?\n([\s\S]*)(\r?\n)*$/gi;
      var match = regex.exec(parts[i]);
      if (match) {
        var caption = {};
        caption.type = "caption";
        caption.start = helper.toMilliseconds(match[1]);
        caption.end = helper.toMilliseconds(match[3]);
        caption.duration = caption.end - caption.start;
        var lines = match[5].split(/\[br\]|\r?\n/gi);
        caption.content = lines.join(eol);
        caption.text = caption.content.replace(/\>\>\s*[^:]+:\s*/g, ""); //>> SPEAKER NAME: 
        captions.push(caption);
        continue;
      }
      if (options.verbose) {
        console.log("WARN: Unknown part", parts[i]);
      }
    }
    return captions;
  }

  /******************************************************************************************
   * Builds captions in SubViewer format (.sbv)
   ******************************************************************************************/
  function build$3(captions, options) {
    var content = "";
    var eol = options.eol || "\r\n";
    for (var i = 0; i < captions.length; i++) {
      var caption = captions[i];
      if (typeof caption.type === "undefined" || caption.type == "caption") {
        content += helper.toTimeString(caption.start) + "," + helper.toTimeString(caption.end) + eol;
        content += caption.text + eol;
        content += eol;
        continue;
      }
      if (options.verbose) {
        console.log("SKIP:", caption);
      }
    }
    return content;
  }

  /******************************************************************************************
   * Detects a subtitle format from the content.
   ******************************************************************************************/
  function detect$2(content) {
    if (typeof content !== "string") {
      throw new Error("Expected string content!");
    }
    if (/\d{1,2}:\d{1,2}:\d{1,2}([.,]\d{1,3})?\s*[,;]\s*\d{1,2}:\d{1,2}:\d{1,2}([.,]\d{1,3})?/g.test(content)) {
      /*
      00:04:48.280,00:04:50.510
      Sister, perfume?
      */
      return "sbv";
    }
  }

  /******************************************************************************************
   * Export
   ******************************************************************************************/
  var sbvFormatter = {
    name: FORMAT_NAME$1,
    helper: helper,
    detect: detect$2,
    parse: parse$6,
    build: build$3
  };

  var FORMAT_NAME = "json";

  /******************************************************************************************
   * Parses captions in JSON format
   ******************************************************************************************/
  function parse$5(content, options) {
    return JSON.parse(content);
  }

  /******************************************************************************************
   * Builds captions in JSON format
   ******************************************************************************************/
  function build$2(captions, options) {
    return JSON.stringify(captions, " ", 2);
  }

  /******************************************************************************************
   * Detects a subtitle format from the content.
   ******************************************************************************************/
  function detect$1(content) {
    if (typeof content === "string") {
      if (/^\[[\s\r\n]*\{[\s\S]*\}[\s\r\n]*\]$/g.test(content)) {
        /*
        [
          { ... }
        ]
        */
        return "json";
      }
    }
  }

  /******************************************************************************************
   * Export
   ******************************************************************************************/
  var jsonFormatter = {
    name: FORMAT_NAME,
    detect: detect$1,
    parse: parse$5,
    build: build$2
  };

  var supportedFormats = {
    vtt: vttFormatter,
    lrc: lrcFormatter,
    smi: smiFormatter,
    ssa: ssaFormatter,
    ass: assFormatter,
    sub: subFormatter,
    srt: srtFormatter,
    sbv: sbvFormatter,
    json: jsonFormatter
  };
  function clone(obj) {
    return JSON.parse(JSON.stringify(obj));
  }

  /******************************************************************************************
   * Gets a list of supported subtitle supportedFormats.
   ******************************************************************************************/
  function list$3() {
    return Object.keys(supportedFormats);
  }

  /******************************************************************************************
   * Detects a subtitle supportedFormats from the content.
   ******************************************************************************************/
  function detect(content) {
    var formats = Object.keys(supportedFormats);
    for (var i = 0; i < formats.length; i++) {
      var formatName = formats[i];
      var handler = supportedFormats[formatName];
      if (handler === undefined) {
        continue;
      }
      if (typeof handler.detect != "function") {
        continue;
      }
      //Function 'detect' can return true or supportedFormats name
      var d = handler.detect(content);
      if (d === true) {
        //Logical true
        return formatName;
      }
      if (formatName === d) {
        //Format name
        return d;
      }
    }
  }

  /******************************************************************************************
   * Parses a subtitle content.
   ******************************************************************************************/
  function parse$4(content, options) {
    options = options || {};
    var format = options.format || detect(content);
    if (!format || format.trim().length == 0) {
      throw new Error("Cannot determine subtitle supportedFormats!");
    }
    var handler = supportedFormats[format];
    if (handler === undefined) {
      throw new Error("Unsupported subtitle supportedFormats: " + format);
    }
    var func = handler.parse;
    if (typeof func != "function") {
      throw new Error("Subtitle supportedFormats does not support 'parse' op: " + format);
    }
    return func(content, options);
  }

  /******************************************************************************************
   * Builds a subtitle content
   ******************************************************************************************/
  function build$1(captions, options) {
    options = options || {};
    var format = options.format || "srt";
    if (!format || format.trim().length == 0) {
      throw new Error("Cannot determine subtitle supportedFormats!");
    }
    var handler = supportedFormats[format];
    if (typeof handler == "undefined") {
      throw new Error("Unsupported subtitle supportedFormats: " + format);
    }
    var func = handler.build;
    if (typeof func != "function") {
      throw new Error("Subtitle supportedFormats does not support 'build' op: " + format);
    }
    return func(captions, options);
  }

  /******************************************************************************************
   * Converts subtitle supportedFormats
   ******************************************************************************************/
  function convert(content, options) {
    if (typeof options == "string") {
      options = {
        to: options
      };
    }
    options = options || {};
    var opt = clone(options);
    delete opt.format;
    if (opt.from) {
      opt.format = opt.from;
    }
    var captions = parse$4(content, opt);
    if (opt.resync) {
      captions = resync(captions, opt.resync);
    }
    opt.format = opt.to || options.format;
    return build$1(captions, opt);
  }

  /******************************************************************************************
   * Shifts the time of the captions.
   ******************************************************************************************/
  function resync(captions, options) {
    options = options || {};
    var func, ratio, frame, offset;
    if (typeof options == "function") {
      func = options; //User's function to handle time shift
    } else if (typeof options == "number") {
      offset = options; //Time shift (+/- offset)
      func = function func(a) {
        return [a[0] + offset, a[1] + offset];
      };
    } else if (_typeof(options) == "object") {
      offset = (options.offset || 0) * (options.frame ? options.fps || 25 : 1);
      ratio = options.ratio || 1.0;
      frame = options.frame;
      func = function func(a) {
        return [Math.round(a[0] * ratio + offset), Math.round(a[1] * ratio + offset)];
      };
    } else {
      throw new Error("Argument 'options' not defined!");
    }
    var resynced = [];
    for (var i = 0; i < captions.length; i++) {
      var caption = clone(captions[i]);
      if (typeof caption.type === "undefined" || caption.type == "caption") {
        if (frame) {
          var shift = func([caption.frame.start, caption.frame.end]);
          if (shift && shift.length == 2) {
            caption.frame.start = shift[0];
            caption.frame.end = shift[1];
            caption.frame.count = caption.frame.end - caption.frame.start;
          }
        } else {
          var shift = func([caption.start, caption.end]);
          if (shift && shift.length == 2) {
            caption.start = shift[0];
            caption.end = shift[1];
            caption.duration = caption.end - caption.start;
          }
        }
      }
      resynced.push(caption);
    }
    return resynced;
  }
  var subsrt = {
    list: list$3,
    detect: detect,
    parse: parse$4,
    build: build$1,
    convert: convert,
    resync: resync
  };

  /**
   * Поучить время
   * @param {string} val 
   * @returns {number}
   */
  function time$1(val) {
    var regex = /(\d+):(\d{2}):(\d{2})[.,](\d{3})/;
    var parts = regex.exec(val);
    if (parts === null) return 0;
    for (var i = 1; i < 5; i++) {
      parts[i] = parseInt(parts[i], 10);
      if (isNaN(parts[i])) parts[i] = 0;
    }

    //hours + minutes + seconds + ms
    return parts[1] * 3600000 + parts[2] * 60000 + parts[3] * 1000 + parts[4];
  }

  /**
   * Парсить
   * @param {string} data 
   * @param {boolean} ms 
   * @returns 
   */
  function parse$3(data, ms) {
    var type = subsrt.detect(data);
    if (type === 'vtt') return parseVTT(data, ms);
    if (type !== undefined && type !== 'srt') return parseVTT(convertToVTT(data), ms);else return parseSRT(data, ms);
  }

  /**
   * Парсить SRT
   * @param {string} data 
   * @param {boolean} ms 
   * @returns {[{id:string, startTime:number, endTime:number, text:string}]}
   */
  function parseSRT(data, ms) {
    var useMs = ms ? true : false;
    data = data.replace(/\r\n/g, '\n');
    data = data.replace(/\r/g, '\n');
    var regex = /(\d+)\n(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})/g;
    data = data.split(regex);
    data.shift();
    var items = [];
    for (var i = 0; i < data.length; i += 4) {
      items.push({
        id: data[i].trim(),
        startTime: useMs ? time$1(data[i + 1].trim()) : data[i + 1].trim(),
        endTime: useMs ? time$1(data[i + 2].trim()) : data[i + 2].trim(),
        text: data[i + 3].trim()
      });
    }
    return items;
  }
  function convertToVTT(data) {
    return subsrt.convert(data, {
      format: 'vtt',
      fps: 25
    });
  }

  /**
   * Парсить VTT
   * @param {string} data 
   * @param {boolean} ms
   * @returns {[{id:string, startTime:number, endTime:number, text:string}]}
   */
  function parseVTT(data, ms) {
    var useMs = ms ? true : false;
    data = data.replace(/\r\n/g, '\n');
    data = data.replace(/\r/g, '\n');
    data = data.replace(/(\d{2}):(\d{2})\.(\d{3})[ \t]+-->[ \t]+(\d{2}):(\d{2})\.(\d{3})/g, '00:$1:$2.$3 --> 00:$4:$5.$6');
    var regex = /(\n\n.+\n)?[ \t]*(\d{2}:\d{2}:\d{2}\.\d{3})[ \t]+-->[ \t]+(\d{2}:\d{2}:\d{2}\.\d{3})/g;
    data = data.split(regex);
    data.shift();
    var items = [];
    for (var i = 0; i < data.length; i += 4) {
      items.push({
        id: (data[i] || '').trim(),
        startTime: useMs ? time$1(data[i + 1].trim()) : data[i + 1].trim(),
        endTime: useMs ? time$1(data[i + 2].trim()) : data[i + 2].trim(),
        text: data[i + 3].trim()
      });
    }
    return items;
  }

  /**
   * Класс
   */
  function CustomSubs() {
    var parsed;
    var network = new create$e();
    this.listener = start$8();

    /**
     * Загрузить
     * @param {string} url 
     */
    this.load = function (url) {
      network.silent(url, function (data) {
        if (data) {
          parsed = parse$3(data, true);
        }
      }, false, false, {
        dataType: 'text'
      });
    };

    /**
     * Показать текст
     * @param {number} time_sec 
     */
    this.update = function (time_sec) {
      var time_ms = time_sec * 1000;
      if (parsed) {
        var text = '';
        for (var i = 0; i < parsed.length; i++) {
          var sub = parsed[i];
          if (time_ms > sub.startTime && time_ms < sub.endTime) {
            text = sub.text.replace("\n", '<br>');
            break;
          }
        }
        this.listener.send('subtitle', {
          text: text.trim()
        });
      }
    };

    /**
     * Уничтожить
     */
    this.destroy = function () {
      network.clear();
      network = null;
      this.listener = null;
    };
  }

  var context;
  function smooth(a, b, s, c) {
    return a + (b - a) * (s * 0.02);
  }
  function toDb(_float) {
    var db = 20 * (Math.log(_float) / Math.log(10));
    db = Math.max(-48, Math.min(db, 0));
    return db;
  }
  function Source(video) {
    var source = context.createMediaElementSource(video);
    var analyser = context.createAnalyser();
    var volume = context.createGain();
    var destroy = false;
    var display = true;
    var draw_html = $('<div class="normalization normalization--visible"><canvas></canvas></div>');
    var draw_canvas = draw_html.find('canvas')[0];
    var draw_context = draw_canvas.getContext("2d");
    draw_canvas.width = 5;
    draw_canvas.height = Math.round(window.innerHeight * 0.26);
    try {
      analyser.fftSize = 2048 * 4;
      console.log('Player', 'normalization fftSize 2048 * 4');
    } catch (e) {
      try {
        analyser.fftSize = 2048 * 2;
        console.log('Player', 'normalization fftSize 2048 * 2');
      } catch (e) {
        analyser.fftSize = 2048;
        console.log('Player', 'normalization fftSize 2048');
      }
    }
    var frequencyData = new Uint8Array(analyser.frequencyBinCount);
    var midFreqRange = {
      start: 1300,
      end: 4000
    }; // Средние частоты
    var highFreqRange = {
      start: 4000,
      end: 8000
    }; // Высокие частоты

    function calculateRMS(range) {
      var startIndex = Math.floor(range.start * analyser.frequencyBinCount / (context.sampleRate / 2));
      var endIndex = Math.floor(range.end * analyser.frequencyBinCount / (context.sampleRate / 2));
      startIndex = Math.max(0, Math.min(startIndex, frequencyData.length - 1));
      endIndex = Math.max(0, Math.min(endIndex, frequencyData.length - 1));
      var total = 0;
      var count = 0;
      for (var i = startIndex; i <= endIndex; i++) {
        var value = frequencyData[i];
        total += value * value;
        count++;
      }
      return count > 0 ? Math.sqrt(total / count) : 0;
    }
    analyser.gain_smooth = 1;

    //подключаем анализ
    source.connect(analyser);

    //подключаем регулятор звука
    analyser.connect(volume);

    //подключаем к выходу
    volume.connect(context.destination);
    $('body').append(draw_html);
    function update() {
      if (!destroy) requestAnimationFrame(update);
      analyser.getByteFrequencyData(frequencyData);
      var rms_mid = calculateRMS(midFreqRange);
      var rms_high = calculateRMS(highFreqRange);
      var db_mid = toDb(rms_mid / 255);
      var db_high = toDb(rms_high / 255);
      var sm_st = Storage.get('player_normalization_smooth', 'medium');
      var pw_st = Storage.get('player_normalization_power', 'hight');
      var tp_st = Storage.get('player_normalization_type', 'all');
      var pw_am = pw_st == 'hight' ? 1 : pw_st == 'medium' ? 0.7 : 0.35;
      var gain = Math.max(0.0, Math.min(2, (db_mid + db_high) / 2 / -24));
      analyser.gain_smooth = sm_st == 'none' ? gain : smooth(analyser.gain_smooth, gain, sm_st == 'hight' ? 45 : sm_st == 'medium' ? 20 : 5);
      var vol = pw_st == 'none' ? 1 : 1 + (analyser.gain_smooth - 1) * pw_am;
      volume.gain.value = tp_st == 'all' ? vol : tp_st == 'up' ? Math.max(1, vol) : Math.min(1, vol);
      if (display) {
        draw_context.clearRect(0, 0, draw_canvas.width, draw_canvas.height);
        var down = Math.min(1, Math.max(0, 1 - volume.gain.value));
        var up = Math.min(1, Math.max(0, volume.gain.value - 1));
        var half = draw_canvas.height / 2;
        draw_context.fillStyle = 'rgba(251,91,91,1)';
        draw_context.fillRect(0, half, draw_canvas.width, half * down);
        draw_context.fillStyle = 'rgba(91,213,251,1)';
        draw_context.fillRect(0, half - half * up, draw_canvas.width, half * up);
      }
    }
    update();
    this.visible = function (status) {
      display = status;
      draw_html.toggleClass('normalization--visible', status);
    };
    this.destroy = function () {
      volume.disconnect();
      analyser.disconnect();
      source.disconnect();
      destroy = true;
      draw_html.remove();
    };
  }
  function Normalization() {
    if (!context) {
      var classContext = window.AudioContext || window.webkitAudioContext;
      context = new classContext();
    }
    var source;
    this.attach = function (video) {
      if (!source) source = new Source(video);
    };
    this.visible = function (status) {
      if (source) source.visible(status);
    };
    this.destroy = function () {
      if (source) source.destroy();
      source = null;
    };
  }

  function AVPlay(call_video) {
    var avplay, plugin, stream_url, loaded, current_time;
    var object = $('<object class="player-video_video"  style="visibility:hidden;"></object>');
    var video = object[0];
    var listener = start$8();
    var change_scale_later;
    var change_speed_later;
    var canGetVideoResolution = false;

    /**
     * Установить урл
     */
    Object.defineProperty(video, "src", {
      set: function set(url) {
        if (url) {
          if (url.toLowerCase().indexOf(".m3u8") != -1 && url.toUpperCase().indexOf("|COMPONENT=HLS") == -1) {
            url += "|COMPONENT=HLS";
          } else if (url.toLowerCase().indexOf(".mpd") != -1 && url.toUpperCase().indexOf("|COMPONENT=HAS") == -1) {
            url += "|COMPONENT=HAS";
          }
          stream_url = url;
          console.log(stream_url);
          avplay.init();
          plugin = avplay.setPlayerPluginObject();
          avplay.onEvent = eventHandler;
        }
      },
      get: function get() {}
    });

    /**
     * Позиция
     */
    Object.defineProperty(video, "currentTime", {
      set: function set(t) {
        try {
          seekTo(t);
        } catch (e) {
          listener.send('error', {
            error: 'code [' + e.code + '] ' + e.message
          });
        }
      },
      get: function get() {
        return current_time ? current_time / 1000 : 0;
      }
    });
    /**
     * 
     */
    function seekTo(time) {
      var time_s;
      var time_ms = Math.ceil(time) * 1000;
      var duration_ms = avplay.getDuration();
      if (time_ms >= 0 && current_time - time_ms >= 0) {
        time_s = Math.ceil((current_time - time_ms) / 1000);
        plugin.Execute("JumpBackward", time_s);
      } else if (time_ms >= 0 && duration_ms - current_time + time_ms >= 0) {
        time_s = Math.ceil((time_ms - current_time) / 1000);
        plugin.Execute("JumpForward", time_s);
      }
    }
    /**
     * Длительность
     */
    Object.defineProperty(video, "duration", {
      set: function set() {},
      get: function get() {
        var d = 0;
        try {
          d = avplay.getDuration();
        } catch (e) {}
        return d ? d / 1000 : 0;
      }
    });
    /**
     * Пауза
     */
    Object.defineProperty(video, "paused", {
      set: function set() {},
      get: function get() {
        try {
          return avplay.status == '5';
        } catch (e) {
          return false;
        }
      }
    });

    /**
     * Аудиодорожки
     */
    Object.defineProperty(video, "audioTracks", {
      set: function set() {},
      get: function get() {
        try {
          var amount = avplay.getTotalNumOfStreamID(1);
          var tracks = Array.apply(null, {
            length: amount
          }).map(Number.call, Number).map(function (i) {
            var item = {
              extra: JSON.parse(avplay.getStreamExtraData(1, i)),
              index: parseInt(i),
              language: languageNumToStr(avplay.getStreamLanguageInfo(1, i))
            };
            Object.defineProperty(item, "enabled", {
              set: function set(v) {
                if (v) {
                  try {
                    avplay.setStreamID(1, item.index);
                  } catch (e) {
                    console.log('Player', 'no change audio:', e.message);
                  }
                }
              },
              get: function get() {}
            });
            return item;
          }).sort(function (a, b) {
            return a.index - b.index;
          });
          return tracks;
        } catch (e) {
          return [];
        }
      }
    });

    /**
     * Субтитры
     */
    Object.defineProperty(video, "textTracks", {
      set: function set() {},
      get: function get() {
        try {
          var amount = avplay.getTotalNumOfStreamID(4);
          var tracks = Array.apply(null, {
            length: amount
          }).map(Number.call, Number).map(function (i) {
            var item = {
              extra: JSON.parse(avplay.getStreamExtraData(4, i)),
              index: parseInt(i),
              language: languageNumToStr(avplay.getStreamLanguageInfo(4, i))
            };
            Object.defineProperty(item, "mode", {
              set: function set(v) {
                if (v == 'showing') {
                  try {
                    avplay.setStreamID(4, item.index);
                  } catch (e) {
                    console.log('Player', 'no change text:', e.message);
                  }
                }
              },
              get: function get() {}
            });
            return item;
          }).sort(function (a, b) {
            return a.index - b.index;
          });
          return tracks;
        } catch (e) {
          return [];
        }
      }
    });
    /**
     * Получаем текст языка субтитров или аудио
     */
    function languageNumToStr(num) {
      var str;
      //Словарь кодов озвучек
      var lang = {
        6384738: "Albanian",
        7565673: "Albanian",
        6647399: "English",
        6388325: "Azerbaijan",
        6386285: "Armenian",
        6448492: "Belarusian",
        6452588: "Bulgarian",
        6514793: "Chinese",
        6776178: "German",
        6911073: "Italian",
        7565409: "Spanish",
        7037306: "Kazakh",
        7040882: "Korean",
        7368562: "Portuguese",
        7501171: "Russian",
        7564399: "Slovak",
        7564406: "Slovenian",
        7565936: "Serbian",
        7632242: "Turkish",
        7699042: "Uzbek",
        7695218: "Ukrainian",
        8026747: "Ukrainian",
        6713957: "French",
        7567205: "Swedish",
        6975598: "Japanese"
      };
      if (lang[num] != undefined) {
        str = lang[num];
      } else {
        var nHex = num.toString(16);
        var sHex1 = "0x" + nHex.substring(0, 2);
        var sHex2 = "0x" + nHex.substring(2, 2);
        var sHex3 = "0x" + nHex.substring(4, 2);
        var str1 = String.fromCharCode(sHex1);
        var str2 = String.fromCharCode(sHex2);
        var str3 = String.fromCharCode(sHex3);
        str = str1 + str2 + str3;
        if (str === "\0\0\0") {
          str = "Неизвестный";
        }
      }
      return str;
    }
    /**
     * Ширина видео
     */
    Object.defineProperty(video, "videoWidth", {
      set: function set() {},
      get: function get() {
        if (canGetVideoResolution) {
          return avplay.getVideoResolution().split('|')[0];
        } else {
          return 0;
        }
      }
    });

    /**
     * Высота видео
     */
    Object.defineProperty(video, "videoHeight", {
      set: function set() {},
      get: function get() {
        if (canGetVideoResolution) {
          return avplay.getVideoResolution().split('|')[1];
        } else {
          return 0;
        }
      }
    });

    /**
     * Меняем размер видео
     * @param {string} scale - default|fill
     */
    function changeScale(scale) {
      try {
        var xV = curWidget.width,
          yV = curWidget.height,
          aX = 0,
          aY = 0,
          aW = curWidget.width,
          aH = curWidget.height,
          cX = 0,
          cY = 0,
          pH = 100,
          pW = 100,
          cW = video.videoWidth,
          cH = video.videoHeight;
        if (cH == 0 || cW == 0) {
          throw false;
        }
        switch (scale) {
          //original
          case 'default':
            if (cW / cH < 1.79) {
              aW = yV * cW / cH;
              aX = (xV - aW) / 2;
            } else {
              aH = xV * cH / cW;
              aY = (yV - aH) / 2;
            }
            ;
            break;
          //full
          case 'fill':
            break;
          default:
            //zoom
            var type = scale[0];
            var zoom = parseInt(scale.replace(/\D+/g, ""));
            if (type == 's') {
              pH = zoom;
              pW = zoom;
            } else if (type == 'v') {
              pH = zoom;
              pW = 100;
            }
            if (zoom >= 80 && zoom <= 140) {
              if (pW <= 100) {
                aW = xV / 100 * pW;
                aX = (xV - aW) / 2;
              } else {
                cX = cW * (pW / 200 - 0.5);
                cW = cW * (2 - pW / 100);
              }
              if (pH <= 100) {
                aH = yV / 100 * pH;
                aY = (yV - aH) / 2;
              } else {
                cY = cH * (pH / 200 - 0.5);
                cH = cH * (2 - pH / 100);
              }
            } else {
              changeScale('default');
              return;
            }
            break;
        }
        ;
        avplay.setDisplayArea({
          left: aX,
          top: aY,
          width: aW,
          height: aH
        });
        if (scale != 'fill') {
          avplay.setCropArea(function () {
            console.log('Player', 'change scale ' + scale);
          }, function (e) {
            listener.send('error', {
              error: 'code [' + e.code + '] ' + e.message
            });
          }, {
            left: cX,
            top: cY,
            width: cW,
            height: cH
          });
        } else {
          avplay.setCropArea(function () {
            console.log('Player', 'change scale ' + scale);
          }, function (e) {
            listener.send('error', {
              error: 'code [' + e.code + '] ' + e.message
            });
          }, {
            left: 0,
            top: 0,
            width: 0,
            height: 0
          });
        }
      } catch (e) {
        change_scale_later = scale;
      }
    }
    function changeSpeed(speed) {
      try {
        avplay.setSpeed(speed);
      } catch (e) {
        change_speed_later = speed;
      }
    }

    /**
     * Всегда говорим да, мы можем играть
     */
    video.canPlayType = function () {
      return true;
    };

    /**
     * Вешаем кастомные события
     */
    video.addEventListener = listener.follow.bind(listener);

    /**
     * Вешаем события от плеера orsay
     */
    var eventHandler = function eventHandler(type, data) {
      switch (type) {
        // 1 CONNECTION_FAILED;
        case 1:
          listener.send('error', {
            error: '[orsay native player: CONNECTION_FAILED]'
          });
          break;
        // 2 AUTHENTICATION_FAILED
        case 2:
          listener.send('error', {
            error: '[orsay native player: AUTHENTICATION_FAILED]'
          });
          break;
        // 3 STREAM_NOT_FOUND
        case 3:
          listener.send('error', {
            error: '[orsay native player: STREAM_NOT_FOUND]'
          });
          break;
        // 4 NETWORK_DISCONNECTED
        case 4:
          listener.send('error', {
            error: '[orsay native player: NETWORK_DISCONNECTED]'
          });
          break;
        // 5 NETWORK_SLOW
        case 5:
          listener.send('error', {
            error: '[orsay native player: NETWORK_SLOW]'
          });
          break;
        // 6 RENDER_ERROR (a)
        case 6:
          switch (data) {
            case "0":
              listener.send('error', {
                error: '[orsay native player: UNKNOWN_ERROR]'
              });
              break;
            case "1":
              listener.send('error', {
                error: '[orsay native player: UNSUPPORTED_CONTAINER]'
              });
              break;
            case "2":
              listener.send('error', {
                error: '[orsay native player: UNSUPPORTED_VIDEO_CODEC]'
              });
              break;
            case "3":
              listener.send('error', {
                error: '[orsay native player: UNSUPPORTED_AUDIO_CODEC]'
              });
              break;
            case "4":
              listener.send('error', {
                error: '[orsay native player: UNSUPPORTED_VIDEO_RESOLUTION]'
              });
              break;
            case "5":
              listener.send('error', {
                error: '[orsay native player: UNSUPPORTED_VIDEO_FRAMERATE]'
              });
              break;
            case "6":
              listener.send('error', {
                error: '[orsay native player: CURRUPTED_STREAM]'
              });
              break;
            case "100":
              listener.send('error', {
                error: '[orsay native player: CUSTOM_ERROR]'
              });
              break;
          }
        // 7 RENDERING_START
        case 7:
          console.log('Player', 'RENDERING_START');
          break;
        // 8 RENDERING_COMPLETE
        case 8:
          console.log('Player', 'RENDERING_COMPLETE');
          avplay.stop();
          listener.send('ended');
          break;
        // 9 STREAM_INFO_READY
        case 9:
          canGetVideoResolution = true;
          $('body').toggleClass('orsay-player--show', true);
          console.log('Player', 'STREAM_INFO_READY');
          avplay.startSubtitle({
            path: "/dtv/temp/",
            streamID: 999,
            sync: 999,
            callback: function callback() {}
          });
          listener.send('loadeddata');
          break;
        // 10 DECODING_COMPLETE
        case 10:
          console.log('Player', 'DECODING_COMPLETE');
          break;
        case 11:
          console.log('Player', 'buffering start');
          listener.send('waiting');
          break;
        // 12 BUFFERING_COMPLETE
        case 12:
          console.log('Player', 'BUFFERING_COMPLETE');
          listener.send('playing');
          break;
        // 13 BUFFERING_PROGRESS
        case 13:
          listener.send('progress', {
            percent: data
          });
          break;
        // 14 CURRENT_PLAYBACK_TIME
        case 14:
          current_time = data;
          listener.send('timeupdate');
          if (change_scale_later) {
            changeScale(change_scale_later);
            change_scale_later = false;
          }
          if (change_speed_later) {
            changeSpeed(change_speed_later);
            change_speed_later = false;
          }
          break;
        // 15 AD_START
        case 15:
          console.log('Player', 'AD_START');
          break;
        // 16 AD_END
        case 16:
          console.log('Player', 'AD_END');
          break;
        // 17 RESOLUTION_CHANGED
        case 17:
          console.log('Player', 'RESOLUTION_CHANGED ' + data);
          break;
        // 18 BITRATE_CHANGED
        case 18:
          console.log('Player', 'BITRATE_CHANGED ' + data);
          break;
        // 19 SUBTITLE
        case 19:
          listener.send('subtitle', {
            text: data
          });
          break;
      }
    };

    /**
     * Загрузить
     */
    video.load = function () {
      if (stream_url) {
        if (avplay.open(stream_url)) {
          loaded = true;
          listener.send('canplay');
        }
      }
    };

    /**
     * Играть
     */
    video.play = function () {
      if (loaded) {
        if (avplay.status == '5') {
          avplay.resume();
        } else {
          avplay.play(function () {
            console.log('Player', 'play');
          }, function (e) {
            listener.send('error', {
              error: 'code [' + e.code + '] ' + e.message
            });
          });
        }
      }
    };

    /**
     * Пауза
     */
    video.pause = function () {
      if (loaded) avplay.pause();
    };

    /**
     * Установить масштаб
     */
    video.size = function (type) {
      changeScale(type);
    };

    /**
     * Установить скорость
     */
    video.speed = function (speed) {
      changeSpeed(speed);
    };

    /**
     * Уничтожить
     */
    video.destroy = function () {
      try {
        console.log('Player', 'destroy');
        avplay.destroy();
      } catch (e) {}
      $('body').toggleClass('orsay-player--show', false);
      video.remove();
      listener.destroy();
    };
    webapis.avplay.getAVPlay(function (av) {
      avplay = av;
    }, function (e) {
      listener.send('error', {
        error: 'code [' + e.code + '] ' + e.message
      });
    });
    call_video(video);
    return object;
  }

  function YouTube$1(call_video) {
    var stream_url, loaded;
    var needclick = true; //Platform.screen('mobile') || navigator.userAgent.toLowerCase().indexOf("android") >= 0

    var object = $('<div class="player-video__youtube"><div class="player-video__youtube-player" id="youtube-player"></div><div class="player-video__youtube-line-top"></div><div class="player-video__youtube-line-bottom"></div><div class="player-video__youtube-noplayed hide">' + Lang.translate('player_youtube_no_played') + '</div></div>');
    var video = object[0];
    var listener = start$8();
    var volume = 100;
    var youtube;
    var timeupdate;
    var timetapplay;
    var screen_size = 2;
    function videoSize() {
      var size = {
        width: 0,
        height: 0
      };
      if (youtube) {
        var str = '';
        try {
          str = youtube.getPlaybackQuality();
        } catch (e) {}
        if (str == 'highres' || str == 'hd2160') {
          size.width = 3840;
          size.height = 2160;
        } else if (str == 'hd1440') {
          size.width = 2560;
          size.height = 1440;
        } else if (str == 'hd1080') {
          size.width = 1920;
          size.height = 1080;
        } else if (str == 'hd720') {
          size.width = 1280;
          size.height = 720;
        } else {
          size.width = 854;
          size.height = 480;
        }
      }
      return size;
    }

    /**
     * Установить урл
     */
    Object.defineProperty(video, "src", {
      set: function set(url) {
        if (url) {
          stream_url = url;
        }
      },
      get: function get() {}
    });

    /**
     * Позиция
     */
    Object.defineProperty(video, "currentTime", {
      set: function set(t) {
        try {
          youtube.seekTo(t);
        } catch (e) {}
      },
      get: function get() {
        try {
          return youtube.getCurrentTime();
        } catch (e) {
          return 0;
        }
      }
    });

    /**
     * Длительность
     */
    Object.defineProperty(video, "duration", {
      set: function set() {},
      get: function get() {
        try {
          return youtube.getDuration();
        } catch (e) {
          return 0;
        }
      }
    });

    /**
     * Пауза
     */
    Object.defineProperty(video, "paused", {
      set: function set() {},
      get: function get() {
        if (needclick) return true;
        try {
          return youtube.getPlayerState() == YT.PlayerState.PAUSED;
        } catch (e) {
          return true;
        }
      }
    });

    /**
     * Аудиодорожки
     */
    Object.defineProperty(video, "audioTracks", {
      set: function set() {},
      get: function get() {
        return [];
      }
    });

    /**
     * Субтитры
     */
    Object.defineProperty(video, "textTracks", {
      set: function set() {},
      get: function get() {
        return [];
      }
    });

    /**
     * Ширина видео
     */
    Object.defineProperty(video, "videoWidth", {
      set: function set() {},
      get: function get() {
        return videoSize().width;
      }
    });

    /**
     * Высота видео
     */
    Object.defineProperty(video, "videoHeight", {
      set: function set() {},
      get: function get() {
        return videoSize().height;
      }
    });
    Object.defineProperty(video, "volume", {
      set: function set(num) {
        volume = num * 100;
        if (youtube) youtube.setVolume(volume);
      },
      get: function get() {}
    });

    /**
     * Всегда говорим да, мы можем играть
     */
    video.canPlayType = function () {
      return true;
    };
    video.resize = function () {
      object.find('.player-video__youtube-player').width(window.innerWidth * screen_size);
      object.find('.player-video__youtube-player').height((window.innerHeight + 600) * screen_size);
      object.find('.player-video__youtube-player').css({
        transform: 'scale(0.5)'
      });
    };

    /**
    * Вешаем кастомные события
    */
    video.addEventListener = listener.follow.bind(listener);

    /**
     * Загрузить
     */
    video.load = function () {
      if (stream_url && !youtube) {
        video.resize();
        var id = stream_url.replace('//youtu.be/', '//www.youtube.com/watch?v=').split('?v=').pop();
        if (typeof YT == 'undefined') {
          return object.append('<div class="player-video__youtube-needclick"><img src="https://img.youtube.com/vi/' + id + '/sddefault.jpg" /><div>' + Lang.translate('torrent_error_connect') + '</div></div>');
        }
        if (needclick) {
          object.append('<div class="player-video__youtube-needclick"><img src="https://img.youtube.com/vi/' + id + '/sddefault.jpg" /><div>' + Lang.translate('loading') + '...' + '</div></div>');
          timetapplay = setTimeout(function () {
            object.find('.player-video__youtube-needclick div').text(Lang.translate('player_youtube_start_play'));
            PlayerPanel.update('pause');
          }, 10000);
        }
        console.log('YouTube', 'create');
        youtube = new YT.Player('youtube-player', {
          height: (window.innerHeight + 600) * screen_size,
          width: window.innerWidth * screen_size,
          playerVars: {
            'controls': 1,
            'showinfo': 0,
            'autohide': 1,
            'modestbranding': 1,
            'autoplay': 1,
            'disablekb': 1,
            'fs': 0,
            'enablejsapi': 1,
            'playsinline': 1,
            'rel': 0,
            'suggestedQuality': 'hd1080',
            'setPlaybackQuality': 'hd1080'
          },
          videoId: id,
          events: {
            onReady: function onReady(event) {
              loaded = true;
              youtube.setVolume(volume);
              listener.send('canplay');
              listener.send('loadeddata');
              timeupdate = setInterval(function () {
                if (youtube.getPlayerState() !== YT.PlayerState.PAUSED) listener.send('timeupdate');
              }, 100);
              if (needclick) listener.send('playing');
            },
            onStateChange: function onStateChange(state) {
              object.removeClass('ended');
              if (needclick) object.find('.player-video__youtube-needclick div').text(Lang.translate('loading') + '...');
              if (state.data == YT.PlayerState.PLAYING) {
                listener.send('playing');
                clearTimeout(timetapplay);
                if (needclick) {
                  needclick = false;
                  setTimeout(function () {
                    object.find('.player-video__youtube-needclick').remove();
                  }, 500);
                }
              }
              if (state.data == YT.PlayerState.ENDED) {
                object.addClass('ended');
                listener.send('ended');
              }
              if (state.data == YT.PlayerState.BUFFERING) {
                listener.send('waiting');
                state.target.setPlaybackQuality('hd1080');
              }
            },
            onPlaybackQualityChange: function onPlaybackQualityChange(state) {
              console.log('YouTube', 'quality', youtube.getPlaybackQuality());
            },
            onError: function onError(e) {
              object.find('.player-video__youtube-noplayed').removeClass('hide');
              object.addClass('ended');
              if (needclick) object.find('.player-video__youtube-needclick').remove();
              clearTimeout(timetapplay);
            }
          }
        });
      }
    };

    /**
     * Играть
     */
    video.play = function () {
      try {
        youtube.playVideo();
      } catch (e) {}
    };

    /**
     * Пауза
     */
    video.pause = function () {
      try {
        youtube.pauseVideo();
      } catch (e) {}
    };

    /**
     * Установить масштаб
     */
    video.size = function (type) {};

    /**
     * Установить скорость
     */
    video.speed = function (speed) {};

    /**
     * Уничтожить
     */
    video.destroy = function () {
      if (loaded) {
        clearInterval(timeupdate);
        try {
          youtube.destroy();
        } catch (e) {}
      }
      object.remove();
      clearTimeout(timetapplay);
      listener.destroy();
    };
    call_video(video);
    return object;
  }

  var components$2 = {};
  var params$2 = {};

  /**
   * Добавить компонент
   * @param {{component:string, icon:string, name:string}} data 
   */
  function addComponent(data) {
    components$2[data.component] = data;
    Template.add('settings_' + data.component, '<div></div>');
  }

  /**
   * Получить компонент
   * @param {string} component 
   * @returns {{component:string, icon:string, name:string}}
   */
  function getComponent(component) {
    return components$2[component];
  }

  /**
   * Добавить параметр
   * @param {{component:string, param:{name:string, type:string, values:string|object, default:string|boolean}, field:{name:string, description:string|undefined}, onRender:((item)=>void)|undefined, onChange?:((e)=>void)|undefined}} data 
   */
  function addParam(data) {
    if (!params$2[data.component]) params$2[data.component] = [];
    params$2[data.component].push(data);
    if (data.param.type == 'select' || data.param.type == 'input') Params.select(data.param.name, data.param.values, data.param["default"]);
    if (data.param.type == 'trigger') Params.trigger(data.param.name, data.param["default"]);
  }

  /**
   * Получить параметры
   * @param {string} component 
   * @returns {[{component:string, param:{name:string, type:string, values:string|object, default:string|boolean}, field:{name:string, description:string|undefined}, onRender:((item)=>void)|undefined, onChange?:((e)=>void)|undefined}]}
   */
  function getParam(component) {
    return params$2[component];
  }

  /**
   * Получить все компоненты
   * @returns {{name:{component:string, icon:string, name:string}}}
   */
  function allComponents() {
    return components$2;
  }

  /**
   * Получить все параметры
   * @returns {{component:[{component:string, param:{name:string, type:string, values:string|object, default:string|boolean}, field:{name:string, description:string|undefined}, onRender:((item)=>void)|undefined, onChange?:((e)=>void)|undefined}]}}
   */
  function allParams() {
    return params$2;
  }
  var SettingsApi = {
    allComponents: allComponents,
    allParams: allParams,
    addComponent: addComponent,
    addParam: addParam,
    getComponent: getComponent,
    getParam: getParam
  };

  var html$k;
  var controll$1;
  var active$5 = {};
  function open$6() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    active$5 = params;
    controll$1 = Controller.enabled().name;
    html$k = $('<div></div>');
    var keys = Object.keys(localStorage);
    keys.sort(function (a, b) {
      return a.localeCompare(b);
    });
    keys.forEach(function (key) {
      var value = Utils$2.shortText(localStorage.getItem(key), 50);
      var line = $('<div class="console__line selector"><span style="color: hsl(175, 49.70%, 64.90%)">' + key + '</span> ' + value + '</div>');
      line.on('hover:enter', function () {
        Select.show({
          title: key,
          items: [{
            title: Lang.translate('settings_remove'),
            action: 'delete'
          }],
          onSelect: function onSelect(selected) {
            Controller.toggle('modal');
            if (selected.action == 'delete') {
              localStorage.removeItem(key);
              line.remove();
            }
          },
          onBack: function onBack() {
            Controller.toggle('modal');
          }
        });
      });
      html$k.append(line);
    });
    Modal.open({
      title: Lang.translate('settings_manager'),
      size: 'large',
      html: html$k,
      onBack: close$7
    });
  }
  function close$7() {
    html$k.remove();
    Modal.close();
    if (active$5.onBack) active$5.onBack();else Controller.toggle(controll$1);
    active$5 = {};
  }
  var StorageMenager = {
    close: close$7,
    open: open$6
  };

  function Component$1(name) {
    var component_params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var scrl = new create$f({
      mask: true,
      over: true,
      step: 200
    });
    var comp = Template.get('settings_' + name);
    var last;
    scrl.addSwipeDown(function () {
      Controller.back();
    });

    /**
     * Обновить скролл
     */
    function updateScroll() {
      comp.find('.selector').unbind('hover:focus').on('hover:focus', function (e) {
        last = e.target;
        scrl.update($(e.target), true);
      }).unbind('hover:hover hover:touch').on('hover:hover hover:touch', function (e) {
        last = e.target;
      });
    }

    /**
     * Билдим все события
     */
    function buildEvents() {
      if (!Platform.is('android')) {
        comp.find('.is--android').remove();
      }
      if (!Platform.any()) {
        comp.find('.is--player').remove();
      }
      if (!Platform.desktop() || Platform.macOS()) {
        comp.find('.is--nw').remove();
      }
      if (!(Platform.is('android') || Platform.is('browser') || Platform.is('apple_tv') || Platform.desktop())) {
        comp.find('.is--sound').remove();
      }

      // Удаляем элементы только для ТВ, если платформа не ТВ
      if (!Platform.screen('tv')) {
        comp.find('.is--tv').remove();
      }
      if (!window.prisma_settings.lang_use) comp.find('[data-name="light_version"]').prev().remove();
      scrl.render().find('.scroll__content').addClass('layer--wheight').data('mheight', $('.settings__head'));
      scrl.render().css('max-height', window.innerWidth <= 480 ? window.innerHeight * 0.6 : 'unset');
      var clear = comp.find('.clear-storage');
      clear.on('hover:enter', function () {
        var controller = Controller.enabled().name;
        var status = clear.find('.settings-param__descr');
        Select.show({
          title: Lang.translate('settings_rest_cache'),
          items: [
          // Нагружает систему, пока не используется
          // {
          //     title: Lang.translate('settings_rest_cache_calculate'),
          //     action: 'calculate'
          // },
          {
            title: Lang.translate('extensions_edit'),
            action: 'manager'
          }, {
            title: Lang.translate('more'),
            separator: true
          }, {
            title: Lang.translate('settings_rest_cache_only'),
            subtitle: Lang.translate('settings_rest_cache_only_descr')
          }, {
            title: Lang.translate('settings_rest_cache_all'),
            subtitle: Lang.translate('settings_rest_cache_all_descr'),
            full: true
          }],
          onSelect: function onSelect(a) {
            Controller.toggle(controller);
            if (a.action == 'calculate') {
              Storage.getsize(function (size) {
                status.text(Lang.translate('title_left') + ' - ' + Prisma.Utils.bytesToSize(size));
              });
            } else if (a.action == 'manager') {
              StorageMenager.open({
                onBack: function onBack() {
                  Controller.toggle(controller);
                }
              });
            } else {
              Storage.clear(a.full);
              Cache.clearAll();
            }
          },
          onBack: function onBack() {
            Controller.toggle(controller);
          }
        });
      });
      Params.bind(comp.find('.selector'), comp);
      Params.listener.follow('update_scroll', updateScroll);
      Params.listener.follow('update_scroll_position', function () {
        if (last) scrl.update($(last), true);
      });
      updateScroll();
    }

    /**
     * Добавляем пользовательские параметры
     */
    function addParams() {
      var params = SettingsApi.getParam(name);
      if (params) {
        params.forEach(function (data) {
          var item;
          if (data.param.type == 'select') {
            item = $("<div class=\"settings-param selector\" data-type=\"select\" data-name=\"".concat(data.param.name, "\">\n                        <div class=\"settings-param__name\">").concat(data.field.name, "</div>\n                        <div class=\"settings-param__value\"></div>\n                    </div>"));
          }
          if (data.param.type == 'trigger') {
            item = $("<div class=\"settings-param selector\" data-type=\"toggle\" data-name=\"".concat(data.param.name, "\">\n                        <div class=\"settings-param__name\">").concat(data.field.name, "</div>\n                        <div class=\"settings-param__value\"></div>\n                    </div>"));
          }
          if (data.param.type == 'input') {
            item = $("<div class=\"settings-param selector\" data-type=\"input\" data-name=\"".concat(data.param.name, "\" placeholder=\"").concat(data.param.placeholder, "\">\n                        <div class=\"settings-param__name\">").concat(data.field.name, "</div>\n                        <div class=\"settings-param__value\"></div>\n                    </div>"));
          }
          if (data.param.type == 'title') {
            item = $("<div class=\"settings-param-title\"><span>".concat(data.field.name, "</span></div>"));
          }
          if (data.param.type == 'static') {
            item = $("<div class=\"settings-param selector\" data-static=\"true\">\n                        <div class=\"settings-param__name\">".concat(data.field.name, "</div>\n                    </div>"));
          }
          if (data.param.type == 'button') {
            item = $("<div class=\"settings-param selector settings-param--button\" data-name=\"".concat(data.param.name, "\" data-static=\"true\" data-type=\"button\">\n                        <div class=\"settings-param__name\">").concat(data.field.name, "</div>\n                    </div>"));
          }
          if (item) {
            if (data.field.description) item.append("<div class=\"settings-param__descr\">".concat(data.field.description, "</div>"));
            if (typeof data.onRender == 'function') data.onRender(item);
            if (typeof data.onChange == 'function') item.data('onChange', data.onChange);
            comp.append(item);
          }
        });
      }
    }

    /**
     * Стартуем
     */
    function start() {
      addParams();
      buildEvents();
      if (typeof component_params.last_index !== 'undefined' && component_params.last_index > 0) last = comp.find('.selector').eq(component_params.last_index)[0];
      Controller.add('settings_component', {
        toggle: function toggle() {
          Controller.collectionSet(comp);
          Controller.collectionFocus(last, comp);
        },
        up: function up() {
          Navigator.move('up');
        },
        down: function down() {
          Navigator.move('down');
        },
        back: function back() {
          scrl.destroy();
          comp.remove();
          Params.listener.remove('update_scroll', updateScroll);
          if (component_params.onBack) component_params.onBack();else Controller.toggle('settings');
        }
      });
    }
    start();

    /**
     * Уничтожить
     */
    this.destroy = function () {
      scrl.destroy();
      comp.remove();
      comp = null;
      Params.listener.remove('update_scroll', updateScroll);
    };

    /**
     * Рендер
     * @returns {object}
     */
    this.render = function () {
      scrl.append(comp);
      return scrl.render();
    };
  }

  // Полифилл для метода repeat
  if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {

      if (this == null) {
        throw new TypeError('can\'t convert ' + this + ' to object');
      }
      var str = '' + this;
      count = +count;
      if (count != count) {
        count = 0;
      }
      if (count < 0) {
        throw new RangeError('repeat count must be non-negative');
      }
      if (count == Infinity) {
        throw new RangeError('repeat count must be less than infinity');
      }
      count = Math.floor(count);
      if (str.length == 0 || count == 0) {
        return '';
      }
      // Обеспечиваем, что count является 31-битным целым числом. Это нужно для работы в Firefox.
      if (str.length * count >= 1 << 28) {
        throw new RangeError('repeat count must not overflow maximum string size');
      }
      var rpt = '';
      for (;;) {
        if ((count & 1) == 1) {
          rpt += str;
        }
        count >>>= 1;
        if (count == 0) {
          break;
        }
        str += str;
      }
      return rpt;
    };
  }

  // Полифилл для метода padStart для поддержки старых браузеров
  if (!String.prototype.padStart) {
    String.prototype.padStart = function padStart(targetLength, padString) {
      targetLength = targetLength >> 0; // truncate if number, or convert non-number to 0;
      padString = String(typeof padString !== 'undefined' ? padString : ' ');
      if (this.length >= targetLength) {
        return String(this);
      } else {
        targetLength = targetLength - this.length;
        if (targetLength > padString.length) {
          padString += padString.repeat(targetLength / padString.length); // append to original to ensure we are longer than needed
        }
        return padString.slice(0, targetLength) + String(this);
      }
    };
  }
  function Main$1() {
    var _this = this;
    var comp;
    var scrl = new create$f({
      mask: true,
      over: true,
      step: 200
    });
    var last;
    var time_node;
    var timer_interval;

    /**
     * Создать
     */
    this.create = function () {
      comp = Template.get('settings_main');
      if (!window.prisma_settings.account_use) comp.find('[data-component="account"]').remove();
      if (!window.prisma_settings.plugins_use) comp.find('[data-component="plugins"]').remove();
      if (!window.prisma_settings.torrents_use) {
        comp.find('[data-component="parser"]').remove();
        comp.find('[data-component="server"]').remove();
      }
      scrl.render().css('max-height', window.innerWidth <= 480 ? window.innerHeight * 0.6 : 'unset');
      scrl.append(comp);
      scrl.addSwipeDown(_this.swipeAction);

      // Слушаем изменения размера интерфейса
      Storage.listener.follow('change', function (event) {
        if (event.name == 'interface_size' || event.name == 'interface_size_fixed') {
          // Обновляем высоту скролла и позиции элементов
          setTimeout(function () {
            scrl.height($('.settings__head'));
            _this.updateScroll();

            // Переинициализируем отображение времени при изменении размера интерфейса
            if (time_node) {
              updateDateTime();
            }
          }, 100);
        }
      });
      _this.update();
    };

    /**
     * Очистить интервал обновления времени
     */
    this.clearTimeInterval = function () {
      if (timer_interval) {
        clearInterval(timer_interval);
        timer_interval = null;
      }
    };

    /**
     * Обновить дату и время
     */
    function updateDateTime() {
      var now = new Date();
      var currentLang = Storage.get('language', 'ru');

      // Данные для локализации
      var weekdays = {
        ru: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
        en: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        uk: ['нд', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб']
      };
      var months = {
        ru: ['янв', 'фев', 'мар', 'апр', 'май', 'июн', 'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'],
        en: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        uk: ['січ', 'лют', 'бер', 'кві', 'тра', 'чер', 'лип', 'сер', 'вер', 'жов', 'лис', 'гру']
      };

      // Используем значения по умолчанию, если локализация отсутствует
      var dayOfWeek = weekdays[currentLang] ? weekdays[currentLang][now.getDay()] : weekdays.en[now.getDay()];
      var month = months[currentLang] ? months[currentLang][now.getMonth()] : months.en[now.getMonth()];
      var day = now.getDate();
      var hours = String(now.getHours()).padStart(2, '0');
      var minutes = String(now.getMinutes()).padStart(2, '0');

      // Проверяем размер интерфейса для выбора формата отображения даты
      var interfaceSize = Storage.field('interface_size');

      // При большом размере интерфейса используем более компактный формат даты
      if (interfaceSize === 'bigger' || interfaceSize === 'fixed') {
        // Проверяем разрешение экрана для выбора формата
        var isSmallScreen = window.innerWidth <= 1280 && window.innerHeight <= 720;
        if (isSmallScreen) {
          // Для малых экранов делаем более компактный формат в одну строку
          time_node.text("".concat(hours, ":").concat(minutes));
        } else {
          // Для больших экранов можем использовать двухстрочный формат
          time_node.html("".concat(hours, ":").concat(minutes, "<br>").concat(dayOfWeek, ", ").concat(day, " ").concat(month));
        }
      } else {
        time_node.text("".concat(dayOfWeek, ", ").concat(day, " ").concat(month, ". ").concat(hours, ":").concat(minutes));
      }
    }

    /**
     * Обновить события
     */
    this.update = function () {
      var components = SettingsApi.allComponents();
      for (var name in components) {
        var aded = components[name];
        if (!comp.find('[data-component="' + name + '"]').length) {
          var item = $("<div class=\"settings-folder selector\" data-component=\"".concat(name, "\">\n                    <div class=\"settings-folder__icon\">\n                        ").concat(aded.icon, "\n                    </div>\n                    <div class=\"settings-folder__name\">").concat(aded.name, "</div>\n                </div>"));
          if (aded.before) comp.find('[data-component="' + aded.before + '"]').before(item);else if (aded.after) comp.find('[data-component="' + aded.after + '"]').after(item);else comp.append(item);
        }
      }
      comp.find('.selector').unbind('hover:focus').on('hover:focus', function (event) {
        last = event.target;
        scrl.update($(event.target), true);
      }).unbind('hover:hover hover:touch').on('hover:hover hover:touch', function (event) {
        last = event.target;
        Navigator.focused(event.target);
      }).not('[data-static]').unbind('hover:enter').on('hover:enter', function (event) {
        _this.render().detach();
        _this.onCreate($(event.target).data('component'));
      });
    };

    /**
     * Обновить скролл и позиции элементов
     */
    this.updateScroll = function () {
      if (last) {
        scrl.update($(last), true);
      }
    };

    /**
     * Сделать активным
     */
    this.active = function () {
      // Инициализируем текущее время
      time_node = $('.settings__time');
      updateDateTime();

      // Обновляем время каждую минуту
      this.clearTimeInterval();
      timer_interval = setInterval(updateDateTime, 60000);
      Controller.collectionSet(comp);
      Controller.collectionFocus(last, comp);
      scrl.height($('.settings__head'));
    };

    /**
     * Рендер
     * @returns {object}
     */
    this.render = function () {
      return scrl.render();
    };
  }

  var already_requested = false;
  var last_time_requested = 0;
  var personal_codes = {};
  function init$O() {
    Params.trigger('parental_control', false);
    Params.select('parental_control_time', {
      'always': '#{settings_parental_control_param_time_always}',
      'once': '#{settings_parental_control_param_time_once}',
      '10': '#{settings_parental_control_param_time_10}',
      '20': '#{settings_parental_control_param_time_20}',
      '30': '#{settings_parental_control_param_time_30}',
      '60': '#{settings_parental_control_param_time_60}',
      '120': '#{settings_parental_control_param_time_120}'
    }, 'once');
    Template.add('settings_parental_control', "<div>\n        <div class=\"settings-param selector parental-control-toggle\" data-type=\"button\" data-static=\"true\">\n            <div class=\"settings-param__name\">#{title_parental_control}</div>\n            <div class=\"settings-param__value\"></div>\n        </div>\n        <div class=\"parental-control-other\">\n            <div class=\"settings-param selector settings-param--button parental-control-change\" data-type=\"button\" data-static=\"true\">\n                <div class=\"settings-param__name\">#{settings_parental_control_change_pin}</div>\n            </div>\n            <div class=\"settings-param selector\" data-type=\"select\" data-name=\"parental_control_time\">\n                <div class=\"settings-param__name\">#{settings_parental_control_demand_title}</div>\n                <div class=\"settings-param__value\"></div>\n                <div class=\"settings-param__descr\">#{settings_parental_control_demand_descr}</div>\n            </div>\n            <div class=\"parental-control-personal\">\n                <div class=\"settings-param-title\"><span>#{settings_parental_control_where}</span></div>\n                <div class=\"parental-control-personal-list\"></div>\n            </div>\n        </div>\n    </div>");
    Settings.listener.follow('open', function (e) {
      if (e.name == 'parental_control') {
        var toggle = e.body.find('.parental-control-toggle');
        var change = e.body.find('.parental-control-change');
        var other = e.body.find('.parental-control-other');
        var active;
        var updateStatus = function updateStatus() {
          toggle.find('.settings-param__value').text(Lang.translate(Storage.field('parental_control') ? 'settings_parental_control_enabled' : 'settings_parental_control_disabled'));
          other.toggleClass('hide', !Boolean(Storage.field('parental_control')));
        };
        var drawPersonalList = function drawPersonalList() {
          var enabled = Storage.get('parental_control_personal', '[]');
          var list = e.body.find('.parental-control-personal-list');
          var item = function item(name, data) {
            var line = $("<div class=\"selectbox-item selector selectbox-item--checkbox\" data-type=\"button\" data-static=\"true\">\n                        <div class=\"selectbox-item__title\">".concat(Lang.translate(data.title), "</div>\n                        <div class=\"selectbox-item__checkbox\"></div>\n                    </div>"));
            if (enabled.indexOf(name) >= 0) line.addClass('selectbox-item--checked');
            line.on('hover:enter', function () {
              active = Controller.enabled().name;
              query(function () {
                enabled = Storage.get('parental_control_personal', '[]');
                if (enabled.indexOf(name) >= 0) {
                  Arrays.remove(enabled, name);
                  Storage.set('parental_control_personal', enabled);
                  line.removeClass('selectbox-item--checked');
                } else {
                  Storage.add('parental_control_personal', name);
                  line.addClass('selectbox-item--checked');
                }
                Controller.toggle(active);
              }, function () {
                Controller.toggle(active);
              });
            });
            list.append(line);
          };
          for (var name in personal_codes) item(name, personal_codes[name]);
          Params.listener.send('update_scroll');
        };
        toggle.on('hover:enter', function () {
          active = Controller.enabled().name;
          if (Storage.field('parental_control')) {
            request(function () {
              Storage.set('parental_control', false);
              updateStatus();
              Controller.toggle(active);
            }, function () {
              Controller.toggle(active);
            });
          } else if (!Storage.value('parental_control_pin')) {
            set$3(function (code) {
              if (code) {
                Storage.set('parental_control_pin', code);
                Storage.set('parental_control', true);
                updateStatus();
              }
            });
          } else {
            Storage.set('parental_control', true);
            updateStatus();
          }
        });
        change.on('hover:enter', function () {
          active = Controller.enabled().name;
          if (Storage.value('parental_control_pin')) {
            request(function () {
              set$3(function (code) {
                if (code) {
                  Storage.set('parental_control_pin', code);
                }
                Controller.toggle(active);
              });
            }, function () {
              Controller.toggle(active);
            });
          }
        });
        updateStatus();
        drawPersonalList();
      }
    });
    add$b('bookmarks', {
      title: 'settings_input_links'
    });
  }

  /**
   * Запрос на установку PIN-кода
   * @param {function} call - вызов
   */
  function set$3(call) {
    var active = Controller.enabled().name;
    pin(Lang.translate('parental_control_input_new_code'), function (code_one) {
      if (code_one) {
        pin(Lang.translate('parental_control_confirm_new_code'), function (code_two) {
          if (code_one == code_two) {
            Controller.toggle(active);
            call(code_two);
          } else {
            Controller.toggle(active);
            Noty$1.show(Lang.translate('parental_control_no_match_code'));
            call();
          }
        });
      } else {
        Controller.toggle(active);
        call();
      }
    });
  }

  /**
   * Показать экран ввода пина
   * @param {string} title - заголовок
   * @param {function} call - вызов
   */
  function pin(title, call) {
    var input = '';
    var html_layer = $("<div class=\"pincode\">\n        <div class=\"pincode__container\">\n            <div class=\"pincode__title\">".concat(title, "</div>\n        </div>\n    </div>"));
    var html_code = $("<div class=\"pincode__code\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>");
    var drawPin = function drawPin() {
      var div = html_code.find('div').removeClass('fill');
      for (var i = 0; i < 4; i++) {
        if (input[i]) div.eq(i).addClass('fill');
      }
    };
    var removeNum = function removeNum() {
      input = input.slice(0, Math.max(0, input.length - 1));
      drawPin();
      if (!input) callClose();
    };
    var callClose = function callClose() {
      html_layer.remove();
      call(input);
    };
    if (Platform.screen('tv')) {
      var html_body = $("<div class=\"pincode__body\">\n            <div class=\"pincode__left\">\n                <div class=\"pincode__text\">\n                    ".concat(Lang.translate('pincode_use_remote'), "\n                </div>\n                <div class=\"pincode__text\">\n                    ").concat(Lang.translate('pincode_use_toggle'), "\n                </div>\n            </div>\n            <div class=\"pincode__right\">\n                <div class=\"pincode-remote\">\n                    <div class=\"pincode-remote__light\"></div>\n                    <div class=\"pincode-remote__circle\">\n                        <svg width=\"77\" height=\"77\" viewBox=\"0 0 77 77\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <circle cx=\"38.5\" cy=\"38.5\" r=\"38.5\" fill=\"#666666\"/>\n                            <circle cx=\"38.5\" cy=\"38.5\" r=\"18.5\" fill=\"#2E2E2E\"/>\n                            <circle cx=\"38.5\" cy=\"38.5\" r=\"15.5\" fill=\"#666666\"/>\n                            <path d=\"M13.8977 12.6906L23.7972 22.5901L23.0901 23.2972L13.1906 13.3977L13.8977 12.6906Z\" fill=\"#020202\" fill-opacity=\"0.14\"/>\n                            <path d=\"M54.9099 53.7028L64.8094 63.6023L64.1023 64.3094L54.2028 54.4099L54.9099 53.7028Z\" fill=\"#020202\" fill-opacity=\"0.14\"/>\n                            <path d=\"M13.1906 63.6023L23.0901 53.7028L23.7972 54.4099L13.8977 64.3094L13.1906 63.6023Z\" fill=\"#020202\" fill-opacity=\"0.14\"/>\n                            <path d=\"M54.2028 22.5901L64.1023 12.6906L64.8094 13.3977L54.9099 23.2972L54.2028 22.5901Z\" fill=\"#020202\" fill-opacity=\"0.14\"/>\n                        </svg>\n                        <div class=\"pincode-remote__circle-pulse\"></div>\n                        <div class=\"pincode-remote__nums\">\n                            <div class=\"pincode-remote__num-top\"><span>1</span></div>\n                            <div class=\"pincode-remote__circle-center\">\n                                <div class=\"pincode-remote__num-left\"><span>4</span></div>\n                                <div class=\"pincode-remote__num-center\"><span>0</span></div>\n                                <div class=\"pincode-remote__num-right\"><span>2</span></div>\n                            </div>\n                            <div class=\"pincode-remote__num-bottom\"><span>3</span></div>\n                        </div>\n                    </div>\n\n                    <div class=\"pincode-remote__remove\">\n                        <div class=\"pincode-remote__remove-icon\">\n                            <svg width=\"13\" height=\"13\" viewBox=\"0 0 13 13\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <circle cx=\"6.5\" cy=\"6.5\" r=\"6\" stroke=\"white\" stroke-opacity=\"0.21\"/>\n                                <rect x=\"4.2952\" y=\"6.49226\" width=\"4.45542\" height=\"1.2899\" rx=\"0.644948\" transform=\"rotate(-45 4.2952 6.49226)\" fill=\"#D9D9D9\"/>\n                                <rect width=\"4.45542\" height=\"1.29877\" rx=\"0.649387\" transform=\"matrix(0.707107 0.707107 0.707107 -0.707107 4.2952 6.50774)\" fill=\"#D9D9D9\"/>\n                            </svg>\n                        </div>\n                        <div class=\"pincode-remote__remove-text\">").concat(Lang.translate('settings_remove'), "</div>\n                    </div>\n                </div>\n            </div>\n        </div>"));
      html_body.find('.pincode__left').prepend(html_code);
      html_layer.find('.pincode__container').append(html_body);
      var layout_active = 0;
      var layout_keys = [[1, 2, 3, 4, '0'], [5, 6, 7, 8, 9]];
      var drawLayout = function drawLayout() {
        var keys = layout_keys[layout_active];
        html_body.find('.pincode-remote__num-top span').text(keys[0]);
        html_body.find('.pincode-remote__num-right span').text(keys[1]);
        html_body.find('.pincode-remote__num-bottom span').text(keys[2]);
        html_body.find('.pincode-remote__num-left span').text(keys[3]);
        html_body.find('.pincode-remote__num-center span').text(keys[4]);
      };
      var animate = function animate() {
        var elem = html_body.find('.pincode-remote').removeClass('push');
        setTimeout(function () {
          elem.addClass('push');
        }, 60);
      };
      var writeNum = function writeNum(key) {
        input = input + layout_keys[layout_active][key];
        drawPin();
        if (input.length == 4) callClose();else animate();
      };
      drawLayout();
      Controller.add('parental_controll', {
        toggle: function toggle() {
          Controller.clear();
        },
        "long": function long() {
          layout_active++;
          if (layout_active >= layout_keys.length) layout_active = 0;
          drawLayout();
        },
        enter: function enter() {
          writeNum(4);
        },
        left: function left() {
          writeNum(3);
        },
        up: function up() {
          writeNum(0);
        },
        down: function down() {
          writeNum(2);
        },
        right: function right() {
          writeNum(1);
        },
        back: function back() {
          removeNum();
        }
      });
      Prisma.Controller.toggle('parental_controll');
    } else {
      html_layer.addClass('mobile');
      var html_keyboard = $("<div class=\"pincode-keyboard\">\n            <div data-key=\"1\" class=\"selector\"><span>1</span></div>\n            <div data-key=\"2\" class=\"selector\"><span>2</span></div>\n            <div data-key=\"3\" class=\"selector\"><span>3</span></div>\n            <div data-key=\"4\" class=\"selector\"><span>4</span></div>\n            <div data-key=\"5\" class=\"selector\"><span>5</span></div>\n            <div data-key=\"6\" class=\"selector\"><span>6</span></div>\n            <div data-key=\"7\" class=\"selector\"><span>7</span></div>\n            <div data-key=\"8\" class=\"selector\"><span>8</span></div>\n            <div data-key=\"9\" class=\"selector\"><span>9</span></div>\n            <div data-key=\"0\" class=\"selector\"><span>0</span></div>\n            <div></div>\n            <div class=\"remove selector\">\n                <svg width=\"139\" height=\"105\" viewBox=\"0 0 139 105\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M125.969 0.375122H47.5564C43.6325 0.375122 39.955 2.11446 37.4647 5.15569L0.979756 49.7513C-0.326911 51.3503 -0.326911 53.6496 0.979756 55.2486L37.469 99.8486C39.9546 102.886 43.6325 104.625 47.5564 104.625H125.969C133.155 104.625 139 98.7792 139 91.5936V13.4063C139 6.22026 133.155 0.375122 125.969 0.375122V0.375122ZM130.313 91.5936C130.313 93.9904 128.365 95.9372 125.969 95.9372H47.5564C46.2458 95.9372 45.0197 95.356 44.1925 94.3464L9.95578 52.4997L44.1881 10.6574C45.0197 9.64349 46.2454 9.06227 47.5564 9.06227H125.969C128.365 9.06227 130.312 11.0095 130.312 13.4058C130.313 13.4063 130.313 91.5936 130.313 91.5936V91.5936Z\" fill=\"white\"/>\n                <path d=\"M96.8349 27.71L78.1873 46.3576L59.5397 27.71L53.3975 33.8522L72.0451 52.4998L53.3975 71.1474L59.5397 77.2897L78.1873 58.6421L96.8349 77.2897L102.977 71.1474L84.3296 52.4998L102.977 33.8522L96.8349 27.71Z\" fill=\"white\"/>\n                </svg>\n            </div>\n        </div>");
      html_keyboard.find('[data-key]').on('hover:enter', function () {
        input = input + $(this).data('key');
        drawPin();
        if (input.length == 4) callClose();
      });
      html_keyboard.find('.remove').on('hover:enter', removeNum);
      html_layer.find('.pincode__container').append(html_code).append(html_keyboard);
      Controller.add('parental_controll', {
        toggle: function toggle() {
          Controller.collectionSet(html_keyboard);
        },
        back: function back() {
          call('');
        }
      });
      Prisma.Controller.toggle('parental_controll');
    }
    $('body').append(html_layer);
    setTimeout(function () {
      html_layer.addClass('animate');
    }, 100);
  }

  /**
   * Устаревший метод, но все еще используется,
   * если пароль состоит не из 4 цифр
   * @param {string} title
   * @param {function} call
   */
  function pinFree(title, call) {
    Input.edit({
      free: true,
      title: title,
      nosave: true,
      value: '',
      layout: 'nums',
      keyboard: 'prisma',
      password: true
    }, call);
  }

  /**
   * Запросить PIN-код для настроек
   * @param {string} title - заголовок
   * @param {function} call - вызов
   */
  function request(call, error) {
    if (Storage.field('parental_control')) {
      var called = Storage.value('parental_control_pin').length == 4 ? pin : pinFree;
      called(Lang.translate('parental_control_input_code'), function (code) {
        if (code == Storage.value('parental_control_pin')) {
          call();
        } else if (code) {
          Noty$1.show(Lang.translate('parental_control_input_error'));
          if (error) error();
        } else if (error) error();
      });
    } else {
      call();
    }
  }

  /**
   * Запросить PIN-код (Обший)
   * @param {function} call - если pin верный
   * @param {function} error - если нет
   * @param {boolean} save_controller - переключить на прошлый контроллер
   */
  function query(call, error, save_controller) {
    if (Storage.field('parental_control')) {
      var type = Storage.field('parental_control_time');
      var active = Controller.enabled().name;
      if (type !== 'always') {
        if (type == 'once') {
          if (already_requested) return call();
        } else {
          if (last_time_requested + 1000 * 60 * parseInt(type) > Date.now()) return call();
        }
      }
      request(function () {
        already_requested = true;
        last_time_requested = Date.now();
        if (save_controller) Controller.toggle(active);
        call();
      }, function () {
        if (save_controller) Controller.toggle(active);
        if (error) error();
      });
    } else {
      call();
    }
  }

  /**
   * Запросить PIN-код (Персональный)
   * @param {string} name - название модуля
   * @param {function} call - если pin верный
   * @param {function} error - если нет
   * @param {boolean} save_controller - переключить на прошлый контроллер
   */
  function personal(name, call, error, save_controller) {
    var enabled = Storage.get('parental_control_personal', '[]');
    if (enabled.indexOf(name) !== -1) query(call, error, save_controller);else call();
  }

  /**
   * Запрос на установку PIN-кода, перед этим нужно проверить через enabled()
   * @param {function} call - callback
   */
  function install$2(call) {
    set$3(function (code) {
      if (code) {
        Storage.set('parental_control_pin', code);
        Storage.set('parental_control', true);
      }
      call(Boolean(code));
    });
  }

  /**
   * Добавить персональный PIN-код для запроса
   * @param {string} name - название модуля
   * @param {object} data - данные
   */
  function add$b(name, data) {
    Arrays.extend(data, {
      title: Lang.translate('player_unknown'),
      "default": false
    });
    if (data["default"]) Storage.add('parental_control_personal', name);
    personal_codes[name] = data;
  }

  /**
   * Проверить, установлен ли контроль
   * @returns bollean
   */
  function enabled$1() {
    return Storage.field('parental_control');
  }
  var ParentalControl = {
    init: init$O,
    query: query,
    personal: personal,
    enabled: enabled$1,
    install: install$2,
    add: add$b
  };

  var html$j;
  var body$2;
  var listener$h = start$8();
  var last$4 = '';
  var _main;

  /**
   * Запуск
   */
  function init$N() {
    html$j = Template.get('settings');
    body$2 = html$j.find('.settings__body');
    html$j.find('.settings__layer').on('click', function (e) {
      if (DeviceInput.canClick(e.originalEvent)) Controller.back();
    });
    _main = new Main$1();
    _main.onCreate = create$o;
    _main.swipeAction = swipeAction;
    _main.create();
    Controller.add('settings', {
      toggle: function toggle() {
        _main.render().detach();
        _main.update();
        listener$h.send('open', {
          name: 'main',
          body: _main.render()
        });
        body$2.empty().append(_main.render());
        _main.active();
        $('body').toggleClass('settings--open', true);
        html$j.addClass('animate');
        Activity$1.mixState('settings=main');
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      left: function left() {
        Navigator.move('left');
      },
      right: function right() {
        Navigator.move('right');
      },
      gone: function gone(to) {
        if (to !== 'settings_component') {
          $('body').toggleClass('settings--open', false);
          html$j.removeClass('animate').removeClass('animate-down');

          // Очищаем интервал обновления времени при закрытии меню
          if (_main && _main.clearTimeInterval) _main.clearTimeInterval();
        }
      },
      back: function back() {
        _main.render().detach();
        Controller.toggle('head');
        Activity$1.mixState();
      }
    });
    ParentalControl.add('settings', {
      title: 'title_settings'
    });
  }
  function swipeAction() {
    html$j.addClass('animate-down');
    setTimeout(function () {
      Controller.back();
    }, 200);
  }

  /**
   * Создать компонент
   * @param {string} name 
   * @param {{last_index:integer}} params 
   */
  function create$o(name) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var comp = new Component$1(name, params);
    body$2.empty().append(comp.render());
    listener$h.send('open', {
      name: name,
      body: comp.render(),
      params: params
    });
    last$4 = name;
    Controller.toggle('settings_component');
    Activity$1.mixState('settings=' + name);
  }

  /**
   * Обновить открытый компонент
   */
  function update$a() {
    var selects = body$2.find('.selector');
    var lastinx = selects.index(body$2.find('.selector.focus'));
    create$o(last$4, {
      last_index: lastinx
    });
  }

  /**
   * Рендер
   * @returns {object}
   */
  function render$f() {
    return html$j;
  }
  var Settings = {
    listener: listener$h,
    init: init$N,
    render: render$f,
    update: update$a,
    create: create$o,
    main: function main() {
      return _main;
    }
  };

  var data$3 = {};
  var listener$g = start$8();
  var category$2 = ['like', 'wath', 'book', 'history', 'look', 'viewed', 'scheduled', 'continued', 'thrown'];
  var marks = ['viewed', 'scheduled', 'continued', 'thrown'];
  function save$4() {
    Storage.set('favorite', data$3);
  }

  /**
   * Добавить
   * @param {String} where 
   * @param {Object} card 
   */
  function add$a(where, card, limit) {
    if (Account.working()) {
      listener$g.send('add', {
        where: where,
        card: card
      });
    } else {
      //read()

      var find = data$3[where].find(function (id) {
        return id == card.id;
      });
      if (!find) {
        Arrays.insert(data$3[where], 0, card.id);
        listener$g.send('add', {
          where: where,
          card: card
        });
        if (!search$5(card.id)) data$3.card.push(card);
        if (limit) {
          var excess = data$3[where].slice(limit);
          for (var i = excess.length - 1; i >= 0; i--) {
            remove$3(where, {
              id: excess[i]
            });
          }
        }
        save$4();
      } else {
        Arrays.remove(data$3[where], card.id);
        Arrays.insert(data$3[where], 0, card.id);
        save$4();
        listener$g.send('added', {
          where: where,
          card: card
        });
      }
    }
  }

  /**
   * Удалить
   * @param {String} where 
   * @param {Object} card 
   */
  function remove$3(where, card) {
    if (Account.working()) {
      listener$g.send('remove', {
        where: where,
        card: card,
        method: 'id'
      });
    } else {
      //read()

      Arrays.remove(data$3[where], card.id);
      listener$g.send('remove', {
        where: where,
        card: card,
        method: 'id'
      });
      for (var i = data$3.card.length - 1; i >= 0; i--) {
        var element = data$3.card[i];
        if (!check$3(element).any) {
          Arrays.remove(data$3.card, element);
          listener$g.send('remove', {
            where: where,
            card: element,
            method: 'card'
          });
        }
      }
      save$4();
    }
  }

  /**
   * Найти
   * @param {integer} id 
   * @returns Object
   */
  function search$5(id) {
    var found;
    for (var index = 0; index < data$3.card.length; index++) {
      var element = data$3.card[index];
      if (element.id == id) {
        found = element;
        break;
      }
    }
    return found;
  }

  /**
   * Переключить
   * @param {String} where 
   * @param {Object} card 
   */
  function toggle$9(where, card) {
    //if(!Account.working()) read()

    var find = cloud(card);
    if (marks.find(function (a) {
      return a == where;
    })) {
      var added = marks.find(function (a) {
        return find[a];
      });
      if (added && added !== where) remove$3(added, card);
    }
    if (find[where]) remove$3(where, card);else add$a(where, card);
    return find[where] ? false : true;
  }

  /**
   * Проверить
   * @param {Object} card 
   * @returns Object
   */
  function check$3(card) {
    var result = {
      any: false
    };
    category$2.forEach(function (a) {
      result[a] = data$3[a].find(function (id) {
        return id == card.id;
      });
      if (result[a]) result.any = true;
    });
    return result;
  }

  /**
   * Проверить есть ли карточка где либо кроме истории
   * @param {Object} status 
   * @returns {Boolean}
   */
  function checkAnyNotHistory(status) {
    var any = false;
    category$2.filter(function (a) {
      return a !== 'history';
    }).forEach(function (a) {
      if (status[a]) any = true;
    });
    return any;
  }

  /**
   * Облако, закладки из cub
   * @param {Object} card 
   * @returns {Object}
   */
  function cloud(card) {
    if (Account.working()) {
      var result = {
        any: true
      };
      category$2.forEach(function (a) {
        result[a] = Boolean(Account.get({
          type: a
        }).find(function (elem) {
          return elem.id == card.id;
        }));
        if (result[a]) result.any = true;
      });
      return result;
    } else return check$3(card);
  }

  /**
   * Получить списаок по типу
   * @param {String} params.type - тип 
   * @returns Object
   */
  function get$c(params) {
    if (Account.working()) {
      return Account.get(params);
    } else {
      //read()

      var result = [];
      var ids = data$3[params.type];
      ids.forEach(function (id) {
        for (var i = 0; i < data$3.card.length; i++) {
          var card = data$3.card[i];
          if (card.id == id) result.push(card);
        }
      });
      return result;
    }
  }

  /**
   * Очистить
   * @param {String} where 
   * @param {Object} card 
   */
  function clear$8(where, card) {
    if (Account.working()) {
      Account.clear(where);
    } else {
      //read()

      if (card) remove$3(where, card);else {
        for (var i = data$3[where].length - 1; i >= 0; i--) {
          var _card = search$5(data$3[where][i]);
          if (_card) remove$3(where, _card);
        }
      }
    }
  }

  /**
   * Считать последние данные
   */
  function read() {
    data$3 = Storage.get('favorite', '{}');
    var empty = {
      card: []
    };
    category$2.forEach(function (a) {
      empty[a] = [];
    });
    Arrays.extend(data$3, empty);
  }

  /**
   * Получить весь список что есть
   */
  function full$2() {
    var empty = {
      card: []
    };
    category$2.forEach(function (a) {
      empty[a] = [];
    });
    Arrays.extend(data$3, empty);
    return data$3;
  }
  function all$3() {
    var result = {};
    category$2.forEach(function (a) {
      result[a] = get$c({
        type: a
      });
    });
    return result;
  }
  function continues(type) {
    return Arrays.clone(get$c({
      type: 'history'
    }).filter(function (e) {
      return type == 'tv' ? e.number_of_seasons || e.first_air_date : !(e.number_of_seasons || e.first_air_date);
    }).slice(0, 19)).map(function (e) {
      e.check_new_episode = true;
      return e;
    }).map(function (c) {
      delete c.ready;
      return c;
    });
  }

  /**
   * Запуск
   */
  function init$M() {
    read();
  }
  var Favorite = {
    listener: listener$g,
    check: cloud,
    add: add$a,
    remove: remove$3,
    toggle: toggle$9,
    get: get$c,
    init: init$M,
    clear: clear$8,
    continues: continues,
    full: full$2,
    checkAnyNotHistory: checkAnyNotHistory,
    all: all$3
  };

  var listener$f = start$8();
  function filename() {
    var acc = Account.canSync();
    var name = 'file_view' + (acc ? '_' + acc.profile.id : '');

    // if(window.localStorage.getItem(name) === null && acc){
    //     Storage.set(name, Arrays.clone(Storage.cache('file_view',10000,{})))
    // }

    return name;
  }
  function update$9(params) {
    if (params.hash == 0) return;
    var viewed = Storage.cache(filename(), 10000, {});
    var road = viewed[params.hash];
    if (typeof road == 'undefined' || typeof road == 'number') {
      road = {
        duration: 0,
        time: 0,
        percent: 0,
        profile: 0
      };
      viewed[params.hash] = road;
    }
    road.percent = params.percent;
    if (typeof params.time !== 'undefined') road.time = params.time;
    if (typeof params.duration !== 'undefined') road.duration = params.duration;
    if (typeof params.profile !== 'undefined') road.profile = params.profile;
    Storage.set(filename(), viewed);
    var line = $('.time-line[data-hash="' + params.hash + '"]').toggleClass('hide', params.percent ? false : true);
    $('> div', line).css({
      width: params.percent + '%'
    });
    $('.time-line-details[data-hash="' + params.hash + '"]').each(function () {
      var f = format(road);
      $(this).find('[a="t"]').text(f.time);
      $(this).find('[a="p"]').text(f.percent);
      $(this).find('[a="d"]').text(f.duration);
      $(this).toggleClass('hide', road.duration ? false : true);
    });
    listener$f.send('update', {
      data: {
        hash: params.hash,
        road: road
      }
    });
    if (!params.received && Account.hasPremium()) Socket.send('timeline', {
      params: params
    });
  }
  function view$1(hash) {
    var viewed = Storage.cache(filename(), 10000, {}),
      curent = typeof viewed[hash] !== 'undefined' ? viewed[hash] : 0;
    var account = Account.canSync();
    var profile = account && account.profile ? account.profile.id : 0;
    var road = {
      percent: 0,
      time: 0,
      duration: 0,
      profile: 0
    };
    if (_typeof(curent) == 'object') {
      road.percent = curent.percent;
      road.time = curent.time;
      road.duration = curent.duration;
      road.profile = curent.profile || profile;
    } else {
      road.percent = curent || 0;
      road.profile = profile;
    }
    listener$f.send('view', {
      data: {
        hash: hash,
        road: road
      }
    });
    return {
      hash: hash,
      percent: road.percent,
      time: road.time,
      duration: road.duration,
      profile: road.profile,
      handler: function handler(percent, time, duration) {
        return update$9({
          hash: hash,
          percent: percent,
          time: time,
          duration: duration,
          profile: road.profile
        });
      }
    };
  }
  function render$e(params) {
    var line = Template.get('timeline', params);
    line.toggleClass('hide', params.percent ? false : true);
    return line;
  }
  function details(params) {
    var str = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var line = Template.get('timeline_details', format(params));
    if (str) line.prepend(str);
    line.attr('data-hash', params.hash);
    line.toggleClass('hide', params.duration ? false : true);
    return line;
  }
  function watched(card) {
    var hash = Prisma.Utils.hash(card.original_name ? [1, 1, card.original_name].join('') : card.original_title);
    return view$1(hash).percent;
  }
  function format(params) {
    var road = {
      percent: params.percent + '%',
      time: Utils$2.secondsToTimeHuman(params.time),
      duration: Utils$2.secondsToTimeHuman(params.duration)
    };
    return road;
  }
  var Timeline$1 = {
    listener: listener$f,
    render: render$e,
    update: update$9,
    view: view$1,
    details: details,
    format: format,
    watched: watched,
    filename: filename
  };

  var socket;
  var ping;
  var _uid = Utils$2.uid();
  var _devices = [];
  var listener$e = start$8();
  var expects = [];
  var timeping = 5000;
  var timeout;
  var terminal_access = false;
  function connect$1() {
    if (!window.prisma_settings.socket_use) return;
    var ws = Platform.is('orsay') || Platform.is('netcast') ? 'ws://' : 'wss://';
    var pt = Platform.is('orsay') || Platform.is('netcast') ? ':80' : ':443';
    var url = object$2.pris_domain + '/ws';
    var socket_url = ws + url + pt;
    if (window.prisma_settings.socket_url) socket_url = window.prisma_settings.socket_url;
    clearInterval(ping);
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      console.log('Socket', 'timeout close');
      if (socket) socket.close();
    }, 10000);
    try {
      socket = new WebSocket(socket_url);
    } catch (e) {
      console.log('Socket', 'not work');
    }
    if (!socket) return;
    socket.addEventListener('open', function (event) {
      console.log('Socket', 'open on ' + socket_url);
      timeping = 5000;
      clearTimeout(timeout);
      send('start', {});
      listener$e.send('open', {});
    });
    socket.addEventListener('close', function (event) {
      console.log('Socket', 'close', event.code);
      clearTimeout(timeout);
      listener$e.send('close', {});

      // Обработка ошибки 429 (Too Many Requests)
      if (event.code === 429) {
        console.log('Socket', 'Rate limit exceeded, using extended backoff');
        timeping = Math.min(1000 * 60 * 10, timeping * 3); // Увеличиваем интервал в 3 раза для 429
      } else {
        timeping = Math.min(1000 * 60 * 5, timeping);
      }
      console.log('Socket', 'try connect to ' + socket_url + ' after', Math.round(timeping) / 1000, 'sec.');
      setTimeout(connect$1, Math.round(timeping));
      timeping *= 2;
    });
    socket.addEventListener('error', function (event) {
      console.log('Socket', 'error:', 'maybe there is no connection to the server');
      socket.close();
    }, false);
    socket.addEventListener('message', function (event) {
      var result = JSON.parse(event.data);
      if (window.prisma_settings.socket_methods) {
        if (result.method == 'devices') {
          _devices = result.data;
        } else if (result.method == 'open') {
          Controller.toContent();
          Activity$1.push(result.data);
        } else if (result.method == 'timeline') {
          result.data.received = true; //чтоб снова не отправлять и не зациклить

          var account = Account.canSync();
          if (account && account.profile && account.profile.id == result.data.profile) {
            Timeline$1.update(result.data);
          }
        } else if (result.method == 'bookmarks') {
          Account.update();
        } else if (result.method == 'terminal_activate') {
          if (Storage.get('terminal_access', '') == result.data.code) {
            terminal_access = true;
            send('terminal_result', {
              result: 'Terminal access activated'
            });
          }
        } else if (result.method == 'terminal_eval') {
          if (Storage.get('terminal_access', '') == result.data.code) {
            var stroke = '';
            var tojson = {};
            console.log('Socket', 'terminal eval', result.data.eval);
            try {
              stroke = eval(result.data.eval);
            } catch (e) {
              stroke = e.message + ' ' + e.stack;
            }
            try {
              if (Arrays.isObject(stroke) || Arrays.isArray(stroke)) tojson = JSON.stringify(stroke);
            } catch (e) {
              tojson = stroke;
            }
            if (typeof stroke == 'function') {
              tojson = 'Function cannot be converted to JSON';
            }
            if (typeof stroke == 'string' || typeof stroke == 'number' || typeof stroke == 'boolean') {
              tojson = stroke;
            } else if (stroke === undefined) {
              tojson = 'undefined';
            } else if (stroke === null) {
              tojson = 'null';
            } else tojson = 'unknown type';
            console.log('Socket', 'terminal eval result', tojson);
            send('terminal_result', {
              result: tojson
            });
          }
        } else if (result.method == 'logoff') {
          Account.logoff(result.data);
        } else if (result.method == 'info') {
          console.log('Socket', 'info', result.data);
        } else if (result.method == 'other' && result.data.submethod == 'play') {
          Controller.toContent();
          Modal.open({
            title: '',
            align: 'center',
            html: $('<div class="about">' + Lang.translate('confirm_open_player') + '</div>'),
            buttons: [{
              name: Prisma.Lang.translate('settings_param_no'),
              onSelect: function onSelect() {
                Modal.close();
                Controller.toggle('content');
              }
            }, {
              name: Prisma.Lang.translate('settings_param_yes'),
              onSelect: function onSelect() {
                Modal.close();
                Controller.toggle('content');
                Player.play(result.data.object.player);
                Player.playlist(result.data.object.playlist);
              }
            }],
            onBack: function onBack() {
              Modal.close();
              Controller.toggle('content');
            }
          });
        }
      }
      listener$e.send('message', result);
    });
    setInterval(function () {
      if (expects.length > 50) expects = expects.slice(-50);
      if (socket && socket.readyState == 1 && expects.length) {
        var msg = expects.shift();
        console.log('Socket', 'sent with a delay:', msg.method);
        send(msg.method, msg);
      }
    }, 2000); // Увеличиваем интервал с 1000 до 2000 мс для снижения нагрузки
  }
  function send(method, data) {
    var name_devise = Platform.get() ? Platform.get() : navigator.userAgent.toLowerCase().indexOf('mobile') > -1 ? 'mobile' : navigator.userAgent.toLowerCase().indexOf('x11') > -1 ? 'chrome' : 'other';
    data.device_id = _uid;
    data.name = Utils$2.capitalizeFirstLetter(name_devise) + ' - ' + Storage.field('device_name');
    data.method = method;
    data.version = 1;
    data.account = Storage.get('account', '{}');
    data.premium = Account.hasPremium();
    data.terminal = Storage.get('terminal_access', '');
    if (socket && socket.readyState == 1) socket.send(JSON.stringify(data));else expects.push(data);
  }
  function restart() {
    if (socket) socket.close();
    connect$1();
  }
  var Socket = {
    listener: listener$e,
    init: connect$1,
    send: send,
    uid: function uid() {
      return _uid;
    },
    devices: function devices() {
      return _devices;
    },
    restart: restart,
    terminalAccess: function terminalAccess() {
      return terminal_access;
    }
  };

  var broken_images = 0;
  function proxy(name) {
    var proxy = Storage.field(name);
    if (proxy.length > 0 && proxy.charAt(proxy.length - 1) == '/') {
      proxy = proxy.substring(0, proxy.length - 1);
    }
    return Utils$2.checkHttp(proxy);
  }
  function api$3(url) {
    var base = Utils$2.protocol() + 'api.manhan.one/tmdb/api/3/' + url;
    return Storage.field('proxy_tmdb') && Storage.field('tmdb_proxy_api') ? proxy('tmdb_proxy_api') + '/' + base : base;
  }
  function image(url) {
    var base = Utils$2.protocol() + 'img.pris.cam/' + url;
    return Storage.field('proxy_tmdb') && Storage.field('tmdb_proxy_image') ? proxy('tmdb_proxy_image') + '/' + base : base;
  }
  function broken() {
    broken_images++;
    if (broken_images > 50) {
      broken_images = 0;
      if (Storage.field('tmdb_proxy_image') && Storage.field('proxy_tmdb_auto')) Storage.set('proxy_tmdb', true);
    }
  }
  function key() {
    return '2e9c6a2121fca2fdf303aff51dbdfe63';
  }
  var TMDB$1 = {
    api: api$3,
    key: key,
    image: image,
    broken: broken
  };

  var NoticeClass = /*#__PURE__*/function () {
    function NoticeClass() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, NoticeClass);
      this.params = params;
      this.name = 'Noname';
    }
    return _createClass(NoticeClass, [{
      key: "active",
      value: function active() {
        return true;
      }
    }, {
      key: "push",
      value: function push(element, resolve, reject) {
        resolve();
      }
    }, {
      key: "empty",
      value: function empty() {
        return Lang.translate('notice_none_system');
      }
    }, {
      key: "viewed",
      value: function viewed() {}
    }, {
      key: "items",
      value: function items() {
        return [];
      }
    }, {
      key: "count",
      value: function count() {
        return 0;
      }
    }]);
  }();

  var NoticeAll = /*#__PURE__*/function (_NoticeClass) {
    function NoticeAll() {
      var _this;
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, NoticeAll);
      _this = _callSuper(this, NoticeAll, [params]);
      _this.name = Lang.translate('settings_param_jackett_interview_all');
      return _this;
    }
    _inherits(NoticeAll, _NoticeClass);
    return _createClass(NoticeAll, [{
      key: "active",
      value: function active() {
        return false;
      }
    }, {
      key: "count",
      value: function count() {
        return Notice$1.count();
      }
    }, {
      key: "viewed",
      value: function viewed() {
        for (var name in Notice$1.classes) {
          if (Notice$1.classes[name] !== this) {
            Notice$1.classes[name].viewed();
          }
        }
      }
    }, {
      key: "items",
      value: function items() {
        var _this2 = this;
        var items = [];
        var _loop = function _loop(name) {
          if (Notice$1.classes[name] !== _this2) {
            items = items.concat(Notice$1.classes[name].items().map(function (item) {
              var new_item = Arrays.clone(item);
              new_item.display = name;
              return new_item;
            }));
          }
        };
        for (var name in Notice$1.classes) {
          _loop(name);
        }
        items.sort(function (a, b) {
          return a.time > b.time ? -1 : a.time < b.time ? 1 : 0;
        });
        return items;
      }
    }]);
  }(NoticeClass);

  var NoticePrisma = /*#__PURE__*/function (_NoticeClass) {
    function NoticePrisma() {
      var _this;
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, NoticePrisma);
      _this = _callSuper(this, NoticePrisma, [params]);
      _this.name = params.name || 'Prisma';
      _this.time = 0;
      _this.view = 0;
      _this.db_name = params.db_name || 'notice';
      _this.notices = [];
      _this.connect();
      return _this;
    }
    _inherits(NoticePrisma, _NoticeClass);
    return _createClass(NoticePrisma, [{
      key: "connect",
      value: function connect() {
        this.db = new IndexedDB(this.db_name, ['all', 'readed'], 2);
        this.db.openDatabase().then(this.update.bind(this))["catch"](function () {
          return console.log('Notice', 'error', 'no open database');
        });
      }
    }, {
      key: "update",
      value: function update() {
        var _this2 = this;
        this.db.getData('readed', 'time').then(function (time) {
          _this2.time = time || 0;
          return _this2.db.getData('all');
        }).then(function (result) {
          result.sort(function (a, b) {
            return a.time > b.time ? -1 : a.time < b.time ? 1 : 0;
          });
          _this2.notices = result;
          _this2.view = result.filter(function (n) {
            return n.time > _this2.time;
          }).length;
          Notice$1.drawCount();
        })["catch"](function (e) {});
      }
    }, {
      key: "count",
      value: function count() {
        return this.view;
      }
    }, {
      key: "push",
      value: function push(element, resolve, reject) {
        if (!(element.id && element.from)) {
          if (reject) reject('No (id) or (from)');
          return;
        }
        if (!this.notices.find(function (n) {
          return n.id == element.id;
        })) {
          this.db.addData('all', element.id, element).then(this.update.bind(this)).then(function (e) {
            if (resolve) resolve(e);
          })["catch"](function (e) {
            if (reject) reject(e);
          });
        } else if (reject) reject('Already added');
      }
    }, {
      key: "viewed",
      value: function viewed() {
        this.db.rewriteData('readed', 'time', Date.now());
        this.view = 0;
        this.time = Date.now();
        Notice$1.drawCount();
      }
    }, {
      key: "items",
      value: function items() {
        return this.notices;
      }
    }]);
  }(NoticeClass);

  var NoticeCub = /*#__PURE__*/function (_NoticeClass) {
    function NoticeCub() {
      var _this;
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, NoticeCub);
      _this = _callSuper(this, NoticeCub, [params]);
      _this.name = 'CUB';
      _this.time = Storage.get('cub_notice_time', '0');
      _this.notices = [];
      setInterval(_this.update.bind(_this), 1000 * 60 * 5);
      _this.update();
      return _this;
    }
    _inherits(NoticeCub, _NoticeClass);
    return _createClass(NoticeCub, [{
      key: "update",
      value: function update() {
        var _this2 = this;
        Account.notice(function (result) {
          _this2.notices = result.map(function (item) {
            var data = JSON.parse(item.data);
            var text = Lang.translate('notice_new_quality');
            var labels = [];
            if (data.card.seasons) {
              var k = [];
              for (var i in data.card.seasons) k.push(i);
              var s = k.pop();
              labels.push('S - <b>' + s + '</b>');
              labels.push('E - <b>' + data.card.seasons[s] + '</b>');
              if (data.voice) labels.push(data.voice);
              text = Lang.translate('notice_new_episode');
            } else {
              labels.push(Lang.translate('notice_quality') + ' - <b>' + data.card.quality + '</b>');
            }
            return {
              time: item.time || Utils.parseToDate(item.date).getTime(),
              title: !Lang.selected(['ru', 'uk', 'be']) ? data.card.original_title || data.card.original_name : data.card.title || data.card.name,
              text: text,
              poster: data.card.poster ? data.card.poster : data.card.img ? data.card.img : data.card.poster_path,
              card: data.card,
              labels: labels
            };
          });
          _this2.notices.sort(function (a, b) {
            return a.time > b.time ? -1 : a.time < b.time ? 1 : 0;
          });
          Notice$1.drawCount();
        });
      }
    }, {
      key: "viewed",
      value: function viewed() {
        Storage.set('cub_notice_time', Date.now());
        this.time = Date.now();
        Notice$1.drawCount();
      }
    }, {
      key: "empty",
      value: function empty() {
        return Lang.translate(Account.logged() ? 'notice_none_account' : 'notice_none');
      }
    }, {
      key: "count",
      value: function count() {
        var _this3 = this;
        return this.notices.filter(function (n) {
          return n.time > _this3.time;
        }).length;
      }
    }, {
      key: "items",
      value: function items() {
        return this.notices;
      }
    }]);
  }(NoticeClass);

  function translate$1(str) {
    if (Arrays.isObject(str)) {
      var code = Prisma.Storage.get('language', 'ru');
      if (str[code]) return str[code];else if (str.ru) return str.ru;else return str[Arrays.getKeys(str)[0]];
    }
    return str;
  }
  var Notice = /*#__PURE__*/function () {
    function Notice() {
      _classCallCheck(this, Notice);
      this.listener = start$8();
      this.display = 'all';
      this.classes = {};
    }
    return _createClass(Notice, [{
      key: "init",
      value: function init() {
        var _this = this;
        this.classes.all = new NoticeAll();
        this.classes.prisma = new NoticePrisma();
        this.classes.cub = new NoticeCub();
        Prisma.Listener.follow('app', function (e) {
          if (e.type == 'ready') _this.drawCount();
        });
      }
    }, {
      key: "open",
      value: function open() {
        var _this2 = this;
        if (Prisma.Controller.enabled().name == 'modal') Modal.close();
        var html = $('<div></div>');
        var tabs = [];
        var viever = this.classes[this.display];
        var items = viever.items();
        var navigation = $('<div class="navigation-tabs"></div>');
        for (var name in this.classes) {
          var count = this.classes[name].count();
          var tab = {
            name: name,
            count: count
          };
          tabs.push(tab);
        }
        tabs.forEach(function (tab, i) {
          var button = $('<div class="navigation-tabs__button selector">' + _this2.classes[tab.name].name + '</div>');
          if (tab.count) button.append('<span class="navigation-tabs__badge">' + tab.count + '</span>');
          button.on('hover:enter', function () {
            _this2.display = tab.name;
            _this2.open();
          });
          if (tab.name == _this2.display) button.addClass('active');
          if (i > 0) navigation.append('<div class="navigation-tabs__split">|</div>');
          navigation.append(button);
        });
        html.append(navigation);
        items.forEach(function (element) {
          var item = Template.get('notice_card', {});
          var icon = element.poster || element.icon || element.img;
          var author_data = {};
          var author_html;
          item.addClass('image--' + (element.poster ? 'poster' : element.icon ? 'icon' : element.img ? 'img' : 'none'));
          item.find('.notice__title').html(translate$1(element.title));
          item.find('.notice__descr').html(translate$1(element.text));
          item.find('.notice__time').html(Utils$2.parseTime(element.time)["short"]);
          if (element.labels) item.find('.notice__descr').append($('<div class="notice__footer">' + element.labels.map(function (label) {
            return '<div>' + translate$1(label) + '</div>';
          }).join(' ') + '</div>'));
          if (element.author) {
            author_data = translate$1(element.author);
            author_html = $("<div class=\"notice__author\">\n                    <div class=\"notice__author-img\">\n                        <img />\n                    </div>\n                    <div class=\"notice__author-body\">\n                        <div class=\"notice__author-name\"></div>\n                        <div class=\"notice__author-text\"></div>\n                    </div>\n                </div>");
            author_html.find('.notice__author-name').html(author_data.name);
            author_html.find('.notice__author-text').html(author_data.text);
            item.find('.notice__body').append(author_html);
          }
          item.on('hover:enter', function () {
            if (element.card) {
              _this2.close();
              Activity$1.push({
                url: '',
                component: 'full',
                id: element.card.id,
                method: element.card.number_of_seasons || element.card.seasons ? 'tv' : 'movie',
                card: element.card,
                source: Lang.selected(['ru', 'uk', 'be']) ? 'cub' : ''
              });
            } else _this2.listener.send('select', {
              display: element.display || _this2.display,
              element: element
            });
          }).on('visible', function () {
            if (icon) {
              icon = translate$1(icon);
              if (icon.indexOf('http') == -1) icon = TMDB$1.image('t/p/w300/' + icon);
              var img_icon = item.find('.notice__left img')[0] || {};
              var img_author = item.find('.notice__author img')[0] || {};
              img_icon.onload = function () {
                item.addClass('image--loaded');
              };
              img_icon.onerror = function () {
                img_icon.src = './img/img_broken.svg';
              };
              img_author.onload = function () {
                item.addClass('image-author--loaded');
              };
              img_author.onerror = function () {
                img_author.src = './img/img_broken.svg';
              };
              img_icon.src = Utils$2.fixProtocolLink(icon);
              if (element.author) img_author.src = Utils$2.fixProtocolLink(author_data.img.indexOf('http') >= 0 ? author_data.img : TMDB$1.image('t/p/w200/' + author_data.img));
            }
          });
          html.append(item);
        });
        if (!items.length) {
          var empty = $('<div class="about"></div>');
          empty.append(viever.empty());
          html.append(empty);
        }
        viever.viewed();
        this.listener.send('viewed', {
          display: this.display
        });
        Modal.open({
          title: Lang.translate('title_notice'),
          select: html.find('.navigation-tabs .active')[0],
          size: 'medium',
          html: html,
          onBack: this.close.bind(this)
        });
      }
    }, {
      key: "count",
      value: function count() {
        var all = 0;
        for (var name in this.classes) {
          if (this.classes[name].active()) all += this.classes[name].count();
        }
        return all;
      }
    }, {
      key: "close",
      value: function close() {
        Modal.close();
        Controller.toggle('head');
      }
    }, {
      key: "drawCount",
      value: function drawCount() {
        var status = Boolean(this.count());
        var icon = $('.head .notice--icon');
        icon.toggleClass('active', status);
        clearInterval(this.blick_timer);
        if (status) {
          this.blick_timer = setInterval(function () {
            icon.addClass('animate');
            setTimeout(function () {
              icon.removeClass('animate');
            }, 1000);
          }, 1000 * 15);
        }
      }
    }, {
      key: "addClass",
      value: function addClass(class_name, noticeClass) {
        this.classes[class_name] = noticeClass;
      }
    }, {
      key: "pushNotice",
      value: function pushNotice(class_name, data, resolve, reject) {
        if (this.classes[class_name] && this.classes[class_name].push) {
          this.classes[class_name].push(data, resolve, reject);
        } else if (reject) reject('No find class');
      }
    }]);
  }();
  var Notice$1 = new Notice();

  var timer$5;
  var listener$d;

  /**
   * Открыть окно
   * @param {{type:string, object:{}}} params 
   */
  function open$5(params) {
    var enabled = Controller.enabled().name;
    var text = params.type == 'card' ? Lang.translate('broadcast_open') : params.type == 'play' ? Lang.translate('broadcast_play') : '';
    var temp = Template.get('broadcast', {
      text: text
    });
    var list = temp.find('.broadcast__devices');
    var last = '';
    if (!text) temp.find('.about').remove();
    Socket.send('devices', {});
    timer$5 = setInterval(function () {
      Socket.send('devices', {});
    }, 3000);
    listener$d = function listener(e) {
      if (e.method == 'devices') {
        var devices = e.data.filter(function (d) {
          return !(d.name == 'CUB' || d.device_id == Socket.uid());
        });
        var select;
        list.empty();
        devices.forEach(function (device) {
          var item = $('<div class="broadcast__device selector">' + device.name + '</div>');
          item.on('hover:enter', function () {
            close$6();
            Controller.toggle(enabled);
            if (params.type == 'card') {
              var object = Arrays.clone(params.object);
              var card = {
                id: object.card.id,
                source: object.card.source || 'tmdb'
              };
              object.card = card;
              Socket.send('open', {
                params: object,
                uid: device.uid
              });
            }
            if (params.type == 'play') {
              Socket.send('other', {
                params: {
                  submethod: 'play',
                  object: params.object
                },
                uid: device.uid
              });
            }
          }).on('hover:focus', function () {
            last = device.uid;
          });
          list.append(item);
          if (last == device.uid) select = item[0];
        });
        Modal.toggle(select);
      }
    };
    Modal.open({
      title: '',
      html: temp,
      size: 'small',
      mask: true,
      onBack: function onBack() {
        close$6();
        Controller.toggle(enabled);
      }
    });
    listener$d({
      method: 'devices',
      data: Socket.devices()
    });
    Socket.listener.follow('message', listener$d);
  }

  /**
   * Закрыть окно
   */
  function close$6() {
    Socket.listener.remove('message', listener$d);
    clearInterval(timer$5);
    Modal.close();
    listener$d = null;
  }
  var Broadcast = {
    open: open$5
  };

  function status$2(need) {
    this.data = {};
    this.work = 0;
    this.need = need;
    this.complited = false;
    this.check = function () {
      if (this.stopped) return;
      if (this.work >= this.need && !this.complited) {
        this.complited = true;
        this.onComplite(this.data);
      }
    };
    this.append = function (name, json) {
      this.work++;
      this.data[name] = json;
      this.check();
    };
    this.error = function () {
      this.work++;
      this.check();
    };
    this.stop = function () {
      this.stopped = true;
    };
  }

  var data$2 = [];

  /**
   * Запуск
   */
  function init$L() {
    data$2 = Storage.cache('recomends_scan', 300, []);
    setInterval(function () {
      var history = Favorite.get({
        type: 'history'
      });
      var added = 0;
      console.log('Recomendations', 'find history:', history.length);
      history.forEach(function (elem) {
        if (['cub', 'tmdb'].indexOf(elem.source) >= 0) {
          var id = data$2.filter(function (a) {
            return a.id == elem.id;
          });
          if (!id.length) {
            data$2.push({
              id: elem.id,
              tv: elem.number_of_seasons || elem.seasons
            });
            added++;
          }
        }
      });
      console.log('Recomendations', 'added to scan:', added, 'ready:', data$2.length);
      Storage.set('recomends_scan', data$2);
      search$4();
    }, 120 * 1000);
  }
  function search$4() {
    var ids = data$2.filter(function (e) {
      return !e.scan;
    });
    if (ids.length) {
      var elem = ids[0];
      elem.scan = 1;
      console.log('Recomendations', 'scan:', elem.id, elem.title || elem.name);
      TMDB.get((elem.tv ? 'tv' : 'movie') + '/' + elem.id + '/recommendations', {}, function (json) {
        console.log('Recomendations', 'result:', json.results && json.results.length ? json.results.length : 0);
        if (json.results && json.results.length) {
          var recomend = Storage.cache('recomends_list', 100, []);
          var favorite = Favorite.get({
            type: 'history'
          });
          json.results.forEach(function (e) {
            if (!recomend.filter(function (r) {
              return r.id == e.id;
            }).length && !favorite.filter(function (h) {
              return h.id == e.id;
            }).length) {
              recomend.push(e);
            }
          });
          Storage.set('recomends_list', recomend);
        }
      });
    } else {
      data$2.forEach(function (a) {
        return a.scan = 0;
      });
    }
    Storage.set('recomends_scan', data$2);
  }
  function get$b(type) {
    var all = Storage.get('recomends_list', '[]');
    var items = all.filter(function (e) {
      return type == 'tv' ? e.number_of_seasons || e.first_air_date : !(e.number_of_seasons || e.first_air_date);
    }).reverse();
    items.forEach(function (item) {
      item.ready = false;
    });
    return items;
  }
  var Recomends = {
    init: init$L,
    get: get$b
  };

  /**
   * Карточка
   * @param {object} data
   * @param {{isparser:boolean, card_small:boolean, card_category:boolean, card_collection:boolean, card_wide:true }} params 
   */
  function Episode(data) {
    var card = data.card;
    var episode = data.episode;
    Arrays.extend(card, {
      title: card.name,
      original_title: card.original_name,
      release_date: card.first_air_date
    });
    card.release_year = ((card.release_date || '0000') + '').slice(0, 4);
    function remove(elem) {
      if (elem) elem.remove();
    }

    /**
     * Загрузить шаблон
     */
    this.build = function () {
      this.card = Template.js('card_episode');
      this.img_poster = this.card.querySelector('.card__img') || {};
      this.img_episode = this.card.querySelector('.full-episode__img img') || {};
      this.card.querySelector('.card__title').innerText = card.title;
      this.card.querySelector('.full-episode__name').innerText = episode.name || Lang.translate('noname');
      this.card.querySelector('.full-episode__num').innerText = episode.episode_number || '';
      this.card.querySelector('.full-episode__date').innerText = episode.air_date ? Utils$2.parseTime(episode.air_date).full : '----';
      if (card.release_year == '0000') {
        remove(this.card.querySelector('.card__age'));
      }
      // else{
      //     this.card.querySelector('.card__age').innerText = card.release_year
      // }

      this.card.addEventListener('visible', this.visible.bind(this));
    };

    /**
     * Загрузить картинку
     */
    this.image = function () {
      var _this = this;
      this.img_poster.onload = function () {
        //this.card.classList.add('card--loaded')
      };
      this.img_poster.onerror = function () {
        _this.img_poster.src = './img/img_broken.svg';
      };
      this.img_episode.onload = function () {
        _this.card.querySelector('.full-episode__img').classList.add('full-episode__img--loaded');
      };
      this.img_episode.onerror = function () {
        _this.img_episode.src = './img/img_broken.svg';
      };
    };

    /**
     * Создать
     */
    this.create = function () {
      var _this2 = this;
      this.build();
      this.card.addEventListener('hover:focus', function () {
        if (_this2.onFocus) _this2.onFocus(_this2.card, card);
      });
      this.card.addEventListener('hover:hover', function () {
        if (_this2.onHover) _this2.onHover(_this2.card, card);
      });
      this.card.addEventListener('hover:enter', function () {
        if (_this2.onEnter) _this2.onEnter(_this2.card, card);
      });
      this.image();
    };

    /**
     * Загружать картинку если видна карточка
     */
    this.visible = function () {
      if (card.poster_path) this.img_poster.src = Api.img(card.poster_path);else if (card.profile_path) this.img_poster.src = Api.img(card.profile_path);else if (card.poster) this.img_poster.src = card.poster;else if (card.img) this.img_poster.src = card.img;else this.img_poster.src = './img/img_broken.svg';
      if (episode.still_path) this.img_episode.src = Api.img(episode.still_path, 'w300');else if (card.backdrop_path) this.img_episode.src = Api.img(card.backdrop_path, 'w300');else this.img_episode.src = './img/img_broken.svg';
      if (this.onVisible) this.onVisible(this.card, card);
    };

    /**
     * Уничтожить
     */
    this.destroy = function () {
      this.img_poster.onerror = function () {};
      this.img_poster.onload = function () {};
      this.img_episode.onerror = function () {};
      this.img_episode.onload = function () {};
      this.img_poster.src = '';
      this.img_episode.src = '';
      remove(this.card);
      this.card = null;
      this.img_poster = null;
      this.img_episode = null;
    };

    /**
     * Рендер
     * @returns {object}
     */
    this.render = function (js) {
      return js ? this.card : $(this.card);
    };
  }

  var network$b = new create$e();
  var menu_list = [];
  var genres$1 = {
    movie: [{
      "id": 28,
      "title": "#{filter_genre_ac}"
    }, {
      "id": 12,
      "title": "#{filter_genre_ad}"
    }, {
      "id": 16,
      "title": "#{filter_genre_mv}"
    }, {
      "id": 35,
      "title": "#{filter_genre_cm}"
    }, {
      "id": 80,
      "title": "#{filter_genre_cr}"
    }, {
      "id": 99,
      "title": "#{filter_genre_dc}"
    }, {
      "id": 18,
      "title": "#{filter_genre_dr}"
    }, {
      "id": 10751,
      "title": "#{filter_genre_fm}"
    }, {
      "id": 14,
      "title": "#{filter_genre_fe}"
    }, {
      "id": 36,
      "title": "#{filter_genre_hi}"
    }, {
      "id": 27,
      "title": "#{filter_genre_ho}"
    }, {
      "id": 10402,
      "title": "#{filter_genre_mu}"
    }, {
      "id": 9648,
      "title": "#{filter_genre_de}"
    }, {
      "id": 10749,
      "title": "#{filter_genre_md}"
    }, {
      "id": 878,
      "title": "#{filter_genre_fa}"
    }, {
      "id": 10770,
      "title": "#{filter_genre_tv}"
    }, {
      "id": 53,
      "title": "#{filter_genre_tr}"
    }, {
      "id": 10752,
      "title": "#{filter_genre_mi}"
    }, {
      "id": 37,
      "title": "#{filter_genre_ve}"
    }],
    tv: [{
      "id": 10759,
      "title": "#{filter_genre_aa}"
    }, {
      "id": 16,
      "title": "#{filter_genre_mv}"
    }, {
      "id": 35,
      "title": "#{filter_genre_cm}"
    }, {
      "id": 80,
      "title": "#{filter_genre_cr}"
    }, {
      "id": 99,
      "title": "#{filter_genre_dc}"
    }, {
      "id": 18,
      "title": "#{filter_genre_dr}"
    }, {
      "id": 10751,
      "title": "#{filter_genre_fm}"
    }, {
      "id": 10762,
      "title": "#{filter_genre_ch}"
    }, {
      "id": 9648,
      "title": "#{filter_genre_de}"
    }, {
      "id": 10763,
      "title": "#{filter_genre_nw}"
    }, {
      "id": 10764,
      "title": "#{filter_genre_rs}"
    }, {
      "id": 10765,
      "title": "#{filter_genre_hf}"
    }, {
      "id": 10766,
      "title": "#{filter_genre_op}"
    }, {
      "id": 10767,
      "title": "#{filter_genre_tc}"
    }, {
      "id": 10768,
      "title": "#{filter_genre_mp}"
    }, {
      "id": 37,
      "title": "#{filter_genre_ve}"
    }],
    anime: [{
      "id": 28,
      "title": "#{filter_genre_ac}"
    }, {
      "id": 16,
      "title": "#{filter_genre_mv}"
    }, {
      "id": 35,
      "title": "#{filter_genre_cm}"
    }, {
      "id": 14,
      "title": "#{filter_genre_fe}"
    }, {
      "id": 27,
      "title": "#{filter_genre_ho}"
    }, {
      "id": 9648,
      "title": "#{filter_genre_de}"
    }, {
      "id": 10749,
      "title": "#{filter_genre_md}"
    }, {
      "id": 878,
      "title": "#{filter_genre_fa}"
    }]
  };
  var stop_keywords = ['порно', 'эротика', 'член', 'порно', 'porn', 'xxx', 'sexy', 'erotic'];
  var blocked_ids = [124185, 234291, 1226743, 1268218, 1049998, 234763, 879412, 779280, 825808, 1168166, 1048516, 884184, 458156, 324552, 979595, 1087388, 864238, 895539, 716612, 1082415, 576920, 808176, 659384, 718838, 676705, 412656, 729577, 579831, 927714, 778810, 955569, 598212, 406759, 967561, 996525, 960139, 857553, 742070, 598355, 536437, 729854, 965571, 546121, 589752, 576986, 864120, 1152354, 1250567, 522016, 732684, 746524, 128032, 1256724, 586386, 818415, 635440, 719463, 95530, 713335, 680779, 842033, 930976, 977470, 1353496, 1152238, 732698, 829361, 783110, 120000, 838209, 1057001, 717088, 1026819, 138558, 837335, 76203, 484641, 627290, 518756, 595464, 478820, 114080, 577020, 267192, 575075, 296524, 468987, 571263, 444218, 577028, 395991, 533642, 157350, 262500, 262504, 575131, 394661, 469287, 334524, 581905, 577040, 542836, 75656, 291805, 10908, 282984, 618416, 429351, 385137, 10222, 986718, 313369, 415381, 184155, 45927, 307649, 598252, 6395, 587617, 522162, 567801, 818427, 915000, 208611, 575088, 579875, 380111, 415842, 454992, 576987, 760873, 806128, 354859, 800497, 579872, 589761, 585257, 454615, 407887, 406761, 683311, 660000, 400535, 768726, 410554, 497722, 287948, 403300, 298250, 17935, 394537, 107846, 544404, 459992, 523781, 438623, 524659, 80164, 274854, 49049, 844386, 579884, 961484, 579805, 484247, 643586, 564145, 525661, 146216, 516850, 375588, 48234, 1149912];
  function url$5(u) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ln = [Storage.field('tmdb_lang')];
    if (params.langs) ln = typeof params.langs == 'string' ? [params.langs] : ln.concat(params.langs.filter(function (n) {
      return n !== ln[0];
    }));
    u = add$9(u, 'api_key=' + TMDB$1.key());
    u = add$9(u, 'language=' + ln.join(','));
    if (params.genres && u.indexOf('with_genres') == -1) u = add$9(u, 'with_genres=' + params.genres);
    if (params.page) u = add$9(u, 'page=' + params.page);
    if (params.query) u = add$9(u, 'query=' + params.query);
    if (params.keywords) u = add$9(u, 'with_keywords=' + params.keywords);
    if (params.watch_region) u = add$9(u, 'watch_region=' + params.watch_region);
    if (params.watch_providers) u = add$9(u, 'with_watch_providers=' + params.watch_providers);
    if (params.networks) u = add$9(u, 'with_networks=' + params.networks);
    if (params.sort_by) u = add$9(u, 'sort_by=' + params.sort_by);
    if (params.filter) {
      for (var i in params.filter) {
        u = add$9(u, i + '=' + params.filter[i]);
      }
    }
    if (params.genres && u.indexOf('discover/') !== 0) {
      u = 'discover/' + u;
    }
    return TMDB$1.api(u);
  }
  function add$9(u, params) {
    return u + (/\?/.test(u) ? '&' : '?') + params;
  }
  function img(src, size) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'poster';
    var poster_size = Storage.field('poster_size');
    var baseimg;
    if (type === 'logo') {
      baseimg = 't/p/original/';
    } else {
      baseimg = "t/p/".concat(poster_size, "/");
    }
    var path = baseimg;
    if (size) path = path.replace(new RegExp(poster_size, 'g'), size);
    return src ? TMDB$1.image(path + src) : '';
  }

  /**
   * Получает логотипы для фильма или сериала
   * @param {number} id - ID фильма или сериала
   * @param {string} mediaType - Тип медиа ('movie' или 'tv')
   * @param {string} language - Код языка (например, 'ru', 'en')
   * @returns {Promise} - Промис с данными о логотипах
   */
  function movieLogos(id) {
    var mediaType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'movie';
    var language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (!id) return Promise.reject('ID не указан');

    // Используем язык из настроек, если не указан
    if (!language) language = Storage.field('tmdb_lang');
    var apiUrl = "".concat(mediaType, "/").concat(id, "/images?api_key=").concat(TMDB$1.key(), "&language=").concat(language);
    return new Promise(function (resolve, reject) {
      network$b.silent(TMDB$1.api(apiUrl), function (json) {
        if (json && !json.error) {
          resolve(json);
        } else {
          reject((json === null || json === void 0 ? void 0 : json.error) || 'Ошибка получения логотипов');
        }
      }, function (error) {
        reject(error || 'Сетевая ошибка');
      });
    });
  }
  function find$1(find) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var finded;
    var filtred = function filtred(items) {
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        if (params.original_title == item.original_title || params.title == item.title) {
          finded = item;
          break;
        }
      }
    };
    if (find.movie && find.movie.results.length) filtred(find.movie.results);
    if (find.tv && find.tv.results.length && !finded) filtred(find.tv.results);
    return finded;
  }

  // Функция для применения small и wide к json с проверкой на исключения
  function applyCardStyles(json) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    // По умолчанию применяем и small и wide
    if (options.small !== false) {
      json.small = true;
    }
    if (options.wide !== false) {
      json.wide = true;
    }

    // Всегда добавляем promo и promo_title
    if (Array.isArray(json.results)) {
      json.results.forEach(function (card) {
        card.promo = card.overview;
        card.promo_title = card.title || card.name;
      });
    }
    return json;
  }

  // Модифицированный main с исправлениями
  function main$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    // Увеличиваем лимит для загрузки большего количества категорий
    var parts_limit = 7;

    // Опции сортировки
    var sortOptions = [{
      key: 'vote_count.desc',
      title: 'title_many_votes'
    }, {
      key: 'vote_average.desc',
      title: 'title_high_rating'
    }, {
      key: 'release_date.desc',
      title: 'title_new_releases'
    }, {
      key: 'popularity.desc',
      title: 'title_popular'
    }, {
      key: 'revenue.desc',
      title: 'title_audience_interest'
    }];

    // Жанры фильмов
    var genres = [{
      id: 28,
      title: 'filter_genre_ac'
    }, {
      id: 35,
      title: 'filter_genre_cm'
    }, {
      id: 18,
      title: 'filter_genre_dr'
    }, {
      id: 10749,
      title: 'filter_genre_md'
    }, {
      id: 16,
      title: 'filter_genre_mv'
    }, {
      id: 12,
      title: 'filter_genre_ad'
    }, {
      id: 80,
      title: 'filter_genre_cr'
    }, {
      id: 9648,
      title: 'filter_genre_de'
    }, {
      id: 878,
      title: 'filter_genre_fa'
    }, {
      id: 14,
      title: 'filter_genre_fe'
    }, {
      id: 10752,
      title: 'filter_genre_mi'
    }, {
      id: 37,
      title: 'filter_genre_ve'
    }, {
      id: 53,
      title: 'filter_genre_tr'
    }, {
      id: 10751,
      title: 'filter_genre_fm'
    }, {
      id: 99,
      title: 'filter_genre_dc'
    }, {
      id: 36,
      title: 'filter_genre_hi'
    }, {
      id: 27,
      title: 'filter_genre_ho'
    }];

    // Стриминговые сервисы
    var streamingServices = [{
      id: 49,
      title: 'HBO'
    }, {
      id: 2552,
      title: 'Apple TV+'
    }, {
      id: 453,
      title: 'Hulu'
    }, {
      id: 1024,
      title: 'Amazon Prime'
    }, {
      id: 213,
      title: 'Netflix'
    }, {
      id: 3186,
      title: 'HBO Max'
    }, {
      id: 2076,
      title: 'Paramount+'
    }, {
      id: 3353,
      title: 'Peacock'
    }, {
      id: 2739,
      title: 'Disney+'
    }, {
      id: 318,
      title: 'Starz'
    }, {
      id: 3746,
      title: 'BBC'
    }, {
      id: 19,
      title: 'FOX'
    }];

    // Дополнительные российские сервисы
    var russianServices = [{
      id: 2859,
      title: 'Premier'
    }, {
      id: 4085,
      title: 'KION'
    }, {
      id: 3923,
      title: 'ИВИ'
    }, {
      id: 3871,
      title: 'Okko'
    }, {
      id: 3827,
      title: 'Кинопоиск'
    }, {
      id: 5806,
      title: 'Wink'
    }, {
      id: 806,
      title: 'СТС'
    }, {
      id: 1191,
      title: 'ТНТ'
    }];

    // Если пользовательский интерфейс на русском, добавляем российские сервисы
    if (Storage.field('language') === 'ru') {
      streamingServices.push.apply(streamingServices, russianServices);
    }

    // Получаем временные периоды
    var periods = [{
      start: 1990,
      end: 1999,
      title: 'title_period_90s'
    }, {
      start: 2000,
      end: 2009,
      title: 'title_period_2000s'
    }, {
      start: 2010,
      end: 2019,
      title: 'title_period_2010s'
    }, {
      start: 2020,
      end: 2025,
      title: 'title_period_2020s'
    }];

    // Перемешивание массива
    function shuffleArray(array) {
      var newArray = _toConsumableArray(array);
      for (var i = newArray.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var _ref = [newArray[j], newArray[i]];
        newArray[i] = _ref[0];
        newArray[j] = _ref[1];
      }
      return newArray;
    }

    // Функция-обертка для запросов, гарантирующая минимальное количество результатов
    function requestWithMinResults(apiUrl, baseTitle, fallbackUrl, callback) {
      var params = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
      var minResults = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 5;
      // Первый запрос
      get$a(apiUrl, params, function (json) {
        json.title = baseTitle;

        // Только применяем стили, не фильтруем еще
        json = applyCardStyles(json, {
          wide: json.title === 'title_now_watch' ? false : true
        });

        // Если результатов достаточно, возвращаем их
        if (json.results && json.results.length >= minResults) {
          callback(json);
        }
        // Если результатов мало, но есть fallback запрос
        else if (fallbackUrl) {
          // Пробуем fallback запрос
          get$a(fallbackUrl, params, function (newJson) {
            newJson.title = baseTitle;
            newJson = applyCardStyles(newJson, {
              wide: newJson.title === 'title_now_watch' ? false : true
            });

            // Если и тут мало, соединяем результаты
            if (newJson.results && newJson.results.length < minResults && json.results) {
              // Объединяем результаты из обоих запросов
              var combinedResults = _toConsumableArray(json.results);
              newJson.results.forEach(function (item) {
                // Добавляем только уникальные элементы
                if (!combinedResults.some(function (existing) {
                  return existing.id === item.id;
                })) {
                  combinedResults.push(item);
                }
              });
              newJson.results = combinedResults;
            }

            // Возвращаем результат
            callback(newJson);
          }, function () {
            // Если fallback не сработал, используем оригинальный результат
            callback(json);
          });
        }
        // Если результатов мало и нет fallback запроса
        else {
          callback(json);
        }
      }, function () {
        // Если первый запрос не сработал, пробуем fallback
        if (fallbackUrl) {
          get$a(fallbackUrl, params, function (newJson) {
            newJson.title = baseTitle;
            newJson = applyCardStyles(newJson, {
              wide: newJson.title === 'title_now_watch' ? false : true
            });
            callback(newJson);
          }, function () {
            // Создаем пустой шаблон, если оба запроса не сработали
            callback({
              title: baseTitle,
              results: []
            });
          });
        } else {
          // Создаем пустой шаблон, если запрос не сработал
          callback({
            title: baseTitle,
            results: []
          });
        }
      });
    }

    // Функция для создания запроса по жанру с обеспечением минимального количества результатов
    function getGenreRequest(genreId) {
      var mediaType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'movie';
      var sortKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'vote_average.desc';
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      return function (call) {
        var _sortOptions$find;
        var genre = genres.find(function (g) {
          return g.id === genreId;
        }) || {
          id: genreId,
          title: 'filter_genre_unknown'
        };
        var sortTitle = ((_sortOptions$find = sortOptions.find(function (s) {
          return s.key.includes(sortKey.split('&')[0]);
        })) === null || _sortOptions$find === void 0 ? void 0 : _sortOptions$find.title) || 'title_popular';
        var titlePrefix = options.titlePrefix || Lang.translate(sortTitle);
        var titleSuffix = options.titleSuffix || '';

        // Основной запрос с жанром
        var apiUrl = 'discover/' + mediaType + '?with_genres=' + genreId + '&sort_by=' + sortKey + '&vote_count.gte=' + (options.minVotes || 100);

        // Запрос без ограничения по жанру, но с тем же типом сортировки
        var fallbackUrl = 'discover/' + mediaType + '?sort_by=' + sortKey + '&vote_count.gte=' + (options.minVotes || 50);

        // Базовое название категории
        var baseTitle = titlePrefix + ' (' + Lang.translate(genre.title) + ')' + titleSuffix;

        // Выполняем запрос с обеспечением минимального количества результатов
        requestWithMinResults(apiUrl, baseTitle, fallbackUrl, function (json) {
          // Добавляем line_type = 'top' для высокого рейтинга
          if (sortTitle === 'title_high_rating' || sortKey.includes('vote_average.desc')) {
            json.line_type = 'top';
          }
          call(json);
        }, params);

        // Выполняем запрос с обеспечением минимального количества результатов
        requestWithMinResults(apiUrl, baseTitle, fallbackUrl, call, params);
      };
    }

    // Функция для создания запроса по стримингу с обеспечением минимального количества результатов
    function getStreamingRequest(serviceId, serviceName) {
      var genreId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      return function (call) {
        var apiUrl = 'discover/tv?with_networks=' + serviceId;
        if (genreId) {
          var _sortOptions$find2;
          var genre = genres.find(function (g) {
            return g.id === genreId;
          }) || {
            id: genreId,
            title: 'filter_genre_unknown'
          };
          apiUrl += '&with_genres=' + genreId;
          var sortKey = options.sortKey || 'popularity.desc';
          var sortTitle = ((_sortOptions$find2 = sortOptions.find(function (s) {
            return s.key.includes(sortKey.split('&')[0]);
          })) === null || _sortOptions$find2 === void 0 ? void 0 : _sortOptions$find2.title) || 'title_popular';
          apiUrl += '&sort_by=' + sortKey;

          // Базовое название с жанром
          var baseTitle = Lang.translate(sortTitle) + ' (' + Lang.translate(genre.title) + ') ' + Lang.translate('title_on') + ' ' + serviceName;

          // Fallback запрос без ограничения по жанру
          var fallbackUrl = 'discover/tv?with_networks=' + serviceId + '&sort_by=' + sortKey;
          requestWithMinResults(apiUrl, baseTitle, fallbackUrl, call, params);
        } else {
          var _sortOptions$find3;
          var _sortKey = options.sortKey || sortOptions[Math.floor(Math.random() * sortOptions.length)].key;
          var _sortTitle = ((_sortOptions$find3 = sortOptions.find(function (s) {
            return s.key.includes(_sortKey.split('&')[0]);
          })) === null || _sortOptions$find3 === void 0 ? void 0 : _sortOptions$find3.title) || 'title_popular';
          apiUrl += '&sort_by=' + _sortKey;

          // Базовое название без жанра
          var _baseTitle = Lang.translate(_sortTitle) + ' ' + Lang.translate('title_on') + ' ' + serviceName;
          requestWithMinResults(apiUrl, _baseTitle, null, call, params);
        }
      };
    }

    // Функция для создания запроса с российским контентом
    function getRussianContentRequest() {
      var genreId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var mediaType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'movie';
      var sortKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'popularity.desc';
      return function (call) {
        var apiUrl = 'discover/' + mediaType + '?with_original_language=ru';
        if (genreId) {
          var _sortOptions$find4;
          var genre = genres.find(function (g) {
            return g.id === genreId;
          }) || {
            id: genreId,
            title: 'filter_genre_unknown'
          };
          apiUrl += '&with_genres=' + genreId;
          var sortTitle = ((_sortOptions$find4 = sortOptions.find(function (s) {
            return s.key.includes(sortKey.split('&')[0]);
          })) === null || _sortOptions$find4 === void 0 ? void 0 : _sortOptions$find4.title) || 'title_popular';
          apiUrl += '&sort_by=' + sortKey;

          // Базовое название с жанром
          var baseTitle = Lang.translate(sortTitle) + ' (' + Lang.translate(genre.title) + ') ' + Lang.translate('title_russian');

          // Fallback с меньшим количеством параметров
          var fallbackUrl = 'discover/' + mediaType + '?with_original_language=ru&sort_by=' + sortKey;
          requestWithMinResults(apiUrl, baseTitle, fallbackUrl, call, params);
        } else {
          apiUrl += '&sort_by=' + sortKey;

          // Базовое название без жанра
          var _baseTitle2 = mediaType === 'movie' ? Lang.translate('title_russian_movies') : Lang.translate('title_russian_tv_shows');
          requestWithMinResults(apiUrl, _baseTitle2, null, call, params);
        }
      };
    }

    // Основной массив частей данных (базовые категории)
    var parts_data = [
    // Сейчас смотрят
    function (call) {
      get$a('movie/now_playing', params, function (json) {
        json.title = Lang.translate('title_now_watch');
        json.big = true;
        json.small = true;
        json.results.forEach(function (card) {
          card.promo = card.overview;
          card.promo_title = card.title || card.name;
        });
        call(json);
      }, call);
    },
    // Предстоящие эпизоды
    function (call) {
      var result = {
        results: TimeTable.lately().slice(0, 20),
        title: Lang.translate('title_upcoming_episodes'),
        nomore: true,
        cardClass: function cardClass(_elem, _params) {
          return new Episode(_elem, _params);
        }
      };

      // Применяем стили
      result = applyCardStyles(result);
      call(result);
    },
    // Вышедшие эпизоды
    function (call) {
      var result = {
        results: TimeTable.aired().slice(0, 20),
        title: Lang.translate('title_aired_episodes'),
        nomore: true,
        cardClass: function cardClass(_elem, _params) {
          return new Episode(_elem, _params);
        }
      };

      // Применяем стили
      result = applyCardStyles(result);
      call(result);
    },
    // Популярные сегодня
    function (call) {
      get$a('trending/movie/day', params, function (json) {
        json.title = Lang.translate('title_trend_day');
        json = applyCardStyles(json);
        call(json);
      }, call);
    },
    // Популярные за неделю
    function (call) {
      get$a('trending/tv/week', params, function (json) {
        json.title = Lang.translate('title_trend_week');
        json = applyCardStyles(json);
        call(json);
      }, call);
    }];

    // Получаем все жанры
    var allGenreIds = genres.map(function (g) {
      return g.id;
    });

    // Добавляем запросы для жанров в перемешанном порядке
    var shuffledGenres = shuffleArray(_toConsumableArray(allGenreIds));

    // Добавляем высокорейтинговые фильмы и сериалы
    for (var i = 0; i < 10; i++) {
      var genreId = shuffledGenres[i % shuffledGenres.length];
      parts_data.push(getGenreRequest(genreId, i % 2 === 0 ? 'movie' : 'tv', 'vote_average.desc', {
        titlePrefix: Lang.translate('title_high_rating'),
        minVotes: 300
      }));
    }

    // Добавляем популярные фильмы и сериалы
    for (var _i = 0; _i < 10; _i++) {
      var _genreId = shuffledGenres[(_i + 10) % shuffledGenres.length];
      parts_data.push(getGenreRequest(_genreId, _i % 2 === 0 ? 'movie' : 'tv', 'popularity.desc', {
        titlePrefix: Lang.translate('title_popular'),
        minVotes: 100
      }));
    }

    // Добавляем фильмы и сериалы с большим количеством голосов
    for (var _i2 = 0; _i2 < 10; _i2++) {
      var _genreId2 = shuffledGenres[(_i2 + 20) % shuffledGenres.length];
      parts_data.push(getGenreRequest(_genreId2, _i2 % 2 === 0 ? 'movie' : 'tv', 'vote_count.desc', {
        titlePrefix: Lang.translate('title_many_votes'),
        minVotes: 500
      }));
    }

    // Добавляем новинки
    for (var _i3 = 0; _i3 < 10; _i3++) {
      var _genreId3 = shuffledGenres[(_i3 + 30) % shuffledGenres.length];
      parts_data.push(getGenreRequest(_genreId3, _i3 % 2 === 0 ? 'movie' : 'tv', _i3 % 2 === 0 ? 'release_date.desc' : 'first_air_date.desc', {
        titlePrefix: Lang.translate('title_new_releases'),
        minVotes: 50
      }));
    }

    // Добавляем подборки по временным периодам
    var shuffledPeriods = shuffleArray([].concat(periods));
    var _loop = function _loop() {
      var period = shuffledPeriods[_i4 % shuffledPeriods.length];
      var genreId = shuffledGenres[_i4 % shuffledGenres.length];
      var mediaType = _i4 % 2 === 0 ? 'movie' : 'tv';
      parts_data.push(function (call) {
        var genre = genres.find(function (g) {
          return g.id === genreId;
        }) || {
          id: genreId,
          title: 'filter_genre_unknown'
        };
        var dateField = mediaType === 'movie' ? 'primary_release_date' : 'first_air_date';
        var typeTitle = mediaType === 'movie' ? 'title_best_movies' : 'title_best_shows';
        var apiUrl = 'discover/' + mediaType + '?with_genres=' + genreId + '&sort_by=vote_average.desc' + '&vote_count.gte=200' + '&' + dateField + '.gte=' + period.start + '-01-01' + '&' + dateField + '.lte=' + period.end + '-12-31';
        var fallbackUrl = 'discover/' + mediaType + '?sort_by=vote_average.desc' + '&vote_count.gte=200' + '&' + dateField + '.gte=' + period.start + '-01-01' + '&' + dateField + '.lte=' + period.end + '-12-31';
        var baseTitle = Lang.translate(typeTitle) + ' (' + Lang.translate(genre.title) + ') ' + period.start + '-' + period.end;
        requestWithMinResults(apiUrl, baseTitle, fallbackUrl, call, params);
      });
    };
    for (var _i4 = 0; _i4 < 10; _i4++) {
      _loop();
    }

    // Добавляем запросы для стриминговых сервисов
    var shuffledServices = shuffleArray([].concat(streamingServices));

    // Добавляем стриминговые сервисы без жанров
    shuffledServices.forEach(function (service) {
      parts_data.push(getStreamingRequest(service.id, service.title));
    });

    // Добавляем стриминговые сервисы с жанрами
    for (var _i5 = 0; _i5 < 20; _i5++) {
      var service = shuffledServices[_i5 % shuffledServices.length];
      var _genreId4 = shuffledGenres[_i5 % shuffledGenres.length];
      parts_data.push(getStreamingRequest(service.id, service.title, _genreId4, {
        sortKey: sortOptions[_i5 % sortOptions.length].key
      }));
    }

    // Если интерфейс на русском, добавляем российский контент
    if (Storage.field('language') === 'ru') {
      // Общий российский контент
      parts_data.push(getRussianContentRequest(null, 'movie'));
      parts_data.push(getRussianContentRequest(null, 'tv'));

      // Российский контент по жанрам
      for (var _i6 = 0; _i6 < 15; _i6++) {
        var _genreId5 = shuffledGenres[_i6 % shuffledGenres.length];
        var mediaType = _i6 % 2 === 0 ? 'movie' : 'tv';
        var sortKey = sortOptions[_i6 % sortOptions.length].key;
        parts_data.push(getRussianContentRequest(_genreId5, mediaType, sortKey));
      }
    }

    // Добавляем partPersons, как в оригинальном коде
    Arrays.insert(parts_data, 0, Api.partPersons(parts_data, parts_limit, 'movie'));

    // Перемешиваем категории для разнообразия, начиная с 5-й позиции
    Arrays.shuffleArrayFromIndex(parts_data, 5);

    // Обработка загрузки частей
    function loadPart(partLoaded, partEmpty) {
      Api.partNext(parts_data, parts_limit, partLoaded, partEmpty);
    }
    loadPart(oncomplite, onerror);
    return loadPart;
  }
  function category$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var fullcat = !(params.genres || params.keywords);
    var show = ['movie', 'tv', 'anime'].indexOf(params.url) > -1 && fullcat;
    var books = show ? Favorite.continues(params.url) : [];
    var recomend = show ? Arrays.shuffle(Recomends.get(params.url)).slice(0, 19) : [];
    var parts_limit = 6;
    var parts_data = [function (call) {
      if (params.url == 'tv' || params.url == 'anime') {
        call({
          results: TimeTable.lately().slice(0, 20),
          title: Lang.translate('title_upcoming_episodes'),
          nomore: true,
          cardClass: function cardClass(_elem, _params) {
            return new Episode(_elem, _params);
          }
        });
      } else {
        call();
      }
    }, function (call) {
      if (params.url == 'tv' || params.url == 'anime') {
        call({
          results: TimeTable.aired().slice(0, 20),
          title: Lang.translate('title_aired_episodes'),
          nomore: true,
          cardClass: function cardClass(_elem, _params) {
            return new Episode(_elem, _params);
          }
        });
      } else {
        call();
      }
    }, function (call) {
      var json = {
        results: books,
        title: params.url == 'tv' ? Lang.translate('title_continue') : Lang.translate('title_watched')
      };
      if (params.url == 'tv') {
        json["continue"] = true;
        json.line_type = 'continue';
      }
      if (params.url == 'movie') {
        json["continue"] = true;
        json.line_type = 'continue';
      }
      call(json);
    }, function (call) {
      var json = {
        results: recomend,
        title: Lang.translate('title_recomend_watch'),
        small: true,
        wide: true
      };
      json.results.forEach(function (card) {
        card.promo = card.overview;
        card.promo_title = card.title || card.name;
      });
      call(json);
    }, function (call) {
      if (params.url == 'movie') {
        get$a('movie/now_playing', params, function (json) {
          json.title = Lang.translate('title_now_watch');
          json.small = true;
          json.big = true;
          json.results.forEach(function (card) {
            card.promo = card.overview;
            card.promo_title = card.title || card.name;
          });
          call(json);
        }, call);
      } else call();
    }, function (call) {
      if (params.url == 'tv') {
        get$a('discover/' + params.url + '?with_release_type=3', params, function (json) {
          json.title = Lang.translate('title_now_watch');
          json.small = true;
          json.big = true;
          json.results.forEach(function (card) {
            card.promo = card.overview;
            card.promo_title = card.title || card.name;
          });
          call(json);
        }, call);
      } else call();
    }, function (call) {
      if (params.url == 'tv') {
        get$a('discover/tv?language=ru&with_networks=213', params, function (json) {
          json.title = Lang.translate('title_trend_netflix');
          json.small = true;
          json.wide = true;
          json.results.forEach(function (card) {
            card.promo = card.overview;
            card.promo_title = card.title || card.name;
          });
          call(json);
        }, call);
      } else call();
    }, function (call) {
      if (params.url == 'movie') {
        get$a('discover/movie?language=ru&region=RU&with_original_language=ru', params, function (json) {
          json.title = Lang.translate('title_russian_movies');
          json.small = true;
          json.wide = true;
          json.results.forEach(function (card) {
            card.promo = card.overview;
            card.promo_title = card.title || card.name;
          });
          call(json);
        }, call);
      } else call();
    }, function (call) {
      if (params.url == 'tv') {
        get$a('discover/tv?language=ru&region=RU&with_original_language=ru', params, function (json) {
          json.title = Lang.translate('title_russian_tv_shows');
          json.small = true;
          json.wide = true;
          json.results.forEach(function (card) {
            card.promo = card.overview;
            card.promo_title = card.title || card.name;
          });
          call(json);
        }, call);
      } else call();
    }, function (call) {
      get$a(params.url == 'movie' ? 'discover/movie' : 'trending/tv/day', params, function (json) {
        json.title = Lang.translate('title_popular');
        json.small = true;
        json.big = true;
        json.results.forEach(function (card) {
          card.promo = card.overview;
          card.promo_title = card.title || card.name;
        });
        call(json);
      }, call);
    }, function (call) {
      if (params.url == 'tv') {
        get$a('discover/tv?language=ru&with_networks=3827', params, function (json) {
          json.title = Lang.translate('title_trend_kinopoisk');
          json.small = true;
          json.wide = true;
          json.results.forEach(function (card) {
            card.promo = card.overview;
            card.promo_title = card.title || card.name;
          });
          call(json);
        }, call);
      } else call();
    },
    // Потом что нибудь придумаю. Лезет всякий мусор
    // (call)=>{
    //     get('discover/' + params.url + '?'+(params.url == 'movie' ? 'primary_release_year' : 'first_air_date_year')+'=' + (new Date().getFullYear() - 1) + '&vote=6-8',params,(json)=>{

    //         json.title = Lang.translate('title_last_year')

    //         json.small = true
    //         json.wide = true

    //         json.results.forEach(card=>{
    //             card.promo = card.overview
    //             card.promo_title = card.title || card.name
    //         })

    //         call(json)
    //     },call)
    // },
    function (call) {
      var lte = new Date().getFullYear() - 2 + '-12-31';
      var gte = new Date().getFullYear() - 7 + '-01-01';
      var reg = params.url == 'movie' ? 'primary_release_date' : 'first_air_date';
      lte = reg + '.lte=' + lte;
      gte = reg + '.gte=' + gte;
      get$a('discover/' + params.url + '?' + lte + '&' + gte + '&vote_average.gte=7', params, function (json) {
        json.title = Lang.translate('title_worth_rewatch');
        json.small = true;
        json.wide = true;
        json.results.forEach(function (card) {
          card.promo = card.overview;
          card.promo_title = card.title || card.name;
        });
        call(json);
      }, call);
    }, function (call) {
      var lte = new Date().getFullYear() - 2 + '-12-31';
      var gte = new Date().getFullYear() - 7 + '-01-01';
      var reg = params.url == 'movie' ? 'primary_release_date' : 'first_air_date';
      lte = reg + '.lte=' + lte;
      gte = reg + '.gte=' + gte;
      get$a('discover/' + params.url + '?' + lte + '&' + gte + '&vote_average.gte=8&vote_average.lte=9', params, function (json) {
        json.title = Lang.translate('title_hight_voite');
        json.line_type = 'top';
        json.small = true;
        json.wide = true;
        json.results.forEach(function (card) {
          card.promo = card.overview;
          card.promo_title = card.title || card.name;
        });
        call(json);
      }, call);
    }, function (call) {
      if (params.genres) return call();
      if (params.url == 'tv') {
        get$a('trending/tv/week', params, function (json) {
          json.results = json.results.filter(function (movie) {
            return movie.vote_average >= 7 && !['IN'].includes(movie.original_country);
          });
          json.title = Lang.translate('title_this_week');
          json.small = true;
          json.wide = true;
          json.results.forEach(function (card) {
            card.promo = card.overview;
            card.promo_title = card.title || card.name;
          });
          call(json);
        }, call);
      } else {
        get$a('movie/upcoming', params, function (json) {
          json.results = json.results.filter(function (movie) {
            return movie.vote_average >= 7 && !['IN'].includes(movie.original_country);
          });
          json.title = Lang.translate('title_upcoming');
          json.small = true;
          json.wide = true;
          json.results.forEach(function (card) {
            card.promo = card.overview;
            card.promo_title = card.title || card.name;
            card.release_quality;
          });
          call(json);
        }, call);
      }
    }];
    var start_shuffle = parts_data.length + 1;
    if (fullcat) Arrays.insert(parts_data, 0, Api.partPersons(parts_data, parts_limit, params.url, start_shuffle));
    genres$1[params.url].forEach(function (genre) {
      var gen = params.genres ? [].concat(params.genres, genre.id) : [genre.id];
      if (params.genres && params.genres == genre.id) return;
      var event = function event(call) {
        get$a('discover/' + params.url + '?with_genres=' + gen.join(','), params, function (json) {
          json.title = Lang.translate(genre.title.replace(/[^a-z_]/g, ''));
          call(json);
        }, call);
      };
      parts_data.push(event);
      Arrays.shuffleArrayFromIndex(parts_data, start_shuffle);
    });

    /* Реализуем раздел с Аниме и подпишем все категории для понимания что это */
    if (params.url == 'anime') {
      var animeLoadPart = function animeLoadPart(partLoaded, partEmpty) {
        Api.partNext(_parts_data, _parts_limit, partLoaded, partEmpty);
      }; // Вызываем oncomplite с нашей функцией загрузки
      // Используем ключевое слово для аниме
      params.keywords = params.keywords || "210024";
      var old_url = params.url;
      params.url = 'movie';
      var _parts_limit = 10; // Увеличиваем лимит для большего количества категорий
      var _parts_data = [];

      // Сейчас смотрят / Популярное
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&sort_by=popularity.desc', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('title_popular');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('title_popular'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('title_popular'),
            results: []
          });
        });
      });

      // Новинки
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&sort_by=primary_release_date.desc&vote_average.gte=6&vote_count.gte=10', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('title_new');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('title_new'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('title_new'),
            results: []
          });
        });
      });

      // В топе
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&sort_by=vote_average.desc&vote_count.gte=100', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('title_in_top');
            json.line_type = 'top';
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('title_in_top'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('title_in_top'),
            results: []
          });
        });
      });

      // Новинки этого года
      var current_year = new Date().getFullYear();
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&primary_release_year=' + current_year, params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('title_this_year');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('title_this_year'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('title_this_year'),
            results: []
          });
        });
      });

      // Стоит пересмотреть (рейтинг выше 8)
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&vote_average.gte=8&vote_count.gte=100', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('title_worth_rewatch');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('title_worth_rewatch'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('title_worth_rewatch'),
            results: []
          });
        });
      });

      // Драма
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=18', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_dr');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_dr'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_dr'),
            results: []
          });
        });
      });

      // Фантастика
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=878', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_fa');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_fa'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_fa'),
            results: []
          });
        });
      });

      // Фэнтези
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=14', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_fe');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_fe'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_fe'),
            results: []
          });
        });
      });

      // Детектив
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=9648', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_de');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_de'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_de'),
            results: []
          });
        });
      });

      // Боевик
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=28', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_ac');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_ac'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_ac'),
            results: []
          });
        });
      });

      // Приключения
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=12', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_ad');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_ad'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_ad'),
            results: []
          });
        });
      });

      // Комедия
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=35', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_cm');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_cm'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_cm'),
            results: []
          });
        });
      });

      // Мелодрама
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=10749', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_md');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_md'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_md'),
            results: []
          });
        });
      });

      // Семейные
      _parts_data.push(function (call) {
        get$a('discover/movie?with_keywords=210024&with_genres=10751', params, function (json) {
          if (json && json.results) {
            json.title = Lang.translate('filter_genre_fm');
            json.small = true;
            json.wide = true;
            json.results.forEach(function (card) {
              card.promo = card.overview;
              card.promo_title = card.title || card.name;
            });
          } else {
            json = {
              title: Lang.translate('filter_genre_fm'),
              results: []
            };
          }
          call(json);
        }, function (error) {
          call({
            title: Lang.translate('filter_genre_fm'),
            results: []
          });
        });
      });

      // Восстанавливаем оригинальный url
      params.url = old_url;
      animeLoadPart(oncomplite, onerror);

      // Возвращаем функцию загрузки
      return animeLoadPart;
    }
    function loadPart(partLoaded, partEmpty) {
      Api.partNext(parts_data, parts_limit, partLoaded, partEmpty);
    }
    loadPart(oncomplite, onerror);
    return loadPart;
  }
  function full$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var status = new status$2(7);
    status.onComplite = function (data) {
      if (data.movie && blocked_ids.includes(data.movie.id)) {
        Prisma.Noty.show(Prisma.Lang.translate('Контент заблокирован по требованию правообладателя'));
        onerror();
        return;
      }
      oncomplite(data);
    };
    if (Utils$2.dcma(params.method, params.id)) {
      Prisma.Noty.show(Prisma.Lang.translate('Контент заблокирован по требованию правообладателя'));
      return onerror();
    }
    get$a(params.method + '/' + params.id + '?append_to_response=content_ratings,release_dates,external_ids,keywords,logos,alternative_titles', params, function (json) {
      if (blocked_ids.includes(json.id)) {
        Prisma.Noty.show(Prisma.Lang.translate('Контент заблокирован по требованию правообладателя'));
        status.error();
        return;
      }
      json.source = 'tmdb';
      json.logo = json.logos && json.logos.length > 0 ? json.logos[0].file_path : null;
      if (json.external_ids) {
        json.imdb_id = json.external_ids.imdb_id;
      }
      if (params.method == 'tv') {
        var season = Utils$2.countSeasons(json);
        get$a('tv/' + json.id + '/season/' + season, {}, function (ep) {
          status.append('episodes', ep);
        }, status.error.bind(status));
      } else status.need--;
      if (json.belongs_to_collection) {
        get$a('collection/' + json.belongs_to_collection.id, {}, function (collection) {
          collection.results = collection.parts.slice(0, 19);
          status.append('collection', collection);
        }, status.error.bind(status));
      } else status.need--;
      status.append('movie', json);
    }, function () {
      status.need -= 2;
      status.error();
    });
    get$a(params.method + '/' + params.id + '/credits', params, function (json) {
      status.append('persons', json);
    }, status.error.bind(status));
    get$a(params.method + '/' + params.id + '/recommendations', params, function (json) {
      status.append('recomend', json);
    }, status.error.bind(status));
    get$a(params.method + '/' + params.id + '/similar', params, function (json) {
      status.append('simular', json);
    }, status.error.bind(status));
    videos(params, function (json) {
      status.append('videos', json);
    }, status.error.bind(status));
    reactionsGet(params, function (json) {
      status.append('reactions', json);
    });
    if (Lang.selected(['ru', 'uk', 'be']) && window.prisma_settings.account_use) {
      status.need++;
      discussGet(params, function (json) {
        status.append('discuss', json);
      }, status.error.bind(status));
    }
  }
  function videos() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var lg = Storage.field('tmdb_lang');
    var status = new status$2(lg == 'en' ? 1 : 2);
    status.onComplite = function (res) {
      var data = [];
      if (res.one && res.one.results && res.one.results.length) data = data.concat(res.one.results);
      if (res.two && res.two.results && res.two.results.length) data = data.concat(res.two.results);
      oncomplite({
        results: data
      });
    };
    get$a(params.method + '/' + params.id + '/videos', {
      langs: Storage.field('tmdb_lang')
    }, function (json) {
      status.append('one', json);
    }, status.error.bind(status));
    if (lg !== 'en') {
      get$a(params.method + '/' + params.id + '/videos', {
        langs: 'en'
      }, function (json) {
        status.append('two', json);
      }, status.error.bind(status));
    }
  }
  function discussGet(params, oncomplite, onerror) {
    if (window.prisma_settings.disable_features.discuss) return onerror();
    network$b.silent(Utils$2.protocol() + object$2.pris_domain + '/api/discuss/get/' + params.method + '_' + params.id + '/' + (params.page || 1) + '/' + Storage.field('language'), oncomplite, onerror, false, {
      timeout: 1000 * 5
    });
  }
  function reactionsGet(params, oncomplite) {
    network$b.silent(Utils$2.protocol() + object$2.pris_domain + '/api/reactions/get/' + params.method + '_' + params.id + '?userId=' + params.userId, oncomplite, function () {
      oncomplite({
        result: {
          averageRating: 0,
          totalRatings: 0,
          userRating: 0
        }
      });
    }, false, {
      timeout: 1000 * 5
    });
  }
  function reactionsAdd(params, oncomplite, onerror) {
    network$b.silent(Utils$2.protocol() + object$2.pris_domain + '/api/reactions/add/' + params.method + '_' + params.id, function (response) {
      oncomplite(response);
    }, onerror, {
      rating: params.rating,
      userId: params.userId
    });
  }
  function list$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var u = url$5(params.url, params);
    network$b.silent(u, oncomplite, onerror);
  }
  function get$a(method) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var oncomplite = arguments.length > 2 ? arguments[2] : undefined;
    var onerror = arguments.length > 3 ? arguments[3] : undefined;
    var u = url$5(method, params);
    network$b.timeout(1000 * 10);
    network$b.silent(u, function (json) {
      json.url = method;
      oncomplite(json);
    }, onerror);
  }
  function isBlockedContent(item) {
    if (blocked_ids.includes(item.id)) return true;
    var title = (item.title || item.name || '').toLowerCase();
    return stop_keywords.some(function (keyword) {
      return title.includes(keyword);
    });
  }
  function filterResults(results) {
    return results.filter(function (item) {
      return !isBlockedContent(item);
    });
  }
  function search$3() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var status = new status$2(3);
    status.onComplite = function (data) {
      var items = [];
      if (data.movie && data.movie.results.length) {
        data.movie.results = filterResults(data.movie.results);
        if (data.movie.results.length) items.push(data.movie);
      }
      if (data.tv && data.tv.results.length) {
        data.tv.results = filterResults(data.tv.results);
        if (data.tv.results.length) items.push(data.tv);
      }
      if (data.person && data.person.results.length) items.push(data.person);
      oncomplite(items);
    };
    get$a('search/movie', params, function (json) {
      json.title = Lang.translate('menu_movies');
      json.type = 'movie';
      status.append('movie', json);
    }, status.error.bind(status));
    get$a('search/tv', params, function (json) {
      json.title = Lang.translate('menu_tv');
      json.type = 'tv';
      status.append('tv', json);
    }, status.error.bind(status));
    get$a('search/person', params, function (json) {
      json.title = Lang.translate('title_actors');
      json.type = 'person';
      status.append('person', json);
    }, status.error.bind(status));
  }
  function discovery$1() {
    return {
      title: 'TMDB',
      search: search$3,
      params: {
        align_left: true,
        object: {
          source: 'tmdb'
        }
      },
      onMore: function onMore(params) {
        Activity$1.push({
          url: 'search/' + params.data.type,
          title: Lang.translate('search') + ' - ' + params.query,
          component: 'category_full',
          page: 2,
          query: encodeURIComponent(params.query),
          source: 'tmdb'
        });
      },
      onCancel: network$b.clear.bind(network$b)
    };
  }
  function person$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var sortCredits = function sortCredits(credits) {
      return credits.map(function (a) {
        a.year = parseInt(((a.release_date || a.first_air_date || '0000') + '').slice(0, 4));
        return a;
      }).sort(function (a, b) {
        return b.vote_average - a.vote_average && b.vote_count - a.vote_count;
      }); //сортируем по оценке и кол-ву голосов (чтобы отсечь мусор с 1-2 оценками)
    };
    var convert = function convert(credits, person_data) {
      if (params.only_credits) {
        var cast = sortCredits(credits.cast);
        var result = {};
        result[params.only_credits] = sortCredits(cast.filter(function (media) {
          return media.media_type === params.only_credits;
        }));
        return result;
      } else {
        var title_production = Lang.translate('full_production'),
          title_directing = Lang.translate('full_directing'),
          title_writing = Lang.translate('full_writing');
        credits.crew.forEach(function (a) {
          switch (a.department) {
            case "Production":
              a.department = title_production;
              break;
            case "Directing":
              a.department = title_directing;
              break;
            case "Writing":
              a.department = title_writing;
              break;
          }
        });
        var _cast = sortCredits(credits.cast),
          crew = sortCredits(credits.crew),
          tv = sortCredits(_cast.filter(function (media) {
            return media.media_type === 'tv';
          })),
          movie = sortCredits(_cast.filter(function (media) {
            return media.media_type === 'movie';
          })),
          knownFor;

        //Наиболее известные работы человека
        //1. Группируем все работы по департаментам (Актер, Режиссер, Сценарист и т.д.)
        knownFor = Arrays.groupBy(crew, 'department');
        var actorGender = person_data.gender === 1 ? Lang.translate('title_actress') : Lang.translate('title_actor');
        if (movie.length > 0) knownFor["".concat(actorGender, " - ") + Lang.translate('menu_movies')] = movie;
        if (tv.length > 0) knownFor["".concat(actorGender, " - ") + Lang.translate('menu_tv')] = tv;

        //2. Для каждого департамента суммируем кол-ва голосов (вроде бы сам TMDB таким образом определяет knownFor для людей)
        knownFor = Object.entries(knownFor).map(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            depIdx = _ref3[0],
            dep = _ref3[1];
          //убираем дубликаты (человек может быть указан в одном департаменте несколько раз на разных должностях (job))
          var set = {},
            credits = dep.filter(function (credit) {
              return set.hasOwnProperty(credit.original_title || credit.original_name) ? false : credit.original_title ? set[credit.original_title] = true : set[credit.original_name] = true;
            });
          return {
            name: depIdx,
            credits: credits,
            vote_count: dep.reduce(function (a, b) {
              return a + b.vote_count;
            }, 0)
          };
          //3. Сортируем департаменты по кол-ву голосов
        }).sort(function (a, b) {
          return b.vote_count - a.vote_count;
        });
        return {
          raw: credits,
          cast: _cast,
          crew: crew,
          tv: tv,
          movie: movie,
          knownFor: knownFor
        };
      }
    };
    var status = new status$2(params.only_credits ? 1 : 2);
    status.onComplite = function () {
      var fulldata = {};
      if (status.data.person) fulldata.person = status.data.person;
      if (status.data.credits) fulldata.credits = convert(status.data.credits, status.data.person || {});
      oncomplite(fulldata);
    };
    if (!params.only_credits) {
      get$a('person/' + params.id, params, function (json) {
        status.append('person', json);
      }, status.error.bind(status));
    }
    get$a('person/' + params.id + '/combined_credits', params, function (json) {
      status.append('credits', json);
    }, status.error.bind(status));
  }
  function menu$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    if (menu_list.length) oncomplite(menu_list);else {
      var u = url$5('genre/movie/list', params);
      network$b.silent(u, function (j) {
        j.genres.forEach(function (g) {
          menu_list.push({
            title: g.name,
            id: g.id
          });
        });
        oncomplite(menu_list);
      });
    }
  }
  function menuCategory$1(params, oncomplite) {
    var menu = [];
    if (params.action !== 'tv') {
      menu.push({
        title: Lang.translate('title_now_watch'),
        url: params.action + '/now_playing'
      });
    }
    menu.push({
      title: Lang.translate('title_popular'),
      url: params.action + '/popular'
    });
    var date = new Date();
    var query = [];
    query.push('sort_by=release_date.desc');
    query.push('year=' + date.getFullYear());
    query.push('first_air_date_year=' + date.getFullYear());
    query.push('vote_average.gte=7');
    menu.push({
      title: Lang.translate('title_new'),
      url: 'discover/' + params.action + '?' + query.join('&')
    });
    if (params.action == 'tv') {
      menu.push({
        title: Lang.translate('title_tv_today'),
        url: params.action + '/airing_today'
      });
      menu.push({
        title: Lang.translate('title_this_week'),
        url: params.action + '/on_the_air'
      });
    }
    menu.push({
      title: Lang.translate('title_in_top'),
      url: params.action + '/top_rated'
    });
    oncomplite(menu);
  }
  function external_ids() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    get$a((params.type || 'tv') + '/' + params.id + '/external_ids', params, oncomplite, onerror);
  }
  function external_imdb_id() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    get$a(params.type + '/' + params.id + '/external_ids', params, function (ids) {
      oncomplite(ids.imdb_id || '');
    }, function () {
      oncomplite('');
    });
  }
  function company$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var status = new status$2(3);
    status.onComplite = function () {
      function sortResultsByVoteAverage(results) {
        return results.sort(function (a, b) {
          return b.vote_average - a.vote_average;
        });
      }
      if (status.data.company) {
        var fulldata = {
          company: status.data.company,
          lines: []
        };
        if (status.data.movie && status.data.movie.results.length) fulldata.lines.push({
          nomore: true,
          title: Lang.translate('menu_movies'),
          results: sortResultsByVoteAverage(status.data.movie.results)
        });
        if (status.data.tv && status.data.tv.results.length) fulldata.lines.push({
          nomore: true,
          title: Lang.translate('menu_tv'),
          results: sortResultsByVoteAverage(status.data.tv.results)
        });
        oncomplite(fulldata);
      } else onerror();
    };
    get$a('company/' + params.id, params, function (json) {
      status.append('company', json);
    }, status.error.bind(status));
    get$a('discover/movie?sort_by=vote_count.desc&with_companies=' + params.id, params, function (json) {
      status.append('movie', json);
    }, status.error.bind(status));
    get$a('discover/tv?sort_by=vote_count.desc&with_companies=' + params.id, params, function (json) {
      status.append('tv', json);
    }, status.error.bind(status));
  }
  function seasons$1(tv, from, oncomplite) {
    var status = new status$2(from.length);
    status.onComplite = oncomplite;
    from.forEach(function (season) {
      get$a('tv/' + tv.id + '/season/' + season, {}, function (json) {
        status.append('' + season, json);
      }, status.error.bind(status));
    });
  }
  function parsePG(movie) {
    var pg;
    var cd = Storage.field('language');
    if (movie.content_ratings) {
      try {
        var _find = movie.content_ratings.results.find(function (a) {
          return a.iso_3166_1 == cd.toUpperCase();
        });
        if (!_find) _find = movie.content_ratings.results.find(function (a) {
          return a.iso_3166_1 == 'US';
        });
        if (_find) pg = Utils$2.decodePG(_find.rating);
      } catch (e) {}
    }
    if (movie.release_dates && !pg) {
      var _find2 = movie.release_dates.results.find(function (a) {
        return a.iso_3166_1 == cd.toUpperCase();
      });
      if (!_find2) _find2 = movie.release_dates.results.find(function (a) {
        return a.iso_3166_1 == 'US';
      });
      if (_find2 && _find2.release_dates.length) {
        pg = Utils$2.decodePG(_find2.release_dates[0].certification);
      }
    }
    if (movie.restrict) pg = movie.restrict + '+';
    return pg;
  }
  function parseCountries(movie) {
    var iso_countries = {
      'AD': Lang.translate('country_ad'),
      'AE': Lang.translate('country_ae'),
      'AF': Lang.translate('country_af'),
      'AL': Lang.translate('country_al'),
      'AM': Lang.translate('country_am'),
      'AO': Lang.translate('country_ao'),
      'AR': Lang.translate('country_ar'),
      'AT': Lang.translate('country_at'),
      'AU': Lang.translate('country_au'),
      'AZ': Lang.translate('country_az'),
      'BA': Lang.translate('country_ba'),
      'BD': Lang.translate('country_bd'),
      'BE': Lang.translate('country_be'),
      'BG': Lang.translate('country_bg'),
      'BH': Lang.translate('country_bh'),
      'BJ': Lang.translate('country_bj'),
      'BO': Lang.translate('country_bo'),
      'BR': Lang.translate('country_br'),
      'BS': Lang.translate('country_bs'),
      'BW': Lang.translate('country_bw'),
      'BY': Lang.translate('country_by'),
      'CA': Lang.translate('country_ca'),
      'CH': Lang.translate('country_ch'),
      'CL': Lang.translate('country_cl'),
      'CM': Lang.translate('country_cm'),
      'CN': Lang.translate('country_cn'),
      'CO': Lang.translate('country_co'),
      'CR': Lang.translate('country_cr'),
      'CU': Lang.translate('country_cu'),
      'CV': Lang.translate('country_cv'),
      'CY': Lang.translate('country_cy'),
      'CZ': Lang.translate('country_cz'),
      'DE': Lang.translate('country_de'),
      'DK': Lang.translate('country_dk'),
      'DO': Lang.translate('country_do'),
      'DZ': Lang.translate('country_dz'),
      'EC': Lang.translate('country_ec'),
      'EE': Lang.translate('country_ee'),
      'ES': Lang.translate('country_es'),
      'ET': Lang.translate('country_et'),
      'FI': Lang.translate('country_fi'),
      'FO': Lang.translate('country_fo'),
      'FR': Lang.translate('country_fr'),
      'GA': Lang.translate('country_ga'),
      'GB': Lang.translate('country_gb'),
      'GE': Lang.translate('country_ge'),
      'GH': Lang.translate('country_gh'),
      'GL': Lang.translate('country_gl'),
      'GR': Lang.translate('country_gr'),
      'GT': Lang.translate('country_gt'),
      'HK': Lang.translate('country_hk'),
      'HR': Lang.translate('country_hr'),
      'HU': Lang.translate('country_hu'),
      'IE': Lang.translate('country_ie'),
      'IL': Lang.translate('country_il'),
      'IQ': Lang.translate('country_iq'),
      'IS': Lang.translate('country_is'),
      'IT': Lang.translate('country_it'),
      'JM': Lang.translate('country_jm'),
      'JO': Lang.translate('country_jo'),
      'JP': Lang.translate('country_jp'),
      'KE': Lang.translate('country_ke'),
      'KG': Lang.translate('country_kg'),
      'KH': Lang.translate('country_kh'),
      'KR': Lang.translate('country_kr'),
      'KW': Lang.translate('country_kw'),
      'KZ': Lang.translate('country_kz'),
      'LA': Lang.translate('country_la'),
      'LB': Lang.translate('country_lb'),
      'LI': Lang.translate('country_li'),
      'LK': Lang.translate('country_lk'),
      'LT': Lang.translate('country_lt'),
      'LU': Lang.translate('country_lu'),
      'LV': Lang.translate('country_lv'),
      'LY': Lang.translate('country_ly'),
      'MA': Lang.translate('country_ma'),
      'MC': Lang.translate('country_mc'),
      'MD': Lang.translate('country_md'),
      'ME': Lang.translate('country_me'),
      'MK': Lang.translate('country_mk'),
      'MM': Lang.translate('country_mm'),
      'MN': Lang.translate('country_mn'),
      'MO': Lang.translate('country_mo'),
      'MT': Lang.translate('country_mt'),
      'MV': Lang.translate('country_mv'),
      'MX': Lang.translate('country_mx'),
      'MY': Lang.translate('country_my'),
      'MZ': Lang.translate('country_mz'),
      'NG': Lang.translate('country_ng'),
      'NI': Lang.translate('country_ni'),
      'NL': Lang.translate('country_nl'),
      'NO': Lang.translate('country_no'),
      'NP': Lang.translate('country_np'),
      'NZ': Lang.translate('country_nz'),
      'OM': Lang.translate('country_om'),
      'PA': Lang.translate('country_pa'),
      'PE': Lang.translate('country_pe'),
      'PK': Lang.translate('country_pk'),
      'PL': Lang.translate('country_pl'),
      'PR': Lang.translate('country_pr'),
      'PT': Lang.translate('country_pt'),
      'PY': Lang.translate('country_py'),
      'QA': Lang.translate('country_qa'),
      'RO': Lang.translate('country_ro'),
      'RS': Lang.translate('country_rs'),
      'RU': Lang.translate('country_ru'),
      'SA': Lang.translate('country_sa'),
      'SE': Lang.translate('country_se'),
      'SG': Lang.translate('country_sg'),
      'SI': Lang.translate('country_si'),
      'SK': Lang.translate('country_sk'),
      'SU': Lang.translate('country_su'),
      'SV': Lang.translate('country_sv'),
      'TH': Lang.translate('country_th'),
      'TJ': Lang.translate('country_tj'),
      'TR': Lang.translate('country_tr'),
      'TW': Lang.translate('country_tw'),
      'UA': Lang.translate('country_ua'),
      'US': Lang.translate('country_us'),
      'UY': Lang.translate('country_uy'),
      'UZ': Lang.translate('country_uz'),
      'VE': Lang.translate('country_ve'),
      'VN': Lang.translate('country_vn'),
      'YU': Lang.translate('country_yu'),
      'ZA': Lang.translate('country_za')
    };
    return movie.production_countries ? movie.production_countries.map(function (a) {
      //let cc = 'country_' + a.iso_3166_1.toLowerCase()
      //return Lang.translate(cc) // FIXME! return a.name as fallback
      if (iso_countries.hasOwnProperty(a.iso_3166_1)) {
        return iso_countries[a.iso_3166_1];
      } else {
        return a.name;
      }
    }) : '';
  }
  function getGenresNameFromIds(card_type, ids) {
    var finded = [];
    var where = genres$1[card_type];
    ids.forEach(function (a) {
      var find = where.find(function (i) {
        return i.id == a;
      });
      if (find) finded.push(Utils$2.capitalizeFirstLetter(Lang.translate(find.title)));
    });
    return finded;
  }
  function clear$7() {
    network$b.clear();
  }

  /**
   * Получить трейлеры для фильма или сериала
   * @param {object} params - Параметры запроса (id, method, language)
   * @param {function} oncomplite - Функция обратного вызова при успехе
   * @param {function} onerror - Функция обратного вызова при ошибке
   */
  function trailers() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    if (!params.id) {
      onerror && onerror('ID не указан');
      return;
    }

    // Определяем метод (тип медиа: movie/tv)
    var method = params.method || 'movie';

    // Целевой язык (по умолчанию из настроек)
    var targetLang = params.language || Storage.field('tmdb_lang');

    // Используем тот же подход, что и в videos - запрашиваем видео и на языке, и на английском
    var status = new status$2(targetLang === 'en' ? 1 : 2);
    status.onComplite = function (res) {
      var allVideos = [];

      // Объединяем видео с языка пользователя и английского
      if (res.targetLang && res.targetLang.results && res.targetLang.results.length) {
        allVideos = allVideos.concat(res.targetLang.results);
      }
      if (res.english && res.english.results && res.english.results.length) {
        allVideos = allVideos.concat(res.english.results);
      }
      if (allVideos.length === 0) {
        console.log("[TMDB] \u041D\u0435\u0442 \u0432\u0438\u0434\u0435\u043E \u0434\u043B\u044F ".concat(method, "/").concat(params.id, " \u043D\u0430 \u044F\u0437\u044B\u043A\u0430\u0445 ").concat(targetLang, " \u0438 en"));
        return oncomplite({
          results: []
        });
      }

      // Приоритетные типы видео (в порядке важности)
      var videoTypes = ['Trailer', 'Teaser', 'Clip', 'Behind the Scenes', 'Featurette'];

      // Сначала фильтруем по типу
      var filteredVideos = allVideos.filter(function (video) {
        return videoTypes.includes(video.type);
      }).sort(function (a, b) {
        // Приоритет по языку - сначала видео на языке пользователя
        if (a.iso_639_1 === targetLang && b.iso_639_1 !== targetLang) return -1;
        if (a.iso_639_1 !== targetLang && b.iso_639_1 === targetLang) return 1;

        // Приоритет: Official > Non-official
        var aIsOfficial = a.official ? 1 : 0;
        var bIsOfficial = b.official ? 1 : 0;
        if (aIsOfficial !== bIsOfficial) return bIsOfficial - aIsOfficial;

        // Приоритет по типу видео
        var aTypeIndex = videoTypes.indexOf(a.type);
        var bTypeIndex = videoTypes.indexOf(b.type);
        if (aTypeIndex !== bTypeIndex) return aTypeIndex - bTypeIndex;

        // Приоритет по дате - более новые выше
        return new Date(b.published_at || 0) - new Date(a.published_at || 0);
      });

      // Если в отфильтрованных нет результатов, берем любое видео
      if (filteredVideos.length === 0) {
        console.log("[TMDB] \u0414\u043B\u044F ".concat(method, "/").concat(params.id, " \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E \u0442\u0440\u0435\u0439\u043B\u0435\u0440\u043E\u0432 \u043D\u0443\u0436\u043D\u043E\u0433\u043E \u0442\u0438\u043F\u0430, \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C \u043B\u044E\u0431\u043E\u0435 \u0432\u0438\u0434\u0435\u043E"));
        filteredVideos = allVideos.sort(function (a, b) {
          // Приоритет по языку
          if (a.iso_639_1 === targetLang && b.iso_639_1 !== targetLang) return -1;
          if (a.iso_639_1 !== targetLang && b.iso_639_1 === targetLang) return 1;

          // Затем по дате
          return new Date(b.published_at || 0) - new Date(a.published_at || 0);
        });
      }
      console.log("[TMDB] \u041D\u0430\u0439\u0434\u0435\u043D\u043E ".concat(filteredVideos.length, " \u0432\u0438\u0434\u0435\u043E \u0434\u043B\u044F ").concat(method, "/").concat(params.id));
      oncomplite({
        results: filteredVideos
      });
    };

    // Запрос на языке пользователя
    get$a("".concat(method, "/").concat(params.id, "/videos"), {
      langs: targetLang
    }, function (json) {
      status.append('targetLang', json);
    }, status.error.bind(status));

    // Если язык не английский, делаем дополнительный запрос на английском
    if (targetLang !== 'en') {
      get$a("".concat(method, "/").concat(params.id, "/videos"), {
        langs: 'en'
      }, function (json) {
        status.append('english', json);
      }, status.error.bind(status));
    }
  }
  var TMDB = {
    main: main$2,
    menu: menu$1,
    img: img,
    full: full$1,
    list: list$2,
    category: category$1,
    search: search$3,
    clear: clear$7,
    company: company$1,
    person: person$1,
    seasons: seasons$1,
    find: find$1,
    external_ids: external_ids,
    get: get$a,
    menuCategory: menuCategory$1,
    discovery: discovery$1,
    parsePG: parsePG,
    parseCountries: parseCountries,
    genres: genres$1,
    external_imdb_id: external_imdb_id,
    getGenresNameFromIds: getGenresNameFromIds,
    videos: videos,
    reactionsGet: reactionsGet,
    reactionsAdd: reactionsAdd,
    movieLogos: movieLogos,
    trailers: trailers,
    discussGet: discussGet
  };

  var data$1 = [];
  var object$1 = false;
  var limit$2 = 300;
  var started = Date.now();

  /**
   * Запуск
   */
  function init$K() {
    data$1 = Storage.cache('timetable', limit$2, []);
    setInterval(extract$1, 1000 * 60 * (2));
    setInterval(favorites, 1000 * 60 * 10);
    Favorite.listener.follow('add,added', function (e) {
      if (e.card.number_of_seasons && e.where !== 'history') update$8(e.card);
    });
    Favorite.listener.follow('remove', function (e) {
      if (e.card.number_of_seasons && e.method == 'id') {
        var find = data$1.find(function (a) {
          return a.id == e.card.id;
        });
        if (find) {
          Arrays.remove(data$1, find);
          Storage.set('timetable', data$1);
          Storage.remove('timetable', find.id);
        }
      }
    });
    Prisma.Listener.follow('worker_storage', function (e) {
      if (e.type == 'insert' && e.name == 'timetable') {
        data$1 = Storage.get('timetable', '[]');
      }
    });
  }

  /**
   * Добавить карточки к парсингу
   * @param {[{id:integer,number_of_seasons:integer}]} elems - карточки
   */
  function add$8(elems) {
    if (started + 1000 * 60 * 2 > Date.now()) return;
    var filtred = elems.filter(function (elem) {
      return elem.number_of_seasons && typeof elem.id == 'number' && (elem.source == 'tmdb' || elem.source == 'cub');
    });
    console.log('Timetable', 'add:', elems.length, 'filtred:', filtred.length);
    filtred.forEach(function (elem) {
      var find = data$1.find(function (a) {
        return a.id == elem.id;
      });
      if (!find) {
        data$1.push({
          id: elem.id,
          season: elem.number_of_seasons,
          episodes: []
        });
      }
    });
    Storage.set('timetable', data$1);
  }

  /**
   * Добавить из закладок
   */
  function favorites() {
    var category = ['like', 'wath', 'book', 'look', 'viewed', 'scheduled', 'continued', 'thrown'];
    category.forEach(function (a) {
      add$8(Favorite.get({
        type: a
      }));
    });
  }
  function filter$1(episodes) {
    var filtred = [];
    var fileds = ['air_date', 'season_number', 'episode_number', 'name', 'still_path'];
    episodes.forEach(function (episode) {
      var item = {};
      fileds.forEach(function (field) {
        if (typeof episode[field] !== 'undefined') item[field] = episode[field];
      });
      filtred.push(item);
    });
    return filtred;
  }

  /**
   * Парсим карточку
   */
  function parse$2(to_database) {
    var check = Favorite.check(object$1);
    var any = Favorite.checkAnyNotHistory(check);
    console.log('Timetable', 'parse:', object$1.id, 'any:', any, 'season:', object$1.season);
    if (any || to_database) {
      TMDB.get('tv/' + object$1.id + '/season/' + object$1.season, {}, function (ep) {
        if (!ep.episodes) return save$3();
        object$1.episodes = filter$1(ep.episodes);
        Cache.getData('timetable', object$1.id).then(function (obj) {
          if (obj) obj.episodes = object$1.episodes;else obj = Arrays.clone(object$1);
          Cache.rewriteData('timetable', object$1.id, obj).then(function () {})["catch"](function () {});
        })["catch"](function (e) {});
        save$3();
      }, save$3);
    } else {
      Arrays.remove(data$1, object$1);
      Storage.remove('timetable', object$1.id);
      save$3();
    }
  }

  /**
   * Получить карточку для парсинга
   */
  function extract$1() {
    var ids = data$1.filter(function (e) {
      return !e.scaned && (e.scaned_time || 0) + 60 * 60 * 12 * 1000 < Date.now();
    });
    console.log('Timetable', 'extract:', ids.length, 'total:', data$1.length);
    if (ids.length) {
      object$1 = ids[0];
      parse$2();
    } else {
      data$1.forEach(function (a) {
        return a.scaned = 0;
      });
    }
    Storage.set('timetable', data$1);
  }

  /**
   * Сохранить состояние
   */
  function save$3() {
    if (object$1) {
      object$1.scaned = 1;
      object$1.scaned_time = Date.now();
      Storage.set('timetable', data$1);
    }
  }

  /**
   * Получить эпизоды для карточки если есть
   * @param {{id:integer}} elem - карточка
   * @returns {array}
   */
  function get$9(elem, callback) {
    var fid = data$1.filter(function (e) {
      return e.id == elem.id;
    });
    var res = (fid.length ? fid[0] : {}).episodes || [];
    if (typeof callback == 'function') {
      if (res.length) return callback(res);
      Cache.getData('timetable', elem.id).then(function (obj) {
        callback(obj ? obj.episodes || [] : []);
      })["catch"](function (e) {
        callback(res);
      });
    } else {
      return res;
    }
  }

  /**
   * Добавить карточку в парсинг самостоятельно
   * @param {{id:integer,number_of_seasons:integer}} elem - карточка
   */
  function update$8(elem) {
    if (elem.number_of_seasons && typeof elem.id == 'number' && (elem.source == 'tmdb' || elem.source == 'cub')) {
      var check = Favorite.check(elem);
      var any = Favorite.checkAnyNotHistory(check);
      var id = data$1.filter(function (a) {
        return a.id == elem.id;
      });
      var item = {
        id: elem.id,
        season: Utils$2.countSeasons(elem),
        episodes: []
      };
      TMDB.clear();
      if (any) {
        if (!id.length) {
          console.log('Timetable', 'push:', elem.id);
          data$1.push(item);
          Storage.set('timetable', data$1);
          object$1 = item;
        } else {
          object$1 = id[0];
          object$1.season = Utils$2.countSeasons(elem);
        }
        parse$2();
      } else {
        object$1 = item;
        parse$2(true);
      }
    }
  }

  /**
   * Получить все данные
   * @returns {[{id:integer,season:integer,episodes:[]}]}
   */
  function all$2() {
    return data$1;
  }
  function lately() {
    var fav = Favorite.full().card;
    if (Account.working()) fav = Account.all();
    fav = fav.filter(function (f) {
      return f.number_of_seasons;
    });
    var now_date = new Date();
    now_date.setHours(0, 0, 0);
    var now_time = now_date.getTime();
    var cards = [];
    data$1.filter(function (d) {
      return fav.find(function (c) {
        return c.id == d.id;
      });
    }).forEach(function (season) {
      var episodes = season.episodes.filter(function (ep) {
        return Prisma.Utils.parseToDate(ep.air_date).getTime() >= now_time;
      });
      if (episodes.length) {
        cards.push({
          card: Arrays.clone(fav.find(function (c) {
            return c.id == season.id;
          })),
          episode: episodes[0],
          time: Prisma.Utils.parseToDate(episodes[0].air_date).getTime(),
          season: season
        });
      }
    });
    cards = cards.sort(function (a, b) {
      if (a.time > b.time) return 1;else if (a.time < b.time) return -1;else return 0;
    });
    return cards;
  }
  function aired() {
    var fav = Favorite.full().card;
    if (Account.working()) fav = Account.all();
    fav = fav.filter(function (f) {
      return f.number_of_seasons;
    });
    var now_date = new Date();
    now_date.setHours(0, 0, 0);
    var now_time = now_date.getTime();
    var cards = [];
    data$1.filter(function (d) {
      return fav.find(function (c) {
        return c.id == d.id;
      });
    }).forEach(function (season) {
      var episodes = season.episodes.filter(function (ep) {
        return Prisma.Utils.parseToDate(ep.air_date).getTime() < now_time;
      });
      if (episodes.length) {
        // Берем последний вышедший эпизод
        var lastEpisode = episodes[episodes.length - 1];
        cards.push({
          card: Arrays.clone(fav.find(function (c) {
            return c.id == season.id;
          })),
          episode: lastEpisode,
          time: Prisma.Utils.parseToDate(lastEpisode.air_date).getTime(),
          season: season
        });
      }
    });
    cards = cards.sort(function (a, b) {
      if (a.time > b.time) return 1;else if (a.time < b.time) return -1;else return 0;
    });
    return cards;
  }
  var TimeTable = {
    init: init$K,
    get: get$9,
    add: add$8,
    all: all$2,
    update: update$8,
    lately: lately,
    aired: aired
  };

  var callback_cancel, controller_enabled, loader$1, timer$4;
  function start$6(on_cancel, text) {
    callback_cancel = on_cancel;
    controller_enabled = Controller.enabled().name;
    loader$1 = $("<div class=\"loading-layer\">\n        <div class=\"loading-layer__box\">\n            <div class=\"loading-layer__text\">".concat(Lang.translate('loading'), "</div>\n            <div class=\"loading-layer__ico\"></div>\n        </div>\n    </div>"));
    if (text) loader$1.find('.loading-layer__text').text(text);
    loader$1.on('click', function (e) {
      if (DeviceInput.canClick(e.originalEvent)) cancel();
    });
    clearTimeout(timer$4);
    timer$4 = setTimeout(function () {
      $('body').append(loader$1);
    }, 500);
    toggle$8();
  }
  function toggle$8() {
    Controller.add('loading', {
      invisible: true,
      toggle: function toggle() {
        Controller.clear();
      },
      back: cancel,
      up: cancel,
      down: cancel,
      left: cancel,
      right: cancel
    });
    Controller.toggle('loading');
  }
  function cancel() {
    if (callback_cancel) callback_cancel();
  }
  function stop() {
    if (loader$1) loader$1.remove();
    clearTimeout(timer$4);
    if (controller_enabled) Controller.toggle(controller_enabled);
  }
  function setText(text) {
    if (loader$1) loader$1.find('.loading-layer__text').text(text);
  }
  var Loading = {
    start: start$6,
    stop: stop,
    setText: setText
  };

  function _0x1f83(){var n=["silent","name","dgets.kino","append","HopmN","EturN","duration","JFoLl","mWPOz","xEfRT","volume","toggleSoun","YoGIT","GQWjd","alternativ","4941a9a3ca","hrkEK","currentTim","%2C%200%2C","IJajE","rrKvC","ROR","delete","match","yBxDc","readyState","api_domain","UcDji","0%2C%20rnd","opacity 0.","Eajef","eZbyb","stop","FjFjE","<source>","sytVu","attachMedi","NAwEG","tmdb=","css","jjjZB","iler, .ful","NoiVK",".button--s","abrupt",".sound--on","trailer-vi","qXEkO","mrUGh","ZGzjk","fatal","347161XyRfnz","dim","join","PyppW","TemNS","ECMJG",".sound--of","VysLp","poisk.ru/d","alt_traile","Request ca","KxvTl","i.alloha.t","eoNcs","%2C0%2C%20","empty","jyrSO","chLrZ","vh-kp-conv","keys","setInitial","concat","YCLsq","lVsTZ","http","applicatio","|9|7|12|4|","strm.yande","IuThI","MroCD","trailer","SYWvj","error","catch","JEoKK","TNKQA","yqrOR","iSFzf","PyGaL","10|13|6|11","KEaRc","jpLKj","1084584UZGMgE","script","QCSVX","recoverMed","loadSource","QfDYp","ieOUj","type","UmwHW","HBSUP","%2C","kkynY","IZOMc","hxaGW","JFgzc","undefined","bLSDP","enkQj","parse","s?params=","first_air_","fRjXW","pointer-ev","pause",".full-star","YFKAf","itle","querySelec","startLoad","wtUgx","sent","field","yFopI","trailer_vo","NmGMn","includes","youtube.co","186862KwFKgZ","YkfmS","yYgZA","value","XiJBP","rrwBk","nxJdB","NETWORK_ER","SzCQJ","finish","key","emlPP","GnwHV","ted","%3B","title","&_=","yezgf","RGpTb","aQXts","stener","torAll","ent","kZuNM","3|5|1|8|2|","oncanplay","k widgets ","./vender/h",".card__tra","[Trailer] ","TEhMk"," получении","end","ame","EmYbC","cFKhV","ZefwX","zyxSp","lume","QVPjU","hover:ente","xMdMk","tive","apply","State","original_t","appendChil","id_kp","object","%20rnd-","none","Fnfiz","VcHGN","JZizt","dhlLG","tniez","string","canPlayTyp","KuChR","Osbdu","522nzpevO","lDSyx","length","5|7|1|6|2","tmdb_lang","return","clear","removeClas","trmXy","glHAb","find","ErrorTypes","upn_domain","Wqcam","RScJG","DhEIQ","MANIFEST_P","deo","QEtPZ","goDwJ","kinopoisk_","TdcAz","oQBdp","prev","ents","lTxsG","original_n","iscovery/a","3013496pVsOgg","stopLoad","head"," трейлер","CdBSt","kIrsO","SDKmx","search_tra","onerror","EQlLV","RslVm","yyNKp","lrpjp","destroy","ls/hls.js","gUEDw","ended","Egxgn","BwVpI","https://go","removeAttr","jCsGG","cCRgs","onload","BleuW","chgtW","rmOUx","cKrAU","hzErM","3|0|4|2|1","x.ru","timeout","nsEcF","aLwZz","oxDgk","TTMtq","kp=","tance","KLpwv","oyEJw","now","WSWkQ","GeaCM","v/?token=0","w__trailer","n/x-mpegUR","onloadedda","BTdht","imeout","HUmOw","mark","nWsFg","irplay","DcjDL","TWLmx","createElem","video/mp4","QVThh","cjEGr","remove","startsWith","Ошибка при","PxTsj","streamUrl","ytLLh","VxHXy","mCJNo","-out","GlxRo","100%","trailer_mu","TfeaK","1092672RaMzcW","gpNPR","jdIzN","OLrKw","wKNmJ","DjEUZ","1|0|2|3|4","Uuplb","NUjpW","1048482QLjyLO","MEDIA_ERRO","play","map","DLwgb","substring","BdOdh","ahKgt","isSupporte","uveya","LQlse","ZvShd","loadeddata","hide","Nyftl","load","rIQkf","trailer-ac","FsHJU","0|4|9|3|8|","kground","oFhjt","dxZrd","iaError","t-new__bac","LeBiT","wHiLd","oIXzG","Umzif","race","ARSED","MREVg","5s ease-in","get","Lwzng","eAJBc","ailers","doQXS","gnsev","results","min","uimmq","Hkfzh","attr","zNnXm","tor","<video>","Gldbh","Error","QhLmD","pFqvD","loadedmeta","Alternativ","url","uOxkV","kEWJt","rsLPf","HwAcJ","kp_trailer","Hls","tSIUb","ncelled","bmmIQ","NSFyk","nSkDH","yZRKJ","done","MZtOm","3ac16e2b43","sDyXb","JMrRV","aQNsN","kp.","4|0|2|1|3","e Kinopois","https://wi","abort","e source t","TfyGW","release_da","5|1|0|4|2|","VZvrn","n/vnd.appl","cancelRequ","sWRDc","zsGXN","27347bbc1&","jybpg","ayCVr","ibute","zXQoZ","IpKJT",".m3u8","gOfXD","cItOb","mTsNI","WEnPT","OKFVL","src","BIrJf","ERROR","ibIVT","pi/trailer","onended","getMovieTr","forEach","rYMfd","ueNfI","SkrfK","XMjQA","protocol","x-webkit-a","split","muted","ThOia","ound","mDWsa","DvNaQ","hMOOo","aWmkm","hlsInstanc","trailerIns","eFzQX","ElMnS","5245rTgxeI","zoXwu","enaLr","vod-conten","eClnW","SWLaJ","BMTvh","WIWek","hls","NHoTT","ZveWm","addClass","onpause","Events","e.mpegurl","qtUpG","OYXwV","data","lBpVR","gMQRZ","znsmS","ofnou","allow","api/video/","erted","youtu.be","GnkVH","filmId"," трейлеров","Agmuk","aded","rHILw","1|2|0|4|3|","rXxkw","Rqsdj","QvIPh","ests","GtrHh","kXVCz","classList","has","RKGYZ","random","Timeout","loaded","HSuiL","MYLDj",".pris.cam/","PKoSK","iler_","l-start-ne","visible lo","zuyTf","OJgpT","iWeog","https://ap","OvGoU","wrap","koFiu","show","lWgNr","GhQBA","ZDLNO","dVJOu","next","date","ZsZHf","add","kWSVU","kkxHc","IVKKe","addEventLi","then","NotAllowed","ZzYFx","cache"];return(_0x1f83=function(){return n})()}function _0x25ec(n,e){var r=_0x1f83();return(_0x25ec=function(n,e){return r[n-=353]})(n,e)}function init$J(){var l,d,e,m=_0x25ec,v={lrpjp:function(n,e){return n+e},QfDYp:function(n,e){return n+e},kEWJt:m(587),aLwZz:function(n,e){return n!==e},GnkVH:m(411),TNKQA:function(n,e,r){return n(e,r)},yqrOR:m(410),HSuiL:function(n,e){return e<n},NSFyk:m(437),xEfRT:m(441)+m(688),YCLsq:function(n,e){return n(e)},eoNcs:m(799),IZOMc:m(737),cKrAU:m(378),MREVg:function(n){return n()},mrUGh:function(n){return n()},koFiu:function(n,e){return n(e)},ZGzjk:m(694)+m(778)+m(477)+m(730)+m(583)+m(601)+m(753),KuChR:m(776)+m(576),OvGoU:function(n,e){return n(e)},eFzQX:m(682),iWeog:function(n,e,r){return n(e,r)},MZtOm:function(n,e,r){return n(e,r)},jyrSO:m(573)+"_",mWPOz:function(n,e,r){return n(e,r)},rrKvC:m(590)+m(717)+m(774)+m(433)+m(617)+m(827),iSFzf:m(780)+m(743)+"-",ZzYFx:m(362),yZRKJ:function(n,e,r){return n(e,r)},rHILw:function(n,e,r){return n(e,r)},yBxDc:function(n){return n()},BdOdh:m(595)+"3",tniez:function(n,e){return n(e)},rrwBk:function(n,e){return n==e},aQNsN:m(607),rXxkw:m(793)+m(464),rYMfd:m(784)+m(663),uveya:m(642)+"t",UmwHW:function(n,e){return n===e},gpNPR:m(402),kkynY:m(790),JFoLl:function(n,e){return n(e)},yFopI:m(567)+m(589)+m(372)+m(465),NUjpW:function(n,e){return n(e)},TdcAz:m(694)+m(778)+m(477)+m(730)+m(583)+m(601)+m(470),mTsNI:m(567)+m(592)+m(482),SYWvj:function(n){return n()},GeaCM:m(818),ElMnS:m(733)+m(395),XMjQA:m(775)+"r_",ahKgt:m(360),znsmS:m(844)+"m",kZuNM:m(664),CdBSt:function(n,e){return n<e},nWsFg:m(375)+m(495)+m(377)+m(667)+":",gMQRZ:function(n){return n()},TTMtq:function(n){return n()},enkQj:m(671)+"5",trmXy:m(758)+m(630),BIrJf:m(628),IpKJT:m(772)+"f",lDSyx:m(760),eZbyb:function(n,e){return n&&e},PyppW:function(n,e){return n(e)},uOxkV:function(n,e){return n(e)},Umzif:m(683),Egxgn:function(n){return n()},Lwzng:function(n,e){return n(e)},VcHGN:function(n,e){return n*e},sDyXb:function(n,e){return n+e},GhQBA:function(n){return n()},EmYbC:m(512),enaLr:m(809),Eajef:function(n){return n()},RKGYZ:m(712)+m(563),hxaGW:function(n,e){return n*e},jpLKj:m(791)+m(597)+m(653),ZDLNO:m(566)+m(656),MYLDj:function(n){return n()},HwAcJ:m(504)+m(359),NmGMn:function(n,e){return n===e},ibIVT:function(n,e){return n(e)},RGpTb:m(394),hrkEK:m(374)+m(756)+m(689)+m(478),chgtW:function(n,e){return n!==e},yezgf:m(832)+m(539)+m(535),Agmuk:m(690)+m(669),wKNmJ:m(767),ThOia:m(744)+m(547)+m(501),DLwgb:m(761)+m(423),NAwEG:m(503),GlxRo:m(561),aWmkm:m(626)+m(486),OLrKw:m(661),gUEDw:m(613),VxHXy:function(n,e,r){return n(e,r)},qtUpG:m(749),OJgpT:m(791)+m(479)+"L",lTxsG:m(490),HopmN:m(798),wtUgx:function(n,e){return n===e},lWgNr:m(823),bmmIQ:function(n,e){return n(e)},eClnW:m(373)+m(448),lVsTZ:m(532)+m(388),FsHJU:m(527),ofnou:m(450),JFgzc:m(830)+m(430),Gldbh:m(396),ueNfI:m(386)+"r",kIrsO:m(588),zoXwu:function(n,e){return n!==e},PKoSK:m(370)+m(805)+m(792)+"0",ayCVr:function(n,e){return n<e},eAJBc:m(463),JEoKK:m(528),dxZrd:function(n,e){return n&&e},zNnXm:function(n,e){return n(e)},KEaRc:function(n,e){return n(e)},ieOUj:m(534)+m(409),DhEIQ:function(n){return n()},DvNaQ:function(n,e){return n(e)},cjEGr:m(841)+m(384),SkrfK:m(453)+m(686)+m(662)},h=this,p=v[m(623)],y=null,w=null,k=null,g=null,b=null,T=null,x=Storage[m(548)](v[m(572)],!0),S=new create$e,E=null,_=new Set,u=new Set;function L(){var n=m;return v[n(446)](v[n(446)](v[n(813)](Utils$2[n(625)](),v[n(570)]),object$2[n(741)]),"/")}this[m(548)]=(d={ZefwX:function(n,e){return v[_0x25ec(467)](n,e)},QVThh:function(n,e){return v[_0x25ec(467)](n,e)},nsEcF:v[(l=m)(665)],LeBiT:function(n,e,r){return v[l(801)](n,e,r)},FjFjE:v[l(802)],SDKmx:function(n,e){return v[l(684)](n,e)},WEnPT:v[l(578)],oxDgk:v[l(724)],lBpVR:function(n,e){return v[l(788)](n,e)},WIWek:v[l(779)],pFqvD:v[l(820)],ZsZHf:v[l(461)],YoGIT:function(n){return v[l(546)](n)}},e=v[l(788)](_asyncToGenerator,v[l(763)](_regeneratorRuntime)[l(484)](function n(r){var t,u,c,o,i,a,s,f=l;return d[f(727)](_regeneratorRuntime)[f(696)](function(n){for(var e=f;;)switch(n[e(429)]=n[e(703)]){case 0:if(d[e(382)](r,null)&&d[e(491)](r,void 0)&&r.id){n[e(703)]=2;break}return n[e(759)](d[e(466)],null);case 2:if(t=""[e(787)](r.id,"_")[e(787)](Date[e(474)]()),E=t,n[e(429)]=4,_[e(679)](t))return n[e(759)](d[e(466)],null);n[e(703)]=7;break;case 7:return n[e(703)]=9,d[e(540)](K,r,t);case 9:if(u=n[e(838)],_[e(679)](t))return n[e(759)](d[e(466)],null);n[e(703)]=12;break;case 12:if(u)return n[e(759)](d[e(466)],u);n[e(703)]=14;break;case 14:return c=Storage[e(839)](d[e(748)]),n[e(429)]=15,n[e(703)]=18,d[e(540)](z,r,c);case 18:if((c=n[e(838)])&&d[e(440)](c[e(408)],0))return o=c[0],n[e(759)](d[e(466)],""[e(787)](p)[e(787)](o[e(356)]));n[e(703)]=22;break;case 22:if(r[e(716)]||r[e(432)+e(379)]||r[e(361)]||r[e(391)+e(834)]){if(o=r[e(716)]||r[e(432)+e(379)]||r[e(361)]||r[e(391)+e(834)],i=r[e(828)+e(704)]||r[e(594)+"te"],i=i?""[e(787)](o," ")[e(787)](i[e(520)](0,4),d[e(611)]):""[e(787)](o,d[e(611)]),a=d[e(468)][e(787)](d[e(657)](encodeURIComponent,i)),s=Storage[e(714)](a))return n[e(759)](d[e(466)],s);n[e(703)]=30}else n[e(703)]=41;break;case 30:return n[e(429)]=30,n[e(703)]=33,d[e(657)](M,i);case 33:if(s=n[e(838)])return Storage[e(714)](a,s,86400),n[e(759)](d[e(466)],s);n[e(703)]=37;break;case 37:n[e(703)]=41;break;case 39:n[e(429)]=39,n.t0=n[d[e(646)]](30);case 41:n[e(703)]=45;break;case 43:n[e(429)]=43,n.t1=n[d[e(646)]](15);case 45:n[e(703)]=51;break;case 47:if(n[e(429)]=47,n.t2=n[d[e(646)]](4),_[e(679)](t))return n[e(759)](d[e(466)],null);n[e(703)]=51;break;case 51:return n[e(429)]=51,_[d[e(565)]](t),n[e(355)](51);case 54:return n[e(759)](d[e(466)],null);case 55:case d[e(705)]:return n[e(747)]()}},n,null,[[4,47,51,54],[15,43],[30,39]])})),function(n){return e[l(389)](this,arguments)});I={mDWsa:function(n,e){return v[_0x25ec(697)](n,e)},gnsev:v[(G=m)(764)],LQlse:v[G(404)],RslVm:function(n,e){return v[G(788)](n,e)},BwVpI:function(n,e){return v[G(695)](n,e)},tSIUb:v[G(637)],Uuplb:function(n,e,r){return v[G(693)](n,e,r)},GQWjd:function(n,e,r){return v[G(582)](n,e,r)},emlPP:v[G(665)],KLpwv:v[G(461)],rsLPf:function(n){return v[G(546)](n)},GnwHV:v[G(779)],OKFVL:v[G(782)],DjEUZ:function(n,e,r){return v[G(723)](n,e,r)},PyGaL:v[G(735)],UcDji:v[G(803)],qXEkO:v[G(713)],jdIzN:function(n,e,r){return v[G(580)](n,e,r)},OYXwV:function(n,e,r){return v[G(670)](n,e,r)},WSWkQ:function(n){return v[G(739)](n)}},c=v[G(788)](_asyncToGenerator,v[G(739)](_regeneratorRuntime)[G(484)](function n(a,s){var e,r,t,c,u,f=G;return I[f(475)](_regeneratorRuntime)[f(696)](function(n){for(var o=f,i={KxvTl:function(n,e){return I[_0x25ec(631)](n,e)},dVJOu:function(n,e){return I[_0x25ec(631)](n,e)},TfyGW:I[o(553)],doQXS:I[o(525)],QhLmD:function(n,e){return I[o(631)](n,e)},QVPjU:function(n,e){return I[o(444)](n,e)},rIQkf:function(n,e){return I[o(452)](n,e)},ytLLh:I[o(575)],Osbdu:function(n,e,r){return I[o(513)](n,e,r)},xMdMk:function(n,e,r){return I[o(728)](n,e,r)},jCsGG:I[o(357)],jybpg:I[o(472)],goDwJ:function(n){return I[o(571)](n)},PxTsj:function(n){return I[o(571)](n)}};;)switch(n[o(429)]=n[o(703)]){case 0:if(a[o(426)+"id"]){n[o(703)]=15;break}return n[o(429)]=1,n[o(703)]=4,new Promise(function(e,r){var t=o,u={GtrHh:function(n,e){return i[_0x25ec(702)](n,e)}};S[t(715)](i[t(593)][t(787)](a.id),function(n){return u[t(676)](e,n)},function(n){return i[t(777)](r,n)})});case 4:(r=n[o(838)])&&r[o(656)]&&r[o(656)][o(393)]?(a[o(426)+"id"]=r[o(656)][o(393)],n[o(703)]=10):n[o(703)]=9;break;case 9:return n[o(759)](I[o(357)],null);case 10:n[o(703)]=15;break;case 12:return n[o(429)]=12,n.t0=n[I[o(358)]](1),n[o(759)](I[o(357)],null);case 15:if(n[o(429)]=15,e=I[o(612)][o(787)](a[o(426)+"id"]),r=Storage[o(714)](e))return n[o(759)](I[o(357)],I[o(511)](N,r,a[o(426)+"id"]));n[o(703)]=20;break;case 20:return u=Math[o(681)](),t=Date[o(474)](),c=""[o(787)](I[o(571)](L),I[o(804)])[o(787)](a[o(426)+"id"],I[o(742)])[o(787)](u,I[o(762)])[o(787)](t),n[o(703)]=25,Promise[o(544)]([new Promise(function(r,t){var u=o;_[u(679)](s)?i[u(385)](t,new Error(i[u(552)])):S[u(715)](c,function(n){var e=u;_[e(679)](s)?i[e(777)](t,new Error(i[e(552)])):i[e(702)](r,n)},function(n){return i[u(564)](t,n)})}),new Promise(function(n,e){var r=o,t={JMrRV:function(n,e){return i[_0x25ec(531)](n,e)},dhlLG:i[r(498)]};return i[r(405)](setTimeout,function(){var n=r;t[n(585)](e,new Error(t[n(400)]))},5e4)})])[I[o(358)]](function(){var u=o,c={SzCQJ:function(n,e,r){return i[_0x25ec(387)](n,e,r)},cCRgs:i[u(455)],TemNS:i[u(602)],NHoTT:function(n){return i[u(425)](n)}},e=i[u(531)](_asyncToGenerator,i[u(496)](_regeneratorRuntime)[u(484)](function n(e){var r=u,t={wHiLd:function(n,e,r){return c[_0x25ec(354)](n,e,r)},cItOb:c[r(456)],VysLp:c[r(770)]};return c[r(648)](_regeneratorRuntime)[r(696)](function(n){for(var e=r;;)switch(n[e(429)]=n[e(703)]){case 0:return n[e(703)]=2,t[e(541)](W,a[e(426)+"id"],s);case 2:return n[e(759)](t[e(609)],n[e(838)]);case 3:case t[e(773)]:return n[e(747)]()}},n)}));return function(n){return e[u(389)](this,arguments)}}());case 25:return(u=n[o(838)])&&Storage[o(714)](e,u,86400),n[o(759)](I[o(357)],I[o(508)](N,u,a[o(426)+"id"]));case 30:return n[o(429)]=30,n.t1=n[I[o(358)]](15),n[o(703)]=34,I[o(655)](W,a[o(426)+"id"],s);case 34:return n[o(759)](I[o(357)],n[o(838)]);case 35:case I[o(472)]:return n[o(747)]()}},n,null,[[1,12],[15,30]])}));var o,i,r,j,R,t,G,I,c,a,s,K=function(n,e){return c[G(389)](this,arguments)},N=function(n,e){var r=m;try{for(var t=v[r(521)][r(627)]("|"),u=0;;){switch(t[u++]){case"0":var c=n;continue;case"1":if(n&&n[r(729)+"e"]&&n[r(656)])return n[r(656)];continue;case"2":if(c){var o=Object[r(785)](c);if(o&&v[r(684)](o[r(408)],0)){var i,a=v[r(401)](_createForOfIteratorHelper,o);try{for(a.s();!(i=a.n())[r(581)];){var s,f,l=c[i[r(848)]];if(l&&l[r(666)]&&v[r(850)](l[r(666)],e)&&l[r(497)])return l[r(497)][r(843)](v[r(586)])?{url:s=(s=l[r(497)])[r(843)](v[r(672)])||s[r(843)](v[r(621)])||s[r(843)](v[r(524)])?""[r(787)](v[r(739)](L))[r(787)](s):s,hls:!0,kinopoisk_trailer:!0}:f=(f=l[r(497)])[r(843)](v[r(672)])?""[r(787)](v[r(763)](L))[r(787)](f):f}}catch(n){a.e(n)}finally{a.f()}}}continue;case"3":return null;case"4":if(v[r(816)](typeof n,v[r(507)]))try{c=JSON[r(826)](n)}catch(n){}continue;case"5":if(v[r(816)](typeof n,v[r(507)])&&n[r(494)](v[r(819)]))return n;continue}break}}catch(n){return null}},W=(R={nSkDH:v[(j=m)(476)],oyEJw:v[j(638)],QEtPZ:function(n,e){return v[j(813)](n,e)},TEhMk:function(n,e){return v[j(514)](n,e)},BTdht:v[j(404)],ZveWm:v[j(665)],QCSVX:v[j(624)],EQlLV:v[j(522)],oFhjt:function(n){return v[j(797)](n)},oIXzG:v[j(735)],DcjDL:v[j(713)],YFKAf:function(n,e,r){return v[j(580)](n,e,r)},IJajE:v[j(779)],hzErM:v[j(659)],BMTvh:v[j(369)],MroCD:v[j(461)]},t=v[j(695)](_asyncToGenerator,v[j(739)](_regeneratorRuntime)[j(484)](function n(c,a){var e,r,t,s,u,f,l,d,m=j,h={Fnfiz:function(n,e){return v[_0x25ec(722)](n,e)},mCJNo:v[m(840)],sWRDc:function(n,e,r){return v[m(580)](n,e,r)},IVKKe:function(n,e){return v[m(514)](n,e)},kkxHc:v[m(404)],TWLmx:v[m(427)],rmOUx:function(n,e){return v[m(697)](n,e)},hMOOo:v[m(610)],Hkfzh:function(n,e,r){return v[m(580)](n,e,r)}};return v[m(797)](_regeneratorRuntime)[m(696)](function(n){for(var o=m,i={SWLaJ:R[o(579)],glHAb:R[o(473)],IuThI:function(n,e){return R[o(424)](n,e)},Nyftl:function(n,e){return R[o(376)](n,e)},ZvShd:R[o(481)],kWSVU:function(n,e){return R[o(376)](n,e)}};;)switch(n[o(429)]=n[o(703)]){case 0:if(c){n[o(703)]=2;break}return n[o(759)](R[o(649)],null);case 2:if(_[o(679)](a))return n[o(759)](R[o(649)],null);n[o(703)]=4;break;case 4:if(n[o(429)]=4,e=R[o(810)][o(787)](c),t=Storage[o(714)](e))return n[o(759)](R[o(649)],t);n[o(703)]=9;break;case 9:if(_[o(679)](a))return n[o(759)](R[o(649)],null);n[o(703)]=11;break;case 11:return n[o(429)]=11,r=Math[o(681)](),t=Date[o(474)](),u=[0,201868,202869,203294][o(518)](function(n){var e=o;return""[e(787)](c,i[e(644)])[e(787)](n,i[e(415)])[e(787)](i[e(794)](r,Math[e(681)]()))}),u=u[o(768)](R[o(443)]),s=""[o(787)](R[o(536)](L),R[o(542)])[o(787)](u,R[o(487)])[o(787)](t),n[o(703)]=20,Promise[o(544)]([new Promise(function(r,t){var u=o,c={BleuW:function(n,e){return i[_0x25ec(529)](n,e)},TfeaK:i[u(526)]};_[u(679)](a)?i[u(707)](t,new Error(i[u(526)])):S[u(715)](s,function(n){var e=u;_[e(679)](a)?c[e(458)](t,new Error(c[e(505)])):c[e(458)](r,n)},function(n){return c[u(458)](t,n)})}),new Promise(function(n,e){var r=o,t={kXVCz:function(n,e){return h[_0x25ec(397)](n,e)},RScJG:h[r(500)]};return h[r(599)](setTimeout,function(){var n=r;t[n(677)](e,new Error(t[n(420)]))},5e4)})]);case 20:if(u=n[o(838)],f=R[o(833)](N,u,c))return Storage[o(714)](e,f,86400),n[o(759)](R[o(649)],f);n[o(703)]=25;break;case 25:n[o(703)]=29;break;case 27:n[o(429)]=27,n.t0=n[R[o(734)]](11);case 29:return n[o(703)]=31,Promise[o(544)]([new Promise(function(r,t){var u=o,e={uimmq:function(n,e){return h[_0x25ec(709)](n,e)}};_[u(679)](a)?h[u(397)](t,new Error(h[u(708)])):S[u(715)](h[u(488)][u(787)](c),function(n){var e=u;_[e(679)](a)?i[e(529)](t,new Error(i[e(526)])):i[e(529)](r,n)},function(n){return e[u(556)](t,n)})}),new Promise(function(n,e){var r=o,t={HBSUP:function(n,e){return h[_0x25ec(460)](n,e)},Wqcam:h[r(633)]};return h[r(557)](setTimeout,function(){var n=r;t[n(817)](e,new Error(t[n(419)]))},5e4)})]);case 31:if(f=n[o(838)],l=null,f&&f[o(656)]&&f[o(656)][o(796)])return(l=(l=f[o(656)][o(796)])&&(l[o(843)](R[o(462)])||l[o(843)](R[o(645)]))&&(d=R[o(376)](O,l))?""[o(787)](p)[o(787)](d):l)&&Storage[o(714)](e,l,86400),n[o(759)](R[o(649)],l);n[o(703)]=38;break;case 38:return n[o(759)](R[o(649)],null);case 41:return n[o(429)]=41,n.t1=n[R[o(734)]](4),n[o(759)](R[o(649)],null);case 44:case R[o(795)]:return n[o(747)]()}},n,null,[[4,41],[11,27]])})),function(n,e){return t[j(389)](this,arguments)}),O=function(n){var e=m;if(n)for(var r=0,t=[/(?:youtube\.com\/watch\?v=|youtu\.be\/)([^&\?\/]+)/i,/youtube\.com\/embed\/([^&\?\/]+)/i,/youtube\.com\/v\/([^&\?\/]+)/i];v[e(438)](r,t[e(408)]);r++){var u=t[r],u=n[e(738)](u);if(u&&u[1])return u[1]}return null},z=(i={nxJdB:v[(o=m)(665)],cFKhV:v[o(779)],jjjZB:v[o(485)],fRjXW:v[o(461)],yYgZA:function(n){return v[o(658)](n)}},r=v[o(697)](_asyncToGenerator,v[o(469)](_regeneratorRuntime)[o(484)](function n(r,t){var u,c=o;return i[c(847)](_regeneratorRuntime)[c(696)](function(n){for(var e=c;;)switch(n[e(429)]=n[e(703)]){case 0:return n[e(429)]=0,n[e(703)]=3,Api[e(619)+e(551)](r,t);case 3:return u=n[e(838)],n[e(759)](i[e(851)],u&&u[e(554)]?u[e(554)]:null);case 7:return n[e(429)]=7,n.t0=n[i[e(381)]](0),console[e(798)](i[e(755)],n.t0),n[e(759)](i[e(851)],null);case 11:case i[e(829)]:return n[e(747)]()}},n,null,[[0,7]])})),function(n,e){return r[o(389)](this,arguments)}),M=(this[m(726)+"d"]=function(){for(var n=m,e=v[n(825)][n(627)]("|"),r=0;;){switch(e[r++]){case"0":y[n(628)]=x;continue;case"1":if(y)continue;return;case"2":x=!x;continue;case"3":var t=document[n(835)+n(367)](v[n(414)]);continue;case"4":y[n(725)]=x?0:.5;continue;case"5":if(t&&t[n(408)])for(var u=0;v[n(438)](u,t[n(408)]);u++){x?t[u][n(678)][n(706)](v[n(614)]):t[u][n(678)][n(493)](v[n(614)]);var c=t[u][n(835)+n(560)](v[n(606)]),o=t[u][n(835)+n(560)](v[n(407)]);v[n(746)](c,o)&&(x?(v[n(514)]($,c)[n(698)](),v[n(788)]($,o)[n(528)]()):(v[n(769)]($,c)[n(528)](),v[n(569)]($,o)[n(698)]()))}continue}break}},this[m(786)+m(390)]=function(n){var e=m;n&&(n[e(628)]=x,n[e(725)]=x?0:.5)},this[m(517)]=function(n,e,r){var o=m,i={zsGXN:v[o(380)],chLrZ:v[o(641)],YkfmS:function(n){return v[o(745)](n)},zXQoZ:v[o(779)],oQBdp:function(n,e){return v[o(816)](n,e)},HUmOw:v[o(680)],zyxSp:function(n,e){return v[o(816)](n,e)},QvIPh:function(n,e){return v[o(821)](n,e)},EturN:v[o(807)],JZizt:v[o(701)],zuyTf:function(n){return v[o(685)](n)}};if(n){x=Storage[o(548)](v[o(572)],!0);var t=v[o(816)](typeof n,v[o(507)])?n:n[o(568)],u=v[o(842)](v[o(616)](_typeof,n),v[o(364)])&&n[o(647)],n=v[o(842)](v[o(695)](_typeof,n),v[o(364)])&&n[o(426)+o(796)];if(t&&(w=(k=e)[o(416)](v[o(731)]),v[o(467)](c=w,null))&&v[o(459)](c,void 0)&&c[o(408)]){k&&(k[o(416)](v[o(363)])[o(413)+"s"](v[o(668)])[o(650)](v[o(510)]),k[o(416)](v[o(363)])[o(754)]({opacity:"0",transition:v[o(629)]})),w[o(781)]();var c={id:v[o(519)],width:v[o(752)],height:v[o(752)],autoplay:!0,muted:x,playsinline:!0,loop:!1,"webkit-playsinline":!0},a=(T=v[o(580)]($,v[o(502)],c),u&&T[o(558)](v[o(634)],v[o(509)]),v[o(746)](n,u)||t[o(843)](object$2[o(418)])?T[o(558)](v[o(449)],t):((c=v[o(499)]($,v[o(654)],{src:t,type:u?v[o(692)]:v[o(431)]})).on(v[o(719)],function(n){h[o(447)]()}),T[o(718)](c)),w[o(718)](T),T[0]);if(y=a,u)try{v[o(837)](typeof window[o(574)],v[o(699)])?v[o(577)](function(o){return new Promise(function(n,e){for(var r=_0x25ec,t=i[r(600)][r(627)]("|"),u=0;;){switch(t[u++]){case"0":c[r(613)]=o;continue;case"1":var c=document[r(489)+r(368)](i[r(783)]);continue;case"2":c[r(457)]=n;continue;case"3":c[r(442)]=e;continue;case"4":document[r(436)][r(392)+"d"](c);continue}break}})},v[o(643)])[o(711)](function(){v[o(580)](f,a,t)})[v[o(779)]](function(n){}):v[o(580)](f,a,t)}catch(n){}h[o(786)+o(390)](a),e[o(650)](v[o(789)]),a[o(710)+o(366)](v[o(533)],function(){var n=o;w&&w[n(650)](v[n(543)])});var s=function(){var n=o;h[n(447)](),r&&v[n(658)](r)},n=(a[o(710)+o(366)](v[o(660)],s),a[o(710)+o(366)](v[o(719)],s),a[o(710)+o(366)](v[o(701)],function(){var n=o,e={ECMJG:function(n){return v[_0x25ec(451)](n)}},r=(g&&v[n(549)](clearTimeout,g),a[n(721)]);g=r&&!v[n(569)](isNaN,r)&&v[n(684)](r,0)?(r=Math[n(555)](v[n(398)](v[n(584)](r,5),1e3),12e4),v[n(582)](setTimeout,function(){i[n(691)](s)},r)):v[n(582)](setTimeout,function(){e[n(771)](s)},6e4)}),w&&w[o(754)](v[o(822)],v[o(562)]),e[o(416)](v[o(414)]));return n[o(408)]&&n.on(v[o(622)],function(){h[o(726)+"d"]()}),b=v[o(723)](setTimeout,function(){v[o(700)](s)},12e4),s}}function f(n,e){var t,u=o,c={NoiVK:function(n,e){return i[_0x25ec(383)](n,e)},gOfXD:i[u(483)],Rqsdj:i[u(605)]};window[u(574)]&&window[u(574)][u(523)+"d"]()?((t=new window[u(574)]({maxBufferLength:30,maxMaxBufferLength:60,maxBufferSize:i[u(674)](i[u(674)](10,1e3),1e3),maxBufferHole:.5,lowLatencyMode:!1,timeout:1e4})).on(window[u(574)][u(652)][u(615)],function(n,e){var r=u;if(e[r(765)])switch(e[r(815)]){case window[r(574)][r(417)][r(353)+r(736)]:t[r(836)]();break;case window[r(574)][r(417)][r(516)+"R"]:t[r(811)+r(538)]();break;default:i[r(846)](s)}}),t[u(812)](e),t[u(751)+"a"](n),t.on(window[u(574)][u(652)][u(422)+u(545)],function(){var r=u;a[r(517)]()[i[r(605)]](function(n){var e=r;c[e(757)](n[e(716)],c[e(608)])&&(a[e(628)]=!0,x=!0,a[e(517)]()[c[e(673)]](function(n){}))})}),a[u(635)+"e"]=t):a[u(403)+"e"](i[u(720)])&&(a[u(613)]=e,a[u(710)+u(366)](i[u(399)],function(){var r=u,t={aQXts:function(n,e){return i[_0x25ec(428)](n,e)},XiJBP:i[r(483)],yyNKp:i[r(605)]};a[r(517)]()[i[r(605)]](function(n){var e=r;t[e(365)](n[e(716)],t[e(849)])&&(a[e(628)]=!0,x=!0,a[e(517)]()[t[e(445)]](function(n){}))})}))}},this[m(598)+m(675)]=function(){for(var r=m,n=v[r(439)][r(627)]("|"),e=0;;){switch(n[e++]){case"0":E&&_[r(706)](E);continue;case"1":u[r(412)]();continue;case"2":u[r(620)](function(n){var e=r;try{n&&t[e(824)](n[e(740)],4)&&n[e(591)]()}catch(n){}});continue;case"3":S&&S[r(412)]();continue;case"4":var t={bLSDP:function(n,e){return v[r(640)](n,e)}};continue}break}},this[m(447)]=function(){for(var n=m,e=v[n(687)][n(627)]("|"),r=0;;){switch(e[r++]){case"0":_[n(412)]();continue;case"1":b&&(v[n(697)](clearTimeout,b),b=null);continue;case"2":if(T)try{T[n(831)]&&T[n(831)](),T[n(493)]&&T[n(493)]()}catch(n){}continue;case"3":h[n(598)+n(675)]();continue;case"4":E=null;continue;case"5":g&&(v[n(695)](clearTimeout,g),g=null);continue;case"6":try{var t=document[n(835)+n(367)](v[n(414)]);if(t&&t[n(408)])for(var u=0;v[n(603)](u,t[n(408)]);u++)for(var c=v[n(550)][n(627)]("|"),o=0;;){switch(c[o++]){case"0":t[u][n(678)][n(706)](v[n(800)]);continue;case"1":v[n(537)](a,i)&&(v[n(559)]($,a)[n(698)](),v[n(806)]($,i)[n(528)]());continue;case"2":var i=t[u][n(835)+n(560)](v[n(407)]);continue;case"3":t[u][n(678)][n(706)](v[n(614)]);continue;case"4":var a=t[u][n(835)+n(560)](v[n(606)]);continue}break}}catch(n){}continue;case"7":k=null;continue;case"8":if(y)try{for(var s=v[n(814)][n(627)]("|"),f=0;;){switch(s[f++]){case"0":y[n(635)+"e"]&&(y[n(635)+"e"][n(435)](),y[n(635)+"e"][n(447)](),y[n(635)+"e"]=null);continue;case"1":y[n(651)]=null;continue;case"2":y[n(371)]=null;continue;case"3":y[n(454)+n(604)](v[n(449)]);continue;case"4":y[n(831)]();continue;case"5":y[n(480)+"ta"]=null;continue;case"6":y[n(442)]=null;continue;case"7":y[n(618)]=null;continue;case"8":y[n(530)]();continue;case"9":y[n(732)+"e"]=0;continue}break}}catch(n){}continue;case"9":T=null;continue;case"10":if(w)try{w[n(781)](),w[n(413)+"s"](v[n(543)]),w=null}catch(n){}continue;case"11":y=null;continue;case"12":w=null;continue;case"13":if(k)try{var l=k[n(416)](v[n(363)]);l[n(408)]&&(l[n(413)+"s"](v[n(510)])[n(650)](v[n(668)]),l[n(754)]({opacity:"1",transition:v[n(629)]})),k[n(413)+"s"](v[n(789)])}catch(n){}continue}break}},s=v[(a=m)(632)](_asyncToGenerator,v[a(658)](_regeneratorRuntime)[a(484)](function n(e){var r=a,t={sytVu:v[r(665)],VZvrn:v[r(461)]};return v[r(421)](_regeneratorRuntime)[r(696)](function(n){for(var e=r;;)switch(n[e(429)]=n[e(703)]){case 0:return n[e(759)](t[e(750)],null);case 1:case t[e(596)]:return n[e(747)]()}},n)})),function(n){return s[a(389)](this,arguments)}),n={get:this[m(548)],play:this[m(517)],destroy:this[m(447)],toggleSound:this[m(726)+"d"],setInitialState:this[m(786)+m(390)],cancelRequests:this[m(598)+m(675)],setMuted:function(n){var e=m;x=n,T&&(T[e(628)]=n,T[e(725)]=n?0:Storage[e(548)](v[e(492)],.5))},getMuted:function(){return x}};return window[m(636)+m(471)]=n}!function(){for(var n=_0x25ec,e=_0x1f83();;)try{if(207086==+parseInt(n(766))+parseInt(n(845))/2+parseInt(n(515))/3+-parseInt(n(808))/4+-parseInt(n(639))/5*(parseInt(n(406))/6)+parseInt(n(506))/7+-parseInt(n(434))/8)break;e.push(e.shift())}catch(n){e.push(e.shift())}}();var Trailer={init:init$J};

  /**
   * Карточка
   * @param {object} data
   * @param {{isparser:boolean, card_small:boolean, card_category:boolean, card_collection:boolean, card_continue:true, card_wide:true, card_big:true}} params 
   */
  function _0x12c8(){var n=["lnWHD","MAsTs","evkGN","abrupt","card_colle","FbbUd","stop","1|3|2|8","wvocd","HDTVRIP","YFjGI","air_date","UKcAV","release_da","break","title_like","onMenuSele","swwoF","LUoKo","QvTJe","MVfhG","pPEdD","mark","ROlZu","10430ewdxug","JzLng","field","card--movi","ker","rXMyi","Seeders","LldfF","3513qXJbBa","poster","rPbtC","Hckqq","rpTXh","22624acyAgs","KaqAA","ZvXOX","ZTiJO","concat","isparser","XoNdB","dHyks","heZMK","show","exMpp","WEB-DLRIP","ZCBDZ","pOlEX","jRkta","Khfec","iUTCr","style","Pzyuy","WvHrQ","card--load","caUFY","MoEKG","EqDOV","w1280","poster_pat","ICScM","1989jxePAf","ouOxk","HukvG","8|4|2|3|0","watched","4|2|13|7|5","innerText","eXQhS","VXuBb","WUBpa","1|4|6|3|5|","3|0|4|1|2|","MqkZA",".card__qua","FKCYb","poster_siz","quality_ip","size","nAHWU","NfjLl","ns-inner","card_quali","gTobp","where","ySjGc","ITMSF","YSQVe","o-title","news-cards",".card__mar","secondsToT","hCWmo","cDAgl","logo-verti","YbeWA","4|0|1|3|2|",".card__age","fmGUg","9|4|5|2|0|","VrDJP","lEbsG","RdXbD","MkFiu","imeHuman","inue","NvPKD","BnIGX","0|10","backdrop_p","forEach","card--coll","drip",".card__log","card__prom","sVhWf","0|7|1|4","jsALk","BXTyE","status","NtiIy","episode_nu","x-item__lo","NdFCQ","RwmsB","tPqXG","em_seeds","i.apbugall","nue","innerHTML","filter","IdlPQ","azCpe","BIQHo","profile_pa","logo-squar","FDwjN","mber","video","zCvlV","parse","card_small","RiOES","catch","WdSCo","translate","HLGCl","PQTvN","n=d3174413","720p",": <span>","IIxWj","ymoAF","tvrip","cover","OAhhD","7|5|2","external_i","onContextM","language","ched_last","KavTD","BDRIP","AwaWe","qOXYJ","seasons","WbGSS","TEDay","wkOdY","view","0|2|7","IUXkE","season","ahykc","episode","TDzpR","WvKKz","|11|6|8|9|","BgvZL","uIBVS","WWOdP","coCSS","jUTZk","1|3","JopPq","PHzCs","noload","--medium","getMovieLo","515GUQlIk","value","KScRU","iawPx","zIfFB","favorite","itle","vNIMp","XgFhD","KzhBx","em_grabs","CXRXv","zwBkD","endsWith","LZKpz","WEBRIP","Zgfse","card--smal","time","WEB-DL","descriptio","wJRHg","data","5|0|2|4|3|","ity--mediu","|3|6|4|8|7","date","w200","quality_dv","file_path","mTyda","&kp=","card_data","HDTV","promo","agQzm","onVisible","getTime","KqBRj","QwdOE","sbevv","top","xmIMt","3|2|0|1|4","aPrVp","jjZbr","percent","toUpperCas","soHgf","xmLxH","title_book","OEFsM","4K🔥",".svg","tSRym","vdUOL","XNJpK","BFpTM","dlCGI","xxEac","GiWHj","XKmec","MtntP","JSNvG","card__vote","YffxX","rWhCe","mo-title","sdlNA","loAra","tmdb","DrRFt","MXnmy","EnZnj","6|10|5|3|0","ufuPi","nfAlS","onEnter","pDxiy","TSsiG","3|4|2|0|1","Wrdga","uNWjs","lpAYJ","Whefu","STYxd","aAnFc","Ошибка заг","597683bCiYmQ","RydpW","rip","light_vers","bxJek","2|3|0|1|4","gduoX","name","DVDRIP","mslZH","IbRsI","TTakg","59e505c343","qpkta","UTgWH","tbyDB","uVByT","card__icon","isArray","title_acti","YXZkO","toFixed","card_conti","div","JUztG","ies","VbzMu","mkLFl","UdAqN","sent","error","ontal","episodes","vxFkI","icon--","onMenu","original_n","WqfVT","VHEUD","parseToDat","IwGzN","onload","qsjvZ","slice","ber","5442087ZYamFO","logo-horiz","xcntL","querySelec","card_explo","VxIqy","znujv","Title","uhd","height","hcHdx","release_ye","inPkq","</span>","firstChild","NDmEh",".selectbox","9|0|1|11|6",".card__ser","done","gMtut","ARAVa","рузки лого","Awenu","VKDGo","YkQsG","Etiye","1|2|3|4|5|","ckbox","HXovL","XaSuB","prev","BsnPh","VNLBk","byeva","686mTZfXd","fQAvC","iler","wDLuz","extend","flex","OHgeB","8|6|2|4","high","LvPgM","rer","TotUR","mHayV","UQWJn","hed","destroy","render","Tqoun","wmxAG","aOlTW","kinopoisk_","sknpA","pAUbz","create","BwRhk","lity","JaYqf","length","qPibe","nkNXW","dLHlB","PqeOA","IAaYQ","PdfXO","plugins","onTouch","quality_hd","LNCUM","5|4|6|2|0|","LUipf","yEOcK","DJwYr","OPDCO","yLQoz","interface_","2|1|0|4|3","AbXQR","mOqro","IQxfP","amuCz","card--cate","roqzc","card","VuraB","visible","search","Tasyt","ADaek","poster_tra","enu","history","типа:","iVNum","SaISq","uNyOH","oUOPK","KsexQ","XzfDt","width","LklDl","w300","4|2|0|1|3","fkNIn",".card-watc","wrap","ity--top","hLkOh","card_big",".org/?toke","mmASu",".card__img","FngAC","ShLMC","read","gfyhh","ceil","ZcRvt","pPZRI","wvLBh","lTCnB","success","iIYJe","none","TCIot","er__size","hasClass","EpBrf","dnYue","push","find","wbZJM","block","xeOBr","HkGVD",'ck"></div>',"card_watch","lWnfk","jJHZs","sjEag","ArCwV","mNVTA","0|4|2|3|1","TmpPN","classList","iHtEk","FbzgZ","6|5|9|1|7|","oDUJJ","10|0|5|2|9","rcfsJ","xlypm","contains","lrtSl","Xhbyd","hover:hove","ZkmLE","wljcg","card__logo","card_wide","vEVTj","fFAza","WrZnc","AqFZo","vFTji","hover:blur","4|6|7|5|0|","DpaSX","QYqlL","card-watch","wdjWc","end","hHRwP","er__title","dqmBt","RClTO","YZqzn","mdb_id","body","https://ap","build","vXwDG","title","fgGfH","&imdb=","wFwlJ","onerror","lsEhT","medium","span","listener","onFocus","bPRHF","0|2|1|6|5|","GlZhz","hover:ente","write","ed__item","Jylbz","PvKXz","DAbiN","toggle","uNiUx","title_view","indexOf","ory","IosFu","icon_lock","OiiZc","ath","BQOkd","uenPn","cnuMv","GYRMR","nxWXG","31026kuABxz","card--tv","mZVZG","TCYhN","xtWOL","OFwqD","aRvxi","...","HNqbv","ZbEwj","Vhtwq","image","Ktgdc","ity--high","insertBefo","start","GykIK","bWwpu","add","logo-wide-","watched_wr","vote_avera","string","change","shaVy","jRyUp","ction","HrOlP","3|5|2|6|8|","lJBPy","tuNFc","wath","contentTyp","card--big","gyCXw","ezcvF","wkQhW","ijMvZ","kCHQI","VAYtU","w500","jLhtO","PCDkf","imgrX","1080p","onHover","MhjgE","GWvDD","YaonB","4|3","card_parse","des","look","rGzXA","tzkPX",".card__vie","SQred","rxYtI","auch","close","gory","search--op","zPxRR","|2|10|4|5|","owZcx","NWqpT","aSTAu","PevAu","urzqN","enabled","vbhzL","addEventLi","join","cznxT","includes","kixyv","xUAAZ","-img","RhZbB","AeLAm","JDqeA","kIULg","card--cont","ivLeO","fdQHp","sHJGu","XrlMA","quality","oMwYJ","online_wat","OuGzi","qujAJ","original_t","pqsPR","ndvmp","oqPEz","undefined","wmybu","first_air_","hash","card_categ","XbsSg","Zcdlr","quality_ts","logos_path","loadLogo","psaRO","BAdrE","yVIJG","EOYim","space","hover:focu","ztbkh","Img","zTomk","<div class","hNudd","zUcIa",'="selectbo',"PUWdS","hover:touc","w780","img","appendChil","cal","OvZEw","CqHcB","Uithz","lqZxu","0|1|3|6|4|","AHhQB","like","xLVaR","logos","IPTVRIP","0000","ooyKR","qmOzi","bInVu","er__detail","IfHWT","HDRIP","aKgzy",".card__pro","more","orer","log","qNWhr","ufbik","ion","subtitle","uUeNg","torrent_it","MOV","ljcTO","IUYpC","25553EVlkXI","ZnSvv","ame","finish","ORWTJ","wtnjh","ohpZy","jvpYN","RCOyX","gOWBT","--high","LOwii","src","MVpxM","c2063edc97","tTUEB","trim","ity","2|0|3|4|1","WbFDY","QrpsK","imdb_id","object","Rpspi","get","hEOlb","1|3|2|0|4","6|1|10|7|3","hover:long","LdXPt","./img/img_","hed__body","noname","FAdEa","tor","media_type","gos","1|14|3|12|","uSavO","follow","fmQAo","season_num","neKJH","JUdGy","big","display","then","XYBVY","play","rngjD","prGqr","broken","qwKEd","LoVYA","vodTt","PQliP","QKsRi","IOihf","xVeec","vvwIZ","onMenuShow","watched_ch","7|4|8","IWIQO","qRRYA","LXeff","WXNQm","gZsWr","createElem","zaPmp","title_wath","iyVWd","--low","menu_histo",".card__ico","focus","GYAyr","type","movie",".card-pars","MTjpS","PShwp","WRTcE","ooUQZ","oeAcm","fPSTi","NblyV","dOlwC","tv_shows_n","Peers","KABPP","TxqRo","OXnhJ","title_look","PTrno","NIwLG","onContextL","broken.svg","o-text","ihFKJ","cIctg","jiKQf","EWJCx","return","iWXWt","vYUIS","QFVCG","remove","fail","append","ity--low","zjivQ","SSjeV","CirYh","card--expl","ent","XVrbQ","xhVXo","update","DVB","ezZPg","GccdC","2413272XIeEPw","3|1|4|0|2","-item__che","qUCQW","EkWUd","dataset","3|1|2|4|0","7|1|5|0|3|","card--wide","card__qual"," - ","QuBAy","KkoaM","original","check","collect","13|8|3|12|","next","full_episo","JFEQC","XxWXW","jXmza","card__type","iUqyJ","nBCtL","stener","card_episo","RYHkt","now","addicon","de_days_le","|1|9|11|2|","lwlYw","RGgDR","OMHZq","kzmgl","split",".card__tit","UNowR","promo_titl","HGWfQ","source",".png","ALMnM","map","XOjXt","yhJGF","IyQOk","bind","GVFkA","ecked","ection","book","nDFOk","number_of_","zjqkG"];return(_0x12c8=function(){return n})()}function _0x3d89(n,e){var t=_0x12c8();return(_0x3d89=function(n,e){return t[n-=234]})(n,e)}function Card(B){var q=_0x3d89,V={wFwlJ:q(530)+q(955),PQliP:function(n,e,t){return n(e,t)},hCWmo:function(n,e){return n===e},VxIqy:function(n,e){return n!==e},NvPKD:q(408),YffxX:q(938)+q(685)+"|8",AeLAm:q(1047),HNqbv:q(1001),pPZRI:q(884),SSjeV:q(1043),GccdC:q(1061),MqkZA:q(777),loAra:q(845),aPrVp:q(643),KScRU:q(246),FAdEa:q(636),yVIJG:function(n,e){return e<n},YXZkO:q(1080),SQred:q(546),WRTcE:q(988),pOlEX:q(1056)+"b",GykIK:q(354)+q(992),VHEUD:q(354)+q(240),iHtEk:q(1056)+q(951),NfjLl:q(605),aAnFc:q(916)+q(992),lqZxu:function(n,e){return n(e)},sVhWf:q(787)+q(325),eXQhS:q(789)+q(675),ooyKR:q(261),BwRhk:q(789)+q(515),LldfF:q(789)+q(393),XVrbQ:q(789)+q(1052)+"m",iWXWt:q(789)+q(768),MTjpS:q(913)+q(343),ouOxk:q(524),DAbiN:function(n,e){return n+e},jiKQf:function(n,e){return n+e},agQzm:q(466)+q(966)+q(396)+q(987)+q(250)+q(672)+"e7",ShLMC:function(n,e){return n+e},caUFY:q(1059),UKcAV:function(n,e){return n+e},qOXYJ:q(471),ivLeO:q(911)+"5",JUdGy:q(503),STYxd:q(301)+q(263),dnYue:function(n){return n()},IosFu:q(736),wmybu:function(n,e,t){return n(e,t)},rPbtC:q(363),IOihf:function(n,e){return n===e},YFjGI:function(n){return n()},fmGUg:q(982),uNWjs:q(480)+q(551),QrpsK:function(n){return n()},yLQoz:q(921)+"ty",IUYpC:q(310)+"0",Ktgdc:q(776),tzkPX:q(552)+"r",WdSCo:q(370),zaPmp:q(398),PQTvN:q(1102)+q(811)+q(720),TTakg:function(n,e){return n+e},wvLBh:function(n,e){return n+e},jjZbr:q(654)+q(965),RwmsB:q(989),lWnfk:q(296),KzhBx:q(737)+q(641)+"s",qmOzi:q(737)+q(460),dlCGI:function(n,e){return n+e},cIctg:q(654)+q(1038),MkFiu:q(737)+q(412),qujAJ:q(905)+q(1016)+q(695)+q(947),PShwp:q(557)+"w",zjqkG:q(935)+"5",lwlYw:q(817)+"le",iUTCr:q(241)+q(651),JzLng:q(1071),ArCwV:q(953)+q(927),KavTD:q(953)+q(756),AqFZo:function(n,e){return e<n},JopPq:q(509),aRvxi:q(953)+"o",oMwYJ:q(535),pPEdD:function(n,e){return n(e)},lnWHD:function(n,e){return n+e},JSNvG:q(368)+q(562),hEOlb:q(950)+q(831),hNudd:q(1045)+"l",BXTyE:function(n,e){return n(e)},ooUQZ:q(584)+q(944),CirYh:q(936),PvKXz:q(391)+q(332),Tasyt:function(n,e){return n(e)},kixyv:q(684),nBCtL:q(243),RGgDR:function(n,e){return n+e},ezZPg:q(788),BgvZL:function(n,e){return n(e)},ufbik:q(772)+q(647),VKDGo:q(786),TCYhN:q(1092),GYAyr:function(n,e){return e<=n},Etiye:q(1092)+q(668),ZvXOX:q(1092)+q(1026),CqHcB:q(1092)+q(730),LdXPt:function(n,e){return e<=n},gfyhh:q(781),vdUOL:q(802),Pzyuy:q(863)+"e",Xhbyd:q(746)+q(660),jLhtO:q(655),fQAvC:function(n,e){return n==e},sdlNA:q(637),coCSS:q(372),DrRFt:q(1108),cDAgl:q(893)+"ed",HrOlP:q(615),LOwii:q(1025),WUBpa:q(688)+q(755),ljcTO:q(255),owZcx:function(n,e){return n+e},XzfDt:q(272),urzqN:q(732)+q(920),Vhtwq:q(676),GlZhz:q(733),NtiIy:function(n,e){return n(e)},ezcvF:function(n,e){return n(e)},MVpxM:q(389),KkoaM:q(806)+q(553),LNCUM:function(n,e){return n(e)},IIxWj:q(356)+q(1022),vXwDG:q(591)+q(999),xLVaR:q(798)+"de",znujv:q(490)+"ed",UNowR:function(n,e){return n+e},mHayV:function(n,e){return n+e},XoNdB:q(453)+q(843),MoEKG:q(423)+"ed",OHgeB:function(n,e){return n<e},wdjWc:q(434)+q(903),yEOcK:q(391)+q(689),PevAu:function(n,e){return n+e},EnZnj:q(790),zTomk:q(798)+q(810)+"ft",ITMSF:q(690),Rpspi:function(n,e){return n==e},WrZnc:q(476),WbFDY:function(n,e){return n/e},TEDay:function(n,e){return n-e},nkNXW:function(n,e){return n*e},wmxAG:function(n,e){return n*e},nAHWU:q(456)+q(484),VuraB:q(631)+q(995),fFAza:q(929)+q(864),qPibe:q(378),ZnSvv:q(554),pqsPR:q(533),MhjgE:q(832),UdAqN:q(633),iyVWd:q(563)+"en",VbzMu:function(n,e){return n==e},Hckqq:q(1098),XgFhD:q(977),KsexQ:q(436)+q(1053)+"|1",Tqoun:q(257)+"on",mkLFl:q(1078),RydpW:q(751),MXnmy:q(851),IWIQO:q(728),zIfFB:q(731)+"ry",DJwYr:q(646),uVByT:q(429),AHhQB:function(n,e){return n(e)},FbbUd:q(617)+q(620)+q(961)+q(422),Awenu:q(482)+"r",rXMyi:q(299)+q(782)+q(311),QvTJe:q(494),cnuMv:function(n,e){return n===e},jsALk:q(915)+"e",SaISq:q(598),vxFkI:q(796)+q(300)+q(565)+"7",QYqlL:q(525),sjEag:q(622)+"h",vYUIS:q(686),evkGN:q(452),XbsSg:q(442)+"r",vFTji:function(n){return n()},QKsRi:q(613)+"s",ICScM:function(n){return n()},FKCYb:q(761),GVFkA:q(458),xtWOL:q(376)+q(320),iVNum:q(465),XaSuB:q(928),prGqr:function(n,e){return n===e},BnIGX:q(362)+q(890),zwBkD:q(612),wJRHg:function(n,e){return n&&e},KABPP:function(n,e,t){return n(e,t)},zPxRR:function(n){return n()},ohpZy:q(998),fmQAo:function(n,e){return n<e},jRkta:function(n,e){return e<n},azCpe:q(822),IAaYQ:q(1081),jXmza:q(388),TotUR:q(952)+"o",exMpp:q(445),RiOES:q(624),ZbEwj:q(445)+q(579),zUcIa:function(n,e){return n/e},VAYtU:q(521)+q(702),ZkmLE:q(284)+q(269),mslZH:q(933)+q(626),iawPx:q(974)+"e",imgrX:q(850),oqPEz:q(237)+q(305)+q(379),hcHdx:q(645)+q(1095),MAsTs:q(419),wkQhW:q(410),GYRMR:q(323),rWhCe:q(910)+q(1009),dLHlB:function(n,e){return n===e},JDqeA:q(1055),tPqXG:q(623),vNIMp:q(897),ihFKJ:function(n,e){return n===e},HGWfQ:q(542),KaqAA:q(793),lpAYJ:q(1051)+"1",bxJek:function(n,e){return n+e},OuGzi:function(n,e){return n(e)},LXeff:function(n){return n()}},p=this,z=V[q(610)](arguments[q(345)],1)&&V[q(288)](arguments[1],void 0)?arguments[1]:{};function C(n){n&&n[q(765)]()}Arrays[q(322)](B,{title:B[q(245)],original_title:B[q(274)+q(660)],release_date:B[q(600)+q(1054)]}),B[q(294)+"ar"]=V[q(242)](B[q(849)+"te"]||V[q(1096)],"")[q(281)](0,4);function S(_){for(var n,e,i=q,t=V[i(472)][i(816)]("|"),c=0;;){switch(t[c++]){case"0":if(B[i(338)+"id"]||B[i(679)])return void V[i(713)](f,B[i(338)+"id"],B[i(679)]);continue;case"1":var o=function(){function e(t){return new Promise(function(n,e){TMDB[_0x3d89(996)+"ds"]({type:t,id:B.id},n,e)})}var c=i,o={nDFOk:u[c(827)],hHRwP:function(n,e){return u[c(872)](n,e)},IwGzN:function(n,e,t){return u[c(1042)](n,e,t)},IQxfP:function(n,e){return u[c(1077)](n,e)},lrtSl:function(n,e){return u[c(1077)](n,e)},aSTAu:u[c(784)],dqmBt:function(n,e){return u[c(495)](n,e)}},t=u[c(559)](r);u[c(1010)](e,t)[c(704)](function(n){var e=c;return!(!n||!n[e(679)]&&!n[e(338)+"id"]||(B[e(679)]=n[e(679)]||"",B[e(338)+"id"]=n[e(338)+"id"]||"",u[e(1042)](f,n[e(338)+"id"],n[e(679)]),0))})[u[c(629)]](function(n){var r,i=c;return!!o[i(366)](n[i(958)],404)&&(r=o[i(440)](t,"tv")?o[i(568)]:"tv",o[i(461)](e,r)[i(704)](function(n){var e=i;if(n&&(n[e(679)]||n[e(338)+"id"]))for(var t=o[e(833)][e(816)]("|"),c=0;;){switch(t[c++]){case"0":B[e(338)+"id"]=n[e(338)+"id"]||"";continue;case"1":B[e(679)]=n[e(679)]||"";continue;case"2":o[e(459)](a,r);continue;case"3":return!0;case"4":o[e(278)](f,n[e(338)+"id"],n[e(679)]);continue}break}return!1}))})[u[c(629)]](function(n){})};continue;case"2":var a=function(n){var e=i;_[e(785)][e(534)+"e"]=n};continue;case"3":var u={qpkta:function(n,e){return V[i(931)](n,e)},RdXbD:function(n,e){return V[i(288)](n,e)},uNyOH:V[i(945)],LvPgM:V[i(1093)],XYBVY:V[i(581)],NdFCQ:V[i(510)],VNLBk:V[i(405)],RCOyX:V[i(770)],psaRO:V[i(779)],tTUEB:V[i(912)],TxqRo:V[i(1097)],UTgWH:V[i(1072)],NIwLG:V[i(1030)],nfAlS:V[i(691)],QFVCG:function(n,e){return V[i(610)](n,e)},JaYqf:V[i(258)],IfHWT:V[i(558)],kCHQI:V[i(740)],GiWHj:V[i(886)],wbZJM:V[i(518)],xhVXo:V[i(276)],RYHkt:V[i(432)],gMtut:V[i(919)],uNiUx:V[i(236)],OiiZc:function(n,e){return V[i(630)](n,e)},xVeec:V[i(954)],qUCQW:V[i(907)],RhZbB:V[i(638)],BIQHo:V[i(342)],heZMK:V[i(867)],cznxT:V[i(774)],TCIot:V[i(762)],HLGCl:V[i(738)],ijMvZ:V[i(901)],iUqyJ:function(n,e){return V[i(487)](n,e)},WqfVT:function(n,e){return V[i(759)](n,e)},kzmgl:V[i(1063)],Jylbz:function(n,e){return V[i(400)](n,e)},rngjD:V[i(894)],XKmec:function(n,e){return V[i(848)](n,e)},LUoKo:V[i(1003)],wkOdY:V[i(585)],UQWJn:V[i(701)],ahykc:V[i(235)],oeAcm:function(n){return V[i(415)](n)},EkWUd:V[i(493)],LZKpz:function(n,e,t){return V[i(599)](n,e,t)},IyQOk:V[i(870)],rpTXh:function(n,e){return V[i(630)](n,e)},xmLxH:function(n,e){return V[i(715)](n,e)},rxYtI:function(n){return V[i(846)](n)},IUXkE:function(n,e){return V[i(630)](n,e)},Uithz:V[i(937)],mOqro:function(n,e){return V[i(610)](n,e)},ROlZu:V[i(1110)]};continue;case"4":B.id?V[i(678)](o):(B[i(469)]||B[i(245)])&&(n=B[i(469)]||B[i(245)],e=V[i(846)](r),TMDB[i(373)]({query:n,type:e},function(n){var e=i;if(n&&u[e(365)](n[e(345)],0))for(var t=u[e(859)][e(816)]("|"),c=0;;){switch(t[c++]){case"0":var r=n[0];continue;case"1":r[e(693)]&&u[e(1010)](a,r[e(693)]);continue;case"2":B.id=r.id;continue;case"3":u[e(559)](o);continue;case"4":r[e(245)]&&(B[e(245)]=r[e(245)]);continue;case"5":r[e(834)+e(1004)]&&(B[e(834)+e(1004)]=r[e(834)+e(1004)]);continue;case"6":r[e(600)+e(1054)]&&(B[e(600)+e(1054)]=r[e(600)+e(1054)]);continue}break}}));continue;case"5":if(Storage[i(862)](V[i(361)]))continue;return;case"6":var s=function(){var n=i;return _[n(785)][n(534)+"e"]};continue;case"7":var r=function(){for(var n=i,e=u[n(1007)][n(816)]("|"),t=0;;){switch(e[t++]){case"0":if(c)return c;continue;case"1":(_[n(431)][n(439)](u[n(331)])||_[n(286)+n(692)](u[n(1012)])||B[n(834)+n(1004)]||B[n(270)]||B[n(245)]||B[n(1004)]||B[n(600)+n(1054)])&&(r="tv");continue;case"2":u[n(495)](a,r);continue;case"3":var c=u[n(742)](s);continue;case"4":var r=u[n(784)];continue;case"5":return r}break}};continue;case"8":var f=function(n,e){var T=i,y={EpBrf:function(n,e){return u[_0x3d89(251)](n,e)},neKJH:function(n,e){return u[_0x3d89(941)](n,e)},ymoAF:function(n,e){return u[_0x3d89(251)](n,e)},PdfXO:u[T(382)],oDUJJ:u[T(327)],vvwIZ:u[T(705)],uSavO:u[T(962)],shaVy:u[T(316)],CXRXv:u[T(666)],LklDl:u[T(608)],qRRYA:u[T(673)],ZCBDZ:u[T(749)],mmASu:u[T(252)],TDzpR:u[T(753)],BAdrE:u[T(1104)],ADaek:function(n,e){return u[T(764)](n,e)},mNVTA:u[T(344)],WbGSS:u[T(642)],Zgfse:u[T(540)],WvHrQ:u[T(1088)],VXuBb:u[T(418)],zCvlV:u[T(775)],YaonB:u[T(807)],xmIMt:u[T(303)],nxWXG:u[T(489)],JUztG:function(n,e){return u[T(495)](n,e)},tuNFc:u[T(716)],WvKKz:u[T(783)],NWqpT:u[T(580)],lsEhT:u[T(972)],wljcg:u[T(881)],FngAC:u[T(575)],NDmEh:u[T(411)],PCDkf:u[T(985)],fkNIn:u[T(539)]},n=u[T(803)](u[T(275)](u[T(815)],n?u[T(485)](u[T(707)],n):""),e?u[T(1089)](u[T(854)],e):"");$[T(682)](n,function(n){var r=T;if(n&&y[r(700)](n,""))try{var e=JSON[r(979)](n);if(y[r(991)](e[r(958)],y[r(351)])&&e[r(1050)]&&e[r(1050)][r(589)])for(var t=y[r(435)][r(816)]("|"),c=0;;){switch(t[c++]){case"0":var i={"WEB-DL":8,BDRIP:7,"WEB-DLRIP":6,WEBRIP:5,HDTV:4,DVB:4,HDTVRIP:3,HDRIP:3,DVDRIP:2,TS:1,IPTVRIP:1};continue;case"1":var o=null;continue;case"2":var a={high:[y[r(717)]],top:[y[r(696)]],medium:[y[r(526)],y[r(1039)],y[r(387)],y[r(722)]],low:[y[r(885)],y[r(397)],y[r(1014)],"TS",y[r(609)]]};continue;case"3":try{for(v.s();!(d=v.n())[r(302)];){var u=d[r(1029)],s=i[u]||0;y[r(375)](s,b)&&(b=s,o=u)}}catch(n){v.e(n)}finally{v.f()}continue;case"4":w=w[r(824)](function(n){var e=r;return n[e(1075)+"e"]()[e(674)]()})[r(969)](function(n){return n})[r(969)](function(n,e,t){var c=r;return y[c(414)](t[c(491)](n),e)});continue;case"5":var f=y[r(414)](e[r(1050)][r(291)],!0);continue;case"6":var h={"WEB-DL":f?y[r(428)]:y[r(717)],BDRIP:y[r(1005)],"WEB-DLRIP":y[r(1044)],WEBRIP:y[r(1044)],HDTV:y[r(1044)],DVB:Lang[r(984)](y[r(892)]),HDTVRIP:Lang[r(984)](y[r(908)]),HDRIP:Lang[r(984)](y[r(978)]),DVDRIP:Lang[r(984)](y[r(550)]),TS:Lang[r(984)](y[r(1070)]),IPTVRIP:Lang[r(984)](y[r(501)])};continue;case"7":var d,v=y[r(262)](_createForOfIteratorHelper,w);continue;case"8":if(o)for(var l=y[r(532)][r(816)]("|"),p=0;;){switch(l[p++]){case"0":m[r(431)][r(520)](y[r(1015)]);continue;case"1":g&&g[r(765)]();continue;case"2":m[r(625)+"d"](k);continue;case"3":var k=document[r(726)+r(773)](y[r(567)]);continue;case"4":_[r(625)+"d"](m);continue;case"5":var m=document[r(726)+r(773)](y[r(567)]);continue;case"6":a[r(326)][r(576)](o)?m[r(431)][r(520)](y[r(474)]):a[r(1069)][r(576)](o)?m[r(431)][r(520)](y[r(444)]):a[r(475)][r(576)](o)?m[r(431)][r(520)](y[r(399)]):m[r(431)][r(520)](y[r(298)]);continue;case"7":var g=_[r(286)+r(692)](y[r(544)]);continue;case"8":k[r(906)]=h[o]||o;continue}break}continue;case"9":var w=y[r(991)](typeof e[r(1050)][r(589)],y[r(390)])?e[r(1050)][r(589)][r(816)](","):Array[r(256)](e[r(1050)][r(589)])?e[r(1050)][r(589)]:[e[r(1050)][r(589)]];continue;case"10":var b=-1;continue}break}}catch(n){}})[T(766)](function(n){})};continue}break}}this[q(467)]=function(){for(var n=q,e=V[n(657)][n(816)]("|"),t=0;;){switch(e[t++]){case"0":this[n(370)][n(573)+n(805)](V[n(514)],this[n(776)][n(828)](this));continue;case"1":this[n(370)]=Template.js(z[n(878)]?V[n(556)]:V[n(983)],B);continue;case"2":this[n(624)]=this[n(370)][n(286)+n(692)](V[n(727)])||{};continue;case"3":this[n(370)][n(1060)]=B;continue;case"4":if(z[n(878)])for(var c=V[n(986)][n(816)]("|"),r=0;;){switch(c[r++]){case"0":s&&(s[n(906)]=B[n(917)]);continue;case"1":var i=document[n(726)+n(773)](V[n(638)]);continue;case"2":i[n(968)]=V[n(249)](V[n(487)](V[n(406)](Lang[n(984)](V[n(1073)]),V[n(963)]),B[n(866)]),V[n(424)]);continue;case"3":a&&(a[n(906)]=B[n(290)]);continue;case"4":o[n(625)+"d"](i);continue;case"5":var o=this[n(370)][n(286)+n(692)](V[n(1037)]);continue;case"6":var a=this[n(370)][n(286)+n(692)](V[n(639)]);continue;case"7":u[n(968)]=V[n(759)](V[n(406)](V[n(1086)](Lang[n(984)](V[n(758)]),V[n(963)]),B[n(747)]),V[n(424)]);continue;case"8":o[n(625)+"d"](u);continue;case"9":var u=document[n(726)+n(773)](V[n(638)]);continue;case"10":var s=this[n(370)][n(286)+n(692)](V[n(942)]);continue;case"11":o[n(968)]="";continue}break}else for(var f,h=V[n(593)][n(816)]("|"),d=0;;){switch(h[d++]){case"0":var v=this[n(370)][n(286)+n(692)](V[n(739)]);continue;case"1":if(z[n(395)])for(var l=V[n(835)][n(816)]("|"),p=0;;){switch(l[p++]){case"0":V[n(630)](C,this[n(370)][n(286)+n(692)](V[n(812)]));continue;case"1":B[n(869)]=B[n(993)];continue;case"2":Storage[n(862)](V[n(889)])&&V[n(630)](C,this[n(370)][n(286)+n(692)](V[n(812)]));continue;case"3":if(B[n(1062)]||B[n(819)+"e"])for(var k,m=V[n(861)][n(816)]("|"),g=0;;){switch(m[g++]){case"0":B[n(819)+"e"]&&((k=document[n(726)+n(773)](V[n(638)]))[n(431)][n(520)](V[n(427)]),k[n(906)]=B[n(819)+"e"],w[n(625)+"d"](k));continue;case"1":B[n(1062)]&&((k=document[n(726)+n(773)](V[n(638)]))[n(431)][n(520)](V[n(1e3)]),k[n(906)]=V[n(487)](B[n(1062)][n(281)](0,110),V[n(450)](B[n(1062)][n(345)],110)?V[n(1023)]:""),w[n(625)+"d"](k));continue;case"2":w[n(431)][n(520)](V[n(508)]);continue;case"3":var w=document[n(726)+n(773)](V[n(638)]);continue;case"4":this[n(370)][n(286)+n(692)](V[n(739)])[n(625)+"d"](w);continue}break}continue;case"4":this[n(370)][n(431)][n(520)](V[n(590)]);continue;case"5":this[n(607)]();continue}break}continue;case"2":T&&(T[n(906)]=B[n(469)]);continue;case"3":var b=V[n(857)](parseFloat,V[n(836)](B[n(523)+"ge"]||0,""))[n(259)](1);continue;case"4":var T=this[n(370)][n(286)+n(692)](V[n(812)]);continue;case"5":z[n(602)+n(492)]&&this[n(370)][n(431)][n(520)](V[n(1091)]);continue;case"6":z[n(840)+n(528)]&&this[n(370)][n(431)][n(520)](V[n(683)]);continue;case"7":z[n(980)]&&(this[n(370)][n(431)][n(520)](V[n(618)]),V[n(957)](C,this[n(370)][n(286)+n(692)](V[n(812)])));continue;case"8":z[n(260)+n(967)]&&(this[n(370)][n(431)][n(520)](V[n(741)]),V[n(957)](C,this[n(370)][n(286)+n(692)](V[n(771)])),f=this[n(370)][n(286)+n(692)](V[n(486)]))&&V[n(374)](C,f);continue;case"9":if(z[n(446)])for(var y=V[n(577)][n(816)]("|"),_=0;;){switch(y[_++]){case"0":if(B[n(1062)]||B[n(819)+"e"])for(var I,A=V[n(804)][n(816)]("|"),P=0;;){switch(A[P++]){case"0":B[n(819)+"e"]&&((I=document[n(726)+n(773)](V[n(638)]))[n(431)][n(520)](V[n(427)]),I[n(906)]=B[n(819)+"e"],R[n(625)+"d"](I));continue;case"1":B[n(1062)]&&((I=document[n(726)+n(773)](V[n(638)]))[n(431)][n(520)](V[n(1e3)]),I[n(906)]=V[n(813)](B[n(1062)][n(281)](0,110),V[n(450)](B[n(1062)][n(345)],110)?V[n(1023)]:""),R[n(625)+"d"](I));continue;case"2":var R=document[n(726)+n(773)](V[n(638)]);continue;case"3":R[n(431)][n(520)](V[n(508)]);continue;case"4":this[n(370)][n(286)+n(692)](V[n(739)])[n(625)+"d"](R);continue}break}continue;case"1":this[n(370)][n(431)][n(520)](V[n(778)]);continue;case"2":B[n(869)]=B[n(993)];continue;case"3":V[n(1017)](C,this[n(370)][n(286)+n(692)](V[n(812)]));continue;case"4":Storage[n(862)](V[n(889)])&&V[n(857)](C,this[n(370)][n(286)+n(692)](V[n(812)]));continue}break}continue;case"10":V[n(1017)](S,v);continue;case"11":z[n(287)+n(328)]&&this[n(370)][n(431)][n(520)](V[n(650)]);continue;case"12":if(V[n(610)](b,0))for(var x=V[n(307)][n(816)]("|"),D=0;;){switch(x[D++]){case"0":this[n(370)][n(286)+n(692)](V[n(739)])[n(625)+"d"](L);continue;case"1":L[n(431)][n(520)](V[n(505)]);continue;case"2":V[n(734)](b,8)?L[n(431)][n(520)](V[n(309)]):V[n(734)](b,6)?L[n(431)][n(520)](V[n(875)]):L[n(431)][n(520)](V[n(628)]);continue;case"3":var L=document[n(726)+n(773)](V[n(638)]);continue;case"4":L[n(906)]=V[n(687)](b,10)?10:b;continue}break}continue;case"13":if(B[n(274)+n(660)])for(var O=V[n(402)][n(816)]("|"),W=0;;){switch(O[W++]){case"0":this[n(370)][n(286)+n(692)](V[n(739)])[n(625)+"d"](X);continue;case"1":X[n(431)][n(520)](V[n(1083)]);continue;case"2":this[n(370)][n(431)][n(520)](B[n(274)+n(660)]?V[n(701)]:V[n(891)]);continue;case"3":var X=document[n(726)+n(773)](V[n(638)]);continue;case"4":X[n(906)]=B[n(274)+n(660)]?Lang[n(984)](V[n(441)]):V[n(543)];continue}break}continue;case"14":V[n(319)](B[n(294)+"ar"],V[n(1096)])?V[n(857)](C,this[n(370)][n(286)+n(692)](V[n(771)])):(f=this[n(370)][n(286)+n(692)](V[n(771)]))&&(f[n(906)]=B[n(294)+"ar"]);continue}break}continue;case"5":this[n(370)][n(573)+n(805)](V[n(1020)],this[n(372)][n(828)](this));continue}break}},this[q(513)]=function(){for(var e=q,n=V[e(1099)][e(816)]("|"),t=0;;){switch(n[t++]){case"0":this[e(624)][e(279)]=function(){var n=e;r[n(370)][n(431)][n(520)](c[n(586)]),ImageCache[n(483)](r[n(624)],r[n(624)][n(670)])};continue;case"1":this[e(624)][e(473)]=function(){var n=e;TMDB$1[n(709)](),console[n(648)](c[n(814)],c[n(1087)],r[n(624)][n(670)]),r[n(624)][n(670)]=c[n(1079)]};continue;case"2":if(z[e(878)])return;continue;case"3":var c={fdQHp:V[e(932)],OMHZq:V[e(529)],xxEac:V[e(669)],OEFsM:V[e(909)]};continue;case"4":var r=this;continue}break}},this[q(809)]=function(n){var e=q,t=document[e(726)+e(773)](V[e(638)]);t[e(431)][e(520)](V[e(656)]),t[e(431)][e(520)](V[e(566)](V[e(385)],n)),this[e(370)][e(286)+e(692)](V[e(570)])[e(625)+"d"](t)},this[q(776)]=function(){for(var n=q,e=V[n(512)][n(816)]("|"),t=0;;){switch(e[t++]){case"0":this[n(719)+n(830)]=!1;continue;case"1":this[n(370)][n(431)][n(439)](V[n(481)])&&this[n(904)]();continue;case"2":if(z[n(878)])return;continue;case"3":this[n(522)+"ap"]&&V[n(959)](C,this[n(522)+"ap"]);continue;case"4":this[n(1033)]();continue}break}},this[q(904)]=function(){for(var l=q,n=V[l(671)][l(816)]("|"),e=0;;){switch(n[e++]){case"0":if(Storage[l(862)](V[l(792)]))continue;return;case"1":if(z[l(260)+l(967)])return;continue;case"2":var p=this;continue;case"3":this[l(719)+l(830)]||(V[l(355)](function(n){var e=l;B[e(274)+e(660)]?TimeTable[e(682)](B,n):V[e(537)](n,[])},function(n){for(var e,t,s,f=l,c=k[f(383)][f(816)]("|"),r=0;;){switch(c[r++]){case"0":!s&&B[f(274)+f(660)]&&(e=Storage[f(682)](k[f(1002)],"{}")[Utils$2[f(601)](B[f(594)+f(1034)])])&&e[f(1013)]&&(s={ep:{episode_number:e[f(1013)],name:k[f(340)](k[f(744)](Lang[f(984)](k[f(649)])," "),e[f(1013)])},view:Timeline$1[f(1008)](Utils$2[f(601)]([e[f(1011)],k[f(433)](e[f(1011)],10)?":":"",e[f(1013)],B[f(594)+f(1034)]][f(574)]("")))});continue;case"1":s||B[f(274)+f(660)]||(e=Timeline$1[f(1008)](Utils$2[f(601)]([B[f(594)+f(1034)]][f(574)](""))))[f(1074)]&&(s={ep:{name:k[f(340)](k[f(340)](Lang[f(984)](k[f(640)])," "),e[f(1046)]?Utils$2[f(930)+f(943)](e[f(1046)]):k[f(994)](e[f(1074)],"%"))},view:e});continue;case"2":B[f(274)+f(660)]&&(t=Timeline$1[f(1008)](Utils$2[f(601)]([B[f(594)+f(1034)]][f(574)](""))))[f(1074)]&&(s={ep:{name:k[f(430)](k[f(504)](Lang[f(984)](k[f(640)])," "),t[f(1046)]?Utils$2[f(930)+f(943)](t[f(1046)]):k[f(504)](t[f(1074)],"%"))},view:t});continue;case"3":if(s)for(var i=k[f(934)][f(816)]("|"),o=0;;){switch(i[o++]){case"0":var h=Template.js(k[f(253)],{});continue;case"1":d[f(949)](function(n){for(var e=f,t=v[e(1019)][e(816)]("|"),c=0;;){switch(t[c++]){case"0":h[e(286)+e(692)](v[e(295)])[e(625)+"d"](o);continue;case"1":var r=Date[e(808)]();continue;case"2":i[e(906)]=v[e(940)](n[e(960)+e(976)]?v[e(902)](n[e(960)+e(976)],v[e(339)]):"",v[e(507)](a,0)?v[e(902)](v[e(902)](Lang[e(984)](v[e(312)]),": "),a):n[e(245)]||Lang[e(984)](v[e(360)]));continue;case"3":v[e(939)](n,s.ep)&&o[e(625)+"d"](Timeline$1[e(334)](s[e(1008)])[0]);continue;case"4":o[e(625)+"d"](i);continue;case"5":var i=document[e(726)+e(773)](v[e(1084)]);continue;case"6":var o=document[e(726)+e(773)](v[e(315)]);continue;case"7":var a=Math[e(403)](v[e(1068)](v[e(1066)](u[e(1065)](),r),v[e(711)](v[e(447)](v[e(653)](24,60),60),1e3)));continue;case"8":o[e(431)][e(520)](v[e(321)]);continue;case"9":var u=Utils$2[e(277)+"e"](n[e(847)]);continue}break}});continue;case"2":var a=p[f(370)][f(286)+f(692)](k[f(970)]);continue;case"3":p[f(522)+"ap"]=h;continue;case"4":var u=[];continue;case"5":u[f(345)]&&d[f(416)](u[0]);continue;case"6":var d=n[f(281)](n[f(491)](s.ep))[f(969)](function(n){return n[f(847)]})[f(969)](function(n){var e=f,t=Utils$2[e(277)+"e"](n[e(847)])[e(1065)]();return v[e(507)](t,Date[e(808)]())&&u[e(416)](n),v[e(317)](t,Date[e(808)]())})[f(281)](0,5);continue;case"7":k[f(1085)](d[f(345)],0)&&(d=[s.ep]);continue;case"8":a[f(516)+"re"](h,a[f(297)]);continue}break}continue;case"4":continue;case"5":var v={ORWTJ:function(n,e){return k[f(433)](n,e)},OFwqD:function(n,e){return k[f(611)](n,e)},byeva:function(n,e){return k[f(404)](n,e)},WWOdP:k[f(888)],inPkq:k[f(425)],lEbsG:function(n,e){return k[f(1067)](n,e)},HukvG:function(n,e){return k[f(430)](n,e)},sknpA:k[f(308)],HXovL:k[f(578)],OPDCO:k[f(462)],VrDJP:function(n,e){return k[f(364)](n,e)},XNJpK:k[f(760)],BsnPh:k[f(349)],sbevv:function(n,e){return k[f(825)](n,e)},KqBRj:function(n,e){return k[f(644)](n,e)},LoVYA:function(n,e){return k[f(844)](n,e)},vEVTj:function(n,e){return k[f(844)](n,e)},uUeNg:function(n,e){return k[f(712)](n,e)},wDLuz:k[f(724)]};continue;case"6":n[f(949)](function(n){var e=f,t=Utils$2[e(601)]([n[e(699)+e(282)],v[e(662)](n[e(699)+e(282)],10)?":":"",n[e(960)+e(976)],B[e(594)+e(1034)]][e(574)]("")),t=Timeline$1[e(1008)](t);t[e(1074)]&&(s={ep:n,view:t})});continue}break}}),this[l(719)+l(830)]=!0);continue;case"4":var k={oUOPK:V[l(990)],AwaWe:V[l(468)],pAUbz:function(n,e){return V[l(836)](n,e)},NblyV:function(n,e){return V[l(249)](n,e)},qNWhr:V[l(634)],FbzgZ:function(n,e){return V[l(450)](n,e)},bInVu:V[l(289)],OAhhD:function(n,e){return V[l(249)](n,e)},TmpPN:function(n,e){return V[l(818)](n,e)},mZVZG:function(n,e){return V[l(330)](n,e)},YbeWA:V[l(879)],tbyDB:V[l(895)],IdlPQ:V[l(739)],BFpTM:function(n,e){return V[l(319)](n,e)},EOYim:function(n,e){return V[l(610)](n,e)},ZcRvt:function(n,e){return V[l(324)](n,e)},Khfec:V[l(457)],jJHZs:V[l(358)],QwdOE:function(n,e){return V[l(569)](n,e)},YkQsG:V[l(1101)],xUAAZ:V[l(616)],RClTO:V[l(925)],AbXQR:function(n,e){return V[l(681)](n,e)},EWJCx:V[l(449)],PqeOA:V[l(638)],XOjXt:function(n,e){return V[l(677)](n,e)},aKgzy:function(n,e){return V[l(1006)](n,e)},wvocd:function(n,e){return V[l(347)](n,e)},vodTt:function(n,e){return V[l(336)](n,e)},WXNQm:V[l(918)]};continue}break}},this[q(1033)]=function(){for(var n=q,e=V[n(371)][n(816)]("|"),t=0;;){switch(e[t++]){case"0":var c=Favorite[n(794)](B);continue;case"1":this[n(370)][n(286)+n(692)](V[n(448)]);continue;case"2":(c[n(378)]||Timeline$1[n(904)](B))&&this[n(809)](V[n(346)]);continue;case"3":this[n(370)][n(286)+n(692)](V[n(570)])[n(968)]="";continue;case"4":c[n(554)]&&this[n(809)](V[n(659)]);continue;case"5":c[n(533)]&&this[n(809)](V[n(595)]);continue;case"6":c[n(832)]&&this[n(809)](V[n(548)]);continue;case"7":c[n(633)]&&this[n(809)](V[n(266)]);continue}break}},this[q(273)]=function(n,i){for(var o=q,e=V[o(384)][o(816)]("|"),t=0;;){switch(e[t++]){case"0":var c=this;continue;case"1":Select[o(882)]({title:Lang[o(984)](V[o(335)]),items:s,onBack:function(){Controller[o(488)](u)},onCheck:function(n){var e=o;z[e(680)]&&(i[e(821)]=z[e(680)][e(821)]),n[e(923)]&&(Favorite[e(488)](n[e(923)],i),c[e(1033)]())},onSelect:function(n){var e=o;z[e(680)]&&(i[e(821)]=z[e(680)][e(821)]),n[e(795)]&&(Favorite[e(488)](n[e(923)],i),c[e(1033)]()),c[e(852)+"ct"]&&c[e(852)+"ct"](n,c[e(370)],i),Controller[e(488)](u)},onDraw:function(n,e){var t=o;if(e[t(795)])for(var c=h[t(926)][t(816)]("|"),r=0;;){switch(c[r++]){case"0":var i=h[t(799)]($,h[t(975)]);continue;case"1":n.on(h[t(596)],function(){Select[t(561)]()});continue;case"2":n[t(417)](h[t(922)])[t(765)]();continue;case"3":n[t(767)](i);continue;case"4":i[t(767)](Template.js(h[t(234)]));continue}break}}});continue;case"2":var r=Favorite[o(794)](i);continue;case"3":var a=[{title:Lang[o(984)](V[o(265)]),where:V[o(548)],checkbox:!0,checked:r[o(832)]},{title:Lang[o(984)](V[o(239)]),where:V[o(659)],checkbox:!0,checked:r[o(554)]},{title:Lang[o(984)](V[o(1100)]),where:V[o(266)],checkbox:!0,checked:r[o(633)]},{title:Lang[o(984)](V[o(721)]),where:V[o(595)],checkbox:!0,checked:r[o(533)]},{title:Lang[o(984)](V[o(1032)]),where:V[o(346)],checkbox:!0,checked:r[o(378)]}];continue;case"4":f[o(345)]&&f[o(416)]({title:Lang[o(984)](V[o(359)]),separator:!0});continue;case"5":var u=Controller[o(571)]()[o(245)];continue;case"6":object$2[o(352)][o(949)](function(c){var r=o,n={rcfsJ:V[r(729)],GWvDD:function(n,e){return V[r(264)](n,e)},sHJGu:V[r(871)],MVfhG:V[r(493)]};V[r(264)](c[r(735)],V[r(1036)])&&c[r(997)+r(377)]&&c[r(754)+r(560)]&&f[r(416)]({title:c[r(245)],subtitle:c[r(652)]||c[r(1048)+"n"],onSelect:function(){var t=r;document[t(465)][t(431)][t(439)](n[t(437)])&&Search[t(561)](),!i[t(679)]&&n[t(549)](i[t(821)],n[t(587)])?(Loading[t(517)](function(){var n=t;Loading[n(842)](),Controller[n(488)](u)}),TMDB[t(996)+t(464)]({type:i[t(245)]?"tv":n[t(856)],id:i.id},function(n){var e=t;Loading[e(842)](),i[e(679)]=n,c[e(754)+e(560)](i)})):c[t(754)+t(560)](i)}})});continue;case"7":this[o(718)]&&this[o(718)](s,this[o(370)],i);continue;case"8":var s=f[o(345)]?f[o(877)](a):a;continue;case"9":var f=[];continue;case"10":var h={YSQVe:V[o(254)],JFEQC:function(n,e){return V[o(632)](n,e)},FDwjN:V[o(841)],ndvmp:V[o(306)],gTobp:V[o(865)],Whefu:V[o(855)]};continue}break}},this[q(341)]=function(){for(var s,r=q,n=V[r(271)][r(816)]("|"),e=0;;){switch(n[e++]){case"0":var f=0;continue;case"1":Storage[r(477)][r(697)](V[r(455)],function(n){var e=r;V[e(499)](n[e(245)],V[e(956)])&&h[e(372)]()});continue;case"2":this[r(370)][r(573)+r(805)](V[r(426)],function(){var n=r;h[n(904)](),h[n(353)]&&h[n(353)](h[n(370)],B)});continue;case"3":this[r(467)]();continue;case"4":this[r(370)][r(573)+r(805)](V[r(306)],function(){var n=r;V[n(288)](typeof Trailer,V[n(381)])&&Trailer[n(333)](),h[n(1105)]&&h[n(1105)](h[n(370)],B)});continue;case"5":this[r(370)][r(573)+r(805)](V[r(763)],function(){var n=r;h[n(273)]&&h[n(273)](h[n(370)],B)});continue;case"6":this[r(370)][r(573)+r(805)](V[r(838)],function(){var n=r;i[n(1076)](clearTimeout,s),i[n(745)](d,h[n(370)])&&(Trailer[n(333)](),d=null),f++});continue;case"7":this[r(513)]();continue;case"8":var h=this;continue;case"9":var d=null;continue;case"10":this[r(370)][r(573)+r(805)](V[r(603)],V[r(857)](_asyncToGenerator,V[r(451)](_regeneratorRuntime)[r(858)](function n(){var t=r;return i[t(1018)](_regeneratorRuntime)[t(392)](function(n){for(var e=t;;)switch(n[e(314)]=n[e(797)]){case 0:h[e(904)](),h[e(547)]&&h[e(547)](h[e(370)],B);case 2:case i[e(463)]:return n[e(842)]()}},n)})));continue;case"11":this[r(370)][r(573)+r(805)](V[r(714)],V[r(632)](_asyncToGenerator,V[r(899)](_regeneratorRuntime)[r(858)](function n(){var e,t,c,o,a=r,u={xcntL:function(n){return i[_0x3d89(536)](n)},IbRsI:function(n,e){return i[_0x3d89(519)](n,e)},iIYJe:i[a(407)],lJBPy:function(n,e){return i[a(1076)](n,e)},bPRHF:i[a(463)],rGzXA:i[a(497)],Zcdlr:i[a(750)],ARAVa:i[a(394)],XrlMA:function(n,e){return i[a(745)](n,e)},xeOBr:i[a(1058)],jUTZk:i[a(667)],fgGfH:function(n,e){return i[a(823)](n,e)},roqzc:function(n,e,t){return i[a(421)](n,e,t)},swwoF:function(n,e){return i[a(1076)](n,e)}};return i[a(710)](_regeneratorRuntime)[a(392)](function(n){for(var r=a,i={pDxiy:function(n,e){return u[_0x3d89(248)](n,e)},jRyUp:u[r(409)],EqDOV:function(n,e){return u[r(531)](n,e)},XxWXW:u[r(479)]};;)switch(n[r(314)]=n[r(797)]){case 0:h[r(904)](),Trailer[r(333)](),u[r(531)](clearTimeout,s),e=Storage[r(862)](u[r(555)]),c=u[r(531)]($,u[r(604)])[r(413)](u[r(304)]),t=u[r(588)](Storage[r(862)](u[r(420)]),u[r(1021)]),c=u[r(470)](c,t),u[r(470)](e,!c)&&(z[r(980)]&&z[r(446)]||z[r(395)])&&(o=++f,s=u[r(369)](setTimeout,u[r(853)](_asyncToGenerator,u[r(285)](_regeneratorRuntime)[r(858)](function n(){var t,c=r;return u[c(285)](_regeneratorRuntime)[c(392)](function(n){for(var e=c;;)switch(n[e(314)]=n[e(797)]){case 0:if(i[e(1106)](o,f))return n[e(839)](i[e(527)]);n[e(797)]=2;break;case 2:return n[e(797)]=4,Trailer[e(682)](B);case 4:if(t=n[e(267)]){if(i[e(1106)](o,f))return n[e(839)](i[e(527)]);n[e(797)]=8}else n[e(797)]=11;break;case 8:Trailer[e(333)](),Trailer[e(706)](t,i[e(896)]($,h[e(370)])),d=h[e(370)];case 11:case i[e(800)]:return n[e(842)]()}},n)})),200)),h[r(478)]&&h[r(478)](h[r(370)],B);case 9:case u[r(479)]:return n[r(842)]()}},n)})));continue;case"12":continue;case"13":var i={gyCXw:function(n){return V[r(415)](n)},bWwpu:function(n,e){return V[r(288)](n,e)},lTCnB:V[r(914)],soHgf:function(n,e){return V[r(957)](n,e)},YZqzn:V[r(829)],BQOkd:V[r(506)],OXnhJ:V[r(380)],hLkOh:V[r(313)],dOlwC:function(n,e){return V[r(708)](n,e)},mTyda:V[r(946)],gOWBT:V[r(1040)],ALMnM:function(n,e){return V[r(1049)](n,e)},HkGVD:function(n,e,t){return V[r(748)](n,e,t)},qwKEd:function(n){return V[r(564)](n)},uIBVS:function(n){return V[r(899)](n)}};continue}break}},this[q(607)]=V[q(592)](_asyncToGenerator,V[q(723)](_regeneratorRuntime)[q(858)](function n(){var t,c,r,i,o,a,u,s,f,h,d,v=q,l={ztbkh:V[v(914)],dHyks:V[v(664)],zjivQ:function(n,e){return V[v(698)](n,e)},xlypm:function(n,e){return V[v(887)](n,e)},qsjvZ:function(n,e){return V[v(957)](n,e)},DpaSX:V[v(971)],ufuPi:V[v(350)],MtntP:V[v(801)],kIULg:V[v(329)],uenPn:V[v(638)],vbhzL:V[v(883)],PHzCs:V[v(739)],LUipf:V[v(981)],PTrno:V[v(511)],ZTiJO:function(n,e){return V[v(619)](n,e)},yhJGF:function(n,e){return V[v(450)](n,e)},aOlTW:V[v(541)],wtnjh:function(n,e){return V[v(610)](n,e)},fPSTi:V[v(443)],gduoX:V[v(247)],Wrdga:V[v(1031)],OvZEw:V[v(545)],jvpYN:V[v(937)],ySjGc:V[v(597)],tSRym:V[v(293)],TSsiG:V[v(837)],PUWdS:V[v(538)],QuBAy:function(n,e){return V[v(499)](n,e)},gZsWr:V[v(500)],amuCz:V[v(829)]};return V[v(899)](_regeneratorRuntime)[v(392)](function(n){for(var e=v;;)switch(n[e(314)]=n[e(797)]){case 0:if(z[e(395)]&&B.id){n[e(797)]=2;break}return n[e(839)](l[e(614)]);case 2:t=Storage[e(682)](l[e(880)],"ru"),o=[t,"en"],["en","ru"][e(576)](t)||o[e(416)]("ru"),c=!1,r="",i=0,o=o;case 8:if(l[e(769)](i,o[e(345)]))return a=o[i],n[e(314)]=10,n[e(797)]=13,Api[e(1027)+e(694)](B,a);n[e(797)]=53;break;case 13:if(!((u=n[e(267)])&&u[e(635)]&&l[e(438)](u[e(635)][e(345)],0))){n[e(797)]=43;break}u=l[e(280)](_createForOfIteratorHelper,u[e(635)]),n[e(314)]=16,u.s();case 18:if((h=u.n())[e(302)])n[e(797)]=35;else{if((h=h[e(1029)])[e(1057)][e(1041)](l[e(454)])||h[e(1057)][e(1041)](l[e(1103)]))return d=Api[e(624)](h[e(1057)],l[e(1090)]),(s=p[e(370)][e(286)+e(692)](l[e(583)]))||((s=document[e(726)+e(773)](l[e(498)]))[e(431)][e(520)](l[e(572)]),p[e(370)][e(286)+e(692)](l[e(1024)])[e(625)+"d"](s)),(f=document[e(726)+e(773)](l[e(357)]))[e(670)]=d,f[e(431)][e(520)](l[e(752)]),h[e(386)]&&h[e(292)]&&(d=l[e(876)](h[e(386)],h[e(292)]),l[e(826)](d,2.5)?f[e(431)][e(520)](l[e(337)]):l[e(663)](d,1.8)?f[e(431)][e(520)](l[e(743)]):l[e(769)](d,.8)?f[e(431)][e(520)](l[e(244)]):f[e(431)][e(520)](l[e(1109)])),s[e(968)]="",s[e(625)+"d"](f),c=!0,r=a,n[e(839)](l[e(627)],35);n[e(797)]=33}break;case 33:n[e(797)]=18;break;case 35:n[e(797)]=40;break;case 37:n[e(314)]=37,n.t0=n[l[e(665)]](16),u.e(n.t0);case 40:return n[e(314)]=40,u.f(),n[e(661)](40);case 43:n[e(797)]=48;break;case 45:n[e(314)]=45,n.t1=n[l[e(665)]](10),console[e(268)](l[e(924)],n.t1);case 48:if(c)return n[e(839)](l[e(627)],53);n[e(797)]=50;break;case 50:i++,n[e(797)]=8;break;case 53:h=p[e(370)][e(286)+e(692)](l[e(1082)]),d=p[e(370)][e(286)+e(692)](l[e(583)]),c?l[e(791)](r,t)?(d&&(d[e(890)][e(703)]=l[e(725)]),h&&(h[e(890)][e(703)]=l[e(621)])):(d&&(d[e(890)][e(703)]=l[e(621)]),h&&(h[e(890)][e(703)]=l[e(1107)])):(h&&(h[e(890)][e(703)]=l[e(1107)]),d&&(d[e(890)][e(703)]=l[e(621)]));case 56:case l[e(367)]:return n[e(842)]()}},n,null,[[10,45],[16,37,40,43]])})),this[q(372)]=function(){for(var n,e,t,c=q,r=V[c(1094)][c(816)]("|"),i=0;;){switch(r[i++]){case"0":ImageCache[c(401)](this[c(624)],o);continue;case"1":var o="";continue;case"2":this[c(776)]();continue;case"3":V[c(348)](a,V[c(582)])?(n=V[c(964)],e=V[c(582)],t=V[c(582)]):V[c(348)](a,V[c(801)])?(n=V[c(1035)],e=V[c(801)],t=V[c(801)]):V[c(757)](a,V[c(820)])&&(n=V[c(874)],e=V[c(820)],t=V[c(820)]);continue;case"4":var a=Storage[c(862)](V[c(956)]);continue;case"5":o=z[c(446)]&&B[c(948)+c(496)]||z[c(395)]&&B[c(948)+c(496)]||z[c(840)+c(528)]&&B[c(948)+c(496)]||z[c(260)+c(967)]&&B[c(948)+c(496)]?Api[c(624)](B[c(948)+c(496)],n):B[c(898)+"h"]?Api[c(624)](B[c(898)+"h"],e):B[c(606)]?Api[c(624)](B[c(606)],e):B[c(973)+"th"]?Api[c(624)](B[c(973)+"th"],t):B[c(869)]?B[c(869)]:B[c(624)]?B[c(624)]:V[c(909)];continue;case"6":continue;case"7":this[c(1064)]&&this[c(1064)](this[c(370)],B);continue}break}},this[q(333)]=function(){for(var n=q,e=V[n(1111)][n(816)]("|"),t=0;;){switch(e[t++]){case"0":this[n(624)][n(279)]=function(){};continue;case"1":this[n(624)]=null;continue;case"2":this[n(624)][n(670)]="";continue;case"3":this[n(370)]=null;continue;case"4":V[n(374)](C,this[n(370)]);continue;case"5":this[n(624)][n(473)]=function(){};continue}break}},this[q(334)]=function(n){var e=q;return n?this[e(370)]:V[e(374)]($,this[e(370)])}}!function(){for(var n=_0x3d89,e=_0x12c8();;)try{if(440075==-parseInt(n(238))+-parseInt(n(318))/2*(parseInt(n(868))/3)+-parseInt(n(780))/4+-parseInt(n(1028))/5*(parseInt(n(502))/6)+parseInt(n(283))/7+-parseInt(n(873))/8*(parseInt(n(900))/9)+parseInt(n(860))/10*(parseInt(n(658))/11))break;e.push(e.shift())}catch(n){e.push(e.shift())}}();

  function create$n() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var card = Template.js('more');
    card.querySelector('.card-more__title').innerText = Lang.translate('more');
    if (params.card_small) {
      card.classList.add('card-more--small');
    }
    if (params.card_big) {
      card.classList.add('card-more--big');
    }
    if (params.card_wide) {
      card.classList.add('card-more--wide');
    }
    this.create = function () {
      var _this = this;
      card.addEventListener('hover:focus', function (e) {
        _this.onFocus(e.target);
      });
      card.addEventListener('hover:enter', function (e) {
        _this.onEnter(e.target);
      });
    };
    this.render = function (js) {
      return js ? card : $(card);
    };
    this.destroy = function () {
      card.remove();
      card = null;
    };
  }

  function create$m() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var card = Template.js('back');
    card.querySelector('.card-back__title').innerText = Lang.translate('back_to_start');
    if (params.card_small) {
      card.classList.add('card-back--small');
    }
    if (params.card_big) {
      card.classList.add('card-more--big');
    }
    if (params.card_wide) {
      card.classList.add('card-more--wide');
    }
    this.create = function () {
      var _this = this;
      card.addEventListener('hover:focus', function (e) {
        _this.onFocus(e.target);
      });
      card.addEventListener('hover:enter', function (e) {
        _this.onEnter(e.target);
      });
    };
    this.render = function (js) {
      return js ? card : $(card);
    };
    this.destroy = function () {
      card.remove();
      card = null;
    };
  }

  function create$l(data) {
    var _this = this;
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var content = Template.js('items_line', {
      title: data.title
    });
    var body = content.querySelector('.items-line__body');
    var scroll = new create$f({
      horizontal: true,
      step: params.card_wide || params.card_big ? 600 : 300
    });
    var items = [];
    var active = 0;
    var tv = Platform.screen('tv');
    var view = (tv ? Prisma.Storage.field('interface_size') == 'small' ? 7 : 6 : 12) + (params.align_left ? 4 : 0);
    var more;
    var back;
    var last;
    var onmore = function onmore() {
      if (_this.onEnter) _this.onEnter();
      if (data.onMore) data.onMore(data);else if (_this.onMore) {
        _this.onMore(data);
      } else {
        Activity$1.push({
          url: data.url,
          title: data.title || Lang.translate('title_category'),
          component: 'category_full',
          page: 1,
          genres: params.genres,
          filter: data.filter,
          source: data.source || params.object.source
        });
      }
    };
    this.event = function (type) {
      Prisma.Listener.send('line', {
        line: this,
        type: type,
        params: params,
        data: data,
        scroll: scroll,
        body: body,
        items: items,
        active: active
      });
    };
    this.create = function () {
      var _this2 = this;
      this.event('create');
      scroll.body(true).classList.add('items-cards');
      content.querySelector('.items-line__title').innerHTML = data.title;
      content.classList.add('items-line--type-' + (params.type || 'none'));
      content.addEventListener('visible', this.visible.bind(this));
      data.results.slice(0, view).forEach(this.append.bind(this));
      body.appendChild(scroll.render(true));
      scroll.onWheel = function (step) {
        if (!Controller.own(_this2)) _this2.toggle();
        Controller.enabled().controller[step > 0 ? 'right' : 'left']();
      };
      scroll.onScroll = this.attach.bind(this);
    };

    /* 
    События
    
    this.onAppend    = function(){}
    this.onFocus     = function(){}
    this.onEnter     = function(){}
    this.onSelect    = function(){}
    this.onMore      = function(){}
    this.onFocusMore = function(){}
    this.onLeft      = function(){}
    this.onBack      = function(){}
    this.onDown      = function(){}
    this.onUp        = function(){}
    */

    this.visible = function () {
      var _this3 = this;
      data.results.slice(0, view).forEach(this.append.bind(this));
      if ((data.results.length >= 20 || data.more) && !params.nomore) {
        // Добавляем кнопку "Вернуться назад"
        var backButton = document.createElement('div');
        backButton.classList.add('items-line__back');
        backButton.classList.add('selector');
        backButton.innerText = Lang.translate('back_to_start');
        backButton.addEventListener('hover:enter', function () {
          // Сбрасываем позицию к первой карточке
          active = 0;

          // Обновляем скролл к первой карточке
          if (items.length > 0) {
            scroll.update(items[0].render(true), params.align_left ? false : true);

            // Фокусируемся на первой карточке если контроллер активен
            if (Controller.own(_this3)) {
              Controller.collectionFocus(items[0].render(true), scroll.render(true));
            }
            last = items[0].render(true);

            // Вызываем событие фокуса для первой карточки
            if (_this3.onFocus && items[0]) {
              _this3.onFocus(items[0].data || {});
            }
          }
        });

        // Создаем контейнер для кнопок
        var buttonsContainer = document.createElement('div');
        buttonsContainer.classList.add('items-line__buttons');
        buttonsContainer.appendChild(backButton);
        var button = document.createElement('div');
        button.classList.add('items-line__more');
        button.classList.add('selector');
        button.innerText = Lang.translate('more');
        button.addEventListener('hover:enter', onmore);
        buttonsContainer.appendChild(button);
        content.querySelector('.items-line__head').appendChild(buttonsContainer);
      }
      this.event('visible');
      Layer.visible(scroll.render(true));
    };
    this.append = function (element) {
      var _this4 = this;
      if (element.ready) return;
      element.ready = true;
      var card = params.cardClass ? params.cardClass(element, params) : element.cardClass ? element.cardClass(element, params) : new Card(element, params);
      card.create();
      card.onFocus = function (target, card_data) {
        last = target;
        var prev_active = active;
        active = items.indexOf(card);
        if (active > 0 || prev_active > active) scroll.update(items[active].render(true), params.align_left ? false : true);
        if (!data.noimage) Background.change(Utils$2.cardImgBackground(card_data));
        if (_this4.onFocus) _this4.onFocus(card_data);
      };
      card.onEnter = function (target, card_data) {
        last = target;
        if (_this4.onEnter) _this4.onEnter(target, card_data);
        if (_this4.onSelect) return _this4.onSelect(target, card_data);
        if (!card_data.source) card_data.source = params.object.source;

        // Очищаем трейлер при переходе к другому фильму
        if (typeof window.clearTrailer === 'function') {
          window.clearTrailer();
        }
        if (typeof card_data.gender !== 'undefined') {
          Activity$1.push({
            url: card_data.url,
            title: Lang.translate('title_person'),
            component: 'actor',
            id: card_data.id,
            source: card_data.source || params.object.source
          });
        } else {
          Activity$1.push({
            url: card_data.url,
            component: 'full',
            id: card_data.id,
            method: card_data.name ? 'tv' : 'movie',
            card: card_data,
            source: card_data.source || params.object.source
          });
        }
      };
      card.onHover = function (target, card_data) {
        if (_this4.onHover) _this4.onHover(card_data);
      };
      card.onVisible = function () {
        if (Controller.own(_this4)) Controller.collectionAppend(card.render(true));
      };
      if (this.onMenu) card.onMenu = this.onMenu;
      if (params.card_events) {
        for (var i in params.card_events) {
          card[i] = params.card_events[i];
        }
      }
      scroll.append(card.render(true));
      items.push(card);
      if (this.onAppend) this.onAppend(card);
      this.event('append');
      return card.render(true);
    };
    this.more = function () {
      var _this5 = this;
      more = new create$n(params);
      more.create();
      more.onFocus = function (target) {
        last = target;
        active = items.indexOf(more);
        scroll.update(more.render(true), params.align_left ? false : true);
        if (_this5.onFocusMore) _this5.onFocusMore();
      };
      more.onEnter = onmore.bind(this);
      scroll.append(more.render(true));
      items.push(more);
      return more.render(true);
    };
    this.back = function () {
      var _this6 = this;
      back = new create$m(params);
      back.create();
      back.onFocus = function (target) {
        last = target;
        active = items.indexOf(back);
        scroll.update(back.render(true), params.align_left ? false : true);
        if (_this6.onFocusBack) _this6.onFocusBack();
      };
      back.onEnter = function () {
        active = 0;
        scroll.update(items[0].render(true), params.align_left ? false : true);
        if (Controller.own(_this6)) Controller.collectionFocus(items[0].render(true), scroll.render(true));
      };
      scroll.append(back.render(true));
      items.push(back);
      return back.render(true);
    };
    this.attach = function () {
      var size = tv ? (Math.round(active / view) + 1) * view + 1 : data.results.length;
      data.results.slice(0, size).filter(function (e) {
        return !e.ready;
      }).forEach(this.append.bind(this));
      if (!more && !params.nomore && data.results.length == data.results.filter(function (e) {
        return e.ready;
      }).length && data.results.length >= 20) {
        var back_item = this.back();
        var more_item = this.more();
        if (Controller.own(this)) {
          Controller.collectionAppend(back_item);
          Controller.collectionAppend(more_item);
        }
      }
      Layer.visible(scroll.render(true));
    };
    this.toggle = function () {
      var _this7 = this;
      Controller.add('items_line', {
        link: this,
        toggle: function toggle() {
          Controller.collectionSet(scroll.render(true));
          Controller.collectionFocus(items.length ? last : false, scroll.render(true));
          if (_this7.onToggle) _this7.onToggle(_this7);
          _this7.event('toggle');
        },
        update: function update() {},
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else if (_this7.onLeft) _this7.onLeft();else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('items_line');
    };
    this.render = function (js) {
      return js ? content : $(content);
    };
    this.destroy = function () {
      Arrays.destroy(items);
      scroll.destroy();
      content.remove();
      items = null;
      this.event('destroy');
    };
  }

  function create$k(source) {
    var timer,
      html = $('<div></div>'),
      items = [],
      active = 0,
      query;
    var source_name = 'search_' + source.title.toLowerCase();
    this.listener = start$8();
    this.params = source.params;
    this.create = function () {
      this.empty();
    };
    this.recall = function (last_query) {
      var _this = this;
      Cache.getData('other', source_name + '_' + (last_query || 'last'), 60 * 24).then(function (data) {
        _this.clear();
        html.empty();
        data.forEach(_this.build.bind(_this));
        _this.listener.send('finded', {
          count: _this.count(data),
          data: data
        });
      })["catch"](function () {});
    };
    this.empty = function () {
      html.empty().append($('<div class="search-looking"><div class="search-looking__text">' + Lang.translate(query ? source.params.nofound || 'search_nofound' : source.params.start_typing || 'search_start_typing') + '</div></div>'));
    };
    this.loading = function () {
      this.listener.send('start');
      html.empty().append($('<div><div class="broadcast__text">' + Lang.translate('search_searching') + '</div><div class="broadcast__scan"><div></div></div></div>'));
    };
    this.cancel = function () {
      clearTimeout(timer);
      if (source.onCancel) source.onCancel();
    };
    this.search = function (value, immediately) {
      var _this2 = this;
      clearTimeout(timer);
      if (value.length >= 3) {
        timer = setTimeout(function () {
          if (query == value) return;
          query = value;
          _this2.loading();
          source.search({
            query: encodeURIComponent(value)
          }, function (data) {
            _this2.clear();
            _this2.dmca(data);
            var count = _this2.count(data);
            if (count > 0) {
              html.empty();
              var copy = Arrays.clone(data);
              Cache.rewriteData('other', source_name + '_' + value, copy)["catch"](function () {});
              Cache.rewriteData('other', source_name + '_last', copy)["catch"](function () {});
              data.forEach(_this2.build.bind(_this2));
            } else _this2.empty();
            _this2.listener.send('finded', {
              count: count,
              data: data
            });
          });
        }, immediately ? 10 : 2500);
      } else {
        query = value;
        this.clear();
        if (!value) this.recall('');
      }
    };
    this.count = function (result) {
      var count = 0;
      result.forEach(function (data) {
        count += data.results.length;
      });
      return count;
    };
    this.dmca = function (result) {
      if (Arrays.isArray(window.prisma_settings.dcma)) {
        result.forEach(function (data) {
          data.results = data.results.filter(function (item) {
            return !window.prisma_settings.dcma.find(function (b) {
              return b.id == item.id && b.cat == (item.name ? 'tv' : 'movie');
            });
          });
        });
      }
    };
    this.build = function (data) {
      var _this3 = this;
      data.noimage = true;
      source.params.card_view = 6;
      if (Arrays.isArray(window.prisma_settings.dcma)) {
        data.results = data.results.filter(function (item) {
          return !window.prisma_settings.dcma.find(function (b) {
            return b.id == item.id && b.cat == (item.name ? 'tv' : 'movie');
          });
        });
      }
      var line = new create$l(data, source.params);
      line.onDown = this.down.bind(this);
      line.onUp = this.up.bind(this);
      line.onBack = this.back.bind(this);
      line.onLeft = function () {};
      line.onMore = function () {
        if (source.onMore) source.onMore({
          data: data,
          line: line,
          query: query
        }, function () {
          _this3.listener.send('select');
        });
      };
      if (source.onSelect) {
        line.onSelect = function (e, element) {
          source.onSelect({
            data: data,
            line: line,
            query: query,
            element: element
          }, function () {
            _this3.listener.send('select');
          });
        };
      } else {
        line.onEnter = function () {
          _this3.listener.send('select');
        };
      }
      if (source.onRender) source.onRender(line);
      if (source.onAppend) line.onAppend = source.onAppend;
      line.create();
      items.push(line);
      html.append(line.render());
    };
    this.any = function () {
      return items.length;
    };
    this.back = function () {
      this.listener.send('back');
    };
    this.down = function () {
      active++;
      active = Math.min(active, items.length - 1);
      items[active].toggle();
      this.listener.send('toggle', {
        element: items[active].render()
      });
    };
    this.up = function () {
      active--;
      if (active < 0) this.listener.send('up');
      if (active < 0) {
        active = 0;
      } else {
        items[active].toggle();
        this.listener.send('toggle', {
          element: items[active].render()
        });
      }
    };
    this.clear = function () {
      this.empty();
      active = 0;
      Arrays.destroy(items);
      items = [];
      this.listener.send('clear');
    };
    this.toggle = function () {
      var _this4 = this;
      Controller.add('search_results', {
        invisible: true,
        toggle: function toggle() {
          Controller.collectionSet(html);
          if (items.length) {
            items[active].toggle();
            _this4.listener.send('toggle', {
              element: items[active].render()
            });
          }
        },
        back: function back() {
          _this4.listener.send('back');
        }
      });
      Controller.toggle('search_results');
    };
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      clearTimeout(timer);
      this.clear();
      this.listener.destroy();
    };
  }

  var stop_keys = ['пор', 'порн', 'порно', 'секс', 'член', 'por', 'porn', 'porno', 'sex', 'hot', 'xxx'];
  function create$j() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var scroll,
      last,
      active,
      last_query = '';
    var html = $('<div></div>'),
      results = [];
    this.listener = start$8();
    this.create = function () {
      scroll = new create$f({
        over: true,
        mask: false,
        horizontal: true
      });
      var sources = params.sources || Api.availableDiscovery();
      sources.forEach(this.build.bind(this));
      if (!params.sources) {
        params.additional.forEach(this.build.bind(this));
      }
      this.enable(results[0]);
      if (results.length < 2) {
        scroll.render().addClass('hide');
        html.addClass('search__results-offset');
      }
      results.forEach(function (source) {
        source.recall(last_query);
      });
    };
    this.enable = function (result) {
      if (active) active.render().detach();
      active = result;
      if (active.params.lazy && last_query) active.search(last_query, true);
      html.empty().append(result.render());
      scroll.render().find('.search-source').removeClass('active').eq(results.indexOf(result)).addClass('active');
      Layer.visible(result.render());
    };
    this.build = function (source) {
      var _this = this;
      var tab = $('<div class="search-source selector"><div class="search-source__tab">' + source.title + '</div><div class="search-source__count">0</div></div>');
      var result = new create$k(source);
      result.create();
      if (source.params.lazy) tab.find('.search-source__count').remove();
      result.listener.follow('start', function () {
        tab.addClass('search-source--loading');
        tab.find('.search-source__count').html('&nbsp;');
      });
      result.listener.follow('clear', function () {
        tab.find('.search-source__count').text(0);
      });
      result.listener.follow('finded', function (e) {
        tab.removeClass('search-source--loading');
        tab.find('.search-source__count').text(e.count);
        if (active == result) Layer.visible(result.render());
        _this.listener.send('finded', {
          source: source,
          result: result,
          count: e.count,
          data: e.data
        });
      });
      result.listener.follow('up', function (e) {
        if (results.length < 2) _this.listener.send('up');else _this.toggle();
      });
      result.listener.follow('select', this.listener.send.bind(this.listener, 'select'));
      result.listener.follow('back', this.listener.send.bind(this.listener, 'back'));
      result.listener.follow('toggle', function (e) {
        _this.listener.send('toggle', {
          source: source,
          result: e.result,
          element: e.element
        });
      });
      tab.on('hover:enter', function () {
        _this.enable(result);
      }).on('hover:focus', function (e) {
        last = e.target;
        scroll.update($(e.target));
      });
      scroll.append(tab);
      results.push(result);
      this.listener.send('create', {
        source: source,
        result: result
      });
    };
    this.toggle = function (from_search) {
      var _this2 = this;
      Controller.add('search_sources', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last, scroll.render());
          if (from_search && results.length < 2 && active.any()) active.toggle();
        },
        update: function update() {},
        up: function up() {
          _this2.listener.send('up');
        },
        down: function down() {
          if (active.any()) active.toggle();
        },
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          Navigator.move('left');
        },
        back: function back() {
          _this2.listener.send('back');
        }
      });
      Controller.toggle('search_sources');
    };
    this.search = function (query, immediately) {
      results.forEach(function (result) {
        return result.cancel();
      });
      if (!stop_keys.find(function (k) {
        return k == query.toLowerCase();
      })) {
        last_query = query;
        this.listener.send('search', {
          query: query,
          immediately: immediately
        });
        results.forEach(function (result) {
          if (!result.params.lazy || active === result) result.search(query, immediately);
        });
      }
    };
    this.cancel = function () {
      results.forEach(function (result) {
        return result.cancel();
      });
    };
    this.tabs = function () {
      return scroll.render();
    };
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      scroll.destroy();
      results.forEach(function (result) {
        return result.cancel();
      });
      this.listener.destroy();
    };
  }

  function create$i() {
    var scroll,
      last,
      keys = [];
    this.listener = start$8();
    this.create = function () {
      var _this = this;
      scroll = new create$f({
        over: true,
        mask: false,
        horizontal: true
      });
      scroll.onWheel = function (step) {
        _this.toggle();
        Controller.enabled().controller[step > 0 ? 'right' : 'left']();
      };
      scroll.onScroll = function (step) {};
      keys = Storage.get('search_history', '[]');
      keys.map(function (v) {
        return v;
      }).reverse().slice(0, 15).forEach(function (key) {
        _this.append(key);
      });
      if (!keys.length) scroll.append($('<div class="selector search-history-empty">' + Lang.translate('search_empty') + '</div>'));
    };
    this.append = function (value) {
      var _this2 = this;
      var key = $('<div class="search-history-key selector"><div><span>' + value + '</span></div></div>');
      key.on('hover:enter', function () {
        _this2.listener.send('enter', {
          value: value
        });
      }).on('hover:focus', function (e) {
        last = e.target;
        scroll.update($(e.target), true);
      }).on('hover:long', function () {
        var selc = scroll.render().find('.selector');
        Arrays.remove(keys, value);
        Storage.set('search_history', keys);
        Storage.remove('search_history', value);
        var index = selc.index(key);
        if (index > 0) last = selc.eq(index - 1)[0];else if (selc[index + 1]) last = selc.eq(index + 1)[0];
        key.remove();
        if (selc.length - 1 <= 0) last = false;
        Controller.collectionFocus(last, scroll.render());
      });
      scroll.append(key);
    };
    this.add = function (value) {
      var inx = keys.indexOf(value);
      if (inx == -1) {
        keys.push(value);
      } else {
        Arrays.remove(keys, value);
        keys.push(value);
      }
      Storage.set('search_history', keys);
    };
    this.toggle = function () {
      var _this3 = this;
      Controller.add('search_history', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last, scroll.render());
        },
        update: function update() {},
        up: function up() {
          _this3.listener.send('up');
        },
        down: function down() {
          _this3.listener.send('down');
        },
        right: function right() {
          Navigator.move('right');
        },
        back: function back() {
          _this3.listener.send('back');
        },
        left: function left() {
          Navigator.move('left');
        }
      });
      Controller.toggle('search_history');
    };
    this.any = function () {
      return keys.length;
    };
    this.render = function () {
      return scroll.render();
    };
    this.destroy = function () {
      scroll.destroy();
      this.listener.destroy();
      keys = null;
      last = null;
    };
  }

  function HeadBackward (title, use_js) {
    var head = Template[use_js ? 'js' : 'get']('head_backward', {
      title: title
    });
    if (use_js) {
      head.querySelector('.head-backward__button').addEventListener('click', function () {
        Controller.back();
      });
      head.querySelector('.head-backward__title').innerText = title;
    } else {
      head.find('.head-backward__button').on('click', function () {
        Controller.back();
      });
    }
    return head;
  }

  var html$i = $('<div class="main-search"></div>'),
    search$2,
    history,
    sources$1,
    keyboard$1,
    scroll$1,
    input$1 = '',
    params$1 = {},
    additional = [],
    listener$c = start$8();
  function open$4() {
    var use_params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    params$1 = use_params;
    input$1 = use_params.input || '';
    $('body').toggleClass('ambience--enable', true);
    $('body').toggleClass('search--open', true);
    create$h();
    toggle$7();
    Layer.update(html$i[0]);
    listener$c.send('open');
  }
  function toggle$7() {
    Controller.add('search', {
      invisible: true,
      toggle: function toggle() {
        keyboard$1.toggle();
      },
      update: function update() {},
      back: destroy$8
    });
    Controller.toggle('search');
  }
  function scrollTo(element) {
    scroll$1.update(element ? element : search$2.find('.search__input'), true);
  }
  function create$h() {
    search$2 = Template.get('search');
    scroll$1 = new create$f({
      step: 300
    });
    scroll$1.height();
    scroll$1.render().addClass('search');
    scroll$1.append(HeadBackward(Lang.translate('search')));
    scroll$1.append(search$2);
    html$i.append(scroll$1.render());
    scroll$1.onScroll = function (step) {
      Layer.visible(scroll$1.render(true));
    };
    if (Storage.field('keyboard_type') !== 'prisma') search$2.find('.search__input').hide();
    createKeyboard();
    createHistory();
    createSources();
    keyboard$1.value(input$1);
    sources$1.search(input$1, true);
  }
  function createSources() {
    sources$1 = new create$j({
      sources: params$1.sources,
      additional: additional
    });
    listener$c.send('sources', {
      sources: sources$1
    });
    sources$1.create();
    sources$1.listener.follow('back', destroy$8);
    sources$1.listener.follow('up', function () {
      if (history.any()) history.toggle();else keyboard$1.toggle();
      scrollTo();
    });
    sources$1.listener.follow('toggle', function (e) {
      scrollTo(e.element);
    });
    sources$1.listener.follow('select', function (e) {
      if (input$1) history.add(input$1);
      destroy$8();
    });
    search$2.find('.search__sources').append(sources$1.tabs());
    search$2.find('.search__results').append(sources$1.render());
  }
  function createHistory() {
    history = new create$i();
    history.create();
    history.listener.follow('down', function () {
      sources$1.toggle(true);
    });
    history.listener.follow('up', function () {
      keyboard$1.toggle();
    });
    history.listener.follow('enter', function (event) {
      keyboard$1.value(event.value);
      sources$1.search(event.value, true);
    });
    history.listener.follow('back', destroy$8);
    search$2.find('.search__history').append(history.render());
  }
  function createKeyboard() {
    keyboard$1 = new create$2({
      layout: 'search'
    });
    keyboard$1.create();
    keyboard$1.listener.follow('change', function (event) {
      input$1 = event.value;
      if (input$1) {
        search$2.find('.search__input').toggleClass('filled', true).html(input$1.replace(/\s/g, '&nbsp;'));
        sources$1.search(input$1);
      } else {
        search$2.find('.search__input').toggleClass('filled', false).text(Lang.translate('search_input') + '...');
        sources$1.search('');
      }
    });
    keyboard$1.listener.follow('down', function () {
      if (history.any()) history.toggle();else sources$1.toggle();
    });
    keyboard$1.listener.follow('hover', function () {
      input$1.length <= 2 ? sources$1.cancel() : sources$1.search(input$1);
    });
    keyboard$1.listener.follow('back', destroy$8);
  }
  function addSource(source) {
    additional.push(source);
  }
  function removeSource(source) {
    Arrays.remove(additional, source);
  }
  function render$d() {
    return html$i;
  }
  function destroy$8() {
    keyboard$1.destroy();
    history.destroy();
    sources$1.destroy();
    search$2.remove();
    html$i.empty();
    $('body').toggleClass('ambience--enable', false);
    $('body').toggleClass('search--open', false);
    if (params$1.onBack) params$1.onBack();else Controller.toggle('content');
    params$1 = {};
    input$1 = '';
    listener$c.send('close');
  }
  function close$5() {
    destroy$8();
  }
  var Search = {
    listener: listener$c,
    open: open$4,
    render: render$d,
    addSource: addSource,
    removeSource: removeSource,
    close: close$5
  };

  var html$h = $('<div class="processing hide"><div><div class="processing__loader"></div><div class="processing__text"></div></div></div>'),
    text = html$h.find('.processing__text');
  var processing = [];
  function init$I() {
    update$7();
  }
  function update$7() {
    if (processing.length) {
      text.text(processing.length > 1 ? processing.length : '1 / ' + Math.round(processing[0].percent) + '%');
      var complite = processing.find(function (a) {
        return a.percent >= 100;
      });
      if (complite) Prisma.Arrays.remove(processing, complite);
      requestAnimationFrame(update$7);
    } else html$h.addClass('hide');
  }
  function push$4(id, percent) {
    var find = processing.find(function (a) {
      return a.id == id;
    });
    if (!find) {
      processing.push({
        id: id,
        percent: percent,
        start: Date.now()
      });
      html$h.removeClass('hide');
      update$7();
    } else find.percent = percent;
  }
  function render$c(js) {
    return js ? html$h[0] : html$h;
  }
  var Processing = {
    init: init$I,
    push: push$4,
    render: render$c
  };

  var html$g;
  var last$3;
  var activi = false;
  function observe$2() {
    if (typeof MutationObserver == 'undefined') return;
    var observer = new MutationObserver(function (mutations) {
      for (var i = 0; i < mutations.length; i++) {
        var mutation = mutations[i];
        if (mutation.type == 'childList' && !mutation.removedNodes.length) {
          var selectors = Array.from(mutation.target.querySelectorAll('.selector'));
          selectors.forEach(function (s) {
            $(s).unbind('hover:focus hover:hover hover:touch').on('hover:focus hover:hover hover:touch', function (e) {
              last$3 = e.target;
            });
          });
        }
      }
    });
    observer.observe(html$g[0], {
      childList: true,
      subtree: true
    });
  }
  function appExit() {
    Activity$1.out();
    if (Platform.is('apple_tv')) window.location.assign('exit://exit');
    if (Platform.is('tizen')) tizen.application.getCurrentApplication().exit();
    if (Platform.is('webos')) window.close();
    if (Platform.is('android')) ExitHelper.exitApp();
    if (Platform.is('orsay')) Orsay.exit();
    if (Platform.is('nw')) nw.Window.get().close();
  }
  function init$H() {
    html$g = Template.get('head');
    if (!window.prisma_settings.feed) html$g.find('.open--feed').remove();
    if (!window.prisma_settings.account_use || window.prisma_settings.disable_features.ads) html$g.find('.open--premium').remove();
    if (window.local_prisma) html$g.find('.head__logo-icon').append('<span class="head__logo-local">local</span>');
    html$g.find('.head__actions').prepend(Processing.render());
    Utils$2.time(html$g);
    html$g.find('.selector').data('controller', 'head').on('hover:focus hover:hover hover:touch', function (event) {
      last$3 = event.target;
    });
    observe$2();
    html$g.find('.open--settings').on('hover:enter', function () {
      ParentalControl.personal('settings', function () {
        Controller.toggle('settings');
      }, false, true);
    });
    html$g.find('.open--notice').on('hover:enter', Notice$1.open.bind(Notice$1));
    html$g.find('.open--search').on('hover:enter', Search.open.bind(Search));
    html$g.find('.head__logo-icon,.head__menu-icon').on('click', function (e) {
      if (DeviceInput.canClick(e.originalEvent)) Controller.toggle('menu');
    });
    Storage.listener.follow('change', function (e) {
      if (e.name == 'account') {
        html$g.find('.open--profile').toggleClass('hide', e.value.token && window.prisma_settings.account_use ? false : true);
      }
      if (e.name == 'account_user') {
        html$g.find('.open--premium').toggleClass('hide', Account.hasPremium() || window.prisma_settings.white_use ? true : !Lang.selected(['ru', 'uk', 'be']));
      }
    });
    html$g.find('.full-screen').on('hover:enter', function () {
      Utils$2.toggleFullscreen();
    }).toggleClass('hide', Platform.tv() || Platform.is('android') || !Utils$2.canFullScreen());
    if (!Lang.selected(['ru', 'uk', 'be'])) {
      html$g.find('.open--feed').remove();
    } else {
      html$g.find('.open--feed').on('hover:enter', function () {
        Activity$1.push({
          url: '',
          title: Lang.translate('menu_feed'),
          component: 'feed',
          page: 1
        });
      });
    }
    html$g.find('.open--premium').toggleClass('hide', Account.hasPremium() || window.prisma_settings.white_use ? true : !Lang.selected(['ru', 'uk', 'be'])).on('hover:enter', function () {
      Modal.open({
        title: '',
        size: 'full',
        mask: true,
        html: Template.get('prisma_premium_modal'),
        onBack: function onBack() {
          Modal.close();
          Controller.toggle('head');
        }
      });
    });
    html$g.find('.open--exit').on('hover:enter', appExit);
    Controller.add('head', {
      toggle: function toggle() {
        Controller.collectionSet(html$g, false, true);
        Controller.collectionFocus(last$3, html$g, true);
      },
      right: function right() {
        Navigator.move('right');
      },
      left: function left() {
        if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
      },
      down: function down() {
        Controller.toggle('content');
      },
      back: function back() {
        Activity$1.backward();
      }
    });
    var timer;
    var broadcast = html$g.find('.open--broadcast').hide();
    broadcast.on('hover:enter', function () {
      Broadcast.open({
        type: 'card',
        object: Activity$1.extractObject(activi)
      });
    });
    Prisma.Listener.follow('activity', function (e) {
      if (e.type == 'start') activi = e.object;
      clearTimeout(timer);
      timer = setTimeout(function () {
        if (activi) {
          if (activi.component !== 'full') {
            broadcast.hide();
            activi = false;
          }
        }
      }, 1000);
      if (e.type == 'start' && e.component == 'full') {
        broadcast.show();
        activi = e.object;
      }
    });
  }
  function title$1(title) {
    html$g.find('.head__title').text(title || '');
  }
  function render$b() {
    return html$g;
  }
  var Head = {
    render: render$b,
    title: title$1,
    init: init$H,
    appExit: appExit
  };

  var permit = {};
  Object.defineProperty(permit, 'account', {
    get: function get() {
      return Storage.get('account', '{}');
    }
  });
  Object.defineProperty(permit, 'token', {
    get: function get() {
      return permit.account.token;
    }
  });
  Object.defineProperty(permit, 'use', {
    get: function get() {
      return permit.token && Storage.field('account_use') && window.prisma_settings.account_use;
    }
  });
  Object.defineProperty(permit, 'sync', {
    get: function get() {
      return permit.use && window.prisma_settings.account_sync;
    }
  });

  var network$a = new create$e();
  function url$4() {
    return Utils$2.protocol() + object$2.pris_domain + '/api/';
  }
  function load$4(path) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return new Promise(function (resolve, reject) {
      if (permit.token) {
        var account = permit.account;
        Arrays.extend(params, {
          headers: {
            token: account.token,
            profile: account.profile.id
          },
          timeout: 8000
        });
        network$a.silent(url$4() + path, resolve, function (e) {
          reject(network$a.errorCode(e));
        }, false, params);
      } else {
        reject(403);
      }
    });
  }
  var Api$1 = {
    url: url$4,
    load: load$4
  };

  /**
   * Обновить таймлайн
   * @param {Boolean} full обновить полностью или только новые элементы
   * @param {Boolean} visual обновить визуально Timeline.update когда socket открылся
   */

  function update$6() {
    var full = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var visual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (permit.sync) {
      var url = 'timeline/all';
      var all = full;
      console.log('Timeline', 'full update:', Utils$2.parseTime(Storage.get('timeline_full_update_time', '0')).briefly);
      if (Storage.get('timeline_full_update_time', '0') + 1000 * 60 * 60 * 24 < Date.now() && !visual) all = true;
      if (all) url = url + '?full=true';
      Api$1.load(url).then(function (result) {
        var name = 'file_view_' + permit.account.profile.id;
        if (visual) {
          for (var i in result.timelines) {
            var time = result.timelines[i];
            time.received = true;
            Timeline$1.update(time);
          }
        } else {
          if (window.localStorage.getItem(name) === null) {
            Storage.set(name, Arrays.clone(Storage.cache('file_view', 10000, {})));
          }
          var viewed = Storage.cache(name, 10000, {});
          for (var _i in result.timelines) {
            var _time = result.timelines[_i];
            viewed[_i] = _time;
            Arrays.extend(viewed[_i], {
              duration: 0,
              time: 0,
              percent: 0
            });
            delete viewed[_i].hash;
          }

          //  Storage.set(name, viewed)

          if (all) Storage.set('timeline_full_update_time', Date.now());
          Storage.set(name, viewed, false, function () {
            Storage.set('timeline_full_update_time', 0);
          });
        }
        console.log('Timeline', 'update success: total', Arrays.getKeys(Storage.get(name, '{}')).length, 'items', 'load:', Arrays.getKeys(result.timelines).length, 'items');
      })["catch"](function (e) {
        if (e == 403) {
          Storage.set('timeline_full_update_time', 0);
        } else {
          console.log('Timeline', 'update error:', e);
        }
      });
    }
  }
  var Timeline = {
    update: update$6
  };

  var body$1;
  var network$9 = new create$e();
  var listener$b = start$8();
  var start_time = Date.now();
  var user_data;
  var notice_load = {
    time: 0,
    data: []
  };
  var bookmarks = [];
  function api$2() {
    return Utils$2.protocol() + object$2.pris_domain + '/api/';
  }

  /**
   * Запуск
   */
  function init$G() {
    if (!window.prisma_settings.account_use) return;
    Settings.listener.follow('open', function (e) {
      body$1 = null;
      if (e.name == 'account') {
        body$1 = e.body;
        renderPanel();
        check$2();
      }
    });
    Storage.listener.follow('change', function (e) {
      if (e.name == 'account_use') Timeline.update(true);
      if (e.name == 'account') {
        Timeline.update(true);
        updateProfileIcon();
      }
      if (e.name == 'protocol') {
        updateProfileIcon();
        update$5();
      }
    });
    Socket.listener.follow('open', checkValidAccount);
    Socket.listener.follow('open', function () {
      if (Date.now() - start_time > 1000 * 60 * 5) Timeline.update(false, true);
    });
    Favorite.listener.follow('add,added', function (e) {
      save$2('add', e.where, e.card);
    });
    Favorite.listener.follow('remove', function (e) {
      if (e.method == 'id') save$2('remove', e.where, e.card);
    });
    Head.render().find('.head__body .open--profile').on('hover:enter', function () {
      showProfiles('head');
    });
    network$9.silent(Utils$2.protocol() + object$2.pris_domain + '/api/blocked', function (dcma) {
      window.prisma_settings.dcma = dcma;
    });
    setInterval(checkValidAccount, 1000 * 60 * 10);
    notice_load.data = Storage.get('account_notice', '[]');
    checkProfile(function () {
      getUser();
      Timeline.update();
      updateProfileIcon();

      // persons()
    });

    // ParentalControl.add('account_profiles',{
    //     title: 'account_profiles'
    // })
  }
  function task$3(call) {
    if (!window.prisma_settings.account_use) return call();
    update$5(call);
  }
  function checkProfile(call) {
    var account = Storage.get('account', '{}');
    if (account.token && window.prisma_settings.account_use) {
      if (account.profile.id) call();else {
        network$9.silent(api$2() + 'profiles/all', function (result) {
          var main = result.profiles.find(function (p) {
            return p.main;
          });
          if (main) {
            account.profile = main;
            Storage.set('account', account, true);
          }
          call();
        }, function () {
          setTimeout(checkProfile.bind(checkProfile, call), 1000 * 60);
        }, false, {
          headers: {
            token: account.token
          },
          timeout: 5000
        });
      }
    } else {
      Storage.set('account_user', '');
    }
  }
  function checkValidAccount() {
    var account = Storage.get('account', '{}');
    if (account.token) {
      Socket.send('check_token', {});
    }
  }
  function updateProfileIcon() {
    var account = Storage.get('account', '{}');
    var button = Head.render().find('.head__body .open--profile').toggleClass('hide', !Boolean(account.token));
    if (account.token) {
      var img = button.find('img')[0];
      if (!img) {
        button.empty();
        button.append('<img class="profile-icon" />');
        img = button.find('img')[0];
      }
      if (img) {
        img.onerror = function () {
          img.src = './img/img_load.svg';
        };
        var validIcons = ['l_1', 'l_2', 'l_3', 'l_4', 'l_5', 'l_6', 'l_7', 'l_8', 'l_9', 'l_10'];
        var icon = account.profile && account.profile.icon && validIcons.includes(account.profile.icon) ? account.profile.icon : 'l_1';

        // Правильный путь к иконкам
        img.src = Utils$2.protocol() + object$2.pris_domain + '/img/profiles/' + icon + '.png?t=' + Date.now();
      }
    }
  }

  // function persons(secuses, error){
  //     let account = Storage.get('account','{}')

  //     if(account.token && window.prisma_settings.account_use){
  //         network.silent(api() + 'person/list',(data)=>{
  //             Storage.set('person_subscribes_id',data.results.map(a=>a.person_id))

  //             if(secuses) secuses(data.results)
  //         },error ? error : false,false,{
  //             headers: {
  //                 token: account.token
  //             }
  //         })
  //     }
  //     lse if(error) error()
  // }

  function getUser() {
    var account = Storage.get('account', '{}');
    if (account.token && window.prisma_settings.account_use) {
      $.ajax({
        url: api$2() + 'users/get',
        type: 'GET',
        dataType: 'json',
        timeout: 10000,
        headers: {
          token: account.token
        },
        success: function success(data) {
          user_data = data.user;
          Storage.set('account_user', JSON.stringify(data.user));
        }
      });
    }
  }
  function checkPremium() {
    var user = user_data || Storage.get('account_user', '{}');
    return user.id ? Utils$2.countDays(Date.now(), user.premium) : 0;
  }
  function save$2(method, type, card) {
    var account = workingAccount();
    if (account) {
      var find = bookmarks.find(function (elem) {
        return elem.card_id == card.id && elem.type == type;
      });
      network$9.clear();
      network$9.silent(api$2() + 'bookmarks/' + method, false, false, {
        type: type,
        data: JSON.stringify(Utils$2.clearCard(Arrays.clone(card))),
        card_id: card.id,
        id: find ? find.id : 0
      }, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
      if (method == 'remove') {
        if (find) {
          Arrays.remove(bookmarks, find);
        }
      } else {
        if (find) Arrays.remove(bookmarks, find);
        Arrays.insert(bookmarks, 0, {
          id: find ? find.id : 0,
          cid: find ? find.cid : account.id,
          card_id: card.id,
          type: type,
          data: Utils$2.clearCard(Arrays.clone(card)),
          profile: account.profile.id,
          time: Date.now()
        });
        bookmarks.filter(function (elem) {
          return elem.card_id == card.id;
        }).forEach(function (elem) {
          elem.time = Date.now();
        });
        bookmarks.sort(function (a, b) {
          return b.time - a.time;
        });
      }
      updateChannels();
      Socket.send('bookmarks', {});
    }
  }
  function clear$6(where) {
    var account = Storage.get('account', '{}');
    if (account.token && window.prisma_settings.account_use && window.prisma_settings.account_sync) {
      network$9.silent(api$2() + 'bookmarks/clear', function (result) {
        if (result.secuses) update$5();
      }, false, {
        type: 'group',
        group: where
      }, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    }
  }
  function update$5(call) {
    var account = Storage.get('account', '{}');
    if (account.token && window.prisma_settings.account_use && window.prisma_settings.account_sync) {
      network$9.silent(api$2() + 'bookmarks/all?full=1', function (result) {
        AppWorker.json({
          type: 'parse',
          data: result
        }, function (e) {
          updateBookmarks(e.data.bookmarks, function () {
            if (call && typeof call == 'function') call();
          });
        });
      }, function () {
        if (call && typeof call == 'function') call();
      }, false, {
        dataType: 'text',
        timeout: 8000,
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    } else {
      updateBookmarks([], function () {
        if (call && typeof call == 'function') call();
      });
    }
  }
  function plugins(call) {
    var account = Storage.get('account', '{}');
    if (account.token && window.prisma_settings.account_use) {
      network$9.timeout(3000);
      network$9.silent(api$2() + 'plugins/all', function (result) {
        if (result.secuses) {
          Storage.set('account_plugins', result.plugins);
          call(result.plugins);
        } else {
          call(Storage.get('account_plugins', '[]'));
        }
      }, function () {
        call(Storage.get('account_plugins', '[]'));
      }, false, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    } else {
      call([]);
    }
  }
  function extensions$1(call) {
    var account = Storage.get('account', '{}');
    var headers = {};
    if (account.token && window.prisma_settings.account_use) {
      headers = {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      };
    }
    network$9.timeout(5000);
    network$9.silent(api$2() + 'extensions/list', function (result) {
      if (result.secuses) {
        if (window.prisma_settings.white_use) {
          var forbidden = [9, 10, 12, 180, 5, 149, 13, 158, 179];
          result.results.forEach(function (elem) {
            elem.results = elem.results.filter(function (plug) {
              return forbidden.indexOf(plug.id) == -1;
            });
          });
        }
        Storage.set('account_extensions', result);
        call(result);
      } else {
        call(Storage.get('account_extensions', '{}'));
      }
    }, function () {
      call(Storage.get('account_extensions', '{}'));
    }, false, headers);
  }
  function pluginsStatus(plugin, status) {
    var account = Storage.get('account', '{}');
    if (account.token && window.prisma_settings.account_use) {
      network$9.silent(api$2() + (plugin.author ? 'extensions' : 'plugins') + '/status', false, false, {
        id: plugin.id,
        status: status
      }, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    }
  }

  /**
   * Статус
   */
  function renderStatus(name) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    if (body$1) {
      body$1.find('.settings--account-status .settings-param__value').text(name);
      body$1.find('.settings--account-status .settings-param__descr').text(value);
    }
  }
  function addDevice() {
    var _displayModal = function displayModal() {
      var html = Template.get('account_add_device');
      html.find('.simple-button').on('hover:enter', function () {
        Modal.close();
        Input.edit({
          free: true,
          title: Lang.translate('account_code_enter'),
          nosave: true,
          value: '',
          layout: 'nums',
          keyboard: 'prisma'
        }, function (new_value) {
          var code = parseInt(new_value);
          if (new_value && new_value.length == 6 && !isNaN(code)) {
            var login = function login(error) {
              network$9.silent(api$2() + 'device/add', function (result) {
                Loading.stop();
                Storage.set('account', result, true);
                Storage.set('account_email', result.email, true);
                window.location.reload();
              }, error, {
                code: code
              });
            };
            Loading.start(function () {
              network$9.clear();
              Loading.stop();
            });
            network$9.clear();
            login(function (e) {
              localStorage.setItem('protocol', window.location.protocol == 'https:' ? 'https' : 'http');
              login(function () {
                Loading.stop();
                Noty$1.show(Lang.translate(network$9.errorCode(e) == 200 ? 'account_code_error' : 'network_noconnect'));
              });
            });
          } else {
            _displayModal();
            Noty$1.show(Lang.translate('account_code_wrong'));
          }
        });
      });
      Modal.open({
        title: '',
        html: html,
        size: 'small',
        onBack: function onBack() {
          Modal.close();
          Controller.toggle('settings_component');
        }
      });
    };
    _displayModal();
  }
  function renderPanel() {
    if (body$1) {
      var account = Storage.get('account', '{}');
      var signed = account.token ? true : false;
      if (!window.prisma_settings.account_sync) {
        body$1.find('[data-name="account_use"]').remove();
        body$1.find('.settings--account-status').nextAll().remove();
      }
      body$1.find('.settings--account-signin').toggleClass('hide', signed);
      body$1.find('.settings--account-user').toggleClass('hide', !signed);
      body$1.find('.settings--account-premium').toggleClass('selectbox-item--checked', Boolean(checkPremium()));
      body$1.find('.settings-param__label').toggleClass('hide', !Boolean(checkPremium()));
      if (!checkPremium()) {
        body$1.find('.selectbox-item').on('hover:enter', showPrismaPremium);
      }
      body$1.find('.settings--account-device-add').on('hover:enter', addDevice);
      if (account.token) {
        body$1.find('.settings--account-user-info .settings-param__value').text(account.email);
        body$1.find('.settings--account-user-profile .settings-param__value').text(account.profile.name);
        body$1.find('.settings--account-user-out').on('hover:enter', function () {
          Storage.set('account', '');
          Storage.set('account_user', '');
          Storage.set('account_email', '');
          Settings.update();
          update$5();
        });
        body$1.find('.settings--account-user-sync').on('hover:enter', function () {
          account = Storage.get('account', '{}');
          Select.show({
            title: Lang.translate('settings_prisma_sync'),
            items: [{
              title: Lang.translate('confirm'),
              subtitle: Lang.translate('account_sync_to_profile') + ' (' + account.profile.name + ')',
              confirm: true
            }, {
              title: Lang.translate('cancel')
            }],
            onSelect: function onSelect(a) {
              if (a.confirm) {
                var file;
                try {
                  file = new File([localStorage.getItem('favorite') || '{}'], "bookmarks.json", {
                    type: "text/plain"
                  });
                } catch (e) {}
                if (!file) {
                  try {
                    file = new Blob([localStorage.getItem('favorite') || '{}'], {
                      type: 'text/plain'
                    });
                    file.lastModifiedDate = new Date();
                  } catch (e) {
                    Noty$1.show(Lang.translate('account_export_fail'));
                  }
                }
                if (file) {
                  var formData = new FormData($('<form></form>')[0]);
                  formData.append("file", file, "bookmarks.json");
                  var loader = $('<div class="broadcast__scan" style="margin: 1em 0 0 0"><div></div></div>');
                  body$1.find('.settings--account-user-sync').append(loader);
                  $.ajax({
                    url: api$2() + 'bookmarks/sync',
                    type: 'POST',
                    data: formData,
                    async: true,
                    cache: false,
                    contentType: false,
                    enctype: 'multipart/form-data',
                    processData: false,
                    headers: {
                      token: account.token,
                      profile: account.profile.id
                    },
                    success: function success(j) {
                      if (j.secuses) {
                        Noty$1.show(Lang.translate('account_sync_secuses'));
                        update$5();
                        loader.remove();
                      }
                    },
                    error: function error() {
                      Noty$1.show(Lang.translate('account_export_fail'));
                      loader.remove();
                    }
                  });
                }
              }
              Controller.toggle('settings_component');
            },
            onBack: function onBack() {
              Controller.toggle('settings_component');
            }
          });
        });
        body$1.find('.settings--account-user-backup').on('hover:enter', backup);
        profile();
      } else check$2();
    }
  }
  function profile() {
    var account = Storage.get('account', '{}');
    body$1.find('.settings--account-user-profile .settings-param__value').text(account.profile.name);
    body$1.find('.settings--account-user-profile').on('hover:enter', function () {
      showProfiles('settings_component');
    });
  }
  function showProfiles(controller) {
    // ParentalControl.personal('account_profiles',()=>{
    var account = Storage.get('account', '{}');
    Loading.start(function () {
      network$9.clear();
      Loading.stop();
    });
    network$9.clear();
    network$9.silent(api$2() + 'profiles/all', function (result) {
      Loading.stop();
      if (result.secuses) {
        var items = Arrays.clone(result.profiles);
        var clone = Arrays.clone(result.profiles);
        items.reverse();
        clone.reverse();
        Select.show({
          title: Lang.translate('account_profiles'),
          items: items.map(function (elem, index) {
            elem.title = elem.name;
            elem.template = 'selectbox_icon';
            elem.icon = '<img src="' + Utils$2.protocol() + object$2.pris_domain + '/img/profiles/' + elem.icon + '.png" />';
            elem.index = index;
            elem.selected = account.profile.id == elem.id;
            return elem;
          }),
          onSelect: function onSelect(a) {
            account.profile = clone[a.index];
            Storage.set('account', account);
            if (body$1) body$1.find('.settings--account-user-profile .settings-param__value').text(a.name);
            notice_load.time = 0;
            Controller.toggle(controller);
            update$5();
          },
          onBack: function onBack() {
            Controller.toggle(controller);
          }
        });
      } else {
        Noty$1.show(result.text);
      }
    }, function () {
      Loading.stop();
      Noty$1.show(Lang.translate('account_profiles_empty'));
    }, false, {
      headers: {
        token: account.token
      }
    });
    // },false, true)
  }
  function check$2() {
    var account = Storage.get('account', '{}');
    if (account.token) {
      renderStatus(Lang.translate('account_authorized'), Lang.translate('account_logged_in') + ' ' + account.email);
    } else {
      renderStatus(Lang.translate('account_login_failed'), Lang.translate('account_login_wait'));
    }
  }
  function working() {
    return Storage.get('account', '{}').token && Storage.field('account_use') && window.prisma_settings.account_use && window.prisma_settings.account_sync;
  }
  function canSync(logged_check) {
    return (logged_check ? logged() && window.prisma_settings.account_sync : working()) ? Storage.get('account', '{}') : false;
  }
  function workingAccount() {
    return working() ? Storage.get('account', '{}') : false;
  }
  function logged() {
    return Storage.get('account', '{}').token ? window.prisma_settings.account_use : false;
  }
  function get$8(params) {
    return bookmarks.filter(function (elem) {
      return elem.type == params.type;
    }).map(function (elem) {
      return elem.data;
    });
  }
  function all$1() {
    return bookmarks.map(function (elem) {
      return elem.data;
    });
  }
  function addDiscuss(params, call) {
    var account = Storage.get('account', '{}');
    if (account.token) {
      network$9.silent(api$2() + 'discuss/add', function (data) {
        data.result.icon = account.profile.icon;
        call(data.result);
      }, function (j, e) {
        var errorData = network$9.errorJSON(j);
        Noty$1.show(errorData.message || errorData.text || Lang.translate('network_500'), {
          time: 5000
        });
      }, {
        id: [params.method, params.id].join('_'),
        comment: params.comment,
        review_type: params.review_type || 'neutral',
        lang: Storage.field('language')
      }, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    }
  }
  function voiteDiscuss(params, call) {
    var account = Storage.get('account', '{}');
    if (account.token) {
      network$9.silent(api$2() + 'discuss/voite', function (result) {
        if (result && result.success && call) {
          call(result);
        }
      }, function (j, e) {
        var errorData = network$9.errorJSON(j);
        Noty$1.show(errorData.message || errorData.text || Lang.translate('network_500'));
      }, params, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    }
  }
  function updateChannels() {
    if (Platform.is('android') && typeof AndroidJS.saveBookmarks !== 'undefined' && bookmarks.length) {
      AppWorker.json({
        type: 'stringify',
        data: bookmarks
      }, function (j) {
        AndroidJS.saveBookmarks(j.data);
      });
    }
  }
  function updateBookmarks(rows, call) {
    if (!rows || !Array.isArray(rows)) {
      console.log('Bookmarks data error: invalid data format', rows);
      if (call) call();
      return;
    }
    AppWorker.utils({
      type: 'account_bookmarks_parse',
      data: rows
    }, function (e) {
      if (e && e.data) {
        bookmarks = e.data;
        bookmarks.forEach(function (elem) {
          elem.data = Utils$2.clearCard(elem.data);
        });
        updateChannels();
        console.log('Bookmarks updated successfully:', bookmarks.length);
        if (call) call();
        listener$b.send('update_bookmarks', {
          rows: rows,
          bookmarks: bookmarks
        });
      } else {
        console.log('Bookmarks parse worker error:', e);
        if (call) call();
      }
    });
  }
  function notice(call) {
    var account = Storage.get('account', '{}');
    if (account.token && window.prisma_settings.account_use && window.prisma_settings.account_sync) {
      if (notice_load.time + 1000 * 60 * 10 < Date.now()) {
        network$9.timeout(5000);
        network$9.silent(api$2() + 'notice/all', function (result) {
          if (result.secuses) {
            notice_load.time = Date.now();
            notice_load.data = result.notice;
            Storage.set('account_notice', result.notice.map(function (n) {
              return n;
            }));
            call(result.notice);
          } else call(notice_load.data);
        }, function () {
          call(notice_load.data);
        }, false, {
          headers: {
            token: account.token,
            profile: account.profile.id
          }
        });
      } else call(notice_load.data);
    } else call([]);
  }
  function backup() {
    var account = Storage.get('account', '{}');
    if (account.token) {
      Select.show({
        title: Lang.translate('settings_prisma_backup'),
        nomark: true,
        items: [{
          title: Lang.translate('settings_prisma_backup_export'),
          subtitle: Lang.translate('settings_prisma_backup_export_descr'),
          "export": true,
          selected: true
        }, {
          title: Lang.translate('settings_prisma_backup_import'),
          subtitle: Lang.translate('settings_prisma_backup_import_descr'),
          "import": true
        }, {
          title: Lang.translate('cancel')
        }],
        onSelect: function onSelect(a) {
          if (a["export"]) {
            Select.show({
              title: Lang.translate('sure'),
              nomark: true,
              items: [{
                title: Lang.translate('confirm'),
                "export": true,
                selected: true
              }, {
                title: Lang.translate('cancel')
              }],
              onSelect: function onSelect(a) {
                if (a["export"]) {
                  var file;
                  try {
                    file = new File([JSON.stringify(localStorage)], "backup.json", {
                      type: "text/plain"
                    });
                  } catch (e) {
                    console.log('Backup', 'file create error', e.message);
                  }
                  if (!file) {
                    try {
                      file = new Blob([JSON.stringify(localStorage)], {
                        type: 'text/plain'
                      });
                      file.lastModifiedDate = new Date();
                    } catch (e) {
                      console.log('Backup', 'file create error', e.message);
                      Noty$1.show(Lang.translate('account_export_fail'));
                    }
                  }
                  if (file) {
                    var formData = new FormData($('<form></form>')[0]);
                    formData.append("file", file, "backup.json");
                    var loader = $('<div class="broadcast__scan" style="margin: 1em 0 0 0"><div></div></div>');
                    body$1.find('.settings--account-user-backup').append(loader);
                    $.ajax({
                      url: api$2() + 'users/backup/export',
                      type: 'POST',
                      data: formData,
                      async: true,
                      cache: false,
                      contentType: false,
                      enctype: 'multipart/form-data',
                      processData: false,
                      headers: {
                        token: account.token
                      },
                      success: function success(j) {
                        if (j.secuses) {
                          // if(j.limited) showLimitedAccount()
                          //else Noty.show(Lang.translate('account_export_secuses'))
                          Noty$1.show(Lang.translate('account_export_secuses'));
                        } else Noty$1.show(Lang.translate('account_export_fail'));
                        loader.remove();
                      },
                      error: function error(e, x) {
                        console.log('Backup', 'network error', network$9.errorDecode(e, x));
                        Noty$1.show(Lang.translate('account_export_fail_' + (network$9.errorJSON(e).code || 500)));
                        loader.remove();
                      }
                    });
                  } else {
                    console.log('Backup', 'file not created');
                  }
                }
                Controller.toggle('settings_component');
              },
              onBack: function onBack() {
                Controller.toggle('settings_component');
              }
            });
          } else if (a["import"]) {
            network$9.silent(api$2() + 'users/backup/import', function (data) {
              if (data.data) {
                var imp = 0;
                var ers = 0;
                for (var i in data.data) {
                  try {
                    localStorage.setItem(i, data.data[i]);
                    imp++;
                  } catch (e) {
                    ers++;
                  }
                }
                Noty$1.show(Lang.translate('account_import_secuses') + ' - ' + Lang.translate('account_imported') + ' (' + imp + '/' + ers + ') - ' + Lang.translate('account_reload_after'));
                setTimeout(function () {
                  window.location.reload();
                }, 5000);
              } else Noty$1.show(Lang.translate('nodata'));
            }, function () {
              Noty$1.show(Lang.translate('account_import_fail'));
            }, false, {
              headers: {
                token: account.token
              }
            });
            Controller.toggle('settings_component');
          } else {
            Controller.toggle('settings_component');
          }
        },
        onBack: function onBack() {
          Controller.toggle('settings_component');
        }
      });
    }
  }
  function subscribes(params, secuses, error) {
    var account = canSync(true);
    if (account) {
      network$9.silent(api$2() + 'notifications/all', function (result) {
        secuses({
          results: result.notifications.map(function (r) {
            return Arrays.decodeJson(r.card, {});
          })
        });
      }, error, false, {
        headers: {
          token: account.token,
          profile: account.profile.id
        }
      });
    } else error();
  }
  function showModal(template_name) {
    var enabled = Controller.enabled().name;
    Modal.open({
      title: '',
      html: Template.get(template_name),
      onBack: function onBack() {
        Modal.close();
        Controller.toggle(enabled);
      }
    });
  }
  function showNoAccount() {
    showModal('account');
  }
  function showLimitedAccount() {
    showModal('account_limited');
  }
  function showPrismaPremium() {
    var enabled = Controller.enabled().name;
    Modal.open({
      title: '',
      html: Template.get('prisma_premium'),
      onBack: function onBack() {
        Modal.close();
        Controller.toggle(enabled);
      }
    });
    Modal.render().addClass('modal--prisma-premium').find('.modal__content').before('<div class="modal__icon"><svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 32 32"><path d="m2.837 20.977q-.912-5.931-1.825-11.862a.99.99 0 0 1 1.572-.942l5.686 4.264a1.358 1.358 0 0 0 1.945-.333l4.734-7.104a1.263 1.263 0 0 1 2.1 0l4.734 7.1a1.358 1.358 0 0 0 1.945.333l5.686-4.264a.99.99 0 0 1 1.572.942q-.913 5.931-1.825 11.862z" fill="#D8C39A"></svg></div>');
  }
  function subscribeToTranslation() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var call = arguments.length > 1 ? arguments[1] : undefined;
    var error = arguments.length > 2 ? arguments[2] : undefined;
    var account = canSync(true);
    if (account && params.voice) {
      network$9.timeout(5000);
      network$9.silent(api$2() + 'notifications/add', function (result) {
        if (result.limited) showLimitedAccount();else if (call) call();
      }, function () {
        if (error) error();
      }, {
        voice: params.voice,
        data: JSON.stringify(params.card),
        episode: params.episode,
        season: params.season
      }, {
        headers: {
          token: account.token
        }
      });
    } else if (error) error();
  }
  function logoff(data) {
    var account = Storage.get('account', '{}');
    if (account.token && account.email == data.email) {
      Storage.set('account', '', true);
      Storage.set('account_use', false, true);
      Storage.set('account_user', '', true);
      Storage.set('account_email', '', true);
      Storage.set('account_notice', '', true);
      Storage.set('account_bookmarks', '', true);
      $('.head .open--profile').addClass('hide');
      window.location.reload();
    }
  }
  var Account = {
    listener: listener$b,
    init: init$G,
    task: task$3,
    working: working,
    canSync: canSync,
    workingAccount: workingAccount,
    get: get$8,
    all: all$1,
    plugins: plugins,
    notice: notice,
    pluginsStatus: pluginsStatus,
    showProfiles: showProfiles,
    clear: clear$6,
    update: update$5,
    network: network$9,
    backup: backup,
    extensions: extensions$1,
    subscribeToTranslation: subscribeToTranslation,
    subscribes: subscribes,
    showNoAccount: showNoAccount,
    showPrismaPremium: showPrismaPremium,
    showLimitedAccount: showLimitedAccount,
    logged: logged,
    removeStorage: function removeStorage() {},
    //устарело
    logoff: logoff,
    // persons,
    addDiscuss: addDiscuss,
    voiteDiscuss: voiteDiscuss,
    updateUser: function updateUser() {
      getUser();
    }
  };
  Object.defineProperty(Account, 'hasPremium', {
    value: function value() {
      return checkPremium();
    },
    writable: false
  });

  var network$8 = new create$e();
  var responce_code = 'ru';
  function region(call) {
    var reg = Storage.get('region', '{}');
    Arrays.extend({
      time: 0
    });
    if (!reg.code || reg.time + 1000 * 60 * 60 * 24 < Date.now()) {
      var extracted = function extracted(code) {
        code = code.trim().toLowerCase();
        code = code || 'ru';
        Storage.set('region', {
          code: code,
          time: Date.now()
        });
        call(code);
      };
      extract(extracted, function () {
        console.log('VPN', 'domain not responding');
        Storage.set('region', {
          code: Storage.field('language'),
          time: Date.now()
        });
        call(Storage.field('language'));
      });
    } else call(reg.code);
  }
  var extract = function extract(call, error) {
    network$8.silent(Utils$2.protocol() + object$2.api_domain + '/geo?select=country', call, error, false, {
      dataType: 'text',
      timeout: 8000
    });
  };
  function task$2(call) {
    extract(function (country) {
      console.log('VPN', object$2.api_domain + '/geo?select=country' + ' domain responding ', country);
      if (country.trim().toLowerCase() == 'ru' || country.trim().toLowerCase() == 'be' || country.trim() == '') {
        console.log('VPN', 'launch TMDB Proxy');

        // TMDBProxy.init()
      }
      responce_code = country.trim().toLowerCase() || 'ru';
      call();
    }, function (e, x) {
      console.log('VPN', object$2.api_domain + '/geo?select=country' + ' domain not responding:', network$8.errorDecode(e, x));

      // TMDBProxy.init() //будем считать что если не ответил, то все равно запускаем

      call();
    });
  }
  var VPN = {
    region: region,
    task: task$2,
    code: function code() {
      return responce_code;
    }
  };

  var listener$a = start$8();
  var html$f;
  var display;
  var paused;
  var subtitles$1;
  var backworkIcon;
  var forwardIcon;
  var timer$3 = {};
  var params = {};
  var rewind_position = 0;
  var rewind_force = 0;
  var last_mutation = 0;
  var customsubs;
  var _video;
  var wait;
  var neeed_sacle;
  var neeed_sacle_last;
  var neeed_speed;
  var webos;
  var hls;
  var dash;
  var webos_wait = {};
  var normalization;
  var hls_parser;
  var click_nums = 0;
  var click_timer;
  var pause_timer;
  var video_tube = [];
  function init$F() {
    html$f = Template.get('player_video');
    display = html$f.find('.player-video__display');
    paused = html$f.find('.player-video__paused');
    subtitles$1 = html$f.find('.player-video__subtitles');
    backworkIcon = html$f.find('.player-video__backwork-icon');
    forwardIcon = html$f.find('.player-video__forward-icon');
    html$f.find('.player-video__backwork-icon,.player-video__forward-icon').on('animationend', function () {
      $(this).removeClass('rewind');
    });
    html$f.on('click', function (e) {
      if ((Storage.field('navigation_type') == 'mouse' || Utils$2.isTouchDevice()) && DeviceInput.canClick(e.originalEvent)) {
        clearTimeout(click_timer);
        click_nums++;
        if (PlayerIPTV.playning()) click_nums = 1;
        if (click_nums === 1) {
          click_timer = setTimeout(function () {
            click_nums = 0;
            if (PlayerPanel.visibleStatus() && !PlayerIPTV.playning()) playpause();else PlayerPanel.mousemove();
          }, 300);
        } else if (click_nums > 1) {
          click_timer = setTimeout(function () {
            var dir = e.clientX > window.innerWidth / 2 ? 1 : -1;
            var pow = (click_nums - 1) * 10;
            if (dir == 1) {
              forwardIcon.addClass('rewind').find('span').text('+' + pow + ' sec');
            } else {
              backworkIcon.addClass('rewind').find('span').text('-' + pow + ' sec');
            }
            to(_video.currentTime + dir * pow);
            click_nums = 0;
          }, 300);
        }
      }
    });
    var time_resize;
    $(window).on('resize', function () {
      clearTimeout(time_resize);
      time_resize = setTimeout(function () {
        if (_video) {
          neeed_sacle = neeed_sacle_last;
          scale();
          if (_video.resize) _video.resize();
        }
      }, 200);
    });

    /**
     * Специально для вебось
     */
    listener$a.follow('webos_subs', function (data) {
      webos_wait.subs = convertToArray(data.subs);
    });
    listener$a.follow('webos_tracks', function (data) {
      webos_wait.tracks = convertToArray(data.tracks);
    });
    registerTube({
      name: 'YouTube',
      verify: function verify(src) {
        return src.indexOf('youtube.com') >= 0 || src.indexOf('youtu.be') >= 0;
      },
      create: YouTube$1
    });
  }

  /**
   * Переключаем субтитры с предыдущей серии
   */
  function webosLoadSubs() {
    var subs = webos_wait.subs;
    _video.webos_subs = subs;
    var inx = params.sub + 1;
    if (typeof params.sub !== 'undefined' && subs[inx]) {
      subs.forEach(function (e) {
        e.mode = 'disabled';
        e.selected = false;
      });
      subs[inx].mode = 'showing';
      subs[inx].selected = true;
      console.log('WebOS', 'enable subs', inx);
      subsview(true);
    } else if (Storage.field('subtitles_start')) {
      var full = subs.find(function (s) {
        return (s.label || '').indexOf('олные') >= 0;
      });
      subs[0].selected = false;
      if (full) {
        full.mode = 'showing';
        full.selected = true;
      } else {
        subs[1].mode = 'showing';
        subs[1].selected = true;
      }
      subsview(true);
    }
  }

  /**
   * Переключаем дорожки с предыдущей серии
   */
  function webosLoadTracks() {
    var tracks = webos_wait.tracks;
    _video.webos_tracks = tracks;
    if (typeof params.track !== 'undefined' && tracks[params.track]) {
      tracks.forEach(function (e) {
        return e.selected = false;
      });
      console.log('WebOS', 'enable tracks', params.track);
      tracks[params.track].enabled = true;
      tracks[params.track].selected = true;
    }
  }

  /**
   * Добовляем события к контейнеру
   */
  function bind$2() {
    // ждем загрузки
    _video.addEventListener("waiting", function () {
      loader(true);
    });

    // начали играть
    _video.addEventListener("playing", function () {
      loader(false);
    });

    // видео закончилось
    _video.addEventListener('ended', function () {
      listener$a.send('ended', {});
    });
    if (Platform.is('apple') && Storage.field('player') == 'ios') {
      _video.addEventListener('webkitendfullscreen', function (e) {
        Controller.back();
      });
    }

    // что-то пошло не так
    _video.addEventListener('error', function (e) {
      var error = _video.error || {};
      var msg = (error.message || '').toUpperCase();
      if (msg.indexOf('EMPTY SRC') == -1) {
        if (error.code == 3) {
          listener$a.send('error', {
            error: Lang.translate('player_error_one'),
            fatal: true
          });
        } else if (error.code == 4) {
          listener$a.send('error', {
            error: Lang.translate('player_error_two'),
            fatal: true
          });
        } else if (typeof error.code !== 'undefined') {
          listener$a.send('error', {
            error: 'code [' + error.code + '] details [' + msg + ']',
            fatal: true
          });
        }
      }
    });

    // прогресс буферизации
    _video.addEventListener('progress', function (e) {
      if (typeof e.percent !== 'undefined') {
        listener$a.send('progress', {
          down: e.percent + '%'
        });
      } else {
        var duration = _video.duration;
        var seconds = 0;
        if (duration > 0) {
          try {
            for (var i = 0; i < _video.buffered.length; i++) {
              if (_video.buffered.start && _video.buffered.start(_video.buffered.length - 1 - i) < _video.currentTime) {
                var down = Math.max(0, Math.min(100, _video.buffered.end(_video.buffered.length - 1 - i) / duration * 100)) + "%";
                seconds = Math.max(0, _video.buffered.end(_video.buffered.length - 1 - i) - _video.currentTime);
                listener$a.send('progress', {
                  down: down
                });
                break;
              }
            }
          } catch (e) {}
          hlsBitrate(seconds);
        }
      }
    });

    // можно ли уже проигрывать?
    _video.addEventListener('canplay', function () {
      listener$a.send('canplay', {});
    });

    // сколько прошло
    _video.addEventListener('timeupdate', function () {
      if (rewind_position == 0 && !_video.rewind) listener$a.send('timeupdate', {
        duration: _video.duration,
        current: _video.currentTime
      });
      listener$a.send('videosize', {
        width: _video.videoWidth,
        height: _video.videoHeight
      });
      scale();
      mutation();
      if (customsubs) customsubs.update(_video.currentTime);
    });

    // обновляем субтитры
    _video.addEventListener('subtitle', function (e) {
      //В srt существует тег {\anX}, где X - цифра от 1 до 9, Тег определяет нестандартное положение субтитра на экране.
      //Здесь удаляется тег из строки и обрабатывается положение 8 (субтитр вверху по центру).
      //{\an8} используется когда нужно, чтобы субтитр не перекрывал надписи в нижней части экрана или субтитры вшитые в видеоряд.
      subtitles$1.removeClass('on-top');
      var posTag = e.text.match(/^{\\an(\d)}/);
      if (posTag) {
        e.text = e.text.replace(/^{\\an(\d)}/, '');
        if (posTag[1] && parseInt(posTag[1]) === 8) {
          subtitles$1.addClass('on-top');
        }
      }
      e.text = e.text.trim();
      $('> div', subtitles$1).html(e.text ? e.text : '&nbsp;').css({
        display: e.text ? 'inline-block' : 'none'
      });
      clearTimeout(timer$3.subtitle);
      timer$3.subtitle = setTimeout(function () {
        $('> div', subtitles$1).html('&nbsp;').css({
          display: 'none'
        });
      }, 10000);
    });

    //получены первые данные
    _video.addEventListener('loadeddata', function (e) {
      listener$a.send('videosize', {
        width: _video.videoWidth,
        height: _video.videoHeight
      });
      listener$a.send('loadeddata', {});
      scale();
      if (neeed_speed) speed(neeed_speed);
      loaded$1();
    });
    var pc = Boolean(Platform.is('nw') || Platform.is('browser') || Platform.is('apple') && !Utils$2.isPWA());

    // для страховки
    _video.volume = pc ? parseFloat(Storage.get('player_volume', '1')) : 1;
    _video.muted = false;
  }
  function hlsBitrate(seconds) {
    if (hls && hls.streamController && hls.streamController.fragPlaying && hls.streamController.fragPlaying.baseurl && hls.streamController.fragPlaying.stats) {
      var ch = Lang.translate('title_channel') + ' ' + parseFloat(hls.streamController.fragLastKbps / 1000).toFixed(2) + ' ' + Lang.translate('speed_mb');
      var bt = ' &nbsp;•&nbsp; ' + Lang.translate('torrent_item_bitrate') + ' ~' + parseFloat(hls.streamController.fragPlaying.stats.total / 1000000 / 10 * 8).toFixed(2) + ' ' + Lang.translate('speed_mb');
      var bf = ' &nbsp;•&nbsp; ' + Lang.translate('title_buffer') + ' ' + Utils$2.secondsToTimeHuman(seconds);
      Prisma.PlayerInfo.set('bitrate', ch + bt + bf);
    }
  }
  function hlsLevelName(level) {
    var level_width = level.width || 0;
    var level_height = level.height || 0;
    var levels = [240, 360, 480, 720, 1080, 1440, 2160];
    var name = levels.find(function (size) {
      var quality_width = Math.round(size * 1.777);
      var quality_height = size;
      var w = level_width > quality_width - 50 && level_width < quality_width + 50;
      var h = level_height > quality_height - 50 && level_height < quality_height + 50;
      return w || h;
    });
    return name ? name + 'p' : level.qu ? level.qu : level.width ? level.height + 'p' : 'AUTO';
  }
  function hlsLevelDefault(where) {
    var start_level = where.levels.find(function (level, i) {
      var level_width = level.width || 0;
      var level_height = level.height || 0;
      var quality_width = Math.round(Storage.field('video_quality_default') * 1.777);
      var quality_height = Storage.field('video_quality_default');
      var w = level_width > quality_width - 50 && level_width < quality_width + 50;
      var h = level_height > quality_height - 50 && level_height < quality_height + 50;
      return w || h;
    });
    return start_level ? where.levels.indexOf(start_level) : where.currentLevel;
  }

  /**
   * Может поможет избавится от скринсейва
   */
  function mutation() {
    if (last_mutation < Date.now() - 5000) {
      var style = _video.style;
      style.top = style.top;
      style.left = style.left;
      style.width = style.width;
      style.height = style.height;
      last_mutation = Date.now();
    }
  }

  /**
   * Конвертировать object to array
   * @param {object[]} arr 
   * @returns {array}
   */
  function convertToArray(arr) {
    if (!Arrays.isArray(arr)) {
      var new_arr = [];
      for (var index = 0; index < arr.length; index++) {
        new_arr.push(arr[index]);
      }
      arr = new_arr;
    }
    return arr;
  }

  /**
   * Масштаб видео
   */
  function scale() {
    if (!neeed_sacle) return;
    var vw = _video.videoWidth,
      vh = _video.videoHeight,
      rt = 1,
      sx = 1.00,
      sy = 1.00;
    if (vw == 0 || vh == 0 || typeof vw == 'undefined') return;
    var increase = function increase(sfx, sfy) {
      rt = Math.min(window.innerWidth / vw, window.innerHeight / vh);
      sx = sfx;
      sy = sfy;
    };
    if (neeed_sacle == 'default') {
      rt = Math.min(window.innerWidth / vw, window.innerHeight / vh);
    } else if (neeed_sacle == 'fill') {
      rt = Math.min(window.innerWidth / vw, window.innerHeight / vh);
      sx = window.innerWidth / (vw * rt);
      sy = window.innerHeight / (vh * rt);
    } else if (neeed_sacle == 's115') {
      increase(1.15, 1.15);
    } else if (neeed_sacle == 's130') {
      increase(1.34, 1.34);
    } else if (neeed_sacle == 'v115') {
      increase(1.01, 1.15);
    } else if (neeed_sacle == 'v130') {
      increase(1.01, 1.34);
    } else {
      rt = Math.min(window.innerWidth / vw, window.innerHeight / vh);
      vw = vw * rt;
      vh = vh * rt;
      rt = Math.max(window.innerWidth / vw, window.innerHeight / vh);
      sx = rt;
      sy = rt;
    }
    sx = sx.toFixed(2);
    sy = sy.toFixed(2);
    if (Platform.is('orsay') && Storage.field('player') == 'inner' || Storage.field('player_scale_method') == 'calculate') {
      var nw = vw * rt,
        nh = vh * rt;
      var sz = {
        width: Math.round(nw * sx) + 'px',
        height: Math.round(nh * sy) + 'px',
        marginLeft: Math.round(window.innerWidth / 2 - nw * sx / 2) + 'px',
        marginTop: Math.round(window.innerHeight / 2 - nh * sy / 2) + 'px'
      };
    } else {
      var sz = {
        width: Math.round(window.innerWidth) + 'px',
        height: Math.round(window.innerHeight) + 'px',
        transform: sx == 1.00 ? 'unset' : 'scaleX(' + sx + ') scaleY(' + sy + ')'
      };
    }
    $(_video).css(sz);
    neeed_sacle = false;
  }

  /**
   * Сохранить текущие состояние дорожек и сабов
   * @returns {{sub:integer, track:integer, level:integer}}
   */
  function saveParams() {
    var subs = _video.customSubs || _video.webos_subs || _video.textTracks || [];
    var tracks = [];
    if (hls && hls.audioTracks && hls.audioTracks.length) tracks = hls.audioTracks;else if (dash) tracks = dash.getTracksFor('audio');else if (_video.audioTracks && _video.audioTracks.length) tracks = _video.audioTracks;
    if (webos && webos.sourceInfo) tracks = _video.webos_tracks || [];
    if (tracks.length) {
      for (var i = 0; i < tracks.length; i++) {
        if (tracks[i].enabled == true || tracks[i].selected == true) params.track = i;
      }
    }
    if (subs.length) {
      for (var _i = 0; _i < subs.length; _i++) {
        if (subs[_i].enabled == true || subs[_i].selected == true) {
          params.sub = subs[_i].index;
        }
      }
    }
    if (hls && hls.levels) params.level = hls.currentLevel;
    if (dash) params.level = dash.getQualityFor('video');
    console.log('WebOS', 'saved params', params);
    return params;
  }

  /**
   * Очисить состояние
   */
  function clearParamas() {
    params = {};
  }

  /**
   * Загрузитьновое состояние из прошлого
   * @param {{sub:integer, track:integer, level:integer}} saved_params 
   */
  function setParams(saved_params) {
    params = saved_params;
  }

  /**
   * Смотрим есть ли дорожки и сабы
   */
  function loaded$1() {
    var tracks = [];
    var subs = _video.customSubs || _video.textTracks || [];
    console.log('Player', 'video full loaded');
    if (hls) console.log('Player', 'hls test', hls.audioTracks.length);
    if (hls && hls.audioTracks && hls.audioTracks.length) {
      tracks = hls.audioTracks;
      tracks.forEach(function (track) {
        if (hls.audioTrack == track.id) track.selected = true;
        Object.defineProperty(track, "enabled", {
          set: function set(v) {
            if (v) hls.audioTrack = track.id;
          },
          get: function get() {}
        });
      });
    } else if (dash) {
      tracks = dash.getTracksFor('audio');
      tracks.forEach(function (track, i) {
        if (i == 0) track.selected = true;
        track.language = (track.lang + '').replace(/\d+/g, '');
        Object.defineProperty(track, "enabled", {
          set: function set(v) {
            if (v) dash.setCurrentTrack(track);
          },
          get: function get() {}
        });
      });
    } else if (_video.audioTracks && _video.audioTracks.length) tracks = _video.audioTracks;
    console.log('Player', 'tracks', _video.audioTracks);
    if (webos && webos.sourceInfo) {
      tracks = [];
      if (webos_wait.tracks) webosLoadTracks();
      if (webos_wait.subs) webosLoadSubs();
    }
    if (tracks.length) {
      tracks = convertToArray(tracks);
      if (typeof params.track !== 'undefined' && tracks[params.track]) {
        tracks.forEach(function (e) {
          e.selected = false;
        });
        tracks[params.track].enabled = true;
        tracks[params.track].selected = true;
        console.log('Player', 'enable track by default');
      }
      listener$a.send('tracks', {
        tracks: tracks
      });
    }
    if (subs.length) {
      subs = convertToArray(subs);
      if (typeof params.sub !== 'undefined' && subs[params.sub]) {
        subs.forEach(function (e) {
          e.mode = 'disabled';
          e.selected = false;
        });
        subs[params.sub].mode = 'showing';
        subs[params.sub].selected = true;
        subsview(true);
      } else if (Storage.field('subtitles_start')) {
        var full = subs.find(function (s) {
          return (s.label || '').indexOf('олные') >= 0;
        });
        if (full) {
          full.mode = 'showing';
          full.selected = true;
        } else {
          subs[0].mode = 'showing';
          subs[0].selected = true;
        }
        subsview(true);
      }
      listener$a.send('subs', {
        subs: subs
      });
    }
    if (hls && hls.levels) {
      var current_level = 'AUTO';
      hls.levels.forEach(function (level, i) {
        level.title = hlsLevelName(level);
        if (hls.currentLevel == i) {
          current_level = level.title;
          level.selected = true;
        }
        Object.defineProperty(level, "enabled", {
          set: function set(v) {
            if (v) {
              hls.currentLevel = i;
              hls.levels.map(function (e) {
                return e.selected = false;
              });
              level.selected = true;
            }
          },
          get: function get() {}
        });
      });
      if (typeof params.level !== 'undefined' && hls.levels[params.level]) {
        hls.levels.map(function (e) {
          return e.selected = false;
        });
        hls.levels[params.level].enabled = true;
        hls.levels[params.level].selected = true;
        current_level = hls.levels[params.level].title;
      } else {
        if (hls.currentLevel >= 0) current_level = hls.levels[hls.currentLevel].title;
      }
      listener$a.send('levels', {
        levels: hls.levels,
        current: current_level
      });
    }
    if (dash) {
      var bitrates = dash.getBitrateInfoListFor("video"),
        _current_level = 'AUTO';
      bitrates.forEach(function (level, i) {
        level.title = level.width ? level.width + 'x' + level.height : 'AUTO';
        if (i == 0) _current_level = level.title;
        Object.defineProperty(level, "enabled", {
          set: function set(v) {
            if (v) {
              dash.getSettings().streaming.abr.autoSwitchBitrate = false;
              dash.setQualityFor("video", level.qualityIndex);
            }
          },
          get: function get() {}
        });
      });
      if (typeof params.level !== 'undefined' && bitrates[params.level]) {
        bitrates.map(function (e) {
          return e.selected = false;
        });
        dash.getSettings().streaming.abr.autoSwitchBitrate = false;
        bitrates[params.level].enabled = true;
        bitrates[params.level].selected = true;
        _current_level = bitrates[params.level].title;
      }
      listener$a.send('levels', {
        levels: bitrates,
        current: _current_level
      });
    }
  }

  /**
   * Установить собственные субтитры
   * @param {[{index:integer, label:string, url:string}]} subs 
   */
  function customSubs(subs) {
    if (!Arrays.isArray(subs)) return console.log('Player', 'custom subs not array', subs);
    _video.customSubs = Arrays.clone(subs);
    console.log('Player', 'custom subs', subs);
    customsubs = new CustomSubs();
    customsubs.listener.follow('subtitle', function (e) {
      $('> div', subtitles$1).html(e.text ? e.text : '&nbsp;').css({
        display: e.text ? 'inline-block' : 'none'
      });
    });
    var index = -1;
    _video.customSubs.forEach(function (sub) {
      index++;
      if (typeof sub.index == 'undefined') sub.index = index;
      if (!sub.ready) {
        sub.ready = true;
        Object.defineProperty(sub, "mode", {
          set: function set(v) {
            if (v == 'showing') {
              customsubs.load(sub.url);
            }
          },
          get: function get() {}
        });
      }
    });
  }

  /**
   * Включить или выключить субтитры
   * @param {boolean} status 
   */
  function subsview(status) {
    subtitles$1.toggleClass('hide', !status);
  }

  /**
   * Применяет к блоку субтитров пользовательские настройки
   */
  function applySubsSettings() {
    var hasStroke = Storage.field('subtitles_stroke'),
      hasBackdrop = Storage.field('subtitles_backdrop'),
      size = Storage.field('subtitles_size');
    subtitles$1.removeClass('has--stroke has--backdrop size--normal size--large size--small');
    subtitles$1.addClass('size--' + size);
    if (hasStroke) {
      subtitles$1.addClass('has--stroke');
    }
    if (hasBackdrop) {
      subtitles$1.addClass('has--backdrop');
    }
  }

  /**
   * Создать контейнер для видео
   */
  function create$g() {
    var videobox;
    if (Platform.is('tizen') && Storage.field('player') == 'tizen') {
      videobox = AVPlay$1(function (object) {
        _video = object;
      });
    } else if (Platform.is('orsay') && Storage.field('player') == 'orsay') {
      videobox = AVPlay(function (object) {
        _video = object;
      });
    } else {
      videobox = $('<video class="player-video__video" poster="./img/video_poster.png" crossorigin="anonymous"></video>');
      if (Platform.is('apple') && Storage.field('player') !== 'ios') videobox.attr('playsinline', 'true');
      _video = videobox[0];
      if (typeof _video.canPlayType !== 'function') _video.canPlayType = function () {};
      if (Storage.field('player_normalization')) {
        try {
          console.log('Player', 'normalization enabled');
          normalization = new Normalization();
          normalization.attach(_video);
        } catch (e) {
          console.log('Player', 'normalization error:', e.stack);
        }
      }
    }
    applySubsSettings();
    display.append(videobox);
    if (Platform.is('webos') && !webos && !Player.playdata().voiceovers) {
      webos = new create$p(_video);
      webos.callback = function () {
        var src = _video.src;
        var sub = _video.customSubs;
        console.log('WebOS', 'video loaded');
        $(_video).remove();
        if (normalization) normalization.destroy();
        url$3(src, true);
        _video.customSubs = sub;
        webos.repet(_video);
        listener$a.send('reset_continue', {});
      };
      webos.start();
    }
    bind$2();
  }
  function createTube(src) {
    var verify = verifyTube(src);
    if (verify) {
      var videobox = verify.create(function (object) {
        _video = object;
      });
      !!videobox && display.append(videobox);
      bind$2();
      setTimeout(function () {
        load$3(src);
      }, 100);
      return true;
    }
    return false;
  }
  function normalizationVisible(status) {
    if (normalization) normalization.visible(status);
  }

  /**
   * Показать загрузку или нет
   * @param {boolean} status 
   */
  function loader(status) {
    wait = status;
    html$f.toggleClass('video--load', status);
  }

  /**
   * Устанавливаем ссылку на видео
   * @param {string} src 
   */
  function url$3(src, change_quality) {
    loader(true);
    if (hls) {
      hls.destroy();
      hls = false;
    }
    if (dash) {
      dash.destroy();
      dash = false;
    }
    if (createTube(src)) return;
    create$g();
    if (/\.mpd/.test(src) && typeof dashjs !== 'undefined') {
      try {
        if (Platform.is('orsay') && Storage.field('player') == 'orsay') {
          load$3(src);
        } else {
          dash = dashjs.MediaPlayer().create();
          dash.getSettings().streaming.abr.autoSwitchBitrate = false;
          dash.initialize(_video, src, true);
        }
      } catch (e) {
        console.log('Player', 'Dash error:', e.stack);
        load$3(src);
      }
    } else if (/\.m3u8/.test(src)) {
      if (navigator.userAgent.toLowerCase().indexOf('maple') > -1) src += '|COMPONENT=HLS';
      if (typeof Hls !== 'undefined') {
        var use_program = Storage.field('player_hls_method') == 'hlsjs';
        var hls_type = Player.playdata().hls_type;
        var hls_native = _video.canPlayType('application/vnd.apple.mpegurl');

        //если это плеер тайзен, то используем только системный
        if (Platform.is('tizen') && Storage.field('player') == 'tizen') use_program = false;
        //если это плеер orsay, то используем только системный
        else if (Platform.is('orsay') && Storage.field('player') == 'orsay') use_program = false;
        //а если системный и m3u8 не поддерживается, то переключаем на программный
        else if (!use_program && !hls_native) use_program = true;

        //однако, если программный тоже не поддерживается, то переключаем на системный и будет что будет
        if (!Hls.isSupported()) use_program = false;

        //если оглайн выбрал тип hls, то используем его
        if (hls_type == 'hlsjs') use_program = true;else if (hls_type == 'native' && hls_native) use_program = false;
        console.log('Player', 'use program hls:', use_program, 'hlsjs:', Hls.isSupported());
        if (!Platform.is('tizen')) console.log('Player', 'can play vnd.apple.mpegurl', hls_native ? true : false);

        //погнали
        if (use_program) {
          console.log('Player', 'hls start program');
          hls = new Hls({
            manifestLoadTimeout: Player.playdata().hls_manifest_timeout || 10000,
            manifestLoadMaxRetryTimeout: Player.playdata().hls_retry_timeout || 30000,
            xhrSetup: function xhrSetup(xhr, url) {
              xhr.timeout = Player.playdata().hls_manifest_timeout || 10000;
              xhr.ontimeout = function () {
                console.log('Player', 'hls manifestLoadTimeout');
              };
            }
          });
          hls.attachMedia(_video);
          hls.loadSource(src);
          hls.on(Hls.Events.ERROR, function (event, data) {
            console.log('Player', 'hls error', data.reason, data.details, data.fatal);
            if (data.details === Hls.ErrorDetails.MANIFEST_PARSING_ERROR) {
              if (data.reason === "no EXTM3U delimiter") {
                load$3(src);
              } else {
                listener$a.send('error', {
                  error: 'details [' + data.details + '] fatal [' + data.fatal + ']',
                  fatal: data.fatal
                });
              }
            } else {
              listener$a.send('error', {
                error: 'details [' + data.details + '] fatal [' + data.fatal + ']',
                fatal: data.fatal
              });
            }
          });
          hls.on(Hls.Events.MANIFEST_LOADED, function () {
            play$2();
          });
          hls.on(Hls.Events.MANIFEST_PARSED, function (event, data) {
            hls.currentLevel = hlsLevelDefault(hls);
          });
        } else if (!change_quality && !PlayerIPTV.playning()) {
          console.log('Player', 'hls start parse');
          var send_load_ready = false;
          hls_parser = new Hls({
            manifestLoadTimeout: Player.playdata().hls_manifest_timeout || 10000,
            manifestLoadMaxRetryTimeout: Player.playdata().hls_retry_timeout || 30000,
            xhrSetup: function xhrSetup(xhr, url) {
              xhr.timeout = Player.playdata().hls_manifest_timeout || 10000;
              xhr.ontimeout = function () {
                console.log('Player', 'hls manifestLoadTimeout');
              };
            }
          });
          hls_parser.loadSource(src);
          hls_parser.on(Hls.Events.ERROR, function (event, data) {
            console.log('Player', 'hls parse error', data.reason, data.details, data.fatal);
            if (!send_load_ready) load$3(src);
          });
          hls_parser.on(Hls.Events.MANIFEST_LOADED, function () {
            if (hls_parser.audioTracks.length) listener$a.send('translate', {
              where: 'tracks',
              translate: hls_parser.audioTracks.map(function (a) {
                return {
                  name: a.name
                };
              })
            });
            if (hls_parser.subtitleTracks.length) listener$a.send('translate', {
              where: 'subs',
              translate: hls_parser.subtitleTracks.map(function (a) {
                return {
                  label: a.name
                };
              })
            });
            console.log('Player', 'parse hls audio', hls_parser.audioTracks.length, hls_parser.audioTracks.map(function (a) {
              return a.name;
            }));
            console.log('Player', 'parse hls subs', hls_parser.subtitleTracks.length, hls_parser.subtitleTracks.map(function (a) {
              return a.name;
            }));
            if (!hls_parser.audioTracks.length) {
              var start_level = hlsLevelDefault(hls_parser);
              var select_level = start_level >= 0 ? hls_parser.levels[start_level] : hls_parser.levels[hls_parser.levels.length - 1];
              var parsed_levels = hls_parser.levels.map(function (level) {
                return {
                  title: hlsLevelName(level),
                  change_quality: true,
                  url: level.url[0],
                  selected: level === select_level
                };
              });
              console.log('Player', 'set hls levels', parsed_levels);
              listener$a.send('levels', {
                levels: parsed_levels,
                current: hlsLevelName(select_level)
              });
              console.log('Player', 'hls select level url:', select_level.url[0]);
              load$3(select_level.url[0]);
            } else load$3(src);
            send_load_ready = true;
          });
        } else load$3(src);
      } else load$3(src);
    } else load$3(src);
  }

  /**
   * Начать загрузку
   * @param {string} src 
   */
  function load$3(src) {
    if (hls_parser) {
      hls_parser.destroy();
      hls_parser = false;
    }
    _video.src = src;
    console.log('Player', 'video load url:', src);
    _video.load();
    play$2();
  }

  /**
   * Играем
   */
  function play$2() {
    var playPromise;
    try {
      playPromise = _video.play();
    } catch (e) {}
    if (playPromise !== undefined) {
      playPromise.then(function () {
        console.log('Player', 'start plaining');
      })["catch"](function (e) {
        console.log('Player', 'play promise error:', e.message);
      });
    }
    paused.addClass('hide');
    listener$a.send('play', {});
  }

  /**
   * Пауза
   */
  function pause() {
    var pausePromise;
    try {
      pausePromise = _video.pause();
    } catch (e) {}
    if (pausePromise !== undefined) {
      pausePromise.then(function () {
        console.log('Player', 'pause');
      })["catch"](function (e) {
        console.log('Player', 'pause promise error:', e.message);
      });
    }
    paused.removeClass('hide');
    clearTimeout(pause_timer);
    pause_timer = setTimeout(function () {
      paused.addClass('hide');
    }, 4000);
    listener$a.send('pause', {});
  }

  /**
   * Играем или пауза
   */
  function playpause() {
    if (wait || rewind_position) return;
    if (_video.paused) {
      play$2();
      listener$a.send('play', {});
    } else {
      pause();
      listener$a.send('pause', {});
    }
  }

  /**
   * Завершаем перемотку
   * @param {boolean} immediately - завершить немедленно
   */
  function rewindEnd(immediately) {
    clearTimeout(timer$3.rewind_call);
    timer$3.rewind_call = setTimeout(function () {
      _video.currentTime = rewind_position;
      rewind_position = 0;
      rewind_force = 0;
      play$2();
      if (webos) webos.rewinded();
    }, immediately ? 0 : 1000);
  }

  /**
   * Подготовка к перемотке
   * @param {number} position_time - новое время
   * @param {boolean} immediately - завершить немедленно
   */
  function rewindStart(position_time, immediately) {
    if (!_video.duration) return;
    rewind_position = Math.max(0, Math.min(position_time, _video.duration));
    pause();
    if (rewind_position == 0) _video.currentTime = 0;else if (rewind_position == _video.duration) _video.currentTime = _video.duration;
    timer$3.rewind = Date.now();
    listener$a.send('timeupdate', {
      duration: _video.duration,
      current: rewind_position
    });
    listener$a.send('rewind', {});
    rewindEnd(immediately);
  }

  /**
   * Начать перематывать
   * @param {boolean} forward - направление, true - вперед
   * @param {number} custom_step - свое значение в секундах
   */
  function rewind(forward, custom_step) {
    if (_video.duration) {
      var step = Storage.field('player_rewind');
      if (rewind_position == 0) {
        rewind_force = Math.max(5, custom_step || step);
        rewind_position = _video.currentTime;
      }
      rewind_force *= 1.03;
      if (forward) {
        rewind_position += rewind_force;
      } else {
        rewind_position -= rewind_force;
      }
      rewindStart(rewind_position);
    }
  }

  /**
   * Размер видео, масштаб
   * @param {string} type
   */
  function size$1(type) {
    neeed_sacle = type;
    neeed_sacle_last = type;
    scale();
    if (_video.size) _video.size(type);
  }
  function speed(value) {
    neeed_speed = value;
    var fv = value == 'default' ? 1 : parseFloat(value);
    if (_video.speed) _video.speed(fv);else if (webos) webos.speed(fv);else _video.playbackRate = fv;
  }

  /**
   * Перемотка на позицию 
   * @param {number} type 
   */
  function to(seconds) {
    pause();
    try {
      if (seconds == -1) _video.currentTime = Math.max(0, _video.duration - 3);else _video.currentTime = seconds;
    } catch (e) {}
    play$2();
  }
  function enterToPIP() {
    if (!document.pictureInPictureElement && document.pictureInPictureEnabled && _video.requestPictureInPicture) {
      _video.requestPictureInPicture();
    }
  }
  function exitFromPIP() {
    if (document.pictureInPictureElement) {
      document.exitPictureInPicture();
    }
  }
  function togglePictureInPicture() {
    if (document.pictureInPictureElement) exitFromPIP();else enterToPIP();
  }
  function changeVolume(volume) {
    _video.volume = volume;
    Storage.set('player_volume', volume);
  }
  function registerTube(params) {
    if (typeof params.verify === 'function' && typeof params.create === 'function') {
      if (video_tube.indexOf(params) == -1) video_tube.push(params);
      return true;
    }
    return false;
  }
  function verifyTube(src) {
    var find = video_tube.find(function (e) {
      return e.verify(src);
    });
    return find ? find : false;
  }
  function removeTube(params) {
    Arrays.remove(video_tube, params);
  }

  /**
   * Уничтожить
   * @param {boolean} type - сохранить с параметрами
   */
  function destroy$7(savemeta) {
    subsview(false);
    neeed_sacle = false;
    paused.addClass('hide');
    if (webos) webos.destroy();
    $('> div', subtitles$1).empty();
    webos = null;
    webos_wait = {};
    clearTimeout(click_timer);
    var hls_destoyed = false;
    var dash_destoyed = false;
    if (hls) {
      try {
        hls.destroy();
      } catch (e) {}
      hls = false;
      hls_destoyed = true;
    }
    if (hls_parser) {
      try {
        hls_parser.destroy();
      } catch (e) {}
      hls_parser = false;
    }
    if (dash) {
      try {
        dash.destroy();
      } catch (e) {}
      dash = false;
      dash_destoyed = true;
    }
    if (!savemeta) {
      if (customsubs) {
        customsubs.destroy();
        customsubs = false;
      }
    } else {
      Prisma.PlayerInfo.set('bitrate', '');
    }
    exitFromPIP();
    if (_video && !(hls_destoyed || dash_destoyed)) {
      if (_video.destroy) _video.destroy();else {
        _video.src = "";
        _video.load();
      }
    }
    if (normalization) {
      normalization.destroy();
      normalization = false;
    }
    display.empty();
    loader(false);
  }
  function render$a() {
    return html$f;
  }
  var PlayerVideo = {
    init: init$F,
    listener: listener$a,
    url: url$3,
    render: render$a,
    destroy: destroy$7,
    playpause: playpause,
    rewind: rewind,
    play: play$2,
    pause: pause,
    size: size$1,
    speed: speed,
    subsview: subsview,
    customSubs: customSubs,
    to: to,
    video: function video() {
      return _video;
    },
    saveParams: saveParams,
    clearParamas: clearParamas,
    setParams: setParams,
    normalizationVisible: normalizationVisible,
    togglePictureInPicture: togglePictureInPicture,
    changeVolume: changeVolume,
    registerTube: registerTube,
    removeTube: removeTube,
    verifyTube: verifyTube
  };

  function parse$1(data) {
    var result = {
      hash_string: '',
      season: null,
      episode: null,
      serial: !!data.movie.number_of_seasons
    };
    var regexps = [[/\bs(\d+)\.?ep?(\d+)\b/i, 'season', 'episode'], [/\b(\d{1,2})[x\-](\d+)\b/i, 'season', 'episode'], [/\bs(\d{2})(\d{2,3})\b/i, 'season', 'episode'], [/season (\d+) episode (\d+)/i, 'season', 'episode'], [/сезон (\d+) серия (\d+)/i, 'season', 'episode'], [/(\d+) season (\d+) episode/i, 'season', 'episode'], [/(\d+) сезон (\d+) серия/i, 'season', 'episode'], [/episode (\d+)/i, 'episode'], [/серия (\d+)/i, 'episode'], [/(\d+) episode/i, 'episode'], [/(\d+) серия/i, 'episode'], [/season (\d+)/i, 'season'], [/сезон (\d+)/i, 'season'], [/(\d+) season/i, 'season'], [/(\d+) сезон/i, 'season'], [/\bs(\d+)\b/i, 'season'], [/\bep?\.?(\d+)\b/i, 'episode'], [/\b(\d{1,3}) of (\d+)/i, 'episode'], [/\b(\d{1,3}) из (\d+)/i, 'episode'], [/ - (\d{1,3})\b/i, 'episode'], [/\[(\d{1,3})\]/i, 'episode'], [/(\d+) сер/i, 'episode']];
    var folder_regexps = [[/season (\d+)/i, 'season'], [/сезон (\d+)/i, 'season'], [/(\d+) season/i, 'season'], [/(\d+) сезон/i, 'season'], [/\bs(\d+)\b/i, 'season']];
    var parts = data.path.replace(/_/g, ' ').split('/');
    var fname = parts.pop();
    var folder = parts.pop();
    regexps.forEach(function (regexp) {
      var match = fname.match(regexp[0]);
      if (match) {
        var arr = regexp.slice(1);
        arr.forEach(function (a, i) {
          var v = match[i + 1];
          if (v && result[a] == null) result[a] = parseInt(v);
        });
      }
    });
    if (folder && result.season == null) {
      folder_regexps.forEach(function (regexp) {
        var match = folder.match(regexp[0]);
        if (match) {
          var arr = regexp.slice(1);
          arr.forEach(function (a, i) {
            var v = match[i + 1];
            if (v && result[a] == null) result[a] = parseInt(v);
          });
        }
      });
    }
    if (result.season == null) result.season = data.movie.number_of_seasons ? 1 : 0;
    if (result.episode == null) {
      var match = data.filename.replace(/_/g, ' ').trim().match(/^(\d{1,3})\b/i);
      result.episode = match ? parseInt(match[1]) : 0;
    }
    if (!data.is_file) {
      if (data.movie.number_of_seasons) {
        result.hash_string = [result.season, result.season > 10 ? ':' : '', result.episode, data.movie.original_title].join('');
      } else if (data.movie.original_title && !result.serial) {
        result.hash_string = data.movie.original_title;
      } else {
        result.hash_string = data.path;
      }
    } else {
      result.hash_string = data.path;
    }
    return result;
  }
  var EpisodeParser = {
    parse: parse$1
  };

  var network$7 = new create$e();
  function url$2() {
    var u = ip();
    return u ? Utils$2.checkEmptyUrl(u) : u;
  }
  function ip() {
    var one = Storage.get('torrserver_url');
    var two = Storage.get('torrserver_url_two');
    return Storage.field('torrserver_use_link') == 'two' ? two || one : one || two;
  }
  function my(success, fail) {
    var data = JSON.stringify({
      action: 'list'
    });
    clear$5();
    network$7.silent(url$2() + '/torrents', function (result) {
      if (result.length) success(result);else fail();
    }, fail, data);
  }
  function cache$1(hash, success, fail) {
    var data = JSON.stringify({
      action: 'get',
      hash: hash
    });
    network$7.silent(url$2() + '/cache', success, fail, data);
  }
  function add$7(object, success, fail) {
    var send_data = object.data ? Arrays.clone(object.data) : false;
    if (send_data && send_data.movie) send_data.movie = Utils$2.clearCard(send_data.movie);
    var data = JSON.stringify({
      action: 'add',
      link: object.link,
      title: '' + (object.title + '').replace('??', '?'),
      poster: object.poster,
      data: send_data ? JSON.stringify(send_data) : '',
      save_to_db: true
    });
    clear$5();
    network$7.silent(url$2() + '/torrents', success, fail, data);
  }
  function hash$1(object, success, fail) {
    var send_data = object.data ? Arrays.clone(object.data) : false;
    if (send_data && send_data.movie) send_data.movie = Utils$2.clearCard(send_data.movie);
    var data = JSON.stringify({
      action: 'add',
      link: object.link,
      title: '' + (object.title + '').replace('??', '?'),
      poster: object.poster,
      data: send_data ? JSON.stringify(send_data) : '',
      save_to_db: Storage.get('torrserver_savedb', 'false')
    });
    clear$5();
    network$7.silent(url$2() + '/torrents', success, function (a, c) {
      fail(network$7.errorDecode(a, c));
    }, data);
  }
  function files$1(hash, success, fail) {
    var data = JSON.stringify({
      action: 'get',
      hash: hash
    });
    clear$5();
    network$7.timeout(2000);
    network$7.silent(url$2() + '/torrents', function (json) {
      if (json.file_stats) {
        success(json);
      }
    }, fail, data);
  }
  function connected(success, fail) {
    clear$5();
    network$7.timeout(5000);
    network$7.silent(url$2() + '/settings', function (json) {
      if (typeof json.CacheSize == 'undefined') {
        fail(Lang.translate('torrent_error_nomatrix'));
      } else {
        success(json);
      }
    }, function (a, c) {
      fail(network$7.errorDecode(a, c));
    }, JSON.stringify({
      action: 'get'
    }));
  }
  function stream(path, hash, id) {
    return url$2() + '/stream/' + encodeURIComponent(path.split('\\').pop().split('/').pop()) + '?link=' + hash + '&index=' + id + '&' + (Storage.field('torrserver_preload') ? 'preload' : 'play');
  }
  function drop(hash, success, fail) {
    var data = JSON.stringify({
      action: 'drop',
      hash: hash
    });
    clear$5();
    network$7.silent(url$2() + '/torrents', success, fail, data, {
      dataType: 'text'
    });
  }
  function remove$2(hash, success, fail) {
    var data = JSON.stringify({
      action: 'rem',
      hash: hash
    });
    clear$5();
    network$7.silent(url$2() + '/torrents', success, fail, data, {
      dataType: 'text'
    });
  }
  function parse(data) {
    var result = EpisodeParser.parse(data);
    result.hash = Utils$2.hash(result.hash_string);
    return result;
  }
  function clearFileName(files) {
    var combo = [];
    files.forEach(function (element) {
      var spl = element.path.split('/');
      var nam = spl[spl.length - 1].split('.');
      if (nam.length > 1) nam.pop();
      nam = nam.join('.');
      element.path_human = Utils$2.pathToNormalTitle(nam, false).trim();
      if (spl.length > 1) {
        spl.pop();
        element.folder_name = Utils$2.pathToNormalTitle(spl.pop(), false).trim();
      }
    });
    if (files.length > 1) {
      files.forEach(function (element) {
        var spl = element.path_human.split(' ');
        for (var i = spl.length - 1; i >= 0; i--) {
          var com = spl.join(' ');
          if (combo.indexOf(com) == -1) combo.push(com);
          spl.pop();
        }
      });
      combo.sort(function (a, b) {
        return a.length > b.length ? -1 : a.length < b.length ? 1 : 0;
      });
      var _loop = function _loop() {
        var com = combo[i];
        var len = files.filter(function (f) {
          return f.path_human.slice(0, com.length) == com;
        }).length;
        if (len < files.length) Arrays.remove(combo, com);
      };
      for (var i = combo.length - 1; i >= 0; i--) {
        _loop();
      }
      files.forEach(function (element) {
        for (var _i = 0; _i < combo.length; _i++) {
          var com = combo[_i];
          var inx = element.path_human.indexOf(com);
          if (inx >= 0 && com !== element.path_human) {
            element.path_human = element.path_human.slice(com.length).trim();
            break;
          }
        }
      });
    }
    return files;
  }
  function clear$5() {
    network$7.clear();
  }
  function error$2() {
    var temp = Template.get('torrent_error', {
      ip: ip()
    });
    var list = temp.find('.torrent-checklist__list > li');
    var info = temp.find('.torrent-checklist__info > div');
    var next = temp.find('.torrent-checklist__next-step');
    var prog = temp.find('.torrent-checklist__progress-bar > div');
    var comp = temp.find('.torrent-checklist__progress-steps');
    var btn = temp.find('.selector');
    var position = -2;
    function makeStep() {
      position++;
      list.slice(0, position + 1).addClass('wait');
      var total = list.length;
      comp.text(Lang.translate('torrent_error_made') + ' ' + Math.max(0, position) + ' ' + Lang.translate('torrent_error_from') + ' ' + total);
      if (position > list.length) {
        Modal.close();
        Controller.toggle('content');
      } else if (position >= 0) {
        info.addClass('hide');
        info.eq(position).removeClass('hide');
        var next_step = list.eq(position + 1);
        prog.css('width', Math.round(position / total * 100) + '%');
        list.slice(0, position).addClass('check');
        btn.text(position < total ? Lang.translate('torrent_error_next') : Lang.translate('torrent_error_complite'));
        next.text(next_step.length ? '- ' + next_step.text() : '');
      }
    }
    makeStep();
    btn.on('hover:enter', function () {
      makeStep();
    });
    Modal.title(Lang.translate('torrent_error_connect'));
    Modal.update(temp);
    Controller.add('modal', {
      invisible: true,
      toggle: function toggle() {
        Controller.collectionSet(temp);
        Controller.collectionFocus(false, temp);
      },
      back: function back() {
        Modal.close();
        Controller.toggle('content');
      }
    });
    Controller.toggle('modal');
  }
  var Torserver = {
    ip: ip,
    my: my,
    add: add$7,
    url: url$2,
    hash: hash$1,
    files: files$1,
    clear: clear$5,
    drop: drop,
    stream: stream,
    remove: remove$2,
    connected: connected,
    parse: parse,
    error: error$2,
    cache: cache$1,
    clearFileName: clearFileName
  };

  var html$e;
  var listener$9 = start$8();
  var network$6 = new create$e();
  var elems;
  var error$1, stat_timer;
  function init$E() {
    html$e = Template.get('player_info');
    html$e.find('.player-info__body').prepend(HeadBackward('Плеер'));
    elems = {
      name: $('.player-info__name,.head-backward__title', html$e),
      size: $('.value--size span', html$e),
      stat: $('.value--stat span', html$e),
      speed: $('.value--speed span', html$e),
      error: $('.player-info__error', html$e),
      pieces: $('.value--pieces', html$e),
      format: $('.value--format span', html$e)
    };
    Utils$2.time(html$e);
  }

  /**
   * Установить значение
   * @param {string} need
   * @param {string|{width,height}} value 
   */
  function set$2(need, value) {
    if (need == 'name') elems.name.html(value);else if (need == 'size' && value.width && value.height) elems.size.text(value.width + 'x' + value.height);else if (need == 'error') {
      clearTimeout(error$1);
      elems.error.removeClass('hide').text(value);
      error$1 = setTimeout(function () {
        elems.error.addClass('hide');
      }, 10000);
    } else if (need == 'stat') stat$2(value);else if (need == 'bitrate') elems.stat.html(value);else if (need == 'format') elems.format.html(value);
  }
  function pieces(cache) {
    elems.pieces.empty();
    if (cache.Readers.length) {
      var reader = cache.Readers[0].Reader;
      var end = cache.Readers[0].End;
      var start = reader;
      var total = end - reader;
      var dots = 5;
      var loaded = 0;
      while (cache.Pieces[start] && cache.Pieces[start].Completed && start < end) {
        start++;
        loaded++;
      }
      var percent = loaded / total * 100;
      for (var i = 0; i < dots; i++) {
        var color = '';
        var filled = Math.round(dots * (loaded / total)) >= i;
        if (i == 0) {
          if (percent > 80) color = 'green';else if (percent >= 40) color = 'yellow';else color = 'red';
        } else if (filled) color = 'active';
        elems.pieces.append('<span class="' + color + '"></span>');
      }
    }
  }

  /**
   * Показываем статистику по торренту
   * @param {string} url 
   */
  function stat$2(url) {
    var wait = 0;
    elems.stat.text('- / - • - ' + Lang.translate('connected_seeds'));
    elems.speed.text('--');
    var update = function update() {
      // если панель скрыта, то зачем каждую секунду чекать? хватит и 5 сек
      // проверено, если ставить на паузу, разадача удаляется, но если чекать постоянно, то все норм
      if (!html$e.hasClass('info--visible')) {
        wait++;
        if (wait <= 5) return;else wait = 0;
      }
      network$6.timeout(2000);
      network$6.silent(url.replace('preload', 'stat').replace('play', 'stat'), function (data) {
        elems.stat.text((data.active_peers || 0) + ' / ' + (data.total_peers || 0) + ' • ' + (data.connected_seeders || 0) + ' ' + Lang.translate('connected_seeds'));
        elems.speed.text(Utils$2.bytesToSize(data.download_speed ? data.download_speed * 8 : 0, true));
        var hash = url.match(/link=(.*?)\&/);
        if (hash) {
          Torserver.cache(hash[1], function (cache) {
            pieces(cache);
            listener$9.send('stat', {
              data: data,
              cache: cache
            });
          }, function () {
            listener$9.send('stat', {
              data: data
            });
          });
        } else {
          listener$9.send('stat', {
            data: data
          });
        }
      });
    };
    stat_timer = setInterval(update, 2000);
    update();
  }

  /**
   * Показать скрыть инфо
   * @param {boolean} status 
   */
  function toggle$6(status) {
    html$e.toggleClass('info--visible', status);
  }
  function loading$2() {
    elems.size.text(Lang.translate('loading') + '...');
  }

  /**
   * Уничтожить
   */
  function destroy$6() {
    elems.size.text(Lang.translate('loading') + '...');
    elems.stat.text('');
    elems.speed.text('');
    elems.error.addClass('hide');
    elems.pieces.empty();
    elems.format.text('');
    clearTimeout(error$1);
    clearInterval(stat_timer);
    network$6.clear();
  }
  function render$9() {
    return html$e;
  }
  var PlayerInfo = {
    init: init$E,
    listener: listener$9,
    render: render$9,
    set: set$2,
    toggle: toggle$6,
    loading: loading$2,
    destroy: destroy$6
  };

  var listener$8 = start$8();
  var current = '';
  var playlist$1 = [];
  var _position = 0;

  /**
   * Показать плейлист
   */
  function show$8() {
    active$4();
    var enabled = Controller.enabled();
    Select.show({
      title: Lang.translate('player_playlist'),
      items: playlist$1,
      onSelect: function onSelect(a) {
        Controller.toggle(enabled.name);
        listener$8.send('select', {
          playlist: playlist$1,
          item: a,
          position: _position
        });
      },
      onBack: function onBack() {
        Controller.toggle(enabled.name);
      }
    });
  }

  /**
   * Установить активным
   */
  function active$4() {
    playlist$1.forEach(function (element) {
      element.selected = element.url == current;
      if (element.selected) _position = playlist$1.indexOf(element);
    });
  }

  /**
   * Назад
   */
  function prev() {
    active$4();
    if (_position > 0) {
      listener$8.send('select', {
        playlist: playlist$1,
        position: _position - 1,
        item: playlist$1[_position - 1]
      });
    }
  }

  /**
   * Далее
   */
  function next() {
    active$4();
    if (_position < playlist$1.length - 1) {
      listener$8.send('select', {
        playlist: playlist$1,
        position: _position + 1,
        item: playlist$1[_position + 1]
      });
    }
  }

  /**
   * Можно ли далее
   * @returns {boolean}
   */
  function canNext() {
    active$4();
    return _position < playlist$1.length - 1;
  }

  /**
   * Установить плейлист
   * @param {[{title:string, url:string}]} p 
   */
  function set$1(p) {
    playlist$1 = p;
    playlist$1.forEach(function (l, i) {
      if (l.url == current) _position = i;
    });
    listener$8.send('set', {
      playlist: playlist$1,
      position: _position
    });
  }

  /**
   * Получить список
   * @returns {[{title:string, url:string}]}
   */
  function get$7() {
    return playlist$1;
  }

  /**
   * Установить текуший урл
   * @param {string} u 
   */
  function url$1(u) {
    current = u;
  }
  var PlayerPlaylist = {
    listener: listener$8,
    active: active$4,
    show: show$8,
    url: url$1,
    get: get$7,
    canNext: canNext,
    set: set$1,
    prev: prev,
    next: next,
    position: function position() {
      return _position;
    }
  };

  var Nature = /*#__PURE__*/function () {
    function Nature() {
      _classCallCheck(this, Nature);
      this.slide = 'one';
      this.direct = ['lt', 'rt', 'br', 'lb', 'ct'];
    }
    return _createClass(Nature, [{
      key: "create",
      value: function create() {
        this.html = Template.get('screensaver');
        this.timer = setInterval(this.next.bind(this), 30000);
        this.time = Utils$2.time(this.html);
        this.time.tik();
        this.next();
      }
    }, {
      key: "next",
      value: function next() {
        var _this = this;
        var image = 'https://picsum.photos/1600/900?v=' + Math.random();
        var to_img = $('.screensaver__slides-' + (this.slide == 'one' ? 'two' : 'one'), this.html)[0];
        to_img.onload = function () {
          $(to_img).removeClass(_this.direct.join(' ') + ' animate').addClass(_this.direct[Math.floor(Math.random() * _this.direct.length)]);
          setTimeout(function () {
            $('.screensaver__slides-' + _this.slide, _this.html).removeClass('visible');
            _this.slide = _this.slide == 'one' ? 'two' : 'one';
            $(to_img).addClass('visible').addClass('animate');
          }, 100);
        };
        to_img.onerror = this.next.bind(this);
        to_img.src = image;
      }
    }, {
      key: "render",
      value: function render() {
        return this.html;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        clearInterval(this.timer);
        clearInterval(this.time.timer);
        this.html.remove();
      }
    }]);
  }();

  var Chrome = /*#__PURE__*/function () {
    function Chrome() {
      _classCallCheck(this, Chrome);
    }
    return _createClass(Chrome, [{
      key: "create",
      value: function create() {
        this.html = $('<div class="screensaver-chrome"><iframe src="https://clients3.google.com/cast/chromecast/home" class="screensaver-chrome__iframe"></iframe><div class="screensaver-chrome__overlay"></div></div>');
      }
    }, {
      key: "render",
      value: function render() {
        return this.html;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.html.remove();
      }
    }]);
  }();

  var Aerial = /*#__PURE__*/function () {
    function Aerial(params) {
      _classCallCheck(this, Aerial);
      this.params = params;
      this.net = new create$e();
      this.visible = false;
      this.items = [];
      this.opacity = 0;
      this.transition_time = 4000;
      this.transition_timeout;
    }
    return _createClass(Aerial, [{
      key: "create",
      value: function create() {
        var _this = this;
        this.html = Template.get('screensaver');
        this.preload = $('<div class="screensaver__preload"></div>');
        this.video = $('<video class="screensaver__video" muted="" preload=""></video>')[0];
        this.overlay = $('<div class="screensaver__video-overlay"></div>');
        this.video.addEventListener('timeupdate', function () {
          if (_this.video.duration) {
            var visible = _this.video.currentTime > 0 && _this.video.currentTime < _this.video.duration - 5;
            var points = _this.object.pointsOfInterest;
            if (visible !== _this.visible) {
              _this.visible = visible;
              _this.info.toggleClass('visible', visible);
              if (_this.visible) _this.fadeVideoOut(_this.transition_time);else _this.fadeVideoIn(_this.transition_time);
            }
            if (_this.video.currentTime == _this.video.duration && !_this.wait_load) {
              _this.wait_load = true;
              _this.select();
              _this.play();
            }
            if (points) {
              for (var time in points) {
                var text = points[time];
                if (parseInt(time) <= _this.video.currentTime && _this.tagline.text_ready !== text) {
                  _this.tagline.text_ready = text;
                  _this.tagline.text(text);
                }
              }
            }
          }
        });
        this.info = $("<div class=\"screensaver__title\">\n            <div class=\"screensaver__title-name\"></div>\n            <div class=\"screensaver__title-tagline\"></div>\n        </div>");
        this.title = this.info.find('.screensaver__title-name');
        this.tagline = this.info.find('.screensaver__title-tagline');
        this.html.prepend(this.preload);
        this.html.prepend(this.overlay);
        this.html.prepend(this.video);
        this.html.find('.screensaver__slides').remove();
        this.html.find('.screensaver__gradient').after(this.info);
        this.time = Utils$2.time(this.html);
        this.time.tik();
        this.cache(function () {
          _this.select();
          _this.play();
        });
      }
    }, {
      key: "select",
      value: function select() {
        this.object = this.items[Math.floor(Math.random() * this.items.length)];
        this.title.text(this.object.name.replace(/\s\d$/, ''));
        this.tagline.text(Utils$2.capitalizeFirstLetter(this.object.type));
      }
    }, {
      key: "fadeVideoIn",
      value: function fadeVideoIn(time) {
        if (time > 0) {
          this.transition_timeout = setTimeout(this.fadeVideoIn.bind(this), 16, time - 16);
        }
        this.opacity = 1 - time / this.transition_time;
        this.overlay[0].style.opacity = this.opacity;
      }
    }, {
      key: "fadeVideoOut",
      value: function fadeVideoOut(time) {
        if (time > 0) {
          this.transition_timeout = setTimeout(this.fadeVideoOut.bind(this), 16, time - 16);
        }
        this.opacity = time / this.transition_time;
        this.overlay[0].style.opacity = this.opacity;
      }
    }, {
      key: "play",
      value: function play() {
        var _this2 = this;
        this.video.src = this.object.src.H2641080p.replace('https:', 'http:');
        this.video.load();
        var playPromise;
        try {
          playPromise = this.video.play();
        } catch (e) {}
        var startPlay = function startPlay() {
          console.log('Screesaver', 'playing');
          _this2.preload.remove();
          _this2.wait_load = false;
        };
        if (playPromise !== undefined) {
          playPromise.then(function () {
            return startPlay();
          })["catch"](function (e) {
            console.log('Player', 'play promise error:', e.message);
          });
        } else startPlay();
      }
    }, {
      key: "cache",
      value: function cache(call) {
        var _this3 = this;
        this.items = Storage.get('screensaver_aerial_items', '[]');
        if (this.items.length) call();else {
          this.net.silent('https://raw.githubusercontent.com/OrangeJedi/Aerial/master/videos.json', function (json) {
            _this3.items = json.filter(function (a) {
              return a.src.H2641080p;
            });
            Storage.set('screensaver_aerial_items', _this3.items);
            call();
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        return this.html;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.html.remove();
        this.net.clear();
        clearTimeout(this.transition_timeout);
      }
    }]);
  }();

  var Screensaver$1 = /*#__PURE__*/function () {
    function Screensaver() {
      _classCallCheck(this, Screensaver);
      this.listener = start$8();
      this.enabled = false;
      this.worked = false;
      this.screensaver;
      this.timer;
      this.time_reset = 0;
      this.time_start = 0;
      this.class_list = {
        nature: Nature,
        aerial: Aerial,
        chrome: Chrome
      };
    }
    return _createClass(Screensaver, [{
      key: "init",
      value: function init() {
        var _this = this;
        this.html = $('<div class="screensaver-layer"></div>');
        this.html.on('click', this.stop.bind(this));
        $('body').append(this.html);
        this.resetTimer();
        Keypad.listener.follow('keydown', function (e) {
          _this.resetTimer();
          if (_this.worked) {
            _this.stopSlideshow();
            e.event.preventDefault();
          }
        });
        Keypad.listener.follow('keyup', function (e) {
          if (_this.worked) e.event.preventDefault();
        });
        $(window).on('mousedown', function (e) {
          _this.resetTimer();
        });
        $(window).on('focus', this.resetTimer.bind(this));
      }
    }, {
      key: "toggle",
      value: function toggle(enabled) {
        this.enabled = enabled;
        this.resetTimer();
        this.listener.send('toggle', {
          status: this.enabled
        });
      }
    }, {
      key: "enable",
      value: function enable() {
        this.toggle(true);
      }
    }, {
      key: "disable",
      value: function disable() {
        this.toggle(false);
      }
    }, {
      key: "isWorked",
      value: function isWorked() {
        return this.enabled ? this.worked : this.enabled;
      }
    }, {
      key: "stop",
      value: function stop() {
        if (this.isWorked()) this.stopSlideshow();
      }

      /* Зачем чтобы выгорали olde панели, делаем рандом тайм. */
    }, {
      key: "setRandomPosition",
      value: function setRandomPosition() {
        var positions = [{
          top: '10%',
          right: '5%',
          bottom: 'auto',
          left: 'auto',
          textAlign: 'right'
        }, {
          top: 'auto',
          right: '5%',
          bottom: '10%',
          left: 'auto',
          textAlign: 'right'
        }, {
          top: '10%',
          right: 'auto',
          bottom: 'auto',
          left: '5%',
          textAlign: 'left'
        }];
        var randomPosition = positions[Math.floor(Math.random() * positions.length)];
        var datetimeElement = this.html.find('.screensaver__datetime');
        if (datetimeElement.length) {
          datetimeElement.css(randomPosition);
        }
      }
    }, {
      key: "startPositionChange",
      value: function startPositionChange() {
        var _this2 = this;
        this.setRandomPosition(); // Устанавливаем начальную позицию
        this.positionInterval = setInterval(function () {
          _this2.setRandomPosition();
        }, 15000); // 15000 миллисекунд = 15 секунд
      }
    }, {
      key: "stopPositionChange",
      value: function stopPositionChange() {
        if (this.positionInterval) {
          clearInterval(this.positionInterval);
          this.positionInterval = null;
        }
      }
    }, {
      key: "show",
      value: function show(type, params) {
        clearTimeout(this.timer);
        this.listener.send('start', {});
        var select = Storage.field('screensaver_type');
        if (typeof type == 'string') select = type;
        var Class = Chrome;
        if (this.class_list[select]) Class = this.class_list[select];
        this.screensaver = new Class(params);
        this.screensaver.create();
        this.html.append(this.screensaver.render());
        this.startPositionChange();
        this.html.fadeIn(300);
        this.worked = true;
      }
    }, {
      key: "resetTimer",
      value: function resetTimer() {
        var _this3 = this;
        clearTimeout(this.timer);
        this.time_reset = Date.now();
        if (!Storage.field('screensaver') || !this.enabled || this.worked) return;
        var timeout = 1000 * 60 * Storage.field('screensaver_time');
        this.timer = setTimeout(function () {
          /* для ведра, когда в приложении появляетя фокус срабатывает таймер */
          if (Date.now() - _this3.time_reset <= timeout + 100) _this3.show();else _this3.resetTimer();
        }, timeout);
      }
    }, {
      key: "stopSlideshow",
      value: function stopSlideshow() {
        var _this4 = this;
        this.worked = false;
        this.stopPositionChange();
        this.html.fadeOut(300, function () {
          _this4.html.removeClass('visible');
          if (_this4.screensaver) {
            _this4.screensaver.destroy();
            _this4.screensaver = false;
          }
        });
        this.resetTimer();
        this.listener.send('stop', {});
      }
    }]);
  }();
  var Screensaver$2 = new Screensaver$1();

  var status$1 = false;
  function init$D() {
    $.ajax({
      url: "./personal.prisma",
      dataType: 'text',
      success: function success() {
        status$1 = true;
      }
    });
  }
  function confirm() {
    return status$1;
  }
  var Personal = {
    init: init$D,
    confirm: confirm
  };

  var last_responce = {};
  function stat$1(method, name) {
    var additionalData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    try {
      var type = 'vast';
      if (name == 'plugin') {
        var activity = Storage.get('activity', '{}');
        if (activity.component) {
          type = 'plugin';
          name = activity.component;
        }
      }

      // Безопасное получение данных о фильме
      var movie = null;
      var movie_genres = [];
      var movie_id = 0;
      var movie_imdb = '';
      var movie_type = 'movie';
      try {
        var _activity = Storage.get('activity', '{}');
        if (_activity && _activity.movie) {
          movie = _activity.movie;
          movie_id = movie.id || 0;
          movie_imdb = movie.imdb_id || '';
          movie_type = movie.original_name ? 'tv' : 'movie';
          if (movie.genres && Array.isArray(movie.genres)) {
            movie_genres = movie.genres.map(function (g) {
              return g.id;
            }).filter(function (id) {
              return id !== undefined;
            });
          }
        }
      } catch (e) {}
      var paramData = _objectSpread2({
        platform: Platform.get(),
        type: type,
        method: method,
        name: name,
        uid: getUid(),
        guid: getGuid(),
        movie_id: movie_id,
        movie_genres: movie_genres.join(','),
        movie_imdb: movie_imdb,
        movie_type: movie_type,
        screen: Platform.screen('tv') ? 'tv' : 'mobile'
      }, additionalData);

      // Преобразуем в строку параметров
      var params = Object.keys(paramData).map(function (key) {
        return encodeURIComponent(key) + '=' + encodeURIComponent(paramData[key]);
      }).join('&');
      $.ajax({
        dataType: 'text',
        url: Utils$2.protocol() + object$2.pris_domain + '/api/ad/stat?' + params.toString(),
        timeout: 5000
      });
    } catch (e) {}
  }
  function log(data) {
    try {
      // Безопасное получение данных о фильме
      var movie = null;
      var movie_genres = [];
      var movie_id = 0;
      var movie_imdb = '';
      var movie_type = 'movie';
      try {
        var activity = Storage.get('activity', '{}');
        if (activity && activity.movie) {
          movie = activity.movie;
          movie_id = movie.id || 0;
          movie_imdb = movie.imdb_id || '';
          movie_type = movie.original_name ? 'tv' : 'movie';
          if (movie.genres && Array.isArray(movie.genres)) {
            movie_genres = movie.genres.map(function (g) {
              return g.id;
            }).filter(function (id) {
              return id !== undefined;
            });
          }
        }
      } catch (e) {}
      var logData = _objectSpread2(_objectSpread2({
        platform: Platform.get(),
        deviceUid: getUid(),
        guid: getGuid(),
        movieId: movie_id,
        movieGenres: movie_genres.join(','),
        movieImdb: movie_imdb,
        movieType: movie_type
      }, data), last_responce);
      $.ajax({
        type: 'POST',
        dataType: 'text',
        url: Utils$2.protocol() + object$2.pris_domain + '/api/ad/log',
        data: logData,
        timeout: 5000
      });
      last_responce = {};
    } catch (e) {}
  }
  function getGuid() {
    var guid = Storage.get('vast_device_guid', '');
    if (!guid || guid.indexOf('00000000') === 0) {
      guid = Utils$2.guid();
      Storage.set('vast_device_guid', guid);
    }
    return guid;
  }
  function getUid() {
    var uid = Storage.get('vast_device_uid', '');
    if (!uid) {
      uid = Utils$2.uid(15);
      Storage.set('vast_device_uid', uid);
    }
    return uid;
  }
  window.adv_logs_responce_event = function (e) {
    last_responce = {
      status: e.status,
      text: e.text
    };
    console.log('Ad', 'logs responce', last_responce);
  };
  var Vast = /*#__PURE__*/function () {
    function Vast(preroll) {
      _classCallCheck(this, Vast);
      this.listener = start$8();
      this.paused = false;
      this.preroll = preroll;
      setTimeout(this.start.bind(this), 100);
    }
    return _createClass(Vast, [{
      key: "start",
      value: function start() {
        var _this = this;
        try {
          var initialize = function initialize() {
            var _this2 = this;
            container.style.opacity = 0;
            player = new VASTPlayer(container);
            player.once('AdStopped', function () {
              stat$1('complete', block.name);
              console.log('Ad', 'complete');
              clearTimeout(timer);
              clearInterval(timer_end);
              clearInterval(adInterval);
              _this2.destroy();
            });
            player.on('AdPaused', function () {
              console.log('Ad', 'event', 'PAUSE');
              playning = false;
            });
            player.on('AdPlaying', function () {
              console.log('Ad', 'event', 'PLAY');
              playning = true;
            });
            player.on('AdVideoStart', function () {
              console.log('Ad', 'event', 'VIDEO_START');
              var video = player.container.find('video');
              if (video) {
                video.addEventListener('pause', function () {
                  console.log('Ad', 'event', 'PAUSE');
                  playning = false;
                });
              }
            });
            player.once('AdStarted', onAdStarted.bind(this));
            var pixel_ratio = window.devicePixelRatio || 1;
            var u = block.url.replace('{RANDOM}', Math.round(Date.now() * Math.random()));
            u = u.replace(/{TIME}/g, Date.now());
            u = u.replace(/{WIDTH}/g, Math.round(window.innerWidth * pixel_ratio));
            u = u.replace(/{HEIGHT}/g, Math.round(window.innerHeight * pixel_ratio));
            u = u.replace(/{PLATFORM}/g, Platform.get());
            u = u.replace(/{UID}/g, encodeURIComponent(getUid()));
            u = u.replace(/{PIXEL}/g, pixel_ratio);
            u = u.replace(/{GUID}/g, encodeURIComponent(getGuid()));
            u = u.replace(/{MOVIE_ID}/g, movie_id);
            u = u.replace(/{MOVIE_GENRES}/g, movie_genres.join(','));
            u = u.replace(/{MOVIE_IMDB}/g, movie_imdb);
            u = u.replace(/{MOVIE_TYPE}/g, movie_type);
            u = u.replace(/{SCREEN}/g, encodeURIComponent(Platform.screen('tv') ? 'tv' : 'mobile'));
            player.load(u).then(function () {
              return player.startAd();
            })["catch"](function (reason) {
              _error(100, reason.message);
            });
          };
          var onAdStarted = function onAdStarted() {
            var _this3 = this;
            console.log('Ad', 'event', 'STARTED');
            container.style.opacity = 1;
            if (!adStarted) stat$1('started', block.name);
            adStarted = true;
            clearTimeout(timer);
            clearInterval(timer_end);
            try {
              loader.remove();
            } catch (e) {}
            if (player.adDuration) {
              adDuration = player.adDuration;
              clearInterval(adInterval);
              adInterval = setInterval(updateAdProgress, 100);
            }
            timer_end = setInterval(function () {
              if (Date.now() - last_progress > 1000 * 10 && playning) stop.bind(_this3)();
            }, 1000);
          };
          var updateAdProgress = function updateAdProgress() {
            var remainingTime = player.adRemainingTime;
            var progress = Math.min(100, (1 - remainingTime / adDuration) * 100);
            last_progress = Date.now();
            progressbar.style.width = progress + '%';
            adReadySkip = adDuration > 30 ? adDuration - remainingTime > 30 : progress > (block.progress || 60);
            skip.find('span').text(Lang.translate(adReadySkip ? 'ad_skip' : Math.round(remainingTime)));
            if (remainingTime <= 0) {
              clearInterval(adInterval);
            }
          };
          var enter = function enter() {
            if (adReadySkip) stop.bind(this)();else {
              if (playning) player.pauseAd();else player.resumeAd();
            }
          };
          var stop = function stop() {
            var _this4 = this;
            clearTimeout(timer);
            clearInterval(timer_end);
            clearInterval(adInterval);
            player.stopAd().then(function () {
              _this4.destroy();
            })["catch"](function () {
              _error(200, 'Cant stop ads');
            });
          };
          var block = this.preroll;

          // Безопасное получение данных о фильме
          var movie = null;
          var movie_genres = [];
          var movie_id = 0;
          var movie_imdb = '';
          var movie_type = 'movie';
          try {
            var activity = Storage.get('activity', '{}');
            if (activity && activity.movie) {
              movie = activity.movie;
              movie_id = movie.id || 0;
              movie_imdb = movie.imdb_id || '';
              movie_type = movie.original_name ? 'tv' : 'movie';
              if (movie.genres && Array.isArray(movie.genres)) {
                movie_genres = movie.genres.map(function (g) {
                  return g.id;
                }).filter(function (id) {
                  return id !== undefined;
                });
              }
            }
          } catch (e) {}
          Storage.set('metric_adview', Storage.get('metric_adview', 0) + 1);
          stat$1('launch', block.name);
          this.block = Template.js('ad_video_block');
          this.block.find('video').remove();
          this.block.find('.ad-video-block__text').text(Lang.translate('ad') + ' - ' + Lang.translate('ad_disable')).toggleClass('hide', Boolean(block.msg));
          this.block.find('.ad-video-block__info').text('');
          if (block.msg) this.block.find('.ad-video-block__text').text(block.msg + ' - ' + Lang.translate('ad_disable')).toggleClass('hide', false);
          var skip = this.block.find('.ad-video-block__skip');
          var progressbar = this.block.find('.ad-video-block__progress-fill');
          var loader = this.block.find('.ad-video-block__loader');
          var container = this.block.find('.ad-video-block__vast');
          var player;
          var timer;
          var timer_end;
          var last_progress = Date.now();
          var playning = true;
          var create_time = Date.now();
          var adInterval;
          var adReadySkip;
          var adStarted;
          var adDuration = 0;
          var _error = function _error(code, msg) {
            _this.block.remove();
            clearTimeout(timer);
            clearInterval(timer_end);
            console.log('Ad', 'error', code, msg);
            _this.listener.send('error');
            stat$1('error', block.name);
            stat$1('error_' + code, block.name);
            log({
              code: code,
              name: block.name,
              message: msg
            });
          };
          this.block.on('click', enter.bind(this));
          document.body.append(this.block);
          Controller.add('ad_video_block', {
            toggle: function toggle() {
              Controller.clear();
            },
            enter: enter.bind(this),
            back: function back() {
              if (window.god_enabled && Date.now() - create_time > 1000 * 7) stop.bind(_this)();
            }
          });
          Controller.toggle('ad_video_block');
          this.listener.send('launch');
          timer = setTimeout(function () {
            _error(300, 'Timeout');
          }, 10000);
          console.log('Ad', 'run', block.name, 'from', block.name == 'plugin');
          try {
            initialize.apply(this);
          } catch (e) {
            _error(400, 'Initialize', e ? e.message : '');
          }
          stat$1('run', block.name);
        } catch (e) {
          error(500, 'Start method error: ' + (e ? e.message : 'Unknown error'));
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.destroyed) return;
        this.block.remove();
        this.listener.send('ended');
        this.destroyed = true;
      }
    }]);
  }();

  var db;
  var waited = 0;
  var played = {
    time: 0,
    prerolls: [],
    ser: {}
  };
  var data_loaded = {
    ad: [],
    day_of_month: 1,
    days_in_month: 31,
    month: 0
  };
  function init$C() {
    db = new IndexedDB('advast', ['data'], 1);
    db.openDatabase()["catch"](function () {
      return console.log('Ad', 'error', 'no open database');
    })["finally"](load$2);
    setInterval(load$2, 1000 * 60 * 10);
  }
  function load$2() {
    var domain = object$2.pris_domain;
    $.ajax({
      url: Utils$2.protocol() + domain + '/api/ad/vast',
      type: 'GET',
      dataType: 'json',
      timeout: 10000,
      success: function success(data) {
        data_loaded = data;
        if (db.db) {
          db.getDataAnyCase('data', 'month').then(function (month) {
            if (month !== data_loaded.month) {
              db.rewriteData('data', 'user', {})["catch"](function () {})["finally"](prepareUser);
              db.rewriteData('data', 'month', data_loaded.month)["catch"](function () {});
            } else prepareUser();
          });
        } else {
          prepareUser();
        }
      },
      error: function error() {
        console.log('Ad', 'error', 'no load vast prerolls');
      }
    });
  }
  function random(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }
  function whitoutGenres(whitout_genre) {
    var movie = Storage.get('activity', '{}').movie;
    var movie_genres = [];
    try {
      movie_genres = movie.genres.map(function (g) {
        return g.id;
      });
      var genres = whitout_genre.split(',').map(function (g) {
        return parseInt(g);
      });
      if (genres.length && movie.genres.find(function (g) {
        return genres.find(function (gg) {
          return gg == g.id;
        });
      })) {
        return true;
      }
    } catch (e) {}
  }
  function prepareUser() {
    db.getDataAnyCase('data', 'user').then(function (user) {
      if (!user) user = {};
      console.log('Ad', 'user view', user);
      data_loaded.ad.forEach(function (p) {
        if (!user[p.name]) user[p.name] = 0;
      });
      played.user = user;
    })["catch"](function () {
      data_loaded.ad.forEach(function (p) {
        if (!played.user[p.name]) played.user[p.name] = 0;
      });
    });
  }
  function filter(view, player_data, resolve) {
    if (played.time < Date.now() - waited) {
      played.prerolls = [];
      played.time = Date.now();
    }
    view = view.filter(function (v) {
      return whitoutGenres(v.whitout_genre) !== true;
    });
    view = view.filter(function (v) {
      return v.screen == (Platform.screen('tv') ? 'tv' : 'mobile') || v.screen == 'all';
    });
    view = view.filter(function (v) {
      return !played.prerolls.find(function (pr) {
        return pr == v.name;
      });
    });
    view = view.filter(function (v) {
      return v.platforms.indexOf(Platform.get()) !== -1 || v.platforms.indexOf('all') !== -1 || !v.platforms.length;
    });
    if (player_data.ad_region == 'ua') view = view.filter(function (v) {
      return v.region.split(',').indexOf(player_data.ad_region) !== -1 || v.region.indexOf('all') !== -1 || !v.region.length;
    });
    console.log('Ad', 'need view ', view);
    if (view.length) {
      var preroll = view.length == 1 ? view[0] : view[random(0, view.length - 1)];
      played.prerolls.push(preroll.name);
      waited = 1000 * 60 * random(30, 80);
      return preroll;
    }
    return null;
  }
  function get$6(player_data) {
    if (data_loaded.ad.length) {
      var view = data_loaded.ad.filter(function (p) {
        var need = Math.floor(data_loaded.day_of_month / data_loaded.days_in_month * p.impressions);
        return need - played.user[p.name] > 0;
      });
      var preroll = filter(view, player_data);
      if (preroll) {
        played.user[preroll.name]++;
        db.rewriteData('data', 'user', played.user)["catch"](function () {});
        return preroll;
      }
    }
    return null;
  }
  var Manager = {
    init: init$C,
    get: get$6
  };

  function init$B() {
    var today = new Date();
    var date = today.toISOString().split('T')[0];
    if (Storage.get('metric_date') !== date) {
      if (Storage.get('metric_adview', 0) > 0) histogram('adview', Storage.get('metric_adview', 0));
      Storage.set('metric_date', date);
      Storage.set('metric_adview', 0);
    }
    if (!Storage.get('metric_uid', '')) Storage.set('metric_uid', Utils$2.uid());
    $.ajax({
      dataType: 'json',
      url: Utils$2.protocol() + object$2.pris_domain + '/api/metric/unic?platform=' + Platform.get() + '&uid=' + Storage.get('metric_uid', '') + '&premium=' + (Account.hasPremium() ? 1 : 0)
    });
    counter('screen', Platform.get(), Platform.screen('tv') ? 'tv' : 'mobile');
    counter('region', VPN.code() || 'none');
    function playerStat(data) {
      if (!data.iptv) {
        var contentInfo = {};
        if (data.title) contentInfo.title = data.title;
        if (data.type) contentInfo.type = data.type;
        if (data.id) contentInfo.id = data.id;
        if (data.imdb) contentInfo.imdb = data.imdb;
        if (data.kinopoisk) contentInfo.kinopoisk = data.kinopoisk;
        counter('player_start', Platform.get(), data.stat_from, data.torrent_hash ? 'torrent' : data.youtube ? 'youtube' : data.continue_play ? 'continue' : 'online', contentInfo);
        if (data.vast_url) {
          var _contentInfo = {};
          if (data.title) _contentInfo.title = data.title;
          if (data.type) _contentInfo.type = data.type;
          if (data.id) _contentInfo.id = data.id;
          if (data.imdb) _contentInfo.imdb = data.imdb;
          if (data.kinopoisk) _contentInfo.kinopoisk = data.kinopoisk;
          counter('player_vast_url', Storage.get('activity', '{}').component || 'none', data.continue_play ? 'continue' : 'start', _contentInfo);
        }
      }
    }
    Prisma.Player.listener.follow('start', function (data) {
      playerStat(_objectSpread2(_objectSpread2({}, data), {}, {
        stat_from: 'inner'
      }));
    });
    Prisma.Player.listener.follow('external', function (data) {
      playerStat(_objectSpread2(_objectSpread2({}, data), {}, {
        stat_from: 'external'
      }));
    });
  }
  function counter(method, v1, v2, v3, contentInfo) {
    var url = Utils$2.protocol() + object$2.pris_domain + '/api/metric/stat?method=' + method + '&value_one=' + (v1 || '') + '&value_two=' + (v2 || '') + '&value_three=' + (v3 || '') + '&uid=' + Storage.get('metric_uid', '');
    if (contentInfo && _typeof(contentInfo) === 'object') {
      url += '&content_info=' + encodeURIComponent(JSON.stringify(contentInfo));
    }
    $.ajax({
      dataType: 'json',
      url: url
    });
  }
  function histogram(method, value) {
    $.ajax({
      dataType: 'json',
      url: Utils$2.protocol() + object$2.pris_domain + '/api/metric/histogram?method=' + method + '&value=' + (value || 0)
    });
  }
  var OtherMetric = {
    init: init$B,
    counter: counter,
    histogram: histogram
  };

  var running = false;
  var player_data = {};
  var vast_api = false;
  function init$A() {
    if (!(Platform.is('orsay') || Platform.is('netcast'))) {
      Utils$2.putScriptAsync([Utils$2.protocol() + object$2.github_prisma + '/vender/vast/vast.js'], false, false, function () {
        vast_api = true;
      });
      Manager.init();
    }
  }
  function video(preroll, num, started, ended) {
    console.log('Ad', 'launch');
    var item = new Vast(preroll);
    item.listener.follow('launch', started);
    item.listener.follow('ended', ended);
    var time = Date.now();
    item.listener.follow('error', function () {
      if (Date.now() - time < 11000 && num < 4) {
        var next_preroll = Manager.get(player_data);
        if (next_preroll) video(next_preroll, num + 1, started, ended);else ended();
      } else ended();
    });
    $.ajax({
      dataType: 'text',
      url: Utils$2.protocol() + object$2.pris_domain + '/api/ad/stat?platform=' + Platform.get() + '&type=launch&method=vast'
    });
  }
  function launch(preroll, call) {
    var enabled = Controller.enabled().name;
    Background.theme('#454545');
    var html = $("\n        <div class=\"ad-preroll\">\n            <div class=\"ad-preroll__bg\"></div>\n            <div class=\"ad-preroll__text\">".concat(Lang.translate('ad'), "</div>\n            <div class=\"ad-preroll__over\"></div>\n        </div>\n    "));
    $('body').append(html);
    setTimeout(function () {
      html.find('.ad-preroll__bg').addClass('animate');
      setTimeout(function () {
        html.find('.ad-preroll__text').addClass('animate');
      }, 500);
    }, 100);
    setTimeout(function () {
      html.find('.ad-preroll__over').addClass('animate');
      setTimeout(function () {
        Controller.toggle(enabled);
        Background.theme('black');
        video(preroll, 1, function () {}, function () {
          html.remove();
          Controller.toggle(enabled);
          call();
        });
      }, 300);
    }, 3500);
    Controller.add('ad_preroll', {
      toggle: function toggle() {
        Controller.clear();
      },
      enter: function enter() {},
      back: function back() {}
    });
    Controller.toggle('ad_preroll');
  }
  function getVastPlugin(data) {
    var show = true;
    if (data.vast_region && typeof data.vast_region == 'string' && data.vast_region.split(',').indexOf(data.ad_region) == -1) show = false;
    if (data.vast_platform && typeof data.vast_platform == 'string' && data.vast_platform.split(',').indexOf(Platform.get()) == -1) show = false;
    if (data.vast_screen && typeof data.vast_screen == 'string' && data.vast_screen.split(',').indexOf(Platform.screen('tv') ? 'tv' : 'mobile') == -1) show = false;
    if (data.vast_url && typeof data.vast_url == 'string' && show) return {
      url: data.vast_url,
      name: 'plugin',
      msg: data.vast_msg || Lang.translate('ad_plugin')
    };
    return false;
  }
  function show$7(data, call) {
    if (!vast_api) {
      if (!(Platform.is('orsay') || Platform.is('netcast'))) {
        OtherMetric.counter('no_vast_api', 1);
        console.log('Ad', 'error', 'no vast api');
      }
    }
    if (!vast_api || data.torrent_hash || data.youtube || data.iptv || data.continue_play) return call();
    if (running) return console.log('Ad', 'skipped, already running');
    running = true;
    var ended = function ended() {
      running = false;
      console.log('Ad', 'call ended');
      call();
    };
    player_data = data;
    player_data.ad_region = VPN.code();
    var preroll = Manager.get(player_data) || getVastPlugin(player_data);
    console.log('Ad', 'any preroll', preroll);
    var ignore = window.god_enabled ? false : Account.hasPremium();
    if (ignore) console.log('Ad', 'skipped, premium or torrent/youtube/iptv/continue');
    if (preroll && !ignore) {
      launch(preroll, ended);
    } else ended();
  }
  var Preroll = {
    init: init$A,
    show: show$7
  };

  // import Modal from '../modal'

  var html$d;
  var items$2 = [];
  var listener$7 = start$8();
  function init$z() {
    html$d = Template.js('player_footer');
    html$d.find('.player-footer__body').empty();
  }
  function cleanup() {
    html$d.find('.player-footer__body').empty();
    items$2 = [];
  }

  /**
   * Показать скрыть инфо
   * @param {boolean} status 
   */
  function toggle$5(status) {
    // Получаем значение триггера footer
    var footerEnabled = Storage.field('footer_card');
    // Если футер включен, тогда выполняем показ/скрытие
    if (footerEnabled) {
      html$d.toggleClass('footer--visible', status);
    } else {
      html$d.removeClass('footer--visible'); // Убираем футер если он выключен
    }
  }
  function appendCard(card) {
    var card_html = Template.js('player_footer_card');
    card_html.find('.player-footer-card__title').text(card.name || card.title);
    card_html.find('.player-footer-card__tags').text(card.genres && Arrays.isArray(card.genres) ? card.genres.map(function (a) {
      return Utils$2.capitalizeFirstLetter(a.name);
    }).join(', ') : '---');
    var text = card_html.find('.player-footer-card__text');
    if (card.overview) text.text(card.overview);else {
      card_html.addClass('notext');
      for (var i = 0; i < 3; i++) {
        text.append(document.createElement('div'));
      }
    }
    Utils$2.imgLoad(card_html.find('img'), card.poster_path ? Api.img(card.poster_path, 'w200') : './img/img_broken.svg');

    // Assuming 'html' is the container you want to append to
    html$d.find('.player-footer__body').append(card_html);
  }
  function appendContinue(element) {
    element.results.forEach(function (e) {
      e.ready = false;
    });
    var item = new create$l(element, {
      url: element.url,
      object: {},
      card_wide: element.wide,
      card_small: element.small,
      card_broad: element.broad,
      card_collection: element.collection,
      card_category: element.category,
      card_events: element.card_events,
      cardClass: element.cardClass,
      nomore: element.nomore,
      type: element.line_type || 'cards'
    });
    item.create();
  }
  function available() {
    return items$2.length;
  }
  function destroy$5() {
    cleanup();
    Arrays.destroy(items$2);
    items$2 = [];
  }
  function render$8() {
    return html$d;
  }
  var Footer = {
    init: init$z,
    toggle: toggle$5,
    listener: listener$7,
    appendCard: appendCard,
    appendContinue: appendContinue,
    render: render$8,
    destroy: destroy$5,
    available: available
  };

  var html$c;
  var listener$6 = start$8();
  new create$e();
  var callback$2;
  var work = false;
  var launch_player;
  var timer_ask;
  var timer_save;
  var wait_for_loading_url = false;
  var wait_loading = false;
  var preloader = {
    wait: false
  };
  var viewing = {
    time: 0,
    difference: 0,
    current: 0
  };

  /**
   * Подписываемся на события
   */

  function init$y() {
    PlayerPanel.init();
    PlayerVideo.init();
    PlayerInfo.init();
    Footer.init();
    PlayerIPTV.init();
    html$c = Template.get('player');
    html$c.append(PlayerVideo.render());
    html$c.append(PlayerPanel.render());
    html$c.append(PlayerInfo.render());
    html$c.append(Footer.render());
    html$c.on('mousemove', function () {
      if (Storage.field('navigation_type') == 'mouse' && !Utils$2.isTouchDevice()) PlayerPanel.mousemove();
    });
    if (!window.localStorage.getItem('player_torrent')) Storage.set('player_torrent', Storage.field('player'));

    /** Следим за обновлением времени */
    PlayerVideo.listener.follow('timeupdate', function (e) {
      PlayerPanel.update('time', Utils$2.secondsToTime(e.current | 0, true));
      PlayerPanel.update('timenow', Utils$2.secondsToTime(e.current || 0));
      PlayerPanel.update('timeend', Utils$2.secondsToTime(e.duration || 0));
      PlayerPanel.update('position', e.current / e.duration * 100 + '%');
      Screensaver$2.resetTimer();
      if (work && work.timeline && !work.timeline.waiting_for_user && !work.timeline.stop_recording && e.duration) {
        if (Storage.field('player_timecode') !== 'again' && !work.timeline.continued) {
          var exact = parseFloat(work.timeline.time + '');
          exact = isNaN(exact) ? 0 : parseFloat(exact.toFixed(3));
          var prend = e.duration - 15,
            posit = exact > 0 && exact < e.duration ? exact : Math.round(e.duration * work.timeline.percent / 100);
          if (posit > 10 && work.timeline.percent < 90) PlayerVideo.to(posit > prend ? prend : posit);
          work.timeline.continued = true;
        } else {
          work.timeline.percent = Math.round(e.current / e.duration * 100);
          work.timeline.time = e.current;
          work.timeline.duration = e.duration;
        }
      }
      viewing.difference = e.current - viewing.current;
      viewing.current = e.current;
      if (viewing.difference > 0 && viewing.difference < 3) viewing.time += viewing.difference;
    });

    /** Буферизация видео */
    PlayerVideo.listener.follow('progress', function (e) {
      PlayerPanel.update('peding', e.down);
    });

    /** Может ли плеер начать играть */
    PlayerVideo.listener.follow('canplay', function (e) {
      PlayerPanel.canplay();
    });

    /** Плей видео */
    PlayerVideo.listener.follow('play', function (e) {
      PlayerPanel.update('play');
      PlayerPanel.rewind();
    });

    /** Пауза видео */
    PlayerVideo.listener.follow('pause', function (e) {
      PlayerPanel.update('pause');
    });

    /** Перемотка видео */
    PlayerVideo.listener.follow('rewind', function (e) {
      PlayerPanel.rewind();
    });

    /** Видео было завершено */
    PlayerVideo.listener.follow('ended', function (e) {
      if (Storage.field('playlist_next') && !$('body').hasClass('selectbox--open')) PlayerPlaylist.next();
    });

    /** Дорожки полученые из видео */
    PlayerVideo.listener.follow('tracks', function (e) {
      if (!work.voiceovers) PlayerPanel.setTracks(e.tracks);
    });

    /** Субтитры полученые из видео */
    PlayerVideo.listener.follow('subs', function (e) {
      PlayerPanel.setSubs(e.subs);
    });

    /** Качество видео в m3u8 */
    PlayerVideo.listener.follow('levels', function (e) {
      PlayerPanel.setLevels(e.levels, e.current);
    });

    /** Размер видео */
    PlayerVideo.listener.follow('videosize', function (e) {
      PlayerInfo.set('size', e);
    });

    /** Ошибка при попытки возпроизвести */
    PlayerVideo.listener.follow('error', function (e) {
      if (work) {
        PlayerInfo.set('error', e.error);
        if (e.fatal && work.url_reserve) {
          PlayerVideo.destroy(true);
          PlayerVideo.url(work.url_reserve, true);
          delete work.url_reserve;
        }
        if (e.fatal && work.error) work.error(work, function (reserve_url) {
          PlayerVideo.destroy(true);
          PlayerVideo.url(reserve_url, true);
        });
      }
    });
    PlayerVideo.listener.follow('translate', function (e) {
      PlayerPanel.updateTranslate(e.where, e.translate);
    });
    PlayerVideo.listener.follow('loadeddata', function () {
      if (PlayerVideo.video().duration < 60 * 3 && work.need_check_live_stream) {
        PlayerPanel.hideRewind();
      }
    });

    /** Сбросить (продолжить) */
    PlayerVideo.listener.follow('reset_continue', function (e) {
      if (work && work.timeline && !work.timeline.continued_bloc) work.timeline.continued = false;
    });

    /** Перемотка мышкой */
    PlayerPanel.listener.follow('mouse_rewind', function (e) {
      var vid = PlayerVideo.video();
      if (vid && vid.duration) {
        if (!Platform.screen('mobile')) e.time.removeClass('hide').text(Utils$2.secondsToTime(vid.duration * e.percent)).css('left', e.percent * 100 + '%');
        if (e.method == 'click') {
          PlayerVideo.to(vid.duration * e.percent);
        }
      }
    });

    /** Плей/Пауза */
    PlayerPanel.listener.follow('playpause', function (e) {
      PlayerVideo.playpause();
      if (Platform.screen('mobile')) PlayerPanel.rewind();
    });

    /** Нажали на плейлист */
    PlayerPanel.listener.follow('playlist', function (e) {
      PlayerPlaylist.show();
    });

    /** Изменить размер видео */
    PlayerPanel.listener.follow('size', function (e) {
      PlayerVideo.size(e.size);
      Storage.set('player_size', e.size);
    });

    /** Изменить скорость видео */
    PlayerPanel.listener.follow('speed', function (e) {
      PlayerVideo.speed(e.speed);
      Storage.set('player_speed', e.speed);
    });

    /** Предыдущая серия */
    PlayerPanel.listener.follow('prev', function (e) {
      PlayerPlaylist.prev();
    });

    /** Следуюшия серия */
    PlayerPanel.listener.follow('next', function (e) {
      PlayerPlaylist.next();
    });

    /** Перемотать назад */
    PlayerPanel.listener.follow('rprev', function (e) {
      PlayerVideo.rewind(false);
    });

    /** Перемотать далее */
    PlayerPanel.listener.follow('rnext', function (e) {
      PlayerVideo.rewind(true);
    });

    /** Показать/скрыть субтитры */
    PlayerPanel.listener.follow('subsview', function (e) {
      PlayerVideo.subsview(e.status);
    });

    /** Состояние панели, скрыта или нет */
    PlayerPanel.listener.follow('visible', function (e) {
      PlayerInfo.toggle(e.status);
      Footer.toggle(e.status);
      PlayerVideo.normalizationVisible(e.status);
      html$c.toggleClass('player--panel-visible', e.status);
    });

    /** К началу видео */
    PlayerPanel.listener.follow('to_start', function (e) {
      PlayerVideo.to(0);
    });

    /** К концу видео */
    PlayerPanel.listener.follow('to_end', function (e) {
      if (PlayerPlaylist.canNext()) {
        PlayerVideo.pause();
        if (work && work.timeline) {
          work.timeline.waiting_for_user = true;
          work.timeline.percent = 100;
          work.timeline.time = work.timeline.duration || 0;
        }
        PlayerPlaylist.next();
      } else {
        PlayerVideo.to(-1);
      }
    });

    /** На весь экран */
    PlayerPanel.listener.follow('fullscreen', function () {
      Utils$2.toggleFullscreen();
    });

    /** Картинка в картинке */
    PlayerPanel.listener.follow('pip', function (e) {
      PlayerVideo.togglePictureInPicture();
    });

    /** Переключили качеcтво видео */
    PlayerPanel.listener.follow('quality', function (e) {
      PlayerVideo.destroy(true);
      if (work) {
        work.quality_switched = e.name;
        work.url = e.url;
      }
      PlayerVideo.url(e.url, true);
      if (work && work.timeline) {
        work.timeline.continued = false;
        work.timeline.continued_bloc = false;
      }
    });

    /** Переключили поток */
    PlayerPanel.listener.follow('flow', function (e) {
      PlayerVideo.destroy(true);
      PlayerVideo.url(e.url, true);
      if (work && work.timeline) {
        work.url = e.url;
        if (work.timeline) {
          work.timeline.continued = false;
          work.timeline.continued_bloc = false;
        }
      }
    });

    /** Нажали на кнопку (отправить) */
    PlayerPanel.listener.follow('share', function (e) {
      Broadcast.open({
        type: 'play',
        object: {
          player: work,
          playlist: PlayerPlaylist.get()
        }
      });
    });

    /** Событие на переключение серии */
    PlayerPlaylist.listener.follow('select', function (e) {
      var type = _typeof(e.item.url);
      var call = function call() {
        var params = PlayerVideo.saveParams();
        destroy$4();
        e.item.continue_play = true;
        play$1(e.item);
        PlayerVideo.setParams(params);
        if (e.item.callback) e.item.callback();
        if (Torserver.ip() && e.item.url.indexOf(Torserver.ip()) > -1) PlayerInfo.set('stat', e.item.url);
        PlayerPlaylist.active();
        PlayerPanel.showNextEpisodeName({
          playlist: PlayerPlaylist.get(),
          position: PlayerPlaylist.position()
        });
      };
      if (type == 'string') call();else if (type == 'function' && !wait_for_loading_url) {
        PlayerInfo.loading();
        wait_for_loading_url = true;
        e.item.url(call);
      }
    });

    /** Установить название следующей серии */
    PlayerPlaylist.listener.follow('set', PlayerPanel.showNextEpisodeName);

    /** Прослушиваем на сколько загрузилось, затем запускаем видео */
    PlayerInfo.listener.follow('stat', function (e) {
      if (preloader.wait) {
        var pb = e.data.preloaded_bytes || 0,
          ps = e.data.preload_size || 0;
        var progress = Math.min(100, pb * 100 / ps);
        PlayerPanel.update('timenow', Math.round(progress) + '%');
        PlayerPanel.update('timeend', 100 + '%');
        PlayerPanel.update('peding', progress + '%');
        if (progress >= 90 || isNaN(progress)) {
          PlayerPanel.update('peding', '0%');
          preloader.wait = false;
          preloader.call();
        }
      }
    });
    PlayerIPTV.listener.follow('play', function (data) {
      // locked(data.channel, ()=>{
      PlayerVideo.destroy();
      console.log('Player', 'url:', data.channel.url);
      PlayerVideo.url(data.channel.url);
      PlayerInfo.set('name', '');
      Controller.toggle('player_tv');
    });
    // })
  }

  /**
   * Главный контроллер
   */
  function toggle$4() {
    Controller.add('player', {
      invisible: true,
      toggle: function toggle() {
        PlayerPanel.hide();
      },
      up: function up() {
        PlayerPanel.toggle();
      },
      down: function down() {
        PlayerPanel.toggle();
      },
      right: function right() {
        if (PlayerIPTV.playning()) PlayerPanel.toggle();else PlayerVideo.rewind(true);
      },
      left: function left() {
        if (PlayerIPTV.playning()) PlayerPanel.toggle();else PlayerVideo.rewind(false);
      },
      enter: function enter() {
        if (PlayerIPTV.playning()) PlayerPanel.toggle();else PlayerVideo.playpause();
      },
      playpause: function playpause() {
        if (!PlayerIPTV.playning()) PlayerVideo.playpause();
      },
      play: function play() {
        if (!PlayerIPTV.playning()) PlayerVideo.play();
      },
      pause: function pause() {
        if (!PlayerIPTV.playning()) PlayerVideo.pause();
      },
      rewindForward: function rewindForward() {
        if (!PlayerIPTV.playning()) PlayerVideo.rewind(true);
      },
      rewindBack: function rewindBack() {
        if (!PlayerIPTV.playning()) PlayerVideo.rewind(false);
      },
      stop: backward$1,
      back: backward$1
    });
    Controller.add('player-loading', {
      invisible: true,
      toggle: function toggle() {
        Controller.clear();
        PlayerPanel.show();
      },
      back: backward$1
    });
    Controller.toggle('player');
  }

  /**
   * Вызвать событие назад
   */

  /**
   * Закрыть плеер
   * @doc
   * @name close
   * @alias Player
   */

  function backward$1() {
    destroy$4();
    if (callback$2) callback$2();else Controller.toggle('content');
    callback$2 = false;
  }

  /**
   * Уничтожить плеер
   */
  function destroy$4() {
    saveTimeView();
    if (work.viewed) work.viewed(viewing.time);
    clearTimeout(timer_ask);
    clearInterval(timer_save);
    if (work.timeline) work.timeline.stop_recording = false;
    Trailer.destroy();
    work = false;
    preloader.wait = false;
    preloader.call = null;
    wait_for_loading_url = false;
    wait_loading = false;
    viewing.time = 0;
    viewing.difference = 0;
    viewing.current = 0;
    html$c.removeClass('player--ios');
    html$c.removeClass('iptv');
    html$c.removeClass('player--panel-visible');
    html$c.removeClass('player--loading');
    PlayerIPTV.destroy();
    PlayerVideo.destroy();
    PlayerVideo.clearParamas();
    Footer.destroy();
    PlayerPanel.destroy();
    PlayerInfo.destroy();
    html$c.detach();
    Background.theme('reset');
    $('body').removeClass('player--viewing');
    if ($('body').hasClass('selectbox--open')) Select.hide();
    listener$6.send('destroy', {});
  }

  /**
   * Запустить webos плеер
   * @param {Object} params 
   */
  function runWebOS(params) {
    webOS.service.request("luna://com.webos.applicationManager", {
      method: "launch",
      parameters: {
        "id": params.need,
        "params": {
          "payload": [{
            "fullPath": params.url,
            "artist": "",
            "subtitle": "",
            "dlnaInfo": {
              "flagVal": 4096,
              "cleartextSize": "-1",
              "contentLength": "-1",
              "opVal": 1,
              "protocolInfo": "http-get:*:video/x-matroska:DLNA.ORG_OP=01;DLNA.ORG_CI=0;DLNA.ORG_FLAGS=01700000000000000000000000000000",
              "duration": 0
            },
            "mediaType": "VIDEO",
            "thumbnail": "",
            "deviceType": "DMR",
            "album": "",
            "fileName": params.name,
            "lastPlayPosition": params.position
          }]
        }
      },
      onSuccess: function onSuccess() {
        console.log('Player', 'The app is launched');
      },
      onFailure: function onFailure(inError) {
        console.log('Player', "Failed to launch the app (" + params.need + "): ", "[" + inError.errorCode + "]: " + inError.errorText);
        if (params.need == 'com.webos.app.photovideo') {
          params.need = 'com.webos.app.smartshare';
          runWebOS(params);
        } else if (params.need == 'com.webos.app.smartshare') {
          params.need = 'com.webos.app.mediadiscovery';
          runWebOS(params);
        }
      }
    });
  }

  /**
   * Показать предзагрузку торрента
   * @param {Object} data 
   * @param {Function} call 
   */
  function preload$1(data, call) {
    data.url = data.url.replace('&preload', '&play');
    return call();
  }

  /**
   * Спросить продолжать ли просмотр
   */
  function ask() {
    if (work && work.timeline && work.timeline.percent) {
      work.timeline.waiting_for_user = false;
      if (Storage.field('player_timecode') == 'ask') {
        work.timeline.waiting_for_user = true;
        Select.show({
          title: Lang.translate('title_action'),
          items: [{
            title: Lang.translate('player_start_from') + ' ' + Utils$2.secondsToTime(work.timeline.time) + '?',
            yes: true
          }, {
            title: Lang.translate('settings_param_no')
          }],
          onBack: function onBack() {
            work.timeline.continued = true;
            work.timeline.continued_bloc = true;
            toggle$4();
            clearTimeout(timer_ask);
          },
          onSelect: function onSelect(a) {
            work.timeline.waiting_for_user = false;
            if (!a.yes) {
              work.timeline.continued = true;
              work.timeline.continued_bloc = true;
            }
            toggle$4();
            clearTimeout(timer_ask);
          }
        });
        clearTimeout(timer_ask);
        timer_ask = setTimeout(function () {
          work.timeline.continued = true;
          work.timeline.continued_bloc = true;
          Select.hide();
          toggle$4();
        }, 8000);
      }
    }
  }

  /**
   * Сохранить отметку просмотра
   */
  function saveTimeView() {
    if (work.timeline && work.timeline.handler && !work.timeline.stop_recording) work.timeline.handler(work.timeline.percent, work.timeline.time, work.timeline.duration);
  }

  /**
   * Сохранять отметку просмотра каждые 2 минуты
   */
  function saveTimeLoop() {
    if (work.timeline && !work.timeline.stop_recording) {
      timer_save = setInterval(saveTimeView, 1000 * 60 * 2);
    }
  }

  // function locked(data, call){
  //     let name = Controller.enabled().name

  //     if(data.locked){
  //         ParentalControl.query(call, ()=>{
  //             Controller.toggle(name)
  //         })
  //     }
  //     else call()
  // }

  function externalPlayer(player_need, data, players) {
    var player = Storage.field(player_need);
    var url = encodeURIComponent(data.url.replace('&preload', '&play'));
    var _url = encodeURI(data.url.replace('&preload', '&play'));
    var furl = data.url.replace('&preload', '&play');
    var playlist = data.playlist ? encodeURIComponent(JSON.stringify(data.playlist)) : '';
    for (var p in players) {
      players[p] = players[p].replace('${url}', url).replace('${_url}', _url).replace('${furl}', furl).replace('${playlist}', playlist);
    }
    return players[player];
  }
  function start$5(data, need, inner) {
    var player_need = 'player' + (need ? '_' + need : '');
    if (data.launch_player) launch_player = data.launch_player;
    if (launch_player == 'prisma' || launch_player == 'inner' || PlayerVideo.verifyTube(data.url)) inner();else if (Platform.is('apple')) {
      var external_url = externalPlayer(player_need, data, {
        vlc: 'vlc://${furl}',
        nplayer: 'nplayer-${furl}',
        infuse: 'infuse://x-callback-url/play?url=${url}',
        senplayer: 'senplayer://x-callback-url/play?url=${url}',
        vidhub: 'open-vidhub://x-callback-url/open?&url=${url}',
        svplayer: 'svplayer://x-callback-url/stream?url=${url}',
        tracyplayer: 'tracy://open?url=${url}'
      });
      if (external_url) {
        Preroll.show(data, function () {
          listener$6.send('external', data);
          window.location.assign(external_url);
        });
      } else if (Storage.field(player_need) == 'ios') {
        html$c.addClass('player--ios');
        inner();
      } else inner();
    } else if (Platform.macOS()) {
      var _external_url = externalPlayer(player_need, data, {
        mpv: 'mpv://${_url}',
        iina: 'iina://weblink?url=${url}',
        nplayer: 'nplayer-${_url}',
        infuse: 'infuse://x-callback-url/play?url=${url}'
      });
      if (_external_url) {
        Preroll.show(data, function () {
          listener$6.send('external', data);
          window.location.assign(_external_url);
        });
      } else inner();
    } else if (Platform.is('apple_tv')) {
      data.url = data.url.replace('&preload', '&play');

      // Поддержка Luxo 
      var _external_url2 = externalPlayer(player_need, data, {
        vlc: 'vlc-x-callback://x-callback-url/stream?url=${url}',
        infuse: 'infuse://x-callback-url/play?url=${url}',
        senplayer: 'SenPlayer://x-callback-url/play?url=${url}',
        vidhub: 'open-vidhub://x-callback-url/open?&url=${url}',
        svplayer: 'svplayer://x-callback-url/stream?url=${url}',
        tracyplayer: 'tracy://open?url=${url}',
        tvos: 'prisma://video?player=tvos&src=${url}&playlist=${playlist}',
        tvosl: 'prisma://video?player=tvosav&src=${url}&playlist=${playlist}',
        tvosSelect: 'prisma://video?player=lists&src=${url}&playlist=${playlist}'
      });
      if (_external_url2) {
        Preroll.show(data, function () {
          listener$6.send('external', data);
          window.location.assign(_external_url2);
        });
      } else inner();
    } else if (Platform.is('webos') && (Storage.field(player_need) == 'webos' || launch_player == 'webos')) {
      Preroll.show(data, function () {
        runWebOS({
          need: 'com.webos.app.photovideo',
          url: data.url.replace('&preload', '&play'),
          name: data.path || data.title,
          position: data.timeline ? data.timeline.time || -1 : -1
        });
        listener$6.send('external', data);
      });
    } else if (Platform.is('android') && (Storage.field(player_need) == 'android' || launch_player == 'android' || data.torrent_hash)) {
      data.url = data.url.replace('&preload', '&play');
      if (data.playlist && Array.isArray(data.playlist)) {
        data.playlist = data.playlist.filter(function (p) {
          return typeof p.url == 'string';
        });
        data.playlist.forEach(function (a) {
          a.url = a.url.replace('&preload', '&play');
        });
      }
      Preroll.show(data, function () {
        data.position = data.timeline ? data.timeline.time || -1 : -1;
        Android.openPlayer(data.url, data);
        listener$6.send('external', data);
      });
    } else if (Platform.desktop() && Storage.field(player_need) == 'other') {
      var path = Storage.field('player_nw_path');
      var file = require('fs');
      if (file.existsSync(path)) {
        Preroll.show(data, function () {
          var spawn = require('child_process').spawn;
          spawn(path, [encodeURI(data.url.replace('&preload', '&play'))]);
          listener$6.send('external', data);
        });
      } else {
        Noty$1.show(Lang.translate('player_not_found') + ': ' + path);
      }
    } else inner();
  }

  /**
   * Получить URL по качеству видео
   * @doc
   * @name getUrlQuality
   * @alias Player
   * @param {object} quality JSON({"480p": "http://example/video.mp4", "720p": {"url": "http://example/video.mp4", "label": "HD"}, "1080p": {"label": "FHD", "call": "{function} - вызвать при выборе"}})
   * @param {boolean} set_better установить лучшее качество, если нет дефолтного
   * @returns {string} URL
   */
  function getUrlQuality(quality) {
    var set_better = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (_typeof(quality) !== 'object') return '';
    var url = '';
    for (var q in quality) {
      var qa = quality[q];
      var qu = _typeof(qa) == 'object' ? qa.url : typeof qa == 'string' ? qa : '';
      if (parseInt(q) == Storage.field('video_quality_default') && qu) return qu;
    }
    if (!url && set_better) {
      var sort_quality = Arrays.getKeys(quality);
      sort_quality.sort(function (a, b) {
        return parseInt(b) - parseInt(a);
      });
      sort_quality.forEach(function (q) {
        var qa = quality[q];
        var qu = _typeof(qa) == 'object' ? qa.url : typeof qa == 'string' ? qa : '';
        if (qu && !url) url = qu;
      });
    }
    return url;
  }

  /**
   * Запустить плеер
   * @doc
   * @name play
   * @alias Player
   * @param {object} data JSON({"url": "http://example/video.mp4", "quality": {"1080p": "http://example/video.mp4"}, "title": "Video title", "translate": [{"name": "Перевод", "language": "ru", "extra": {"channels": 2}}], "subtitles": [{"url": "http://example/subs.srt", "label": "RU Force"}], "card": "{object} - TMDB Card", "timeline": "{object} - Prisma.Timeline.view", "iptv": "{boolean} - запустить IPTV плеер", "tv": "{boolean} - имитация IPTV", "torrent_hash": "{string}", "playlist": [{"title":"{string} - Серия 1", "url":"{string} - http://example/video.mp4"}]})
   */

  function play$1(data) {
    console.log('Player', 'url:', data.url);
    if (data.quality) {
      if (Arrays.getKeys(data.quality).length == 1) delete data.quality;else {
        data.url = getUrlQuality(data.quality, false) || data.url;
      }
    }
    var lauch = function lauch() {
      work = data;
      Trailer.destroy();
      Preroll.show(data, function () {
        Background.theme('black');
        $('body').addClass('player--viewing');
        preload$1(data, function () {
          html$c.toggleClass('tv', data.tv ? true : false);
          html$c.toggleClass('youtube', Boolean(data.url.indexOf('youtube.com') >= 0));
          listener$6.send('start', data);
          if (work.timeline) work.timeline.continued = false;
          PlayerPlaylist.url(data.url);
          PlayerPlaylist.set(PlayerPlaylist.get());
          PlayerPanel.quality(data.quality, data.url);
          if (data.translate) PlayerPanel.setTranslate(data.translate);
          PlayerVideo.url(data.url);
          PlayerVideo.size(Storage.get('player_size', 'default'));
          PlayerVideo.speed(Storage.get('player_speed', 'default'));
          if (data.subtitles) PlayerVideo.customSubs(data.subtitles);
          if (data.voiceovers) PlayerPanel.setTracks(data.voiceovers);
          PlayerInfo.set('name', data.title);
          if (!data.iptv) {
            if (data.card) Footer.appendCard(data.card);else {
              Prisma.Activity.active().movie && Footer.appendCard(Prisma.Activity.active().movie);
            }
          }
          var continues_next = Storage.get('player_continue_watch', '[]');
          var continues_watch = Favorite.continues('tv');
          if (continues_next.length) Footer.appendContinue({
            results: continues_next,
            title: Lang.translate('card_new_episode'),
            small: true,
            collection: true,
            nomore: true,
            line_type: 'player-cards'
          });
          if (continues_watch.length) Footer.appendContinue({
            results: continues_watch,
            title: Lang.translate('title_continue'),
            small: true,
            collection: true,
            nomore: true,
            line_type: 'player-cards'
          });
          if (!preloader.call) $('body').append(html$c);
          toggle$4();
          PlayerPanel.show(true);
          ask();
          saveTimeLoop();
          listener$6.send('ready', data);
        });
      });
    };
    start$5(data, data.torrent_hash ? 'torrent' : '', lauch);
    launch_player = '';
  }
  function iptv(data) {
    console.log('Player', 'play iptv');
    data.iptv = true; //пометка для ведра, что это iptv

    var lauch = function lauch() {
      Background.theme('black');
      listener$6.send('start', data);
      html$c.toggleClass('iptv', true);
      PlayerIPTV.start(data);
      PlayerVideo.size(Storage.get('player_size', 'default'));
      PlayerVideo.speed(Storage.get('player_speed', 'default'));
      $('body').append(html$c);
      toggle$4();
      PlayerPanel.show(true);
      listener$6.send('ready', data);
    };
    var ads = function ads() {
      if (data.vast_url) Preroll.show(data, lauch);else lauch();
    };
    start$5(data, 'iptv', ads);
  }

  /**
   * Статистика для торрсервера
   * @param {String} url 
   */
  function stat(url) {
    if (work || preloader.wait) PlayerInfo.set('stat', url);
  }

  /**
   * Установить плейлист
   * @doc
   * @name playlist
   * @alias Player
   * @param {array} data JSON([{"title":"{string} - Серия 1", "url":"{string} - http://example/video.mp4"}])
   */
  function playlist(playlist) {
    if (work || preloader.wait) PlayerPlaylist.set(playlist);
  }

  /**
   * Установить субтитры для видео
   * @doc
   * @name subtitles
   * @alias Player
   * @param {array} subs JSON([{"index":"{integer}", "label":"{string}", "url":"http://example/subs.srt"}])
   */
  function subtitles(subs) {
    if (work || preloader.wait) {
      PlayerVideo.customSubs(subs);
    }
  }

  /**
   * Запустить другой плеер
   * @doc
   * @name runas
   * @alias Player
   * @param {string} need android, ios, webos, apple, apple_tv, macos, desktop, other
   */
  function runas(need) {
    launch_player = need;
  }

  /**
   * Обратный вызов при закрытии плеера
   * @doc
   * @name callback
   * @alias Player
   * @param {function} back 
   */
  function onBack(back) {
    callback$2 = back;
  }

  /**
   * Рендер плеера
   * @returns Html
   */
  function render$7() {
    return html$c;
  }

  /**
   * Возвращает статус, открыт ли плеер
   * @doc
   * @name opened
   * @alias Player
   * @returns {boolean}
   */

  function opened$1() {
    return $('body').find('.player').length ? true : false;
  }

  /**
   * Показать процесс загрузки
   * @doc
   * @name loading
   * @alias Player
   * @param {boolean} status cтатус загрузки, `true` - показать, `false` - скрыть
   */

  function loading$1(status) {
    if (!work) return;
    wait_loading = status;
    html$c.toggleClass('player--loading', Boolean(status));
    if (wait_loading) {
      Controller.toggle('player-loading');
      PlayerVideo.pause();
    } else {
      PlayerVideo.play();
      toggle$4();
    }
  }
  function timecodeRecording(status) {
    if (work && work.timeline) {
      work.timeline.stop_recording = !status;
    }
  }
  var Player = {
    init: init$y,
    listener: listener$6,
    play: play$1,
    playlist: playlist,
    render: render$7,
    stat: stat,
    subtitles: subtitles,
    runas: runas,
    callback: onBack,
    opened: opened$1,
    iptv: iptv,
    programReady: PlayerIPTV.programReady,
    close: backward$1,
    getUrlQuality: getUrlQuality,
    loading: loading$1,
    timecodeRecording: timecodeRecording,
    playdata: function playdata() {
      return work;
    }
  };

  var html$b = $("\n    <div class=\"background\">\n        <canvas class=\"background__one\"></canvas>\n        <canvas class=\"background__two\"></canvas>\n    </div>");
  var background = {
    one: {
      canvas: $('.background__one', html$b),
      ctx: $('.background__one', html$b)[0].getContext('2d')
    },
    two: {
      canvas: $('.background__two', html$b),
      ctx: $('.background__two', html$b)[0].getContext('2d')
    }
  };
  var theme_elem = $('head meta[name="theme-color"]');
  var view = 'one';
  var src = '';
  var loaded = {};
  var bokeh = {
    c: [],
    h: [],
    d: true
  };
  var timer$2;
  var timer_resize;
  var timer_change;

  /**
   * Запуск
   */
  function init$x() {
    Storage.listener.follow('change', function (event) {
      if (event.name == 'background' || event.name == 'background_type') resize();
    });
    var u = Platform.any() ? 'https://yumata.github.io/lampa/' : './';
    if (Platform.is('orsay')) {
      u = './';
    }
    for (var i = 1; i <= 6; i++) {
      var im = new Image();
      im.src = u + 'img/bokeh-h/' + i + '.png';
      bokeh.h.push(im);
    }
    for (var _i = 1; _i <= 6; _i++) {
      var _im = new Image();
      _im.src = u + 'img/bokeh/' + _i + '.png';
      bokeh.c.push(_im);
    }
    $(window).on('resize', resize);
    theme('black');
  }

  /**
   * Получить активный фон
   * @returns {{canvas:object, ctx: class}}
   */
  function bg() {
    clearTimeout(timer_change);
    timer_change = setTimeout(function () {
      html$b.find('canvas').eq(view == 'one' ? 1 : 0).removeClass('visible');
    }, 400);
    view = view == 'one' ? 'two' : 'one';
    return background[view];
  }

  /**
   * Рисовать
   * @param {object} data 
   * @param {object} item - фон
   * @param {boolean} noimage
   */
  function draw(data, item, noimage) {
    if (!Storage.get('background', 'false') || noimage) {
      background.one.canvas.removeClass('visible');
      background.two.canvas.removeClass('visible');
      return;
    }
    item.canvas[0].width = window.innerWidth;
    item.canvas[0].height = window.innerHeight;
    var palette = data.palette;
    var type = Storage.field('background_type');
    blur(data, item, function () {
      if (type == 'complex' && bokeh.d) {
        var bright = Color.rgbToHsl(palette.average[0], palette.average[1], palette.average[2]);
        item.ctx.globalAlpha = 1;
        item.ctx.globalCompositeOperation = 'source-over';
        for (var i = 0; i < 10; i++) {
          var bp = Math.round(Math.random() * (bokeh.c.length - 1));
          var im = bright[2] > 30 ? bokeh.h[bp] : bokeh.c[bp];
          var xp = window.innerWidth * Math.random(),
            yp = window.innerHeight / 2 * Math.random() + window.innerHeight / 2,
            sz = Math.max(window.innerHeight / 8, window.innerHeight / 5 * Math.random()) * 0.01,
            nw = im.width * sz,
            nh = im.height * sz;
          try {
            item.ctx.drawImage(im, xp - nw / 2, yp - nw / 2, nw, nh);
          } catch (e) {}
        }
      }
      item.ctx.globalAlpha = type == 'poster' ? 0.7 : 0.6;
      item.ctx.globalCompositeOperation = 'multiply';
      var angle = 90 * Math.PI / 180,
        x2 = item.canvas[0].width * Math.cos(angle),
        y2 = item.canvas[0].height * Math.sin(angle);
      var gradient = item.ctx.createLinearGradient(0, 0, x2, y2);
      gradient.addColorStop(0, 'rgba(0,0,0,1)');
      gradient.addColorStop(1, 'rgba(0,0,0,0)');
      item.ctx.fillStyle = '#000000';
      item.ctx.fillRect(0, 0, item.canvas[0].width, item.canvas[0].height);
      if (Platform.screen('mobile')) {
        item.ctx.globalAlpha = 1;
        item.ctx.globalCompositeOperation = 'destination-out';
        gradient = item.ctx.createLinearGradient(0, 0, x2, y2);
        gradient.addColorStop(0.05, 'rgba(29,31,32,1)');
        gradient.addColorStop(0.18, 'rgba(' + palette.bright.join(',') + ',0)');
        item.ctx.fillStyle = gradient;
        item.ctx.fillRect(0, 0, item.canvas[0].width, item.canvas[0].height);
      }
      item.canvas.addClass('visible');
      if (!Player.opened()) theme('reset');
    });
  }

  /**
   * Размыть картинку
   * @param {object} data 
   * @param {object} item - фон
   * @param {function} complite 
   */
  function blur(data, item, complite) {
    function blured(img) {
      var ratio = Math.max(item.canvas[0].width / img.width, item.canvas[0].height / img.height);
      var nw = img.width * ratio,
        nh = img.height * ratio;
      item.ctx.globalAlpha = data.img.width > 1000 ? bokeh.d ? 0.7 : 0.2 : 1;
      item.ctx.drawImage(img, -(nw - item.canvas[0].width) / 2, -(nh - item.canvas[0].height) / 2, nw, nh);
      complite();
    }
    if (data.img.width > 1000) blured(data.img);else Color.blur(data.img, blured);
  }

  /**
   * Обновить если изменился размер окна
   */
  function resize() {
    clearTimeout(timer_resize);
    html$b.find('canvas').removeClass('visible');
    timer_resize = setTimeout(function () {
      background.one.canvas.width(window.innerWidth);
      background.one.canvas.height(window.innerHeight);
      background.two.canvas.width(window.innerWidth);
      background.two.canvas.height(window.innerHeight);
      if (loaded[src]) draw(loaded[src], background[view]);
    }, 200);
  }

  /**
   * Максимум картинок в памяти
   */
  function limit$1() {
    var a = Arrays.getKeys(loaded);
    if (a.length > 30) {
      var u = a.slice(0, 1);
      delete loaded[u];
    }
  }

  /**
   * Загрузить картинку в память
   */
  function load$1() {
    if (loaded[src]) {
      draw(loaded[src], bg());
    } else if (src) {
      limit$1();
      var cache_src = src;
      var colors;
      var img = new Image();
      img.crossOrigin = "Anonymous";
      img.onload = function () {
        try {
          colors = Color.get(img);
        } catch (e) {
          colors = [[200, 200, 200], [100, 100, 100], [10, 10, 10]];
        }
        loaded[cache_src] = {
          img: img,
          palette: Color.palette(colors)
        };
        draw(loaded[cache_src], bg());
        ImageCache.write(img, img.src);
      };
      img.onerror = function () {
        draw(false, false, true);
      };
      ImageCache.read(img, src);
    }
  }

  /**
   * Изменить картинку
   * @param {string} url
   */
  function change() {
    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (url == src || Storage.field('light_version')) return;
    bokeh.d = true;
    if (url) src = url;
    clearTimeout(timer$2);
    timer$2 = setTimeout(function () {
      if (url) load$1();else draw(false, false, true);
    }, 1000);
  }

  /**
   * Изменить немедленно без ожидания
   * @param {string} url
   */
  function immediately() {
    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    // if(Storage.field('light_version') || immed_time + 1000 > Date.now()) return

    if (url) src = url;
    clearTimeout(timer$2);
    bokeh.d = false;
    if (url) load$1();else draw(true, true, false);
    theme('black');
  }
  function theme(color) {
    if (color == 'black') {
      color = '#000000';
    } else if (color == 'reset') {
      color = '#000000';
    }
    theme_elem.attr('content', color);
  }

  /**
   * Рендер
   * @returns {object}
   */
  function render$6() {
    return html$b;
  }
  var Background = {
    render: render$6,
    change: change,
    update: resize,
    init: init$x,
    immediately: immediately,
    theme: theme
  };

  var timer$1;
  var need_update = false;
  var need_visible = false;
  var canianimate = typeof requestAnimationFrame !== 'undefined';
  function init$w() {
    $(window).on('resize', function () {
      clearTimeout(timer$1);
      timer$1 = setTimeout(function () {
        toggleMobile();
        toggleOrientation();
        size();
        update$4();
      }, 100);
    });
    var follow = ['animation', 'mask', 'card_interfice_poster', 'glass_style', 'black_style', 'glass_opacity', 'card_interfice_cover', 'advanced_animation', 'light_version', 'keyboard_type'];
    Storage.listener.follow('change', function (event) {
      if (event.name == 'interface_size' || event.name == 'interface_size_fixed') {
        size();
        update$4();
      }
      if (follow.indexOf(event.name) >= 0) toggleClasses(), update$4();
    });
    toggleClasses();
    toggleMobile();
    toggleOrientation();
    size();
    setTimeout(blick, 5000);
    if (Platform.tv() || Platform.desktop()) mouseEvents();
  }
  function toggleMobile() {
    $('body').toggleClass('true--mobile', Platform.screen('mobile'));
  }
  function toggleOrientation() {
    $('body').removeClass('orientation--portrait orientation--landscape').addClass('orientation--' + (window.innerWidth > window.innerHeight && window.innerHeight < 768 ? 'landscape' : 'portrait'));
  }
  function mouseEvents() {
    var body = $('body');
    var mouse_timer_cursor;
    $(window).on('mousemove', function () {
      clearTimeout(mouse_timer_cursor);
      mouse_timer_cursor = setTimeout(function () {
        body.toggleClass('no--cursor', true);
      }, 3000);
      body.toggleClass('no--cursor', false);
    });
  }
  function size() {
    var sl = Storage.field('interface_size');
    var sz = {
      normal: 1,
      small: 0.8,
      bigger: 1.05,
      fixed: 1
    };
    var fs = sz[sl];
    var fixed_size = parseInt(Storage.field('interface_size_fixed')) || 16;
    var font_size = sl === 'fixed' ? fixed_size : window.innerWidth / 84.17 * fs;
    $('body').css({
      fontSize: Math.max(font_size, 10.6) + 'px'
    }).removeClass('size--small size--normal size--bigger size--fixed').addClass('size--' + sl);
  }
  function blick() {
    $('.icon--blink').not('.ready').each(function () {
      var elem = $(this),
        time = parseInt(elem.data('blink-interval') || 3) * 1000;
      elem.addClass('ready');
      setInterval(function () {
        elem.addClass('animate');
        setTimeout(function () {
          elem.removeClass('animate');
        }, 1000);
      }, time);
    });
  }
  function frameUpdate(render) {
    var where = render || document.body;
    var target = where instanceof jQuery ? where[0] : where;
    var landscape = window.innerWidth > window.innerHeight && window.innerHeight < 768;
    var wrap = document.querySelector('.wrap__left');
    var head = document.querySelector('.head');
    var navi = document.querySelector('.navigation-bar');
    var menu_left = wrap ? wrap.getBoundingClientRect().left : 0;
    var menu_width = wrap ? wrap.getBoundingClientRect().width : 0;
    var head_height = head ? head.getBoundingClientRect().height : 0;
    var navi_height = navi && !landscape ? navi.getBoundingClientRect().height : 0;
    var navi_width = navi && landscape ? navi.getBoundingClientRect().width : 0;
    var layer_width = Array.from(target.querySelectorAll('.layer--width'));
    var layer_height = Array.from(target.querySelectorAll('.layer--height'));
    var layer_wheight = Array.from(target.querySelectorAll('.layer--wheight'));
    if (target.classList.contains('layer--width')) layer_width.push(target);
    if (target.classList.contains('layer--height')) layer_height.push(target);
    if (target.classList.contains('layer--wheight')) layer_wheight.push(target);
    for (var i = 0; i < layer_width.length; i++) {
      var elem = layer_width[i],
        read = parseFloat(elem.style.width),
        widh = window.innerWidth - (Platform.screen('light') && menu_left == 0 ? menu_width : 0) - navi_width;
      if (read !== widh) layer_width[i].style.width = widh;
    }
    for (var _i = 0; _i < layer_wheight.length; _i++) {
      var _elem = layer_wheight[_i],
        heig = window.innerHeight - head_height - navi_height,
        attr = _elem.mheight,
        _read = parseFloat(_elem.style.height);
      if (attr) {
        heig -= attr.getBoundingClientRect().height;
      }
      if (_read !== heig) _elem.style.height = heig;
    }
    for (var _i2 = 0; _i2 < layer_height.length; _i2++) {
      var _elem2 = layer_height[_i2],
        _heig = window.innerHeight,
        _attr = _elem2.mheight,
        _read2 = parseFloat(_elem2.style.height);
      if (_attr) {
        _heig -= _attr.getBoundingClientRect().height;
      }
      if (_read2 !== _heig) _elem2.style.height = _heig;
    }
  }
  function intersected(a, b) {
    return a[0] <= b[2] && b[0] <= a[2] && a[1] <= b[3] && b[1] <= a[3];
  }
  function frameVisible(render) {
    var active = Prisma.Activity.active();
    var where = render ? render : active && active.activity ? active.activity.render() : false;
    var area = 1.5;
    var hide = Storage.field('hide_outside_the_screen');
    var v_w = window.innerWidth * area;
    var v_h = window.innerHeight * area;
    var m_w = window.innerWidth - v_w;
    var m_h = window.innerHeight - v_h;
    if (where) {
      var target = where instanceof jQuery ? where[0] : where;
      var elems = [];
      if (target.classList.contains('layer--visible')) {
        elems.push({
          type: 'visible',
          elem: target
        });
      }
      if (target.classList.contains('layer--render')) {
        elems.push({
          type: 'render',
          elem: target
        });
      }
      elems = elems.concat(Array.from(target.querySelectorAll('.layer--visible')).map(function (elem) {
        return {
          type: 'visible',
          elem: elem
        };
      }), Array.from(target.querySelectorAll('.layer--render')).map(function (elem) {
        return {
          type: 'render',
          elem: elem
        };
      }));
      for (var i = 0; i < elems.length; i++) {
        var item = elems[i];
        var elem = item.elem;
        if (item.type == 'visible') {
          if (!elem.call_visible) {
            var bond = elem.getBoundingClientRect();
            if (intersected([m_w, m_h, v_w, v_h], [bond.left, bond.top, bond.left + bond.width, bond.top + bond.height])) {
              elem.call_visible = true;
              item.visible = true;
            }
          }
        }
        if (elem.call_visible) {
          var _bond = elem.getBoundingClientRect();
          var view = hide ? intersected([m_w, m_h, v_w, v_h], [_bond.left, _bond.top, _bond.left + _bond.width, _bond.top + _bond.height]) : true;
          var visibility = view ? 'visible' : 'hidden';
          if (elem.visibility !== visibility) {
            if (!elem.visibility && visibility == 'visible') continue;
            elem.visibility = visibility;
            item.visibility = visibility;
          }
        }
      }
      for (var _i3 = 0; _i3 < elems.length; _i3++) {
        var _item = elems[_i3];
        var _elem3 = _item.elem;
        if (_item.type == 'visible') {
          if (_item.visible) Utils$2.trigger(_elem3, 'visible');
        }
        if (_item.visibility) {
          _elem3.style.visibility = _elem3.visibility;
        }
      }
    }
  }
  function toggleClasses() {
    $('body').toggleClass('no--animation', !Storage.field('animation'));
    $('body').toggleClass('no--mask', !Storage.field('mask'));
    $('body').toggleClass('no--poster', !Storage.field('card_interfice_poster'));
    $('body').toggleClass('glass--style', Storage.field('glass_style'));
    $('body').toggleClass('black--style', Storage.field('black_style'));
    $('body').toggleClass('card--no-cover', !Storage.field('card_interfice_cover'));
    $('body').toggleClass('advanced--animation', Storage.field('advanced_animation'));
    $('body').toggleClass('light--version', Storage.field('light_version'));
    $('body').toggleClass('system--keyboard', Storage.field('keyboard_type') == 'prisma' ? false : true);
    $('body').removeClass('glass--style-opacity--easy glass--style-opacity--medium glass--style-opacity--blacked');
    if (Storage.field('glass_style')) $('body').addClass('glass--style-opacity--' + Storage.field('glass_opacity'));
    Background.theme(Storage.field('black_style') ? 'black' : 'reset');
  }
  function visible(where) {
    requestFrame();
    need_visible = where;
    if (!canianimate) frameVisible(where);
  }
  function update$4(where) {
    requestFrame();
    need_update = where;
    if (!canianimate) frameUpdate(where);
  }
  function requestFrame() {
    if (canianimate && need_update === false && need_visible === false) requestAnimationFrame(updateFrame);
  }
  function updateFrame() {
    if (need_update !== false) frameUpdate(need_update);
    if (need_visible !== false) frameVisible(need_visible);
    need_update = false;
    need_visible = false;
  }
  var Layer = {
    update: update$4,
    visible: visible,
    init: init$w
  };

  function create$f() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _self = this;
    var html = Template.js('scroll');
    var body = html.querySelector('.scroll__body');
    var content = html.querySelector('.scroll__content');
    var caianimate = typeof requestAnimationFrame !== 'undefined';
    var frame_time = 0;
    var scroll_position = 0;
    var scroll_transition = 0;
    var scroll_time = 0,
      scroll_step = params.step || 150;
    var call_update_time = Date.now();
    var call_transition_time = Date.now();
    if (params.horizontal) html.classList.toggle('scroll--horizontal', true);
    if (params.mask) html.classList.toggle('scroll--mask', true);
    if (params.over) html.classList.toggle('scroll--over', true);
    if (params.nopadding) html.classList.toggle('scroll--nopadding', true);
    if (params.notransition) body.classList.toggle('notransition', true);
    function wheel(e) {
      var parent = $(e.target).parents('.scroll');
      var inner = onTheRightSide(e, true);
      if (!params.horizontal && $(html).is(parent[0])) inner = true;
      if (Storage.field('navigation_type') == 'mouse' && Date.now() - scroll_time > 200 && inner) {
        scroll_time = Date.now();
        if (e.wheelDelta / 120 > 0) {
          if (_self.onWheel) _self.onWheel(-scroll_step);else _self.wheel(-scroll_step);
        } else {
          if (_self.onWheel) _self.onWheel(scroll_step);else _self.wheel(scroll_step);
        }
      }
    }
    html.addEventListener('mousewheel', wheel);
    html.addEventListener('wheel', wheel);
    html.Scroll = _self;
    body.addEventListener('webkitTransitionEnd', function () {
      if (Date.now() - call_transition_time > 400) return;

      //чет на моей карте выходит 180-190, странно, ну да ладно, поставил 150
      if (Date.now() - call_update_time > 150) scrollEnded();
    });
    if (Platform.screen('tv')) {
      html.addEventListener('scroll', function (e) {
        html.scrollTop = 0;
        html.scrollLeft = 0;
      });
    } else {
      html.addEventListener('scroll', scrollEnded);
    }
    function onTheRightSide(e) {
      var inleft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var offset = content.getBoundingClientRect().left;
      var width = window.innerWidth - offset;
      var position = e.clientX - offset;
      return params.horizontal ? position > width / 2 : inleft ? position < width / 2 : false;
    }
    function maxOffset(offset) {
      var w = params.horizontal ? html.offsetWidth : html.offsetHeight;
      var p = parseInt(window.getComputedStyle(content, null).getPropertyValue('padding-' + (params.horizontal ? 'left' : 'top')));
      var s = body[params.horizontal ? 'scrollWidth' : 'scrollHeight'];
      offset = Math.min(0, offset);
      offset = Math.max(-(Math.max(s + p * 2, w) - w), offset);
      return offset;
    }
    function scrollEnded() {
      call_update_time = Date.now();
      if (_self.onScroll) _self.onScroll(!Platform.screen('tv') ? html[params.horizontal ? 'scrollLeft' : 'scrollTop'] : -scroll_position);else Layer.visible(html);
      if (_self.onEnd && _self.isEnd()) _self.onEnd();
    }
    function scrollTo(scrl) {
      scroll_position = scrl;
      if (!Platform.screen('tv')) {
        var object = {};
        object[params.horizontal ? 'scrollLeft' : 'scrollTop'] = -scrl;
        $(html).animate(object, 200);
      } else {
        if (scroll_transition == false) {
          scroll_transition = scrl;
          if (caianimate && Storage.field('animation')) {
            var cannow = Date.now() - frame_time > 500;
            if (cannow) animate();else requestAnimationFrame(animate);
          } else animate();
        }
      }
    }
    function animate() {
      body.style['-webkit-transform'] = 'translate3d(' + Math.round(params.horizontal ? scroll_transition : 0) + 'px, ' + Math.round(params.horizontal ? 0 : scroll_transition) + 'px, 0px)';
      scroll_transition = false;
      if (!Storage.field('animation') || Date.now() - call_update_time < 300) scrollEnded();
      frame_time = Date.now();
    }
    function startScroll(scrl) {
      scrollTo(scrl);
      call_update_time = Date.now();
      call_transition_time = Date.now();
    }
    this.addSwipeDown = function (call) {
      if (window.innerWidth > 480) return;
      var s = 0;
      var t = 0;
      html.addEventListener('touchstart', function (e) {
        var point = e.touches[0] || e.changedTouches[0];
        if (s == 0) {
          s = point.clientY;
          t = Date.now();
        }
      });
      html.addEventListener('touchmove', function (e) {
        var point = e.touches[0] || e.changedTouches[0];
        if (s !== 0) {
          if (point.clientY - s > 50 && html.scrollTop == 0 && Date.now() - t < 100) {
            s = 0;
            call();
          }
        }
      });
      html.addEventListener('touchend', function (e) {
        s = 0;
      });
    };
    this.wheel = function (size) {
      var direct = params.horizontal ? 'left' : 'top';
      var scrl = scroll_position,
        scrl_offset = html.getBoundingClientRect()[direct],
        scrl_padding = parseInt(window.getComputedStyle(content, null).getPropertyValue('padding-' + direct));
      if (params.scroll_by_item) {
        var pos = body.scroll_position;
        pos = pos || 0;
        var items = Array.from(body.children);
        pos += size > 0 ? 1 : -1;
        pos = Math.max(0, Math.min(items.length - 1, pos));
        body.scroll_position = pos;
        var item = items[pos],
          ofst = item.getBoundingClientRect()[direct];
        size = ofst - scrl_offset - scrl_padding;
      }
      var max = params.horizontal ? 30000 : body.offsetHeight;
      max -= params.horizontal ? html.offsetWidth : html.offsetHeight;
      max += scrl_padding * 2;
      scrl -= size;
      scrl = Math.min(0, Math.max(-max, scrl));
      scrl = maxOffset(scrl);
      startScroll(scrl);
    };
    this.update = function (elem, tocenter) {
      var dir = params.horizontal ? 'left' : 'top',
        siz = params.horizontal ? 'offsetWidth' : 'offsetHeight';
      var target = elem instanceof jQuery ? elem[0] : elem;
      var ofs_elm = target.getBoundingClientRect()[dir],
        ofs_box = body.getBoundingClientRect()[dir],
        center = ofs_box + (tocenter ? content[siz] / 2 - target[siz] / 2 : 0),
        scrl = Math.min(0, center - ofs_elm);
      scrl = maxOffset(scrl);
      startScroll(scrl);
    };
    this.vieport = function () {
      var vieport = {};
      if (!Platform.screen('tv')) {
        vieport.position = html[params.horizontal ? 'scrollLeft' : 'scrollTop'], vieport.body = body[params.horizontal ? 'scrollWidth' : 'scrollHeight'], vieport.content = html[params.horizontal ? 'offsetWidth' : 'offsetHeight'];
      } else {
        vieport.position = scroll_position;
        vieport.body = body[params.horizontal ? 'offsetWidth' : 'offsetHeight'];
        vieport.content = html[params.horizontal ? 'offsetWidth' : 'offsetHeight'];
      }
      return vieport;
    };
    this.isEnd = function (end_ratio) {
      var vieport = this.vieport();
      if (vieport.body < vieport.content) return vieport.position <= 0;
      return vieport.body - vieport.content * Math.max(1, end_ratio || params.end_ratio || 1) < Math.abs(vieport.position);
    };
    this.isFilled = function () {
      var vieport = this.vieport();
      return vieport.body > vieport.content;
    };
    this.append = function (object) {
      body.appendChild(object instanceof jQuery ? object[0] : object);
    };
    this.minus = function (minus) {
      html.classList.add('layer--wheight');
      html.mheight = minus instanceof jQuery ? minus[0] : minus;
    };
    this.height = function (minus) {
      html.classList.add('layer--height');
      html.mheight = minus instanceof jQuery ? minus[0] : minus;
    };
    this.body = function (js) {
      return js ? body : $(body);
    };
    this.render = function (js) {
      return js ? html : $(html);
    };
    this.clear = function () {
      body.innerHTML = '';
    };
    this.params = function () {
      return params;
    };
    this.position = function () {
      return scroll_position;
    };
    this.reset = function () {
      body.classList.add('transition-reset');
      body.style['-webkit-transform'] = 'translate3d(0px, 0px, 0px)';
      setTimeout(function () {
        body.classList.remove('transition-reset');
      }, 0);
      scroll_position = 0;
    };
    this.destroy = function () {
      html.remove();
    };
  }

  var html$a, active$3, _scroll, last$2;
  var listener$5 = start$8();
  function open$3(params) {
    active$3 = params;
    listener$5.send('preshow', {
      active: active$3
    });
    html$a = Template.get('modal', {
      title: params.title
    });
    html$a.on('mousedown', function (e) {
      if (!$(e.target).closest($('.modal__content', html$a)).length && DeviceInput.canClick(e.originalEvent)) Controller.back();
    });
    title(params.title);
    html$a.toggleClass('modal--medium', params.size == 'medium' ? true : false);
    html$a.toggleClass('modal--large', params.size == 'large' ? true : false);
    html$a.toggleClass('modal--full', params.size == 'full' ? true : false);
    html$a.toggleClass('modal--overlay', params.overlay ? true : false);
    html$a.toggleClass('modal--align-center', params.align == 'center' ? true : false);
    if (params.zIndex) html$a.css('z-index', params.zIndex);
    _scroll = new create$f({
      over: true,
      mask: params.mask
    });
    _scroll.render().toggleClass('layer--height', params.size == 'full' ? true : false);
    html$a.find('.modal__body').append(_scroll.render());
    if (Platform.screen('mobile') && params.size !== 'full') {
      var close_button = $("<div class=\"modal__close-button\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <rect x=\"3.51477\" y=\"0.686279\" width=\"28\" height=\"4\" rx=\"2\" transform=\"rotate(45 3.51477 0.686279)\" fill=\"currentColor\"/>\n            <rect width=\"28\" height=\"4\" rx=\"2\" transform=\"matrix(-0.707107 0.707107 0.707107 0.707107 20.4854 0.686279)\" fill=\"currentColor\"/>\n            </svg>\n        </div>");
      close_button.on('click', function () {
        Controller.back();
      });
      html$a.find('.modal__content').prepend(close_button);
    }
    bind$1(params.html);
    _scroll.onWheel = function (step) {
      roll(step > 0 ? 'down' : 'up');
    };
    if (params.size == 'full' && Platform.screen('mobile')) {
      _scroll.append(HeadBackward(params.title || ''));
    }
    _scroll.append(params.html);
    _scroll.addSwipeDown(function () {
      html$a.addClass('animate-down');
      setTimeout(function () {
        Controller.back();
      }, 200);
    });
    if (params.buttons) buttons();
    $('body').append(html$a);
    max();
    listener$5.send('fullshow', {
      active: active$3,
      html: html$a
    });
    toggle$3(params.select);
    html$a.addClass('animate');
  }
  function max() {
    var height = window.innerWidth <= 480 ? window.innerHeight * 0.6 : window.innerHeight - _scroll.render().offset().top - window.innerHeight * 0.1 - (active$3.buttons && active$3.buttons_position == 'outside' ? window.innerHeight * 0.1 : 0);
    _scroll.render().find('.scroll__content').css('max-height', Math.round(height) + 'px');
  }
  function buttons() {
    var footer = $('<div class="modal__footer"></div>');
    active$3.buttons.forEach(function (button) {
      var btn = $('<div class="modal__button selector"></div>');
      btn.text(button.name);
      btn.on('click hover:enter', function (e) {
        if (DeviceInput.noDubleClick(e)) button.onSelect();
      });
      footer.append(btn);
    });
    if (active$3.buttons_position == 'outside') html$a.find('.modal__content').append(footer);else _scroll.append(footer);
  }
  function bind$1(where) {
    where.find('.selector').on('hover:focus', function (e) {
      last$2 = e.target;
      _scroll.update($(e.target));
    }).on('hover:enter', function (e) {
      last$2 = e.target;
      if (active$3.onSelect) active$3.onSelect($(e.target));
    });
  }
  function jump(tofoward) {
    var select = _scroll.render().find('.selector.focus');
    if (tofoward) select = select.nextAll().filter('.selector');else select = select.prevAll().filter('.selector');
    select = select.slice(0, 10);
    select = select.last();
    if (select.length) {
      Controller.collectionFocus(select[0], _scroll.render());
    }
  }
  function roll(direction) {
    var select = _scroll.render().find('.selector');
    if (select.length) {
      Navigator.move(direction);
    } else {
      var step = Math.round(window.innerHeight * 0.15);
      _scroll.wheel(direction == 'down' ? step : -step);
    }
  }
  function toggle$3(need_select) {
    Controller.add('modal', {
      invisible: true,
      toggle: function toggle() {
        Controller.collectionSet(_scroll.render());
        Controller.collectionFocus(need_select || last$2, _scroll.render());
        Layer.visible(_scroll.render(true));
        listener$5.send('toggle', {
          active: active$3,
          html: html$a
        });
      },
      up: function up() {
        if (active$3.buttons && active$3.buttons_position == 'outside' && (_scroll.isEnd() || !_scroll.isFilled())) {
          Controller.toggle('modal');
          roll('up');
        } else roll('up');
      },
      down: function down() {
        if (active$3.buttons && active$3.buttons_position == 'outside' && (_scroll.isEnd() || !_scroll.isFilled())) {
          Controller.collectionSet(html$a.find('.modal__footer'));
          Controller.collectionFocus(false, html$a.find('.modal__footer'));
        } else roll('down');
      },
      right: function right() {
        if (Navigator.canmove('right')) Navigator.move('right');else jump(true);
      },
      left: function left() {
        if (Navigator.canmove('left')) Navigator.move('left');else jump(false);
      },
      back: function back() {
        if (active$3.onBack) active$3.onBack();
      }
    });
    Controller.toggle('modal');
  }
  function update$3(new_html) {
    last$2 = false;
    _scroll.clear();
    _scroll.append(new_html);
    bind$1(new_html);
    max();
    listener$5.send('update', {
      active: active$3,
      html: html$a,
      new_html: new_html
    });
    toggle$3(active$3.select);
  }
  function title(tit) {
    html$a.find('.modal__title').text(tit);
    html$a.toggleClass('modal--empty-title', tit ? false : true);
  }
  function destroy$3() {
    last$2 = false;
    _scroll.destroy();
    html$a.remove();
    listener$5.send('close', {
      active: active$3
    });
  }
  function close$4() {
    destroy$3();
  }
  function render$5() {
    return html$a;
  }
  var Modal = {
    listener: listener$5,
    open: open$3,
    close: close$4,
    update: update$3,
    title: title,
    toggle: toggle$3,
    render: render$5,
    scroll: function scroll() {
      return _scroll;
    }
  };

  function init$v() {
    var agent = navigator.userAgent.toLowerCase();
    if (typeof webOS !== 'undefined' && webOS.platform.tv === true) {
      Storage.set('platform', 'webos');
      webOS.deviceInfo(function (e) {
        webOS.sdk_version = parseFloat(e.sdkVersion);
      });
    } else if (typeof webapis !== 'undefined' && typeof tizen !== 'undefined') {
      Storage.set('platform', 'tizen');
      tizen.tvinputdevice.registerKey("MediaPlayPause");
      tizen.tvinputdevice.registerKey("MediaPlay");
      tizen.tvinputdevice.registerKey("MediaStop");
      tizen.tvinputdevice.registerKey("MediaPause");
      tizen.tvinputdevice.registerKey("MediaRewind");
      tizen.tvinputdevice.registerKey("MediaFastForward");
      tizen.tvinputdevice.registerKey("ChannelUp");
      tizen.tvinputdevice.registerKey("ChannelDown");
    } else if (agent.indexOf("prisma_client") > -1) {
      Storage.set('platform', 'android');
    } else if (agent.indexOf("whaletv") > -1 || agent.indexOf("philips") > -1 || agent.indexOf("nettv") > -1) {
      Storage.set('platform', 'philips');
    } else if (agent.indexOf("ipad") > -1 && window.innerWidth == 1920 && window.innerHeight == 1080) {
      Storage.set('platform', 'apple_tv');
    } else if (agent.indexOf("iphone") > -1 || agent.indexOf("mac os") > -1 && Utils$2.isTouchDevice() || agent.indexOf("macintosh") > -1 && Utils$2.isTouchDevice()) {
      Storage.set('platform', 'apple');
    } else if (typeof nw !== 'undefined') {
      Storage.set('platform', 'nw');
    } else if (agent.indexOf("electron") > -1) {
      Storage.set('platform', 'electron');
    } else if (agent.indexOf("netcast") > -1) {
      Storage.set('platform', 'netcast');
    } else if (agent.indexOf("version/5.1.7 safari/534.57.2") > -1) {
      Storage.set('platform', 'orsay');
    } else if (agent.indexOf("windows nt") > -1 || agent.indexOf("macintosh") > -1 && !Utils$2.isTouchDevice()) {
      Storage.set('platform', 'browser');
    } else if (agent.indexOf("maple") > -1) {
      Storage.set('platform', 'orsay');
      Orsay$1.init();
    } else {
      Storage.set('platform', '');
    }
    Storage.set('native', Storage.get('platform') ? true : false);
    $('body').addClass('platform--' + (get$5() || 'noname'));
    if (!screen('tv')) $('body').addClass('touch-device');
  }

  /**
   * Какая платформа
   * @returns String
   */
  function get$5() {
    return Storage.get('platform', '');
  }

  /**
   * Если это платформа
   * @param {String} need - какая нужна? tizen, webos, android, orsay
   * @returns Boolean
   */
  function is(need) {
    return get$5() == need ? true : false;
  }

  /**
   * Если хоть одна из платформ tizen, webos, android
   * @returns Boolean
   */
  function any() {
    return is('tizen') || is('webos') || is('android') || is('netcast') || is('orsay') || is('apple') || is('apple_tv') || macOS() || desktop() ? true : false;
  }

  /**
   * Если это именно телек
   * @returns Boolean
   */
  function tv() {
    return is('tizen') || is('webos') || is('orsay') || is('netcast') || is('apple_tv') ? true : false;
  }

  /**
   * Если это NW.js или Electron
   * @returns Boolean
   */
  function desktop() {
    return is('nw') || is('electron') ? true : false;
  }
  function macOS() {
    var agent = navigator.userAgent.toLowerCase();
    return agent.indexOf("mac os x") > -1 && !Utils$2.isTouchDevice();
  }
  function version(name) {
    if (name == 'app') {
      return object$2.app_version;
    } else if (name == 'android') {
      return AndroidJS.appVersion();
    } else if (name == 'orsay') {
      return curWidget.version;
    } else {
      return '';
    }
  }
  function screen(need) {
    if (need == 'light') {
      return Storage.field('light_version') && screen('tv');
    }
    var is_tv = true;
    if (!tv()) {
      if (Storage.get('is_true_mobile', 'false')) is_tv = false;else if (Boolean(Storage.get('platform', '') == 'apple')) is_tv = false;else if (Boolean(navigator.userAgent.toLowerCase().match(/iphone|ipad/i))) is_tv = false;else if (Utils$2.isTouchDevice()) {
        if (!Boolean(navigator.userAgent.toLowerCase().match(/(large screen)|googletv|mibox|mitv|smarttv|google tv|android tv/i))) {
          var ratio = window.devicePixelRatio || 1;
          var width = Math.ceil(window.innerWidth * ratio);
          var height = Math.ceil(window.innerHeight * ratio);
          is_tv = width > height && width >= 1280;
        }
      }
    }
    if (need == 'tv') return is_tv;
    if (need == 'mobile') return !is_tv;
    return false;
  }
  function install$1(what) {
    var about = Template.get('about');
    if ($('.modal').length) Modal.close();
    if (what == 'apk') {
      $('> div:eq(0)', about).html(Lang.translate('install_app_apk_text'));
      $('.about__contacts', about).empty();
      $('.about__rules', about).remove();
      $('.about__contacts', about).append("\n            <div>\n                <small>Telegram</small><br>\n                @prisma_party\n            </div>\n        ");
      Modal.open({
        title: '',
        html: about,
        size: 'medium',
        onBack: function onBack() {
          Modal.close();
          Controller.toggle('content');
        }
      });
    }
  }
  var Platform = {
    init: init$v,
    get: get$5,
    any: any,
    is: is,
    tv: tv,
    desktop: desktop,
    version: version,
    screen: screen,
    install: install$1,
    macOS: macOS
  };

  var bell;
  var items$1 = [];
  function Item$1(params) {
    var _this = this;
    Arrays.extend(params, {
      icon: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M12 6.75V13.5\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n                <circle cx=\"12\" cy=\"16.875\" r=\"1.125\" fill=\"currentColor\"/>\n                <path d=\"M23.0246 11.9999C23.0246 5.91091 18.0885 0.974854 11.9996 0.974854C5.91067 0.974854 0.974609 5.91091 0.974609 11.9999C0.974609 18.0888 5.91067 23.0249 11.9996 23.0249C18.0885 23.0249 23.0246 18.0888 23.0246 11.9999Z\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-miterlimit=\"10\"/>\n                </svg>",
      type: 'info',
      text: '',
      time: 5000
    });
    var element = $("<div class=\"bell__item bell__item--".concat(params.type, "\">\n        <div class=\"bell__item-icon\">").concat(params.icon, "</div>\n        <div class=\"bell__item-text\">").concat(params.text, "</div>    \n    </div>"));
    setTimeout(function () {
      element.removeClass('show');
      setTimeout(function () {
        var slide = $("<div class=\"bell__item-slide\"></div>");
        slide.css('height', element.outerHeight() + 'px');
        element.after(slide);
        element.remove();
        Arrays.remove(items$1, _this);
        slide.animate({
          height: 0
        }, 300, function () {
          slide.remove();
        });
        if (items$1.length == 0) {
          bell.removeClass('show bell--wide');
        }
      }, 300);
    }, params.time);
    bell.find('.bell__wrap').append(element);
    setTimeout(function () {
      element.addClass('show');
    }, 100);
    items$1.push(this);
    Sound$1.play('bell');
  }
  function init$u() {
    bell = $("<div class=\"bell\">\n        <div class=\"bell__wrap\"></div>\n    </div>");
    $('body').append(bell);
  }
  function push$3(params) {
    var item = new Item$1(params);
    bell.addClass('show');

    // Добавляем класс wide для warning уведомлений
    if (params.type === 'warning') {
      bell.addClass('bell--wide');
    }
    return item;
  }
  var Bell = {
    init: init$u,
    push: push$3
  };

  var reqCallback = {};
  var timeCallback = {};
  function init$t() {
    if (Platform.is('android')) {
      Params.listener.follow('button', function (e) {
        if (e.name === 'reset_player') {
          resetDefaultPlayer();
        }
      });
      Favorite.listener.follow('add,added,remove', function (e) {
        updateChannel(e.where);
      });
    }
  }
  function exit() {
    if (checkVersion(1)) AndroidJS.exit();else $('<a href="prisma://exit"></a>')[0].click();
  }
  function playHash(SERVER) {
    var magnet = "magnet:?xt=urn:btih:" + SERVER.hash;
    if (checkVersion(10)) {
      var intentExtra = "";
      if (SERVER.movie) {
        intentExtra = {
          title: " " + (SERVER.movie.title || 'No title').replace(/\s+/g, ' ').trim(),
          poster: SERVER.movie.img,
          media: SERVER.movie.name ? 'tv' : 'movie',
          data: {
            prisma: true,
            movie: SERVER.movie
          }
        };
      }
      AndroidJS.openTorrentLink(magnet, JSON.stringify(intentExtra));
    } else {
      $('<a href="' + magnet + '"/>')[0].click();
    }
  }
  function openTorrent(SERVER) {
    if (checkVersion(10)) {
      var intentExtra = {
        title: " " + (SERVER.movie.title || 'No title').replace(/\s+/g, ' ').trim(),
        poster: SERVER.object.poster,
        media: SERVER.movie.name ? 'tv' : 'movie',
        data: {
          prisma: true,
          movie: SERVER.movie
        }
      };
      AndroidJS.openTorrentLink(SERVER.object.MagnetUri || SERVER.object.Link, JSON.stringify(intentExtra));
    } else {
      $('<a href="' + (SERVER.object.MagnetUri || SERVER.object.Link) + '"/>')[0].click();
    }
  }
  function openPlayer(link, data) {
    var updateTimeline = function updateTimeline(elem) {
      if (elem.timeline) {
        var new_timeline = Prisma.Timeline.view(elem.timeline.hash);
        elem.timeline.time = Math.round(new_timeline.time);
        elem.timeline.duration = Math.round(new_timeline.duration);
        elem.timeline.percent = new_timeline.percent;
        timeCallback[elem.timeline.hash] = elem;
      }
    };
    if (checkVersion(98, true)) {
      if (data.timeline) {
        updateTimeline(data);
      }
      if (data.playlist) {
        data.playlist.forEach(function (elem) {
          updateTimeline(elem);
        });
      }
    }
    if (checkVersion(10)) AndroidJS.openPlayer(link, JSON.stringify(data));else $('<a href="' + link + '"><a/>')[0].click();
  }
  function openYoutube(link) {
    if (checkVersion(15)) AndroidJS.openYoutube(link);else $('<a href="' + link + '"><a/>')[0].click();
  }
  function openBrowser(link) {
    if (checkVersion(484)) AndroidJS.openBrowser(link);
  }
  function resetDefaultPlayer() {
    if (checkVersion(15)) AndroidJS.clearDefaultPlayer();
  }
  function httpReq(data, call) {
    var index = Math.floor(Math.random() * 5000);
    reqCallback[index] = {
      data: data,
      call: call
    };
    if (checkVersion(16)) AndroidJS.httpReq(JSON.stringify(data), index);else call.error({
      responseText: "No Native request"
    });
  }
  function httpCall(index, callback) {
    var req = reqCallback[index];
    if (req && req.call[callback]) {
      var resp = AndroidJS.getResp(index);
      if (!req.data.dataType || req.data.dataType && req.data.dataType.toLowerCase() == 'json' || callback === 'error') {
        try {
          resp = JSON.parse(resp);
        } catch (e) {}
      }
      delete reqCallback[index];
      req.call[callback](resp);
    }
  }
  function timeCall(timeline) {
    var hash = timeline.hash;
    if (timeCallback[hash]) {
      timeCallback[hash].timeline.handler(timeline.percent, timeline.time, timeline.duration);
      timeCallback[hash].timeline.percent = timeline.percent;
      timeCallback[hash].timeline.duration = timeline.duration;
      timeCallback[hash].timeline.time = timeline.time;
      delete timeCallback[hash];
    }
  }
  function voiceStart() {
    if (checkVersion(25)) AndroidJS.voiceStart();else Prisma.Noty.show("Работает только на Android TV");
  }
  function updateChannel(where) {
    if (checkVersion(28)) AndroidJS.updateChannel(where);
  }
  function checkVersion(needVersion) {
    var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (typeof AndroidJS !== 'undefined') {
      try {
        var current = AndroidJS.appVersion().split('-');
        var versionCode = current.pop();
        if (parseInt(versionCode, 10) >= needVersion) {
          return true;
        } else {
          if (!silent) Bell.push({
            text: 'Обновите приложение до версии ' + needVersion
          });
          return false;
        }
      } catch (e) {
        Bell.push({
          text: 'Обновите приложение до версии ' + needVersion
        });
        return false;
      }
    } else return false;
  }
  var Android = {
    init: init$t,
    exit: exit,
    openTorrent: openTorrent,
    openPlayer: openPlayer,
    playHash: playHash,
    openYoutube: openYoutube,
    resetDefaultPlayer: resetDefaultPlayer,
    httpReq: httpReq,
    voiceStart: voiceStart,
    httpCall: httpCall,
    timeCall: timeCall,
    updateChannel: updateChannel,
    openBrowser: openBrowser
  };

  function create$e() {
    var listener = start$8();
    var _calls = [];
    var _last;
    var last_reguest;
    var need = {
      timeout: 1000 * 60
    };
    this.timeout = function (time) {
      need.timeout = time;
    };

    /**
     * Видимый запрос
     * @param {String} url адрес
     * @param {Function} complite успешно
     * @param {Function} error ошибка
     * @param {Object} post_data данные для пост запроса
     */

    this.get = function (url, _complite, _error, post_data) {
      clear();
      go({
        url: url,
        post_data: post_data,
        start: function start() {
          listener.send('start');
        },
        before_complite: function before_complite() {
          listener.send('before_complite');
        },
        complite: function complite(data) {
          if (_complite) _complite(data);
        },
        after_complite: function after_complite() {
          listener.send('after_complite');
        },
        before_error: function before_error() {
          listener.send('before_error');
        },
        error: function error(data) {
          if (_error) _error(data);
        },
        after_error: function after_error() {
          listener.send('after_error');
        },
        end: function end() {
          listener.send('end');
        }
      });
    };

    /**
     * Тихий запрос, отработает в любом случае
     * @param {String} url адрес
     * @param {Function} complite успешно
     * @param {Function} error ошибка
     * @param {Object} post_data данные для пост запроса
     * @param {Object} params дополнительные параметры
     */
    this.quiet = function (url, _complite2, _error2, post_data, params) {
      var add_params = {};
      if (params) {
        add_params = params;
      }
      var data = {
        url: url,
        post_data: post_data,
        complite: function complite(data) {
          if (_complite2) _complite2(data);
        },
        error: function error(data) {
          if (_error2) _error2(data);
        }
      };
      Arrays.extend(data, add_params, true);
      go(data);
    };

    /**
     * Бесшумный запрос, сработает прерывание при новом запросе
     * @param {String} url адрес
     * @param {Function} complite успешно
     * @param {Function} error ошибка
     * @param {Object} post_data данные для пост запроса
     * @param {Object} params дополнительные параметры
     */
    this.silent = function (url, complite, error, post_data, params) {
      var add_params = {};
      if (params) {
        add_params = params;
      }
      var reguest = {
        url: url,
        complite: complite,
        error: error
      };
      _calls.push(reguest);
      var data = {
        url: url,
        post_data: post_data,
        complite: function complite(data) {
          if (_calls.indexOf(reguest) !== -1 && reguest.complite) reguest.complite(data);
        },
        error: function error(data) {
          if (_calls.indexOf(reguest) !== -1 && reguest.error) reguest.error(data);
        },
        end: function end() {
          listener.send('end');
        }
      };
      Arrays.extend(data, add_params, true);
      go(data);
    };

    /**
     * Отработать только последний запрос в стеке
     * @param {String} url адрес
     * @param {Function} complite успешно
     * @param {Function} error ошибка
     * @param {Object} post_data данные для пост запроса
     */
    this.last = function (url, complite, error, post_data) {
      var reguest = {
        url: url,
        complite: complite,
        error: error
      };
      _last = reguest;
      go({
        url: url,
        post_data: post_data,
        complite: function complite(data) {
          if (_last && _last.complite) _last.complite(data);
        },
        error: function error(data) {
          if (_last && _last.error) _last.error(data);
        },
        end: function end() {
          dispatchEvent({
            type: 'load:end'
          });
        }
      });
    };
    this["native"] = function (url, complite, error, post_data, params) {
      var add_params = {};
      if (params) {
        add_params = params;
      }
      var reguest = {
        url: url,
        complite: complite,
        error: error
      };
      _calls.push(reguest);
      var data = {
        url: url,
        post_data: post_data,
        complite: function complite(data) {
          if (_calls.indexOf(reguest) !== -1 && reguest.complite) reguest.complite(data);
        },
        error: function error(data) {
          if (_calls.indexOf(reguest) !== -1 && reguest.error) reguest.error(data);
        },
        end: function end() {
          listener.send('end');
        }
      };
      Arrays.extend(data, add_params, true);
      _native(data);
    };

    /**
     * Очистить все запросы
     */
    this.clear = function () {
      _calls = [];
    };

    /**
     * Повторить запрос
     * @param {Object} custom 
     */
    this.again = function (custom) {
      if (custom || last_reguest) {
        go(custom || last_reguest);
      }
    };

    /**
     * Вернуть обьект последненго запроса
     * @returns Object
     */
    this.latest = function () {
      return last_reguest;
    };

    /**
     * Декодировать ошибку в запросе
     * @param {Object} jqXHR 
     * @param {String} exception 
     * @returns String
     */

    this.errorDecode = function (jqXHR, exception) {
      return errorDecode(jqXHR, exception);
    };
    this.errorCode = function (jqXHR) {
      return errorCode(jqXHR);
    };
    this.errorJSON = function (jqXHR) {
      return errorJSON(jqXHR);
    };
    function errorDecode(jqXHR, exception) {
      if (!Arrays.isObject(jqXHR)) return Lang.translate('network_error');
      var msg = '';
      var txt = jqXHR.responseText || jqXHR.message || jqXHR.status || '';
      if (jqXHR.status === 0 && exception !== 'timeout') {
        msg = Lang.translate('network_noconnect');
      } else if (jqXHR.responseJSON && jqXHR.responseJSON.code) {
        msg = Lang.translate('network_500').replace('500', jqXHR.responseJSON.code) + (jqXHR.responseJSON.text ? ' [' + jqXHR.responseJSON.text + ']' : '');
      } else if (jqXHR.status == 404) {
        msg = Lang.translate('network_404');
      } else if (jqXHR.status == 401) {
        msg = Lang.translate('network_401');
      } else if (jqXHR.status == 500) {
        msg = Lang.translate('network_500');
      } else if (exception === 'parsererror') {
        msg = Lang.translate('network_parsererror');
      } else if (exception === 'timeout') {
        msg = Lang.translate('network_timeout');
      } else if (exception === 'abort') {
        msg = Lang.translate('network_abort');
      } else if (exception === 'custom') {
        msg = jqXHR.responseText;
      } else {
        msg = Lang.translate('network_error') + (txt ? ': ' + txt : '');
      }
      return msg;
    }
    function errorCode(jqXHR) {
      return jqXHR && jqXHR.responseJSON ? jqXHR.responseJSON.code : jqXHR ? jqXHR.status : 404;
    }
    function errorJSON(jqXHR) {
      return jqXHR && jqXHR.responseJSON ? jqXHR.responseJSON : {
        code: jqXHR ? jqXHR.status : 404,
        text: jqXHR ? jqXHR.responseText || jqXHR.message || Lang.translate('network_404') : Lang.translate('network_404')
      };
    }

    /**
     * Сделать запрос
     * @param {Object} params 
     */
    function go(params) {
      var start_time = Date.now();
      var error = function error(jqXHR, exception) {
        jqXHR.decode_error = errorDecode(jqXHR, exception);
        jqXHR.decode_code = errorCode(jqXHR);
        params.url = params.url || 'no url';
        Prisma.Listener.send('request_error', {
          params: params,
          error: jqXHR,
          exception: exception
        });
        var end_time = Date.now() - start_time;
        var time = end_time > 1000 ? Math.round(end_time / 1000) + 's' : end_time + 'ms';
        console.log('Request', params.post_data ? 'POST' : 'GET', 'time:', time, 'error of ' + params.url + ' :', errorDecode(jqXHR, exception));
        if (params.before_error) params.before_error(jqXHR, exception);
        if (params.error) params.error(jqXHR, exception);
        if (params.after_error) params.after_error(jqXHR, exception);
        if (params.end) params.end();
      };
      if (typeof params.url !== 'string' || !params.url) return error({
        status: 404
      }, '');
      listener.send('go');
      last_reguest = params;
      if (params.start) params.start();
      var secuses = function secuses(data, textStatus, jqXHR) {
        if (params.before_complite) params.before_complite(data);
        if (params.complite) {
          try {
            params.complite(data);
          } catch (e) {
            console.error('Request', 'complite error:', e.message + "\n\n" + e.stack);
            Noty$1.show('Error: ' + (e.error || e).message + '<br><br>' + (e.error && e.error.stack ? e.error.stack : e.stack || '').split("\n").join('<br>'));
          }
        }
        if (params.after_complite) params.after_complite(data);
        if (params.end) params.end();
      };
      var datatype = params.dataType || 'json';
      var data = {
        dataType: datatype,
        url: params.url,
        timeout: need.timeout,
        crossDomain: true,
        success: function success(data, textStatus, jqXHR) {
          if (datatype === 'json' && !data) error({
            status: 500
          });else secuses(data);
        },
        error: error,
        beforeSend: function beforeSend(xhr) {
          var use = Storage.field('torrserver_auth');
          var srv = Storage.get(Storage.field('torrserver_use_link') == 'two' ? 'torrserver_url_two' : 'torrserver_url');
          if (use && srv && params.url.indexOf(srv) >= 0) {
            var authorization = "Basic " + Base64.encode(Storage.get('torrserver_login') + ':' + Storage.get('torrserver_password'));
            xhr.setRequestHeader("Authorization", authorization);
          }
          if (params.beforeSend) {
            xhr.setRequestHeader(params.beforeSend.name, params.beforeSend.value);
          }
        }
      };
      if (params.withCredentials) {
        data.xhrFields = {
          withCredentials: true
        };
      }
      if (params.post_data) {
        data.type = 'POST';
        data.data = params.post_data;
      }
      if (params.type) data.type = params.type;
      if (params.headers) {
        data.headers = params.headers;
      }
      $.ajax(data);
      need.timeout = 1000 * 60;
    }

    /**
     * Сделать нативный Android запрос
     * @param {Object} params 
     */
    function android_go(params) {
      var start_time = Date.now();
      var error = function error(jqXHR, exception) {
        var end_time = Date.now() - start_time;
        var time = end_time > 1000 ? Math.round(end_time / 1000) + 's' : end_time + 'ms';
        console.log('Request', params.post_data ? 'POST' : 'GET', 'time:', time, 'error of ' + params.url + ' :', errorDecode(jqXHR, exception));
        if (params.before_error) params.before_error(jqXHR, exception);
        if (params.error) params.error(jqXHR, exception);
        if (params.after_error) params.after_error(jqXHR, exception);
        if (params.end) params.end();
      };
      if (typeof params.url !== 'string' || !params.url) return error({
        status: 404
      }, '');
      listener.send('go');
      last_reguest = params;
      if (params.start) params.start();
      var secuses = function secuses(data) {
        if (params.before_complite) params.before_complite(data);
        if (params.complite) {
          try {
            params.complite(data);
          } catch (e) {
            console.error('Request', 'complite error:', e.message + "\n\n" + e.stack);
            Noty$1.show('Error: ' + (e.error || e).message + '<br><br>' + (e.error && e.error.stack ? e.error.stack : e.stack || '').split("\n").join('<br>'));
          }
        }
        if (params.after_complite) params.after_complite(data);
        if (params.end) params.end();
      };
      params.timeout = need.timeout;
      Android.httpReq(params, {
        complite: secuses,
        error: error
      });
      need.timeout = 1000 * 60;
    }
    function _native(params) {
      if (Platform.is('android')) android_go(params);else go(params);
    }
  }

  function Progress() {
    var works = [];
    var result = [];
    var loaded = 0;
    this.append = function (call) {
      if (Arrays.isArray(call)) works = works.concat(call);else if (typeof call == 'function') works.push(call);
    };
    this.start = function (complite) {
      works.forEach(function (fun, i) {
        fun(function (data) {
          result[i] = data;
          loaded++;
          if (loaded == works.length) complite(result);
        });
      });
    };
  }

  /**
   * Источники
   */
  var sources = {
    tmdb: TMDB
  };

  /**
   * Чтоб не переписали их
   */
  Object.defineProperty(sources, 'tmdb', {
    get: function get() {
      return TMDB;
    }
  });
  // Object.defineProperty(sources, 'cub', { get: ()=> CUB })

  var network$5 = new create$e();

  /**
   * Получить источник
   * @param {{source:string}} params 
   * @returns {class}
   */
  function source(params) {
    return params.source && sources[params.source] ? sources[params.source] : sources.tmdb;
  }
  function availableDiscovery() {
    var list = [];
    var active = Storage.get('source', 'tmdb');
    for (var key in sources) {
      console.log('Api', 'discovery check:', key, sources[key].discovery ? true : false, _typeof(sources[key].discovery));
      if (sources[key].discovery) {
        if (key === active) list.splice(0, 0, sources[key].discovery());else list.push(sources[key].discovery());
      }
    }
    return list;
  }

  /**
   * Главная страница
   * @param {{source:string}} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function main$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    return source(params).main(params, oncomplite, onerror);
  }

  /**
   * Категория
   * @param {{url:string, source:string}} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function category() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    return source(params).category(params, oncomplite, onerror);
  }

  /**
   * Просмотр карточки
   * @param {{id:string, source:string, method:string, card:{}}} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function full() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    source(params).full(params, oncomplite, onerror);
  }

  /**
   * Главный поиск
   * @param {{query:string}} params 
   * @param {function} oncomplite
   */
  function search$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    TMDB.search(params, function (json) {
      var result = {
        movie: json.find(function (a) {
          return a.type == 'movie';
        }),
        tv: json.find(function (a) {
          return a.type == 'tv';
        })
      };
      oncomplite(result);
    }, function () {
      oncomplite({});
    });
  }

  /**
   * Что-то старое, надо проверить
   * @param {object} params
   * @param {function} oncomplite 
   */
  function menuCategory() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    source(params).menuCategory(params, oncomplite);
  }

  /**
   * Информация об актёре
   * @param {{id:integer, source:string}} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function person() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    source(params).person(params, oncomplite, onerror);
  }

  /**
   * Жанры
   * @param {object} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function genres() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    TMDB.genres(params, oncomplite, onerror);
  }

  /**
   * Компания
   * @param {{id:integer}} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function company() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    TMDB.company(params, oncomplite, onerror);
  }

  /**
   * Полная категори
   * @param {{page:integer, url:string, source:string}} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function list$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    source(params).list(params, oncomplite, onerror);
  }

  /**
   * Получить список категорий для каталога в меню
   * @param {{source:string}} params 
   * @param {function} oncomplite 
   */
  function menu() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    source(params).menu(params, oncomplite);
  }

  /**
   * Сезоны
   * @param {{id:integer, source:string}} tv 
   * @param {[1,2,3]} from - список сезонов 1,3,4...
   * @param {function} oncomplite 
   */
  function seasons(tv, from, oncomplite) {
    source(tv).seasons(tv, from, oncomplite);
  }

  /**
   * Коллекции 
   * @param {object} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function collections(params, oncomplite, onerror) {
    source(params).collections(params, oncomplite, onerror);
  }

  /**
   * Закладки
   * @param {{page:integer, type:string}} params 
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function favorite() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var extract = function extract() {
      var data = {};
      data.results = Favorite.get(params);
      if (params.filter) {
        data.results = data.results.filter(function (a) {
          return params.filter == 'tv' ? a.name : !a.name;
        });
      }
      data.total_pages = Math.ceil(data.results.length / 20);
      data.page = Math.min(params.page, data.total_pages);
      var offset = data.page - 1;
      data.results = data.results.slice(20 * offset, 20 * offset + 20);
      if (data.results.length) oncomplite(data);else onerror();
    };
    if (Account.working()) {
      var tic = 0;
      var timer = setInterval(function () {
        var any = Prisma.Account.all();
        if (any.length) {
          clearInterval(timer);
          extract();
        } else if (tic > 10) {
          clearInterval(timer);
          onerror();
        }
        tic++;
      }, 1000);
    } else extract();
  }

  /**
   * Релизы
   * @param {function} oncomplite 
   * @param {function} onerror 
   */
  function relise(params, oncomplite, onerror) {
    network$5.silent(Utils$2.protocol() + 'tmdb.' + object$2.cub_domain + '?sort=releases&results=20&page=' + params.page, oncomplite, onerror);
  }
  function partPersons(parts, parts_limit, type) {
    var shift = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    if (shift == 0) shift = parts.length;
    return function (call) {
      if (['movie', 'tv'].indexOf(type) == -1) return call();
      TMDB.get('person/popular', {}, function (json) {
        call();
        json.results.sort(function (a, b) {
          return a.popularity - b.popularity;
        });
        var filtred = json.results.filter(function (p) {
          return p.known_for_department && p.known_for;
        });
        var persons = filtred.filter(function (p) {
          return (p.known_for_department || '').toLowerCase() == 'acting' && p.known_for.length && p.popularity > 30;
        }).slice(0, 10);
        persons.forEach(function (person_data, index) {
          var event = function event(call_inner) {
            person({
              only_credits: type,
              id: person_data.id
            }, function (result) {
              if (!result.credits) return call_inner();
              var items = (result.credits[type] || []).filter(function (m) {
                return m.backdrop_path && m.popularity > 30 && m.vote_count > 20;
              });
              if (type == 'tv') items = items.filter(function (m) {
                return !(m.genre_ids.indexOf(10767) >= 0 || m.genre_ids.indexOf(10763) >= 0);
              });
              items.sort(function (a, b) {
                var da = a.release_date || a.first_air_date;
                var db = b.release_date || b.first_air_date;
                if (db > da) return 1;else if (db < da) return -1;else return 0;
              });
              var src = person_data.profile_path ? TMDB.img(person_data.profile_path, 'w90_and_h90_face') : person_data.img || './img/actor.svg';
              var icon = "<div class=\"full-person layer--visible full-person--small full-person--loaded\">\n                            <div class=\"full-person__photo\">\n                                <img src=\"".concat(src, "\">\n                            </div>\n                        \n                            <div class=\"full-person__body\">\n                                <div class=\"full-person__name\">").concat(person_data.name, "</div>\n                            </div>\n                        </div>");
              call_inner({
                results: items.length > 5 ? items.slice(0, 20) : [],
                nomore: true,
                title: icon
              });
            });
          };
          parts.push(event);
          Arrays.shuffleArrayFromIndex(parts, shift);
        });
      }, call);
    };
  }
  function partNext(parts, parts_limit, partLoaded, partEmpty) {
    var pieces = parts.filter(function (p) {
      return typeof p == 'function';
    }).slice(0, 0 + parts_limit);
    if (pieces.length) {
      var progress = new Progress();
      progress.append(pieces);
      progress.start(function (result) {
        var data = result.filter(function (r) {
          return r && r.results && r.results.length;
        });
        for (var i = 0; i < pieces.length; i++) {
          parts[parts.indexOf(pieces[i])] = false;
        }
        if (data.length) {
          if (data.length < 3) {
            partNext(parts, parts_limit, function (more_data) {
              data = data.concat(more_data);
              partLoaded(data);
            }, function () {
              partLoaded(data);
            });
          } else partLoaded(data);
        } else partNext(parts, parts_limit, partLoaded, partEmpty);
      });
    } else partEmpty();
  }

  /**
   * Очистить
   */
  function clear$4() {
    for (var i in sources) sources[i].clear();
    network$5.clear();
  }

  /**
   * Получить логотипы фильма/сериала
   * @param {{id:number, name?:string, title?:string}} card - Объект с информацией о фильме/сериале
   * @param {string} language - Код языка (например, 'ru', 'en')
   * @returns {Promise} - Промис с данными о логотипах
   */
  function getMovieLogos(card, language) {
    if (!card || !card.id) return Promise.reject('Отсутствует ID карточки');

    // Определяем тип контента (фильм или сериал)
    var mediaType = card.name ? 'tv' : 'movie';

    // Если язык не указан, используем язык из настроек
    if (!language) language = Storage.field('tmdb_lang');

    // Используем функцию из TMDB
    return sources.tmdb.movieLogos(card.id, mediaType, language);
  }

  /**
   * Получить трейлеры фильма/сериала
   * @param {{id:number, name?:string, first_air_date?:string, title?:string, media_type?:string}} card - Объект с информацией о фильме/сериале
   * @param {string} language - Код языка (например, 'ru', 'en')
   * @returns {Promise} - Промис с данными о трейлерах
   */
  function getMovieTrailers(card, language) {
    if (!card || !card.id) return Promise.reject('Отсутствует ID карточки');

    // Определяем тип контента (фильм или сериал)
    var mediaType = card.media_type || (card.name || card.first_air_date ? 'tv' : 'movie');

    // Если язык не указан, используем язык из настроек
    if (!language) language = Storage.field('tmdb_lang');
    return new Promise(function (resolve, reject) {
      // Функция trailers уже выполняет все нужные действия:
      // - Поиск на языке пользователя
      // - Поиск на английском языке (если язык пользователя не английский)
      // - Объединение результатов
      // - Сортировку и фильтрацию видео
      sources.tmdb.trailers({
        id: card.id,
        method: mediaType,
        language: language
      }, function (result) {
        if (result && result.results) {
          console.log("[API] \u041F\u043E\u043B\u0443\u0447\u0435\u043D\u043E ".concat(result.results.length, " \u0432\u0438\u0434\u0435\u043E \u0434\u043B\u044F ").concat(mediaType, "/").concat(card.id));
          resolve(result);
        } else {
          console.log("[API] \u0422\u0440\u0435\u0439\u043B\u0435\u0440\u044B \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u044B \u0434\u043B\u044F ".concat(card.id, " (").concat(mediaType, ")"));
          resolve({
            results: []
          });
        }
      }, function (error) {
        console.error("[API] \u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u044F \u0442\u0440\u0435\u0439\u043B\u0435\u0440\u043E\u0432:", error);
        reject(error || 'Ошибка получения трейлеров');
      });
    });
  }
  var Api = {
    main: main$1,
    img: TMDB.img,
    full: full,
    list: list$1,
    genres: genres,
    category: category,
    search: search$1,
    clear: clear$4,
    company: company,
    person: person,
    favorite: favorite,
    seasons: seasons,
    screensavers: TMDB.screensavers,
    relise: relise,
    menu: menu,
    collections: collections,
    menuCategory: menuCategory,
    sources: sources,
    availableDiscovery: availableDiscovery,
    partPersons: partPersons,
    partNext: partNext,
    getMovieLogos: getMovieLogos,
    getMovieTrailers: getMovieTrailers
  };

  function component$k(object) {
    var comp = new Prisma.InteractionMain(object);
    comp.onLinesBuild = function (data) {
      object$2.plugins.forEach(function (plugin) {
        if (plugin.onMain) {
          var result = plugin.onMain(data, comp);
          if (result.results.length) comp.append(result);
        }
      });
    };
    comp.create = function () {
      this.activity.loader(true);
      var next = Api.main(object, this.build.bind(this), this.empty.bind(this));
      if (typeof next == 'function') this.next = next;
      return this.render();
    };
    return comp;
  }

  var player;
  var html$9;
  var timer;
  function create$d(id) {
    html$9 = $('<div class="youtube-player"><div id="youtube-player"></div><div id="youtube-player__progress" class="youtube-player__progress"></div></div>');
    $('body').append(html$9);
    player = new YT.Player('youtube-player', {
      height: window.innerHeight,
      width: window.innerWidth,
      playerVars: {
        'controls': 0,
        'showinfo': 0,
        'autohide': 1,
        'modestbranding': 1,
        'autoplay': 1,
        'suggestedQuality': 'hd1080',
        'setPlaybackQuality': 'hd1080'
      },
      videoId: id,
      events: {
        onReady: function onReady(event) {
          event.target.setPlaybackQuality('hd1080');
          event.target.playVideo();
          update$2();
        },
        onStateChange: function onStateChange(state) {
          if (state.data == 0) {
            Controller.toggle('content');
          }
          if (state.data == YT.PlayerState.BUFFERING) {
            state.target.setPlaybackQuality('hd1080');
          }
        },
        onPlaybackQualityChange: function onPlaybackQualityChange(state) {
          console.log('YouTube', 'quality', state.target.getPlaybackQuality());
        }
      }
    });
  }
  function update$2() {
    timer = setTimeout(function () {
      var progress = player.getCurrentTime() / player.getDuration() * 100;
      $('#youtube-player__progress').css('width', progress + '%');
      Screensaver$2.resetTimer();
      update$2();
    }, 400);
  }
  function play(id) {
    if (typeof YT == 'undefined') return;
    create$d(id);
    Controller.add('youtube', {
      invisible: true,
      toggle: function toggle() {},
      right: function right() {
        player.seekTo(player.getCurrentTime() + 10, true);
      },
      left: function left() {
        player.seekTo(player.getCurrentTime() - 10, true);
      },
      enter: function enter() {},
      gone: function gone() {
        destroy$2();
      },
      back: function back() {
        Controller.toggle('content');
      }
    });
    Controller.toggle('youtube');
  }
  function destroy$2() {
    clearTimeout(timer);
    player.destroy();
    html$9.remove();
    html$9 = null;
  }
  var YouTube = {
    play: play
  };

  function Event() {
    var ids = {};
    var evokes = {};
    function callback(data) {
      if (data.method == 'callback' && ids[data.callback_name] == data.callback_id) {
        evokes[data.callback_id](data);
        evokes[data.callback_id] = function () {};
      }
    }
    this.call = function (method, params, call) {
      if (!ids[method]) ids[method] = Utils$2.uid(10);
      params.callback_id = ids[method];
      params.callback_name = method;
      evokes[params.callback_id] = call;
      Socket.send('callback', params);
    };
    this.cancel = function (method) {
      if (ids[method]) {
        evokes[ids[method]] = function () {};
      }
    };
    this.destroy = function () {
      Socket.listener.remove('message', callback);
      for (var i in evokes) {
        evokes[i] = function () {};
      }
    };
    Socket.listener.follow('message', callback);
  }

  function create$c(data) {
    var _this2 = this;
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var html;
    var last;
    var tbtn;
    var self = this;

    // Переменные для трейлера
    var trailer_container = $('<div class="full-start__trailer"></div>');
    var trailer_timeout = null;
    var current_trailer_url = null;
    var trailer_debounce_timer = null;
    var current_hls = null;
    var follow = function follow(e) {
      if (e.name == 'parser_use') {
        var status = Storage.field('parser_use');
        if (window.prisma_settings.torrents_use) tbtn.toggleClass('selector', status).toggleClass('hide', !status);
        self.groupButtons();
      }
    };
    var buttons_scroll = new create$f({
      horizontal: true,
      nopadding: false
    });
    var load_images = {
      poster: {}
    };
    var event = new Event();
    var new_html = Storage.field('card_interfice_type') == 'new';
    Arrays.extend(data.movie, {
      title: data.movie.name,
      original_title: data.movie.original_name,
      runtime: 0,
      img: data.movie.poster_path ? Api.img(data.movie.poster_path, Storage.field('poster_size')).replace(/\/w200/, '/w500') : './img/img_broken.svg'
    });
    this.create = function () {
      var _this = this;
      var genres = (data.movie.genres || ['---']).slice(0, 3).map(function (a) {
        return Utils$2.capitalizeFirstLetter(a.name);
      }).join(', ');
      var countries = Api.sources.tmdb.parseCountries(data.movie);
      var seasons = Utils$2.countSeasons(data.movie);
      var tmdb_rating = parseFloat((data.movie.vote_average || 0) + '').toFixed(1);
      if (tmdb_rating >= 10) tmdb_rating = 10;
      html = Template.get('full_start' + (new_html ? '_new' : ''), {
        title: data.movie.title,
        original_title: data.movie.original_title,
        descr: Utils$2.substr(data.movie.overview || Lang.translate('full_notext'), 420),
        time: Utils$2.secondsToTime(data.movie.runtime * 60, true),
        genres: Utils$2.substr(genres, 30),
        rating: tmdb_rating,
        seasons: seasons,
        countries: countries.join('● '),
        episodes: data.movie.number_of_episodes,
        tagline: data.movie.tagline
      });

      // Добавляем трейлер в HTML структуру
      html.append(trailer_container);
      if (!window.prisma_settings.torrents_use) html.find('.view--torrent').addClass('hide');
      if (new_html && data.movie.name) html.find('.full-start-new__poster').addClass('card--tv').append('<div class="card__type">TV</div>');
      var relise = (data.movie.release_date || data.movie.first_air_date || '') + '';
      var year = relise ? relise.slice(0, 4) : '';
      // let quality = !data.movie.first_air_date ? data.movie.release_quality || data.movie.quality : true
      var quality = $('<span class="quality-placeholder"></span>');
      var head = [];
      var info = [];
      if (year) {
        html.find('.tag--year').removeClass('hide').find('> div').text(year);
        head.push('<span>' + year + '</span>');
      }
      if (countries.length) {
        head.push(countries.slice(0, 5).join(' | '));
      }
      if (!data.movie.tagline) {
        html.find('.full--tagline').remove();
      }
      if (data.movie.runtime > 0) {
        info.push('<span>' + Utils$2.secondsToTime(data.movie.runtime * 60, true) + '</span>');
      }

      // Проверка, является ли фильм новым
      this.checkNewMovie(relise);

      var _0x48e242=_0x4203;function _0x4203(t,e){var a=_0x2070();return(_0x4203=function(t,e){return a[t-=452]})(t,e)}function _0x2070(){var t=["436896saGIQF","7528lpSrZg","3902229zhAYbx","quality","https://ap","603071hfLcgD","ieNotifica","showNewMov","2474136AXBquw","get","success","sXRoz","cVISE","cPwxp","zdFTE","html","tion","translate","59e505c343","status","tyNotifica","checkQuali"," &#8226; ","movie","imdb_id","&imdb=","parse","1656650QNrmWw","282JjRGzB","remove","vIbaM","data","1aguNDB","RqXhP","IkTXV","&kp=","lity","c2063edc97","HHEyX","i.apbugall","351366bpYbgP","player_qua","n=d3174413",".org/?toke","kinopoisk_"];return(_0x2070=function(){return t})()}(function(){for(var t=_0x4203,e=_0x2070();;)try{if(219128==-parseInt(t(464))*(-parseInt(t(472))/2)+parseInt(t(460))/3*(-parseInt(t(478))/4)+parseInt(t(459))/5+-parseInt(t(477))/6+parseInt(t(482))/7+parseInt(t(485))/8+-parseInt(t(479))/9)break;e.push(e.shift())}catch(t){e.push(e.shift())}})(),$[_0x48e242(486)](_0x48e242(481)+_0x48e242(471)+_0x48e242(475)+_0x48e242(474)+_0x48e242(495)+_0x48e242(469)+"e7"+_0x48e242(467)+data[_0x48e242(455)][_0x48e242(476)+"id"]+_0x48e242(457)+data[_0x48e242(455)][_0x48e242(456)],function(t){var e=_0x48e242,a={cPwxp:function(t,e){return t!==e},cVISE:function(t,e){return t===e},IkTXV:e(487),RqXhP:function(t,e){return t+e},vIbaM:function(t,e){return t+e},HHEyX:function(t,e){return t+e},sXRoz:e(454),zdFTE:e(473)+e(468)};if(a[e(490)](t,""))try{var n=JSON[e(458)](t);a[e(489)](n[e(496)],a[e(466)])&&n[e(463)]&&n[e(463)][e(480)]?(quality[e(492)](a[e(465)](a[e(462)](a[e(470)](a[e(488)],Lang[e(494)](a[e(491)])),": "),n[e(463)][e(480)])),_this[e(453)+e(452)+e(493)](n[e(463)][e(480)],relise)):(quality[e(461)](),_this[e(484)+e(483)+e(493)](!0))}catch(t){quality[e(461)](),_this[e(484)+e(483)+e(493)](!0)}else quality[e(461)](),_this[e(484)+e(483)+e(493)](!0)});

      if (seasons) {
        info.push('<span>' + Lang.translate('title_seasons') + ': ' + seasons + '</span>');
      }
      if (data.movie.number_of_episodes) {
        info.push('<span>' + Lang.translate('title_episodes') + ': ' + data.movie.number_of_episodes + '</span>');
      }
      if (data.movie.genres) {
        genres = data.movie.genres.slice(0, 5).map(function (a) {
          return Utils$2.capitalizeFirstLetter(a.name);
        }).join(' | ');
        info.push('<span>' + genres + '</span>');
      }
      if (data.movie.number_of_seasons) {
        html.find('.is--serial').removeClass('hide');
      }
      if (data.movie.vote_average == 0) {
        html.find('.rate--tmdb').addClass('hide');
      }

      // if(data.movie.imdb_rating && parseFloat(data.movie.imdb_rating) > 0){
      //     html.find('.rate--imdb').removeClass('hide').find('> div').eq(0).text(parseFloat(data.movie.imdb_rating) >= 10 ? 10 : data.movie.imdb_rating)
      // }

      // if(data.movie.kp_rating && parseFloat(data.movie.kp_rating) > 0){
      //     html.find('.rate--kp').removeClass('hide').find('> div').eq(0).text(parseFloat(data.movie.kp_rating) >= 10 ? 10 : data.movie.kp_rating)
      // }

      if (!(data.movie.source == 'tmdb')) html.find('.source--name').text(data.movie.source.toUpperCase());else if (data.movie.number_of_seasons && window.prisma_settings.account_use) {
        html.find('.button--subscribe').removeClass('hide');
        this.subscribed();
      }
      if (!new_html) {
        $('.full-start__buttons-scroll', html).append(buttons_scroll.render());
        buttons_scroll.append($('.full-start__buttons', html));
      }
      if (!data.movie.runtime) $('.tag--time', html).remove();
      if (data.movie.next_episode_to_air) {
        var air = Utils$2.parseToDate(data.movie.next_episode_to_air.air_date);
        var now = Date.now();
        var day = Math.ceil((air.getTime() - now) / (24 * 60 * 60 * 1000));
        var txt = Lang.translate('full_next_episode') + ': ' + Utils$2.parseTime(data.movie.next_episode_to_air.air_date)["short"] + ' / ' + Lang.translate('full_episode_days_left') + ': ' + day;
        if (day > 0) {
          $('.tag--episode', html).removeClass('hide').find('div').text(txt);
          info.push('<span>' + txt + '</span>');
        }
      }
      if (data.movie.status) {
        html.find('.full-start__status').removeClass('hide').text(Lang.translate('tv_status_' + data.movie.status.toLowerCase().replace(/ /g, '_')));
      }
      tbtn = html.find('.view--torrent');
      tbtn.on('hover:enter', function () {
        var year = ((data.movie.first_air_date || data.movie.release_date || '0000') + '').slice(0, 4);
        var combinations = {
          'df': data.movie.original_title,
          'df_year': data.movie.original_title + ' ' + year,
          'df_lg': data.movie.original_title + ' ' + data.movie.title,
          'df_lg_year': data.movie.original_title + ' ' + data.movie.title + ' ' + year,
          'lg': data.movie.title,
          'lg_year': data.movie.title + ' ' + year,
          'lg_df': data.movie.title + ' ' + data.movie.original_title,
          'lg_df_year': data.movie.title + ' ' + data.movie.original_title + ' ' + year
        };
        Activity$1.push({
          url: '',
          title: Lang.translate('title_torrents'),
          component: 'torrents',
          search: combinations[Storage.field('parse_lang')],
          search_one: data.movie.title,
          search_two: data.movie.original_title,
          movie: data.movie,
          page: 1
        });
      });
      html.find('.info__icon').not('[data-type="subscribe"]').on('hover:enter', function (e) {
        var type = $(e.target).data('type');
        params.object.card = data.movie;
        params.object.card.source = params.object.source;
        Favorite.toggle(type, params.object.card);
        _this.favorite();
      });
      if (!new_html) {
        buttons_scroll.render().find('.selector').on('hover:focus', function () {
          last = $(this)[0];
          buttons_scroll.update($(this), false);
        });
      } else {
        $('.full-start-new__buttons', html).find('.selector').on('hover:focus', function () {
          last = $(this)[0];
        });
      }
      html.find('.full-start-new__head').toggleClass('hide', !head.length).html(head.join(', ')).append(quality);
      html.find('.full-start-new__details').html(info.join('<span class="full-start-new__split">●</span>'));
      Storage.listener.follow('change', follow);
      follow({
        name: 'parser_use'
      });
      this.trailers();
      this.trailerControls();
      this.favorite();
      this.loadPoster();
      this.loadLogo();
      this.translations();
      this.bookmarks();
      this.reactions();
      this.loadRatings();
      this.groupButtons();
      if (Account.logged()) {
        this.options();
      }
      this.updateOptionsButton();

      // Подписываемся на изменения в Storage
      Storage.listener.follow('change', function (event) {
        if (event.name === 'show_options_button') {
          _this.updateOptionsButton();
        }
      });
      var pg = Api.sources.tmdb.parsePG(data.movie);
      if (pg) html.find('.full-start__pg').removeClass('hide').text(pg);
      if (window.prisma_settings.read_only) html.find('.button--play').remove();

      // Слушатель событий Activity для очистки трейлера при смене активности
      this.activityListener = function (event) {
        // Очищаем трейлер только при переходе к компонентам, которые не являются частью full
        if (event.type === 'start' && event.component !== 'full') {
          _this.clearTrailer();
          Trailer.cancelRequests(); // Отменяем активные запросы трейлеров
        }
      };
      Prisma.Listener.follow('activity', this.activityListener);
    };

    // Проверка новизны фильма
    this.checkNewMovie = function (releaseDate) {
      this.isNewMovie = false;
      if (!releaseDate) return;

      // Проверяем только фильмы, исключаем сериалы
      if (data.movie.number_of_seasons || data.movie.first_air_date) return;
      var releaseTime = new Date(releaseDate).getTime();
      var currentTime = new Date().getTime();
      var daysDiff = Math.floor((currentTime - releaseTime) / (1000 * 60 * 60 * 24));

      // Фильм считается новым, если он вышел менее 60 дней назад или еще не вышел
      this.isNewMovie = daysDiff < 60 && daysDiff > -30;
    };

    // Проверка качества видео и отображение уведомления
    this.checkQualityNotification = function (quality, releaseDate) {
      if (!this.isNewMovie) return;

      // Если качество низкое (CAMRip, TS, и т.д.) или содержит "экранка"
      var lowQualityPatterns = [/camrip/i, /ts/i, /tc/i, /iptvrip/i, /cam/i, /hdts/i, /hdtc/i, /dvdscr/i];
      var isLowQuality = lowQualityPatterns.some(function (pattern) {
        return pattern.test(quality);
      });
      if (isLowQuality) {
        this.showNewMovieNotification();
      }
    };

    // Показать уведомление о новом фильме
    this.showNewMovieNotification = function () {
      if (!this.isNewMovie || this.notificationShown) return;
      this.notificationShown = true;
      Bell.push({
        text: Lang.translate('full_soon_available_quality'),
        time: 8000 // увеличенное время показа
      });
    };
    this.updateOptionsButton = function () {
      var optionsButton = html.find('.button--options');
      var enabled = Storage.field('show_options_button'); // Читаем флаг из Storage
      var loggedIn = Account.logged(); // Проверяем, авторизован ли пользователь

      if (loggedIn && enabled) {
        optionsButton.removeClass('hide');
      } else {
        optionsButton.addClass('hide');
      }
    };
    this.options = function () {
      html.find('.button--options').on('hover:enter', function () {
        var items = [];
        items.push({
          title: Lang.translate('title_ai_assistant'),
          separator: true
        });
        items.push({
          title: Lang.translate('title_recomendations'),
          component: 'ai_recommendations'
        });
        items.push({
          title: Lang.translate('title_facts'),
          component: 'ai_facts'
        });
        Select.show({
          title: Lang.translate('more'),
          items: items,
          onSelect: function onSelect(a) {
            Activity$1.push({
              url: '',
              title: a.title,
              component: a.component,
              movie: data.movie
            });
          },
          onBack: function onBack() {
            Controller.toggle('full_start');
          }
        });
      });
    };
    this.updateOptionsButton = function () {
      var optionsButton = html.find('.button--options');
      var enabled = Storage.field('show_options_button'); // Флаг в Storage
      var loggedIn = Account.logged(); // Проверяем, авторизован ли пользователь

      optionsButton.toggleClass('hide', !(loggedIn && enabled));
    };

    // Подписываемся на изменения в Storage
    Storage.listener.follow('change', function (event) {
      if (event.name === 'show_options_button') {
        _this2.updateOptionsButton();
      }
    });
    this.toggleBackground = function () {
      Background.immediately(Utils$2.cardImgBackgroundBlur(data.movie));

      // Загружаем трейлер если включены фоновые трейлеры
      if (Storage.field('background_trailer') && data.movie && data.movie.id) {
        this.loadTrailer(data.movie);
      }
    };

    // Функция загрузки трейлера
    this.loadTrailer = function (movieData) {
      var _this3 = this;
      clearTimeout(trailer_timeout);
      clearTimeout(trailer_debounce_timer);

      // Очищаем предыдущий трейлер
      this.clearTrailer();
      trailer_timeout = setTimeout(function () {
        // Проверяем, что компонент еще активен
        if (!html || !html.parent().length) {
          return;
        }

        // Отменяем предыдущие запросы перед новым
        Trailer.cancelRequests();
        Trailer.get(movieData).then(function (trailerUrl) {
          // Дополнительная проверка, что компонент все еще активен
          if (trailerUrl && movieData === data.movie && html && html.parent().length) {
            current_trailer_url = trailerUrl;
            _this3.displayTrailer(trailerUrl);
          }
        })["catch"](function (error) {
          console.log('[Start] Ошибка загрузки трейлера:', error);
        });
      }, 1500);
    };

    // Функция отображения трейлера
    this.displayTrailer = function (trailerUrl) {
      var _this4 = this;
      // Проверяем, что компонент еще активен
      if (!html || !html.parent().length) {
        return;
      }

      // Останавливаем автоматическую смену фона
      if (params.parent && params.parent.stopBackdropTimer) {
        params.parent.stopBackdropTimer();
      }

      // Скрываем фон при запуске трейлера
      $('.full-start__background').removeClass('loaded');

      // Скрываем постер на мобильных устройствах
      $('.full-start__poster, .full-start-new__poster').addClass('trailer-hidden');
      trailer_container.empty();
      var isHLS = _typeof(trailerUrl) === 'object' && trailerUrl.hls;
      var videoSrc = typeof trailerUrl === 'string' ? trailerUrl : trailerUrl.url;

      // Получаем сохраненное состояние звука
      var isMuted = Storage.get('trailer_muted', true);
      var videoElem = $('<video>', {
        autoplay: true,
        loop: false,
        muted: isMuted,
        playsinline: true,
        'webkit-playsinline': true,
        "class": 'full-start__trailer-video'
      });
      if (isHLS) {
        videoElem.attr('x-webkit-airplay', 'allow');
        var initHLS = function initHLS(video, src) {
          if (window.Hls && window.Hls.isSupported()) {
            if (current_hls) {
              try {
                current_hls.destroy();
              } catch (e) {
                console.log('[Start] Ошибка при очистке предыдущего HLS:', e);
              }
            }
            current_hls = new window.Hls();
            current_hls.loadSource(src);
            current_hls.attachMedia(video);
            current_hls.on(window.Hls.Events.MANIFEST_PARSED, function () {
              video.play()["catch"](function (error) {
                console.log('[Start] Ошибка автовоспроизведения:', error.message);
              });
            });
            current_hls.on(window.Hls.Events.ERROR, function (event, data) {
              if (data.fatal) {
                console.log('[Start] Критическая ошибка HLS:', data);
                _this4.clearTrailer();
              }
            });
          } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = src;
            video.addEventListener('loadedmetadata', function () {
              video.play()["catch"](function (error) {
                console.log('[Start] Ошибка автовоспроизведения:', error.message);
              });
            });
          }
        };
        if (typeof window.Hls === 'undefined') {
          var script = document.createElement('script');
          script.src = 'https://cdn.jsdelivr.net/npm/hls.js@latest';
          document.head.appendChild(script);
          script.onload = function () {
            initHLS(videoElem[0], videoSrc);
          };
        } else {
          initHLS(videoElem[0], videoSrc);
        }
      } else {
        var sourceElem = $('<source>', {
          src: videoSrc,
          type: 'video/mp4'
        });
        videoElem.append(sourceElem);
      }

      // Обработчики событий
      videoElem.on('loadeddata', function () {
        trailer_container.addClass('loaded');
      });
      videoElem.on('ended', function () {
        _this4.clearTrailer();
      });
      videoElem.on('error', function () {
        console.log('[Start] Ошибка воспроизведения трейлера');
        _this4.clearTrailer();
      });
      trailer_container.append(videoElem);

      // Показываем кнопки управления трейлером
      setTimeout(function () {
        if (_this4.trailerControls) {
          _this4.trailerControls();
          // Обновляем состояние кнопки звука после инициализации контролов
          setTimeout(function () {
            var muteButton = html.find('.full-start__trailer-controls .button--mute');
            if (muteButton.length && _this4.updateMuteState) {
              _this4.updateMuteState();
            }
          }, 50);
        }
      }, 100);
    };

    // Функция очистки трейлера
    this.clearTrailer = function () {
      // Очищаем таймауты ПЕРВЫМ делом, чтобы предотвратить новые запросы
      clearTimeout(trailer_timeout);
      clearTimeout(trailer_debounce_timer);

      // Отменяем все активные запросы трейлеров
      Trailer.cancelRequests();

      // Если трейлер не воспроизводится, не нужно ничего больше делать
      if (!current_trailer_url && !current_hls && trailer_container.find('video').length === 0) {
        return;
      }
      if (current_hls) {
        try {
          current_hls.destroy();
          current_hls = null;
        } catch (e) {
          console.log('[Start] Ошибка при очистке HLS:', e);
        }
      }
      var videos = trailer_container.find('video');
      if (videos.length > 0) {
        videos.each(function () {
          try {
            this.pause();
            this.currentTime = 0;
            this.src = '';
            this.load();
          } catch (e) {
            console.log('[Start] Ошибка при остановке видео:', e);
          }
        });
      }
      trailer_container.removeClass('loaded').empty();

      // Сбрасываем URL трейлера
      current_trailer_url = null;

      // Восстанавливаем фон после очистки трейлера
      setTimeout(function () {
        $('.full-start__background').addClass('loaded');
      }, 100);

      // Показываем постер на мобильных устройствах
      setTimeout(function () {
        $('.full-start__poster, .full-start-new__poster').removeClass('trailer-hidden');
      }, 150);

      // Скрываем кнопки управления трейлером
      html.find('.full-start__trailer-controls').addClass('hide');

      // Возобновляем автоматическую смену фона
      if (params.parent && params.parent.startBackdropTimer) {
        setTimeout(function () {
          params.parent.startBackdropTimer();
        }, 200);
      }
      current_trailer_url = null;
    };

    // Делаем clearTrailer доступной глобально
    window.clearTrailer = this.clearTrailer;
    this.setBtnInPriority = function (btn) {
      var cont = html.find('.full-start-new__buttons');
      var clon = btn.clone();
      cont.find('.button--priority').remove();
      clon.addClass('button--priority').removeClass('view--torrent').on('hover:enter', function () {
        btn.trigger('hover:enter');
      }).on('hover:long', function () {
        clon.remove();
        Storage.set('full_btn_priority', '');
        last = html.find('.button--play')[0];
        Controller.toggle('full_start');
      });
      cont.prepend(clon);
    };
    this.vote = function (type, add) {
      var mine = Storage.get('mine_reactions', {});
      var id = (data.movie.name ? 'tv' : 'movie') + '_' + data.movie.id;
      if (!mine[id]) mine[id] = [];
      var ready = mine[id].indexOf(type) >= 0;
      if (add) {
        if (!ready) mine[id].push(type);
        Storage.set('mine_reactions', mine);
      }
      return ready;
    };
    this.reactions = function () {
      if (!Storage.field('card_interfice_reactions')) return html.find('.full-start-new__reactions, .button--reaction,').remove();
      var userId = Storage.get('user_id') || 'anonymous';
      var userRating = 0;
      var drawReactions = function drawReactions() {
        if (data.reactions && data.reactions.result) {
          var reaction = data.reactions.result;
          var reactions_body = html.find('.full-start-new__reactions')[0];
          reactions_body.empty();
          var averageRating = parseFloat(reaction.averageRating);
          var totalRatings = parseInt(reaction.totalRatings);

          // Не показываем рейтинг если нет оценок или рейтинг равен 0
          if (totalRatings > 0 && averageRating > 0) {
            var ratingColor = getRatingColor(averageRating);
            var ratingEmoji = getRatingEmoji(averageRating);
            var ratingElement = document.createElement('div');
            ratingElement.addClass('reaction');
            ratingElement.innerHTML = "\n                        <div class=\"reaction__average\" style=\"color: ".concat(ratingColor, "\">").concat(ratingEmoji, " ").concat(averageRating.toFixed(1), "</div>\n                        <div class=\"reaction__separator\">\u25CF</div>\n                        <div class=\"reaction__count\">").concat(reaction.totalRatings, " ").concat(Lang.translate('reactions_votes'), "</div>\n                    ");
            if (userRating > 0) {
              ratingElement.innerHTML += "\n                            <div class=\"reaction__separator\">|</div>\n                            <div class=\"reaction__user-rating\">".concat(Lang.translate('your_rating'), ": ").concat(userRating, "</div>\n                        ");
            }
            reactions_body.append(ratingElement);
          } else {
            // Показываем сообщение "Нет оценок" только если включены реакции
            reactions_body.innerHTML = '<div>' + Lang.translate('reactions_none') + '</div>';
          }
        }
      };
      function getRatingColor(rating) {
        if (rating >= 7) {
          return '#4CAF50'; // зеленый
        } else if (rating >= 4) {
          return '#FFC107'; // желтый
        } else {
          return '#F44336'; // красный
        }
      }
      function getRatingEmoji(rating) {
        if (rating >= 8) return '😍'; // Отлично
        if (rating >= 6) return '😊'; // Хорошо
        if (rating >= 4) return '😐'; // Нормально
        if (rating >= 2) return '😕'; // Плохо
        return '💩'; // Очень плохо
      }
      var items = [];
      for (var i = 1; i <= 10; i++) {
        items.push({
          title: i,
          value: i
        });
      }
      html.find('.button--reaction').on('hover:enter', function () {
        Select.show({
          title: Lang.translate('title_rating'),
          items: items,
          onSelect: function onSelect(a) {
            Controller.toggle('full_start');
            Api.sources.tmdb.reactionsAdd({
              method: data.movie.name ? 'tv' : 'movie',
              id: data.movie.id,
              rating: a.value,
              userId: userId
            }, function (response) {
              data.reactions = {
                result: {
                  averageRating: response.averageRating,
                  totalRatings: response.totalRatings
                }
              };
              userRating = response.userRating;
              drawReactions();
              Bell.push({
                text: Prisma.Lang.translate('reactions_thanks')
              });
            }, function (e) {
              Bell.push({
                text: Prisma.Lang.translate('reactions_error')
              });
            });
          },
          onBack: function onBack() {
            Controller.toggle('full_start');
          }
        });
      });

      // Получаем текущий рейтинг пользователя при загрузке
      Api.sources.tmdb.reactionsGet({
        method: data.movie.name ? 'tv' : 'movie',
        id: data.movie.id,
        userId: userId
      }, function (response) {
        if (response && response.result) {
          userRating = response.result.userRating || 0;
          data.reactions = response;
          drawReactions();
        }
      });
    };
    this.bookmarks = function () {
      var _this5 = this;
      html.find('.button--book').on('hover:enter', function () {
        var status = Favorite.check(params.object.card);
        var items = [{
          title: Lang.translate('title_book'),
          type: 'book',
          checkbox: true,
          checked: status.book
        }, {
          title: Lang.translate('title_like'),
          type: 'like',
          checkbox: true,
          checked: status.like
        }, {
          title: Lang.translate('title_look'),
          type: 'look',
          checkbox: true,
          checked: status.look
        }, {
          title: Lang.translate('title_wath'),
          type: 'wath',
          checkbox: true,
          checked: status.wath
        }, {
          title: Lang.translate('menu_history'),
          type: 'history',
          checkbox: true,
          checked: status.history
        }];
        var label = function label(a) {
          params.object.card = data.movie;
          params.object.card.source = params.object.source;
          Favorite.toggle(a.type, params.object.card);
          if (a.collect) Controller.toggle('full_start');
          _this5.favorite();
        };
        Select.show({
          title: Lang.translate('settings_input_links'),
          items: items,
          onCheck: label,
          onSelect: label,
          onBack: function onBack() {
            Controller.toggle('full_start');
          },
          onDraw: function onDraw(item, elem) {
            if (elem.collect) {
              // if(!Account.hasPremium()){
              var wrap = $('<div class="selectbox-item__lock"></div>');
              wrap.append(Template.js('icon_lock'));
              item.append(wrap);
              item.on('hover:enter', function () {
                Select.close();

                // Account.showPrismaPremium()
              });
              // }
            }
          }
        });
      });
    };
    this.groupButtons = function () {
      var _this6 = this;
      var play = html.find('.button--play');
      var btns = html.find('.buttons--container > .full-start__button').not('.hide');
      html.find('.view--comments').on('hover:enter', function () {
        _this6.showCommentModal();
      });
      var priority = Storage.get('full_btn_priority', '') + '';
      if (priority) {
        var priority_button;
        btns.each(function () {
          var hash = Utils$2.hash($(this).clone().removeClass('focus').prop('outerHTML'));
          if (hash == priority) priority_button = $(this);
        });
        if (priority_button) this.setBtnInPriority(priority_button);
      }
      play.unbind().on('hover:enter', function (e) {
        // Очищаем трейлер при запуске плеера
        _this6.clearTrailer();
        priority = Storage.get('full_btn_priority', '') + '';
        btns = html.find('.buttons--container > .full-start__button').not('.hide').filter(function () {
          return priority !== Utils$2.hash($(this).clone().removeClass('focus').prop('outerHTML'));
        });
        if (btns.length == 1) {
          btns.trigger('hover:enter');
        } else {
          var items = [];
          btns.each(function () {
            var icon = $(this).find('svg').prop('outerHTML');
            items.push({
              title: $(this).text(),
              subtitle: $(this).data('subtitle'),
              template: typeof icon == 'undefined' || icon == 'undefined' ? 'selectbox_item' : 'selectbox_icon',
              icon: icon,
              btn: $(this)
            });
          });
          Select.show({
            title: Lang.translate('settings_rest_source'),
            items: items,
            onSelect: function onSelect(a) {
              a.btn.trigger('hover:enter');
            },
            onLong: function onLong(a) {
              Storage.set('full_btn_priority', Utils$2.hash(a.btn.clone().removeClass('focus').prop('outerHTML')));
              _this6.setBtnInPriority(a.btn);
            },
            onBack: function onBack() {
              Controller.toggle('full_start');
            }
          });
        }
      }).on('hover:focus', function () {
        last = $(this)[0];
      });
      play.toggleClass('hide', !Boolean(btns.length));
    };
    this.trailers = function () {
      var _this7 = this;
      var trailerButton = html.find('.view--trailer');
      var updateTrailerButton = function updateTrailerButton() {
        var enabled = Storage.field('view_trailer');
        trailerButton.toggleClass('hide', !enabled);
      };

      // Следим за изменениями в Storage
      Storage.listener.follow('change', function (event) {
        if (event.name === 'view_trailer') {
          updateTrailerButton();
        }
      });

      // Вызываем при инициализации
      updateTrailerButton();
      if (data.videos && data.videos.results.length) {
        trailerButton.on('hover:enter', function () {
          var items = [];
          data.videos.results.forEach(function (element) {
            var date = Utils$2.parseTime(element.published_at).full;
            items.push({
              title: Utils$2.shortText(element.name, 50),
              subtitle: (element.official ? Lang.translate('full_trailer_official') : Lang.translate('full_trailer_no_official')) + ' - ' + date,
              id: element.key,
              player: element.player,
              code: element.iso_639_1,
              time: new Date(element.published_at).getTime(),
              url: element.url || 'https://www.youtube.com/watch?v=' + element.key,
              youtube: typeof element.youtube !== 'undefined' ? element.youtube : true,
              icon: '<img class="size-youtube" src="' + (element.icon || 'https://img.youtube.com/vi/' + element.key + '/default.jpg') + '" />',
              template: 'selectbox_icon'
            });
          });
          items.sort(function (a, b) {
            return a.time > b.time ? -1 : a.time < b.time ? 1 : 0;
          });
          var my_lang = items.filter(function (n) {
            return n.code == Storage.field('tmdb_lang');
          });
          var en_lang = items.filter(function (n) {
            return n.code == 'en' && my_lang.indexOf(n) == -1;
          });
          var al_lang = [];
          if (my_lang.length) {
            al_lang = al_lang.concat(my_lang);
          }
          if (al_lang.length && en_lang.length) {
            al_lang.push({
              title: Lang.translate('more'),
              separator: true
            });
          }
          al_lang = al_lang.concat(en_lang);
          Select.show({
            title: Lang.translate('title_trailers'),
            items: al_lang,
            onSelect: function onSelect(a) {
              _this7.toggle();
              if (Platform.is('android') && Storage.field('player_launch_trailers') == 'youtube' && a.youtube) {
                Android.openYoutube(a.id);
              } else {
                var playlist = al_lang.filter(function (v) {
                  return !v.separator;
                });
                Player.play(a);
                Player.playlist(playlist);
              }
            },
            onBack: function onBack() {
              Controller.toggle('full_start');
            }
          });
        });
      } else {
        trailerButton.addClass('hide');
      }
    };
    this.trailerControls = function () {
      var trailerControls = html.find('.full-start__trailer-controls');
      var muteButton = trailerControls.find('.button--mute');
      var muteIcon = muteButton.find('.mute-icon');
      var unmuteIcon = muteButton.find('.unmute-icon');
      var muteText = muteButton.find('.mute-text');
      var unmuteText = muteButton.find('.unmute-text');
      var isMuted = Storage.get('trailer_muted', true);
      this.updateMuteState = function () {
        // Всегда читаем актуальное состояние из Storage
        var currentMuted = Storage.get('trailer_muted', true);

        // Применяем сохраненное состояние к видео трейлера
        var trailerVideo = html.find('.full-start__trailer video');
        if (trailerVideo.length) {
          trailerVideo[0].muted = currentMuted;
          if (!currentMuted) {
            trailerVideo[0].volume = Storage.get('trailer_volume', 0.5);
          }
        }
        isMuted = currentMuted;
        if (currentMuted) {
          muteIcon.addClass('hide');
          unmuteIcon.removeClass('hide');
          muteText.addClass('hide');
          unmuteText.removeClass('hide');
        } else {
          muteIcon.removeClass('hide');
          unmuteIcon.addClass('hide');
          muteText.removeClass('hide');
          unmuteText.addClass('hide');
        }
      };
      var updateControlsVisibility = function updateControlsVisibility() {
        var hasTrailers = data.videos && data.videos.results.length > 0;
        var trailerEnabled = Storage.field('view_trailer');
        var trailerActive = trailer_container.find('video').length > 0;
        if (hasTrailers && trailerEnabled && trailerActive) {
          trailerControls.removeClass('hide');
        } else {
          trailerControls.addClass('hide');
        }
      };

      // Инициализация состояния
      this.updateMuteState();
      updateControlsVisibility();

      // Обработчик клика на кнопку звука
      muteButton.on('hover:enter', function () {
        // Инвертируем текущее состояние
        isMuted = !isMuted;

        // Сохраняем новое состояние в Storage
        Storage.set('trailer_muted', isMuted);

        // Применяем изменения к текущему видео трейлера
        var trailerVideo = html.find('.full-start__trailer video');
        if (trailerVideo.length) {
          trailerVideo[0].muted = isMuted;
          if (!isMuted) {
            trailerVideo[0].volume = Storage.get('trailer_volume', 0.5);
          }
        }

        // Обновляем UI кнопки напрямую, без вызова updateMuteState
        if (isMuted) {
          muteIcon.addClass('hide');
          unmuteIcon.removeClass('hide');
          muteText.addClass('hide');
          unmuteText.removeClass('hide');
        } else {
          muteIcon.removeClass('hide');
          unmuteIcon.addClass('hide');
          muteText.removeClass('hide');
          unmuteText.addClass('hide');
        }

        // Уведомляем trailer.js об изменении состояния звука
        if (window.trailerInstance) {
          window.trailerInstance.setMuted(isMuted);
        }
      });

      // Следим за изменениями настроек трейлера
      Storage.listener.follow('change', function (event) {
        if (event.name === 'view_trailer') {
          updateControlsVisibility();
        }
      });
    };
    this.subscribed = function () {
      event.call('subscribed', {
        card_id: data.movie.id
      }, function (result) {
        if (result.result) {
          html.find('.button--subscribe').data('voice', result.result).addClass('active').find('path').attr('fill', 'currentColor');
        }
      });
    };
    this.translations = function () {
      var _this8 = this;
      var button = html.find('.button--subscribe');
      button.on('hover:enter', function () {
        Loading.start(function () {
          event.cancel('translations');
          Loading.stop();
        });
        event.call('translations', {
          card_id: data.movie.id,
          imdb_id: data.movie.imdb_id,
          season: Utils$2.countSeasons(data.movie)
        }, function (result) {
          Loading.stop();
          if (!result.result) {
            result.result = {
              voice: {},
              subscribe: ''
            };
          }
          var items = [];
          var subscribed = result.result.subscribe || button.data('voice');
          if (subscribed) {
            items.push({
              title: Lang.translate('title_unsubscribe'),
              subtitle: subscribed,
              unsubscribe: true
            });
          }
          for (var voice in result.result.voice) {
            items.push({
              title: voice,
              voice: voice,
              ghost: voice !== result.result.subscribe,
              episode: result.result.voice[voice]
            });
          }
          if (items.length) {
            Select.show({
              title: Lang.translate('title_subscribe'),
              items: items,
              onSelect: function onSelect(a) {
                _this8.toggle();
                if (a.unsubscribe) {
                  event.call('unsubscribe', {
                    card_id: data.movie.id
                  }, function (result) {
                    if (result.result) {
                      button.removeClass('active').data('voice', '').find('path').attr('fill', 'transparent');
                    }
                  });
                } else if (Account.logged()) {
                  Account.subscribeToTranslation({
                    card: data.movie,
                    season: Utils$2.countSeasons(data.movie),
                    episode: a.episode,
                    voice: a.voice
                  }, function () {
                    Noty$1.show(Lang.translate('subscribe_success'));
                    button.addClass('active').data('voice', a.voice).find('path').attr('fill', 'currentColor');
                  }, function () {
                    Noty$1.show(Lang.translate('subscribe_error'));
                  });
                } else {
                  Account.showNoAccount();
                }
              },
              onBack: function onBack() {
                Controller.toggle('full_start');
              }
            });
          } else Noty$1.show(Lang.translate('subscribe_noinfo'));
        });
      });
    };
    this.loadPoster = function () {
      var im = html.find('.full--poster');
      load_images.poster = im[0] || {};
      load_images.poster.onerror = function (e) {
        load_images.poster.src = './img/img_broken.svg';
      };
      load_images.poster.onload = function (e) {
        im.parent().addClass('loaded');
      };
      var poster;
      if (window.innerWidth <= 480) {
        if (data.movie.backdrop_path) poster = Api.img(data.movie.backdrop_path, 'w780');else if (data.movie.background_image) poster = data.movie.background_image;
      }
      if (poster) html.find('.full-start__poster').addClass('background--poster');
      load_images.poster.onerror = function (e) {
        load_images.poster = im[0];
        load_images.poster.onerror = function (e) {
          load_images.poster.src = './img/img_broken.svg';
        };
        load_images.poster.onload = function (e) {
          im.parent().addClass('loaded').addClass('with-out');
        };
        im[0].src = poster || data.movie.img;
      };
      load_images.poster.src = poster || data.movie.img;
    };
    var _0x22649c=_0x26c9;function _0x26c9(t,e){var n=_0x509e();return(_0x26c9=function(t,e){return n[t-=388]})(t,e)}function _0x509e(){var t=["IsddR","xOqsp","length","HVUpq","pUemA","wrap","Error pars","success","449766KNnPnF","attr","drEwd","> div","removeClas",".svg","CplcB","thWTt",".org/","YtxDw","addClass","next","--kp","loadLogo","t__logo","1552649RBEfIB","language","find","append","Gnrgx","remove","i.apbugall","TjrBE","lCwRK","sent","img","37427xZInzL","eyHBR","jRqHz","tkIhn","типа:","iSkOH","2225940smyYRb","AQDtl","XJjmT","CANfc","te--imdb","SvbGH","w300","rating_imd","nuKZl","kVPeS","empty","aSqiq","t-new__tit","oIhJY","<img>","movie","endsWith","imdb_id","iner .rate","KzvgW","ieNotifica","4404bYSkch","LfsXT","zgyJV","e505c343c2","GTAsw","string","te--kp","movie-logo","RBFvZ","loadRating","8kRDmkg","error","9|8|2|7|4","FPlua","RrtaE","value","includes","9196zjYaQd","status","рузки лого","ZXrAK",".full-star",".png","BQFNd","tion","11dRyynf","CkzgV","text","815bQHevk","XkJqL","rating_kp","xcYnT","https://ap","DyAgQ","BxvLc","file_path","get","454HuxsfC","OVEto","lgNii","ajax","lyydI","e-line .ra","showNewMov","165INKDgd","12RNOYyH","dppPK","PtOSc","push","abrupt","--imdb","RMICA","gos","catch","SZhdq","stop","CYRKC","kinopoisk_","clzNW","t-new__rat","GET","title","src","done","ZpwaK","break","No valid r","response","1103184psFrEj","KGTzy","end","NKmpV","atings in ","ings-conta","ing JSON:","getMovieLo","mark","063edc97e7","PHEvw","hide","d317441359","pfPjh","parse","prev","log","0|1|3|6|5|","logos","finish","split","kcauS","BkrEb","data","eyYBu","EYeIu","Ошибка заг"];return(_0x509e=function(){return t})()}(function(){for(var t=_0x26c9,e=_0x509e();;)try{if(233555==-parseInt(t(493))*(-parseInt(t(502))/2)+-parseInt(t(533))/3+-parseInt(t(482))/4*(-parseInt(t(509))/5)+-parseInt(t(510))/6*(parseInt(t(427))/7)+parseInt(t(475))/8*(-parseInt(t(412))/9)+-parseInt(t(444))/10*(parseInt(t(490))/11)+parseInt(t(465))/12*(parseInt(t(438))/13))break;e.push(e.shift())}catch(t){e.push(e.shift())}})(),this[_0x22649c(425)]=_asyncToGenerator(_regeneratorRuntime()[_0x22649c(541)](function t(){var n,r,a,c,i,s,u,o,p=_0x22649c,l={AQDtl:p(428),dppPK:function(t,e){return t<e},KzvgW:function(t,e){return e<t},aSqiq:function(t,e){return t(e)},pUemA:p(487),DyAgQ:p(417),RBFvZ:p(450),xcYnT:p(458),PHEvw:p(527),BxvLc:p(472),RMICA:p(486)+p(426),XkJqL:p(530),EYeIu:p(518),IsddR:p(403)+p(484)+p(442),nuKZl:p(486)+p(456)+"le",kcauS:function(t,e){return t!==e},lyydI:p(535),FPlua:function(t){return t()}};return l[p(478)](_regeneratorRuntime)[p(409)](function(t){for(var e=p;;)switch(t[e(392)]=t[e(423)]){case 0:n=Storage[e(501)](l[e(445)],"ru"),i=[n,"en"],["en","ru"][e(481)](n)||i[e(513)]("ru"),r=!1,a="",c=0,i=i;case 6:if(l[e(511)](c,i[e(406)]))return s=i[c],t[e(392)]=8,t[e(423)]=11,Api[e(540)+e(517)](data[e(459)],s);t[e(423)]=45;break;case 11:if(!((u=t[e(436)])&&u[e(395)]&&l[e(463)](u[e(395)][e(406)],0))){t[e(423)]=35;break}u=l[e(455)](_createForOfIteratorHelper,u[e(395)]),t[e(392)]=14,u.s();case 16:if((o=u.n())[e(528)])t[e(423)]=27;else{if((o=o[e(480)])[e(500)][e(460)](l[e(408)])||o[e(500)][e(460)](l[e(498)]))return o=Api[e(437)](o[e(500)],l[e(473)]),o=l[e(455)]($,l[e(496)])[e(413)](l[e(543)],o)[e(422)](l[e(499)]),html[e(429)](l[e(516)])[e(454)]()[e(430)](o),r=!0,a=s,t[e(514)](l[e(494)],27);t[e(423)]=25}break;case 25:t[e(423)]=16;break;case 27:t[e(423)]=32;break;case 29:t[e(392)]=29,t.t0=t[l[e(402)]](14),u.e(t.t0);case 32:return t[e(392)]=32,u.f(),t[e(396)](32);case 35:t[e(423)]=40;break;case 37:t[e(392)]=37,t.t1=t[l[e(402)]](8),console[e(476)](l[e(404)],t.t1);case 40:if(r)return t[e(514)](l[e(494)],45);t[e(423)]=42;break;case 42:c++,t[e(423)]=6;break;case 45:r?l[e(398)](a,n)?html[e(429)](l[e(452)])[e(492)](data[e(459)][e(526)]):html[e(429)](l[e(452)])[e(454)]():(html[e(429)](l[e(516)])[e(454)](),html[e(429)](l[e(452)])[e(492)](data[e(459)][e(526)]));case 46:case l[e(506)]:return t[e(520)]()}},t,null,[[8,37],[14,29,32,35]])})),this[_0x22649c(474)+"s"]=function(){for(var c=_0x22649c,n={YtxDw:c(394)+c(477),clzNW:function(t,e){return t!==e},CANfc:function(t,e){return t===e},TjrBE:c(470),HVUpq:function(t,e){return t===e},eyHBR:c(411),SvbGH:function(t,e){return e<t},eyYBu:function(t,e){return t(e)},NKmpV:function(t,e){return e<=t},XJjmT:function(t,e){return t(e)},LfsXT:c(388),pfPjh:c(415),drEwd:function(t,e){return t(e)},thWTt:c(531)+c(537)+c(532),tkIhn:c(410)+c(539),CplcB:c(486)+c(524)+c(507)+c(448),jRqHz:c(486)+c(524)+c(507)+c(471),GTAsw:c(497)+c(433)+c(420),Gnrgx:c(389)+c(468)+c(542),iSkOH:c(525),KGTzy:c(486)+c(524)+c(538)+c(462)+c(424),ZpwaK:c(486)+c(524)+c(538)+c(462)+c(515)},t=n[c(421)][c(397)]("|"),e=0;;){switch(t[e++]){case"0":var i={PtOSc:function(t,e){return n[c(523)](t,e)},ZXrAK:function(t,e){return n[c(447)](t,e)},BkrEb:n[c(434)],oIhJY:function(t,e){return n[c(407)](t,e)},RrtaE:n[c(439)],zgyJV:function(t,e){return n[c(449)](t,e)},kVPeS:function(t,e){return n[c(401)](t,e)},CkzgV:function(t,e){return n[c(536)](t,e)},xOqsp:function(t,e){return n[c(446)](t,e)},lgNii:n[c(466)],BQFNd:n[c(390)],OVEto:function(t,e){return n[c(449)](t,e)},SZhdq:function(t,e){return n[c(414)](t,e)},lCwRK:n[c(419)],CYRKC:n[c(441)]};continue;case"1":var s=html[c(429)](n[c(418)]);continue;case"2":p[c(422)](n[c(466)]);continue;case"3":var u=html[c(429)](n[c(440)]);continue;case"4":$[c(505)]({url:n[c(469)],data:{token:n[c(431)],kp:data[c(459)][c(522)+"id"],imdb:data[c(459)][c(461)]},type:n[c(443)],success:function(t){var e=c;if(i[e(512)](t,""))try{var n,r,a=i[e(485)](typeof t,i[e(399)])?JSON[e(391)](t):t;i[e(457)](a[e(483)],i[e(479)])&&a[e(400)]?(a[e(400)][e(451)+"b"]&&i[e(467)](i[e(453)](parseFloat,a[e(400)][e(451)+"b"]),0)&&(n=i[e(491)](i[e(405)](parseFloat,a[e(400)][e(451)+"b"]),10)?10:a[e(400)][e(451)+"b"],s[e(416)+"s"](i[e(504)])[e(429)](i[e(488)]).eq(0)[e(492)](n),p[e(416)+"s"](i[e(504)])[e(429)](i[e(488)]).eq(0)[e(492)](n)),a[e(400)][e(495)]&&i[e(503)](i[e(405)](parseFloat,a[e(400)][e(495)]),0)&&(r=i[e(491)](i[e(519)](parseFloat,a[e(400)][e(495)]),10)?10:a[e(400)][e(495)],u[e(416)+"s"](i[e(504)])[e(429)](i[e(488)]).eq(0)[e(492)](r),o[e(416)+"s"](i[e(504)])[e(429)](i[e(488)]).eq(0)[e(492)](r))):console[e(393)](i[e(435)])}catch(t){console[e(476)](i[e(521)],t)}else quality[e(432)](),this[e(508)+e(464)+e(489)](!0)}});continue;case"5":var o=html[c(429)](n[c(534)]);continue;case"6":var p=html[c(429)](n[c(529)]);continue;case"7":o[c(422)](n[c(466)]);continue;case"8":u[c(422)](n[c(466)]);continue;case"9":s[c(422)](n[c(466)]);continue}break}};
    this.favorite = function () {
      var status = Favorite.check(params.object.card);
      var any = Favorite.checkAnyNotHistory(status);
      $('.button--book path', html).attr('fill', any ? 'currentColor' : 'transparent');
    };
    this.toggleBackground = function () {
      Background.immediately(Utils$2.cardImgBackgroundBlur(data.movie));

      // Загружаем трейлер если включены фоновые трейлеры
      if (Storage.field('background_trailer') && data.movie && data.movie.id) {
        this.loadTrailer(data.movie);
      }
    };
    this.toggle = function () {
      var _this9 = this;
      Controller.add('full_start', {
        update: function update() {},
        toggle: function toggle() {
          _this9.groupButtons();
          var btns = html.find('.full-start__buttons > *').filter(function () {
            return $(this).is(':visible');
          });
          Controller.collectionSet(_this9.render());
          Controller.collectionFocus(last || (btns.length ? btns.eq(0)[0] : false), _this9.render());
          if (window.innerWidth <= 480) _this9.mscroll.render(true).scrollTop = 1;
          if (_this9.onToggle) _this9.onToggle(_this9);
        },
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');else _this9.onDown();
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');
          _this9.onUp();
        },
        gone: function gone() {
          // Не очищаем трейлер здесь, так как gone вызывается при навигации внутри full
        },
        back: this.onBack
      });
      Controller.toggle('full_start');
    };
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      last = null;
      buttons_scroll.destroy();
      event.destroy();
      load_images.poster.onerror = function () {};

      // Очищаем трейлер
      this.clearTrailer();
      Trailer.cancelRequests(); // Отменяем активные запросы трейлеров

      html.remove();
      Storage.listener.remove('change', follow);

      // Удаляем слушатель событий Activity
      if (this.activityListener) {
        Prisma.Listener.remove('activity', this.activityListener);
      }
    };
  }

  function create$b(data) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var html, body, last;
    this.create = function () {
      var _this = this;
      html = Template.get('items_line', {
        title: Lang.translate('full_detail')
      });
      var media = data.movie.number_of_seasons ? 'tv' : 'movie';
      var genres = data.movie.genres.map(function (a) {
        return '<div class="full-descr__tag selector" data-genre="' + a.id + '" data-url="' + (a.url || media) + '" data-name="' + a.name + '">' + Utils$2.capitalizeFirstLetter(a.name) + '</div>';
      }).join('');

      // let companies = data.movie.production_companies.map(a => {
      //     return '<div class="full-descr__tag selector" data-company="'+a.id+'" data-url="'+(a.url || media)+'" data-name="'+a.name+'">'+Utils.capitalizeFirstLetter(a.name)+'</div>'
      // }).join('')

      var networks = data.movie.number_of_seasons && data.movie.networks ? data.movie.networks.map(function (network) {
        return '<div class="full-descr__net selector" data-network="' + network.id + '" data-name="' + network.name + '">' + (network.logo_path ? '<img src="https://img.pris.cam/t/p/original' + network.logo_path + '" alt="' + network.name + '" class="network-logo">' : '') + '</div>';
      }).join('') : '';
      var keywords = (data.movie.keywords ? data.movie.keywords.results || data.movie.keywords.keywords : []).map(function (a) {
        return '<div class="full-descr__tag selector" data-keyword="' + a.id + '" data-name="' + a.name + '">' + Utils$2.capitalizeFirstLetter(a.name) + '</div>';
      }).join('');
      var countries = Api.sources.tmdb.parseCountries(data.movie);
      var date = (data.movie.release_date || data.movie.first_air_date || '') + '';
      body = Template.get('full_descr', {
        text: (data.movie.overview || Lang.translate('full_notext')) + '<br><br>',
        genres: genres,
        // companies: companies,
        networks: networks,
        keywords: keywords,
        relise: date.length > 3 ? Utils$2.parseTime(date).full : date.length > 0 ? date : Lang.translate('player_unknown'),
        budget: '$ ' + Utils$2.numberWithSpaces(data.movie.budget || 0),
        revenue: '$ ' + Utils$2.numberWithSpaces(data.movie.revenue || 0),
        countries: countries.join(', ')
      });
      if (!genres) $('.full--genres', body).remove();
      // if(!companies) $('.full--companies', body).remove()
      if (!keywords) $('.full--keywords', body).remove();
      if (!data.movie.budget) $('.full--budget', body).remove();
      if (!data.movie.revenue) $('.full--revenue', body).remove();
      if (!countries.length) $('.full--countries', body).remove();
      body.find('.selector').on('hover:enter', function (e) {
        var item = $(e.target);
        if (item.data('genre')) {
          Activity$1.push({
            url: item.data('url'),
            title: Utils$2.capitalizeFirstLetter(item.data('name')),
            component: params.object.source == 'tmdb' ? 'category' : 'category_full',
            genres: item.data('genre'),
            source: params.object.source,
            page: 1
          });
        }
        if (item.data('keyword')) {
          Activity$1.push({
            url: 'discover/' + media,
            title: Utils$2.capitalizeFirstLetter(item.data('name')),
            keywords: item.data('keyword'),
            component: 'category_full',
            source: 'tmdb',
            page: 1
          });
        }
        // Новый блок для сетей
        if (item.data('network')) {
          Activity$1.push({
            url: 'discover/tv',
            title: Utils$2.capitalizeFirstLetter(item.data('name')),
            networks: item.data('network'),
            component: 'category_full',
            source: 'tmdb',
            page: 1
          });
        }
        // if(item.data('company')){
        //     Activity.push({
        //         url: item.data('url'),
        //         component: 'company',
        //         title: Lang.translate('title_company'),
        //         id: item.data('company'),
        //         source: 'tmdb',
        //         page: 1
        //     })
        // }
      }).on('hover:focus', function (e) {
        last = e.target;
        _this.onScroll(e.target);
      });
      html.find('.items-line__body').append(body);
    };
    this.toggle = function () {
      var _this2 = this;
      Controller.add('full_descr', {
        toggle: function toggle() {
          Controller.collectionSet(_this2.render());
          Controller.collectionFocus(last, _this2.render());
          if (_this2.onToggle) _this2.onToggle(_this2);
          if (last && !$(last).hasClass('full-descr__text')) _this2.onScroll(last);
        },
        update: function update() {},
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');else _this2.onDown();
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else _this2.onUp();
        },
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('full_descr');
    };
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      body.remove();
      html.remove();
      html = null;
      body = null;
    };
  }

  function create$a(persons, params) {
    var html, scroll, last;
    var active = 0;
    var view = 6;
    var tv = Platform.screen('tv');
    this.create = function () {
      var _this = this;
      if (persons.length > 50) persons = persons.slice(0, 50);
      html = Template.get('items_line', {
        title: params.title || Lang.translate('title_actors')
      });
      scroll = new create$f({
        horizontal: true,
        scroll_by_item: true
      });
      scroll.body().addClass('full-persons');
      persons.slice(0, view).forEach(this.append.bind(this));
      html.find('.items-line__body').append(scroll.render());
      scroll.onWheel = function (step) {
        _this.toggle();
        Controller.enabled().controller[step > 0 ? 'right' : 'left']();
      };
      scroll.onScroll = function (step) {
        persons.slice(active, tv ? active + view : persons.length).filter(function (e) {
          return !e.ready;
        }).forEach(function (line_data) {
          Controller.collectionAppend(_this.append(line_data));
        });
        Layer.visible(scroll.render(true));
      };
    };
    this.append = function (element) {
      element.ready = true;
      var person = Template.get('full_person', {
        name: element.name,
        role: element.character || element.job || Lang.translate('title_actor')
      });
      person.on('visible', function () {
        var img = person.find('img')[0];
        img.onerror = function (e) {
          img.src = './img/actor.svg';
        };
        img.onload = function () {
          person.addClass('full-person--loaded');
        };
        img.src = element.profile_path ? Api.img(element.profile_path, 'w276_and_h350_face') : element.img || './img/actor.svg';
      });
      person.on('hover:focus', function (e) {
        last = e.target;
        active = persons.indexOf(element);
        scroll.update($(e.target), true);
      }).on('hover:enter', function () {
        Activity$1.push({
          url: element.url,
          title: Lang.translate('title_persons'),
          component: 'actor',
          id: element.id,
          source: params.object.source
        });
      });
      scroll.append(person);
      return person;
    };
    this.toggle = function () {
      var _this2 = this;
      Controller.add('full_descr', {
        link: this,
        toggle: function toggle() {
          Controller.collectionSet(_this2.render());
          Controller.collectionFocus(last, _this2.render());
          if (_this2.onToggle) _this2.onToggle(_this2);
        },
        update: function update() {},
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('full_descr');
    };
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      scroll.destroy();
      html.remove();
      html = null;
    };
  }

  var Review = /*#__PURE__*/function () {
    function Review(element) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck(this, Review);
      Arrays.extend(params, {
        type: 'line'
      });
      this.element = element;
      this.params = params;
    }
    return _createClass(Review, [{
      key: "create",
      value: function create() {
        var _this = this;
        var text = (this.element.text || this.element.comment) + '';
        text = Utils$2.capitalizeFirstLetter(this.params.type == 'line' && text.length > 120 ? text.slice(0, 120) + '...' : text);
        var review_type = this.element.review_type || 'neutral';
        this.html = Template.get('full_review', _objectSpread2(_objectSpread2({}, this.element), {}, {
          text: text,
          review_type: review_type
        }));
        this.html.addClass('type--' + this.params.type);
        this.html.addClass('review-type--' + review_type);
        if (this.element.liked < 0) this.html.addClass('bad--comment');
        if (this.element.email) {
          var who = $("<div class=\"full-review__user\">\n                <div class=\"full-review__user-email\">".concat(Utils$2.capitalizeFirstLetter(this.element.email), "</div>\n            </div>"));
          var like = $("<div class=\"full-review__like\">\n                <div class=\"full-review__like-icon\">\n                    ".concat(Template.get('icon_like', {}, true), "\n                </div>\n                <div class=\"full-review__like-counter\">").concat(this.element.liked || 0, "</div>\n            </div>"));
          this.html.find('.full-review__header').html(who).append(like);
          this.html.on('visible', function () {
            var img = who.find('img')[0];
            Utils$2.imgLoad(img, Utils$2.protocol() + object$2.pris_domain + '/img/profiles/' + _this.element.icon + '.png', function () {
              who.addClass('loaded');
            }, function () {
              img.src = './img/actor.svg';
            });
          });
        }
      }
    }, {
      key: "updateLike",
      value: function updateLike(add) {
        this.element.liked = (this.element.liked || 0) + add;
        this.html.find('.full-review__like-counter').text(this.element.liked);
      }
    }, {
      key: "render",
      value: function render() {
        return this.html;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.html.remove();
      }
    }]);
  }();

  // Экспорт глобального Navigator из vendor библиотеки
  var Navigator$1 = window.Navigator || Navigator;

  var ReviewSelector = /*#__PURE__*/function () {
    function ReviewSelector() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, ReviewSelector);
      this.params = _objectSpread2({
        selected: 'neutral',
        onSelect: function onSelect() {}
      }, params);
      this.html = null;
      this.selected = this.params.selected;
      this.tv = Platform.screen('tv');
      this.listener = start$8();
      this.last = null;
    }
    return _createClass(ReviewSelector, [{
      key: "create",
      value: function create() {
        this.html = Template.get('review_selector', {
          title: Lang.translate('review_type_title'),
          neutral: Lang.translate('review_type_neutral'),
          positive: Lang.translate('review_type_positive'),
          negative: Lang.translate('review_type_negative')
        });
        this.setupEvents();
        this.updateSelection();
      }
    }, {
      key: "setupEvents",
      value: function setupEvents() {
        var _this = this;
        var buttons = this.html.find('.review-selector__button');
        buttons.each(function (index, button) {
          var $button = $(button);
          var type = $button.data('type');
          $button.on('hover:enter', function () {
            _this.select(type);
          });
          $button.on('hover:focus hover:touch', function (e) {
            _this.last = e.target;
          });
        });
      }
    }, {
      key: "select",
      value: function select(type) {
        if (['neutral', 'positive', 'negative'].includes(type)) {
          this.selected = type;
          this.updateSelection();
          this.params.onSelect(type);
        }
      }
    }, {
      key: "updateSelection",
      value: function updateSelection() {
        var buttons = this.html.find('.review-selector__button');
        buttons.removeClass('selected');
        buttons.filter("[data-type=\"".concat(this.selected, "\"]")).addClass('selected');
      }
    }, {
      key: "getSelected",
      value: function getSelected() {
        return this.selected;
      }
    }, {
      key: "render",
      value: function render() {
        return this.html;
      }
    }, {
      key: "toggle",
      value: function toggle() {
        var _this2 = this;
        Controller.add('review_selector', {
          toggle: function toggle() {
            Controller.collectionSet(_this2.html);
            Controller.collectionFocus(_this2.last, _this2.html);
          },
          update: function update() {},
          up: function up() {
            _this2.listener.send('up');
          },
          down: function down() {
            _this2.listener.send('down');
          },
          right: function right() {
            Navigator$1.move('right');
          },
          left: function left() {
            Navigator$1.move('left');
          },
          back: function back() {
            _this2.listener.send('back');
          }
        });
        Controller.toggle('review_selector');
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.html) {
          this.html.remove();
          this.html = null;
        }
        if (this.listener) {
          this.listener.destroy();
        }
      }
    }]);
  }();

  function Discuss(data) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var html, scroll, last, all_ready, rules_html;
    var active = 0;
    var view = 6;
    var tv = Platform.screen('tv');
    this.create = function () {
      var _this = this;
      html = Template.get('items_line', {
        title: Lang.translate('title_comments')
      });
      scroll = new create$f({
        horizontal: true
      });
      scroll.render().find('.scroll__body').addClass('full-reviews');
      html.find('.items-line__body').append(scroll.render());
      this.add();
      if (data.discuss.result.length === 0) {
        this.addEmptyMessage();
      }
      data.discuss.result.slice(0, view).forEach(this.append.bind(this));
      scroll.onWheel = function (step) {
        _this.toggle();
        Controller.enabled().controller[step > 0 ? 'right' : 'left']();
      };
      scroll.onScroll = function (step) {
        data.discuss.result.slice(active, tv ? active + view : data.discuss.result.length).filter(function (e) {
          return !e.ready;
        }).forEach(function (line_data) {
          Controller.collectionAppend(_this.append(line_data));
        });
        if ((!tv || active + view >= data.discuss.result.length) && !all_ready && data.discuss.total_pages > 1) {
          all_ready = true;
          _this.all();
        }
        Layer.visible(scroll.render(true));
      };
    };
    this.rules = function () {
      rules_html = Template.get('discuss_rules');
      $('body').append(rules_html);
    };
    this.filter = function (text) {
      var err = 0;
      function containsLongWords(str) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;
        var any = false;
        str.split(/\s/).map(function (a) {
          if (a.length >= length) any = true;
        });
        return any;
      }
      function containsFiveWords(str) {
        var words = str.split(/\s/);
        var count = 0;
        words.map(function (a) {
          if (a.length >= 5) count++;
        });
        return count;
      }
      if (/\d{4,}/g.test(text)) err = 1;else if (!/[а-яА-ЯёЁ]{5,}/.test(text)) err = 2;else if (!/[.,:;!?]/.test(text)) err = 3;else if (/[*%$#_+=|^&]/.test(text)) err = 4;else if (containsFiveWords(text) < 5) err = 5;else if (containsLongWords(text)) err = 6;else if (text.length > 300) err = 7;
      return err;
    };
    this.add = function () {
      var _this2 = this;
      var add_button = $('<div class="full-review-add selector"></div>');
      var add_value = '';
      var review_type = 'neutral';
      add_button.on('hover:enter', function () {
        if (Account.logged()) {
          _this2.rules();

          // Создаем компонент выбора рецензии
          var reviewSelector = new ReviewSelector();
          reviewSelector.create();
          var keyboard = Input.edit({
            title: '',
            value: add_value,
            nosave: true,
            textarea: true
          }, function (new_value) {
            rules_html.remove();
            add_value = new_value;
            review_type = reviewSelector.getSelected();
            if (new_value) {
              Account.addDiscuss(_objectSpread2(_objectSpread2({}, params.object), {}, {
                comment: new_value,
                review_type: review_type
              }), function (comment) {
                // Удаляем уведомление о пустых комментариях если оно есть
                scroll.render().find('.full-review-empty').remove();
                add_button.after(_this2.append(comment));
                Layer.visible(scroll.render(true));
              });
            }
            _this2.toggle();
          });

          // Добавляем компонент выбора рецензии
          var keypad = $('.simple-keyboard');
          var helper = $('<div class="discuss-rules-helper hide"></div>');
          var reviewBlock = $('<div class="discuss-review-block"></div>');
          if (keypad.length > 0) {
            reviewBlock.append(reviewSelector.render());
            keypad.after(reviewBlock);
            keypad.append(helper);
            keyboard.listener.follow('down', function () {
              reviewSelector.toggle();
            });
            reviewSelector.listener.follow('up', function () {
              keyboard.toggle();
            });
            keyboard.listener.follow('change', function (event) {
              var code = _this2.filter(event.value.trim());
              helper.toggleClass('hide', !Boolean(code)).text(Lang.translate('discuss_rules_rule_' + code));
            });
          }
        } else {
          Prisma.Account.showNoAccount();
        }
      }).on('hover:focus hover:touch', function (e) {
        last = e.target;
        scroll.update($(e.target), true);
      });
      scroll.append(add_button);
    };
    this.addEmptyMessage = function () {
      var empty_message = $('<div class="full-review-empty selector"><div class="full-review-empty__text">' + Lang.translate('comments_empty') + '</div></div>');
      empty_message.on('hover:focus hover:touch', function (e) {
        last = e.target;
        scroll.update($(e.target), true);
      });
      scroll.append(empty_message);
    };
    this.all = function () {
      var _this3 = this;
      var all_button = $('<div class="full-review full-review-all selector"><div class="full-review-all__text">' + Lang.translate('more') + '</div><div class="full-review-all__count">' + (data.discuss.total - data.discuss.result.length) + '</div></div>');
      all_button.on('hover:enter', function () {
        var page = 2;
        var discuss = [];
        var wait = false;
        var position = 0;
        var container = $('<div><div class="content-loading"></div></div>');
        var draw = function draw() {
          Modal.scroll().reset();
          container.empty();
          discuss.forEach(function (element) {
            var review = new Review(element, {
              type: 'vertical'
            });
            review.create();
            review.render().on('hover:focus hover:touch', function (e) {
              position = discuss.indexOf(element);
            }).on('hover:enter', function () {
              _this3.see(review, Modal.toggle);
            });
            container.append(review.render());
          });
          if (data.discuss.total_pages !== page) container.append($('<div class="content-loading"></div>'));
          Modal.update(container);
          Modal.toggle();
        };
        var load = function load() {
          TMDB.discussGet(_objectSpread2(_objectSpread2({}, params.object), {}, {
            page: page
          }), function (anser) {
            wait = false;
            discuss = discuss.slice(position, discuss.length).concat(anser.result);
            position = 0;
            draw();
          }, function () {
            page--;
            wait = false;
          });
        };
        Modal.open({
          title: Lang.translate('title_comments'),
          html: container,
          size: 'medium',
          onBack: function onBack() {
            Modal.close();
            draw = function draw() {};
            load = function load() {};
            _this3.toggle();
          }
        });
        Modal.scroll().onEnd = function () {
          if (!wait && page < data.discuss.total_pages) {
            wait = true;
            page++;
            load();
          }
        };
        Modal.scroll().params().end_ratio = 1.5;
        setTimeout(load, 200); //задержка для анимации окна
      });
      scroll.append(all_button);
    };
    this.see = function (review, onBack) {
      var items = [];
      var voited = Storage.cache('discuss_voited', 100, []);
      if (voited.indexOf(review.element.id) == -1 && Account.logged()) {
        items = [{
          separator: true,
          title: Lang.translate('title_action')
        }, {
          title: Lang.translate('title_like'),
          like: 1
        }, {
          title: Lang.translate('reactions_shit'),
          like: -1
        }];
      }
      Select.show({
        title: Utils$2.capitalizeFirstLetter(review.element.email),
        items: items,
        onFullDraw: function onFullDraw(select_scroll) {
          select_scroll.body().prepend($('<div class="selectbox__text selector"><div>' + Utils$2.capitalizeFirstLetter(review.element.comment) + '</div></div>'));
        },
        onSelect: function onSelect(item) {
          onBack();
          Account.voiteDiscuss({
            id: review.element.id,
            like: item.like
          }, function (result) {
            voited.push(review.element.id);
            Storage.set('discuss_voited', voited);
            if (result && result.liked !== undefined) {
              review.element.liked = result.liked;
              review.html.find('.full-review__like-counter').text(review.element.liked);
            } else {
              review.updateLike(item.like);
            }
            Noty$1.show(Lang.translate('discuss_voited'));
          });
        },
        onBack: onBack
      });
    };
    this.append = function (element) {
      var _this4 = this;
      element.ready = true;
      var review = new Review(element);
      review.create();
      review.render().on('hover:focus', function (e) {
        last = e.target;
        active = data.discuss.result.indexOf(element);
        scroll.update($(e.target), true);
      }).on('hover:touch', function (e) {
        active = data.discuss.result.indexOf(element);
        last = e.target;
      }).on('hover:enter', function () {
        _this4.see(review, _this4.toggle.bind(_this4));
      });
      scroll.append(review.render());
      return review.render();
    };
    this.toggle = function () {
      var _this5 = this;
      Controller.add('full_reviews', {
        link: this,
        toggle: function toggle() {
          Controller.collectionSet(_this5.render());
          Controller.collectionFocus(last, _this5.render());
          if (_this5.onToggle) _this5.onToggle(_this5);
        },
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('full_reviews');
    };
    this.render = function () {
      return html;
    };
  }

  function create$9(data) {
    var html, scroll, last;
    var active = 0;
    var view = 6;
    var tv = Platform.screen('tv');
    this.create = function () {
      var _this = this;
      html = Template.get('items_line', {
        title: Lang.translate('title_comments')
      });
      scroll = new create$f({
        horizontal: true
      });
      scroll.render().find('.scroll__body').addClass('full-reviews');
      html.find('.items-line__body').append(scroll.render());
      if (data.comments.length === 0) {
        this.addEmptyMessage();
      }
      data.comments.slice(0, view).forEach(this.append.bind(this));
      scroll.onWheel = function (step) {
        _this.toggle();
        Controller.enabled().controller[step > 0 ? 'right' : 'left']();
      };
      scroll.onScroll = function (step) {
        data.comments.slice(active, tv ? active + view : data.comments.length).filter(function (e) {
          return !e.ready;
        }).forEach(function (line_data) {
          Controller.collectionAppend(_this.append(line_data));
        });
        Layer.visible(scroll.render(true));
      };
    };
    this.append = function (element) {
      element.ready = true;
      var review = new Review(element);
      review.create();
      review.render().on('hover:focus', function (e) {
        last = e.target;
        active = data.comments.indexOf(element);
        scroll.update($(e.target), true);
      });
      scroll.append(review.render());
      return review.render();
    };
    this.addEmptyMessage = function () {
      var empty_message = $('<div class="full-review-empty selector"><div class="full-review-empty__text">' + Lang.translate('comments_empty') + '</div></div>');
      empty_message.on('hover:focus hover:touch', function (e) {
        last = e.target;
        scroll.update($(e.target), true);
      });
      scroll.append(empty_message);
    };
    this.toggle = function () {
      var _this2 = this;
      Controller.add('full_reviews', {
        link: this,
        toggle: function toggle() {
          Controller.collectionSet(_this2.render());
          Controller.collectionFocus(last, _this2.render());
          if (_this2.onToggle) _this2.onToggle(_this2);
        },
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('full_reviews');
    };
    this.render = function () {
      return html;
    };
  }

  var Item = /*#__PURE__*/function () {
    function Item(data, params) {
      _classCallCheck(this, Item);
      this.data = data;
      this.params = params;
    }
    return _createClass(Item, [{
      key: "create",
      value: function create() {
        this.html = Template.js(this.template, {});
        this.html.addEventListener('visible', this.visible.bind(this));
      }
    }, {
      key: "update",
      value: function update() {
        var _this = this;
        var url = (this.data.url || this.data.link) + '';
        var loc = url.slice(0, 6) == 'https:' || window.location.protocol == 'https:';
        var hts = url.slice(0, 6) == 'https:' || url.slice(0, 5) == 'http:';
        if (Plugins.errors().find(function (s) {
          return s == (_this.data.url || _this.data.link);
        })) {
          var erl = this.html.querySelector('.extensions__item-error');
          if (erl) erl.toggleClass('hide', false);
        }
        if (window.location.protocol == 'https:' && hts) url = url.replace(/^(http:\/\/|https:\/\/)/, 'https://');
        this.html.querySelector('.extensions__item-name').innerText = this.data.name || Lang.translate('extensions_no_name');
        this.html.querySelector('.extensions__item-author').innerText = this.data.author || (this.params.type == 'plugins' ? '@cub' : '@prisma');
        this.html.querySelector('.extensions__item-descr').innerText = (this.data.descr || url).replace(/\n|\t|\r/g, ' ');
        var proto = this.html.querySelector('.extensions__item-proto');
        if (proto && hts) {
          proto.toggleClass('hide', !Boolean(this.params.type == 'plugins' || this.params.type == 'installs'));
          proto.addClass('protocol-' + (loc ? 'https' : 'http'));
        }
        var status = this.html.querySelector('.extensions__item-disabled');
        status.innerText = Lang.translate('player_disabled');
        if (this.data.status || !this.params.autocheck) status.classList.add('hide');else status.classList.remove('hide');
      }
    }, {
      key: "cub",
      value: function cub() {
        var cub = document.createElement('div');
        cub.classList.add('extensions__cub');
        cub.innerText = 'CUB';
        this.html.appendChild(cub);
      }
    }, {
      key: "premium",
      value: function premium() {
        var author = this.html.querySelector('.extensions__item-author');
        var premium = document.createElement('span');
        premium.classList.add('extensions__item-premium');
        premium.innerText = 'CUB Premium';
        var where = author || this.html;
        where.appendChild(premium);
      }
    }, {
      key: "visible",
      value: function visible() {
        this.update();
      }
    }, {
      key: "render",
      value: function render() {
        return this.html;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.html.remove();
      }
    }]);
  }();

  function showReload(cancel) {
    Modal.open({
      title: '',
      align: 'center',
      zIndex: 300,
      html: $('<div class="about">' + Lang.translate('plugins_need_reload') + '</div>'),
      buttons: [{
        name: Lang.translate('settings_param_no'),
        onSelect: function onSelect() {
          Modal.close();
          cancel();
        }
      }, {
        name: Lang.translate('settings_param_yes'),
        onSelect: function onSelect() {
          window.location.reload();
        }
      }]
    });
  }
  function showInfo(plug, back) {
    var modal = Template.get('extensions_info');
    var footer = $('.extensions-info__footer', modal);
    if (plug.image) modal.prepend($('<img class="extensions-info__image" src="' + plug.image + '"/>'));
    $('.extensions-info__descr', modal).text(plug.descr);
    $('.extensions-info__instruction', modal).html((plug.instruction || Lang.translate('extensions_no_info')).replace(/\n/g, '<br>').replace(/\s\s/g, '&nbsp;&nbsp;'));
    function addLabel(name, value) {
      var label = $("<div>\n            <div class=\"extensions-info__label\">".concat(name, "</div>\n            <div class=\"extensions-info__value\">").concat(value, "</div>\n        </div>"));
      footer.append(label);
    }
    if (plug.link) addLabel(Lang.translate('settings_parser_jackett_link'), plug.link);
    if (plug.author) addLabel(Lang.translate('title_author'), plug.author);
    if (plug.time) addLabel(Lang.translate('settings_added'), Utils$2.parseTime(plug.time).full);
    Modal.open({
      title: plug.name || Lang.translate('extensions_info'),
      html: modal,
      size: 'large',
      onBack: function onBack() {
        Modal.close();
        back();
      }
    });
  }
  var Utils$1 = {
    showReload: showReload,
    showInfo: showInfo
  };

  var Extension = /*#__PURE__*/function (_Item) {
    function Extension(data, params) {
      var _this;
      _classCallCheck(this, Extension);
      _this = _callSuper(this, Extension, [data, params]);
      _this.network = new create$e();
      _this.template = 'extensions_item';
      return _this;
    }
    _inherits(Extension, _Item);
    return _createClass(Extension, [{
      key: "visible",
      value: function visible() {
        _superPropGet(Extension, "visible", this, 3)([]);
        if (this.params.cub) this.cub();
        if (this.data.premium) this.premium();
        if (this.params.autocheck) this.check();
        if (Plugins.loaded().indexOf(this.data.url || this.data.link) >= 0) this.html.querySelector('.extensions__item-included').classList.remove('hide');
        this.html.addEventListener('hover:enter', this.menu.bind(this));
      }
    }, {
      key: "menu",
      value: function menu() {
        var _this2 = this;
        if (this.removed) return;
        var menu = [];
        var controller = Controller.enabled().name;
        var back = function back() {
          Controller.toggle(controller);
        };
        if (this.params.type == 'plugins' || this.params.type == 'installs') {
          menu.push({
            title: Lang.translate('extensions_' + (this.data.status ? 'disable' : 'enable')),
            toggle: true
          });
        }
        menu.push({
          title: Lang.translate('extensions_check'),
          status: true
        });
        if (this.params.cub || this.params.noedit) {
          if (this.params.type == 'extensions') {
            menu.push({
              title: Lang.translate('extensions_install'),
              install: true
            });
          }
          menu.push({
            title: Lang.translate('extensions_info'),
            instruction: true
          });
        } else {
          menu.push({
            title: Lang.translate('extensions_edit'),
            separator: true
          });
          menu.push({
            title: Lang.translate('extensions_change_name'),
            change: 'name'
          });
          menu.push({
            title: Lang.translate('extensions_change_link'),
            change: 'url'
          });
          menu.push({
            title: Lang.translate('extensions_remove'),
            remove: true
          });
        }
        Select.show({
          title: Lang.translate('title_action'),
          items: menu,
          onBack: back,
          onSelect: function onSelect(a) {
            if (a.toggle) {
              _this2.data.status = _this2.data.status == 1 ? 0 : 1;
              if (_this2.params.cub) Account.pluginsStatus(_this2.data, _this2.data.status);else Plugins.save(_this2.data);
              _this2.update();
              if (_this2.data.status == 1) {
                back();
                Plugins.push(_this2.data);
              } else {
                Utils$1.showReload(back);
              }
            } else if (a.change) {
              Input.edit({
                title: a.change == 'name' ? Lang.translate('extensions_set_name') : Lang.translate('extensions_set_url'),
                value: _this2.data[a.change] || '',
                free: true,
                nosave: true
              }, function (new_value) {
                if (new_value) {
                  _this2.data[a.change] = new_value;
                  Plugins.save(_this2.data);
                  _this2.update();
                  if (a.change == 'url') {
                    _this2.check();
                    Plugins.push(_this2.data);
                  }
                }
                back();
              });
            } else if (a.status) {
              back();
              _this2.check();
            } else if (a.install) {
              var ready = Plugins.get().find(function (b) {
                return b.url == _this2.data.link;
              });
              if (ready) {
                Noty$1.show(Lang.translate('extensions_ready'));
                back();
              } else {
                back();
                Plugins.add({
                  url: _this2.data.link,
                  status: 1,
                  name: _this2.data.name,
                  author: _this2.data.author
                });
                _this2.html.querySelector('.extensions__item-included').classList.remove('hide');
              }
            } else if (a.instruction) {
              Utils$1.showInfo(_this2.data, back);
            } else if (a.remove) {
              Plugins.remove(_this2.data);
              _this2.html.style.opacity = 0.5;
              _this2.removed = true;
              Utils$1.showReload(back);
            }
          }
        });
      }
    }, {
      key: "check",
      value: function check() {
        var check = this.html.querySelector('.extensions__item-check');
        var code = this.html.querySelector('.extensions__item-code');
        var stat = this.html.querySelector('.extensions__item-status');
        check.classList.remove('hide');
        code.classList.add('hide');
        stat.classList.add('hide');
        var display = function display(type, num, text) {
          code.innerText = num;
          code.classList.remove('hide');
          code.classList.remove('success');
          code.classList.remove('error');
          code.classList.add(type);
          stat.innerText = text;
          stat.classList.remove('hide');
          check.classList.add('hide');
        };
        var url = Utils$2.fixMirrorLink(Utils$2.rewriteIfHTTPS(this.data.url || this.data.link));
        this.network.timeout(5000);
        this.network["native"](url, function (str) {
          if (/Prisma\./.test(str)) {
            display('success', 200, Lang.translate('extensions_worked'));
          } else {
            display('error', 500, Lang.translate('extensions_no_plugin'));
          }
        }, function (a, e) {
          display('error', 404, Lang.translate('title_error'));
        }, false, {
          dataType: 'text'
        });
      }
    }]);
  }(Item);

  var Recomend = /*#__PURE__*/function (_Extension) {
    function Recomend(data, params) {
      var _this;
      _classCallCheck(this, Recomend);
      _this = _callSuper(this, Recomend, [data, params]);
      _this.template = 'extensions_recomend';
      return _this;
    }
    _inherits(Recomend, _Extension);
    return _createClass(Recomend, [{
      key: "visible",
      value: function visible() {
        var _this2 = this;
        _superPropGet(Recomend, "visible", this, 3)([]);
        this.img = this.html.querySelector('.extensions__item-image');
        this.img.onload = function () {
          _this2.img.classList.add('loaded');
        };
        this.img.src = Utils$2.fixMirrorLink(Utils$2.rewriteIfHTTPS(this.data.image));
      }
    }, {
      key: "destroy",
      value: function destroy() {
        _superPropGet(Recomend, "destroy", this, 3)([]);
        if (this.img) {
          this.img.onload = false;
          this.img.onerror = false;
        }
      }
    }]);
  }(Extension);

  var Theme$1 = /*#__PURE__*/function () {
    function Theme() {
      _classCallCheck(this, Theme);
    }
    return _createClass(Theme, [{
      key: "init",
      value: function init() {
        var _this = this;
        if (this.get()) this.set(this.get());

        // Инициализируем стиль интерфейса
        this.applyInterfaceStyle();

        // Подписываемся на изменения настроек
        Storage.listener.follow('change', function (event) {
          if (event.name === 'interface_style') {
            _this.applyInterfaceStyle();
          }
        });
      }

      /**
       * Применяет стиль интерфейса в зависимости от настроек
       */
    }, {
      key: "applyInterfaceStyle",
      value: function applyInterfaceStyle() {
        // Применяем стиль только для ТВ-устройств
        var isTV = Platform.screen('tv');

        // Если это не ТВ, снимаем класс
        if (!isTV) {
          $('body').removeClass('news-cards');
          return;
        }

        // Для ТВ применяем стиль в зависимости от настроек
        var isSpaceStyle = Storage.field('interface_style') === 'space';

        // Принудительно удаляем и добавляем класс для мгновенного обновления стиля
        if (isSpaceStyle) {
          $('body').removeClass('news-cards').addClass('news-cards');
        } else {
          $('body').removeClass('news-cards');
        }

        // Принудительное обновление UI
        setTimeout(function () {
          $(window).trigger('resize');
        }, 0);
      }
    }, {
      key: "toggle",
      value: function toggle(url) {
        if (url) {
          Storage.set('cub_theme', url);
          this.set(url);
        } else {
          Storage.set('cub_theme', '');
          $('#cub-theme').remove();
        }
      }
    }, {
      key: "get",
      value: function get() {
        return Storage.get('cub_theme', '');
      }
    }, {
      key: "set",
      value: function set(url) {
        $('#cub-theme').remove();
        var href = Utils$2.rewriteIfHTTPS(Utils$2.addUrlComponent(url, 'token=' + encodeURIComponent(Storage.get('account', '{}').token)));
        var css = $('<link rel="stylesheet" href="' + href + '" id="cub-theme">');
        $('body').append(css);
      }
    }]);
  }();
  var Theme$2 = new Theme$1();

  var Theme = /*#__PURE__*/function (_Item) {
    function Theme(data, params) {
      var _this;
      _classCallCheck(this, Theme);
      _this = _callSuper(this, Theme, [data, params]);
      _this.template = 'extensions_theme';
      _this.link = Utils$2.rewriteIfHTTPS(Utils$2.protocol() + object$2.cub_domain + '/extensions/' + _this.data.id);
      return _this;
    }
    _inherits(Theme, _Item);
    return _createClass(Theme, [{
      key: "update",
      value: function update() {
        this.html.querySelector('.extensions__item-name').innerText = this.data.name || Lang.translate('extensions_no_name');
        if (this.active()) this.html.classList.add('active');else this.html.classList.remove('active');
      }
    }, {
      key: "active",
      value: function active() {
        return Storage.get('cub_theme', '') == this.link;
      }
    }, {
      key: "visible",
      value: function visible() {
        var _this2 = this;
        _superPropGet(Theme, "visible", this, 3)([]);
        if (this.data.premium) this.premium();
        this.img = this.html.querySelector('.extensions__item-image');
        this.img.onload = function () {
          _this2.img.classList.add('loaded');
        };
        this.img.src = Utils$2.fixMirrorLink(Utils$2.rewriteIfHTTPS(this.data.image));
        this.html.addEventListener('hover:enter', this.menu.bind(this));
      }
    }, {
      key: "menu",
      value: function menu() {
        var _this3 = this;
        var menu = [];
        var controller = Controller.enabled().name;
        menu.push({
          title: Lang.translate('extensions_' + (this.active() ? 'disable' : 'enable')),
          toggle: true
        });
        Select.show({
          title: Lang.translate('title_action'),
          items: menu,
          onBack: function onBack() {
            Controller.toggle(controller);
          },
          onSelect: function onSelect(a) {
            Controller.toggle(controller);
            if (a.toggle) {
              if (!_this3.active() && _this3.data.premium && !Account.hasPremium()) return Prisma.Account.showPrismaPremium();
              Theme$2.toggle(_this3.active() ? '' : _this3.link);
              _this3.update();
            }
          }
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        _superPropGet(Theme, "destroy", this, 3)([]);
        if (this.img) {
          this.img.onload = false;
          this.img.onerror = false;
        }
      }
    }]);
  }(Item);

  var Screensaver = /*#__PURE__*/function (_Item) {
    function Screensaver(data, params) {
      var _this;
      _classCallCheck(this, Screensaver);
      _this = _callSuper(this, Screensaver, [data, params]);
      _this.template = 'extensions_screensaver';
      _this.link = Utils$2.rewriteIfHTTPS(Utils$2.protocol() + object$2.cub_domain + '/extensions/' + _this.data.id);
      return _this;
    }
    _inherits(Screensaver, _Item);
    return _createClass(Screensaver, [{
      key: "update",
      value: function update() {
        this.html.querySelector('.extensions__item-name').innerText = this.data.name || Lang.translate('extensions_no_name');
        this.html.querySelector('.extensions__item-time').innerText = Utils$2.parseTime(Date.now()).time;
        if (this.active()) this.html.classList.add('active');else this.html.classList.remove('active');
      }
    }, {
      key: "active",
      value: function active() {
        return Storage.field('screensaver_type') == 'cub' && Storage.get('cub_screensaver', '') == this.link;
      }
    }, {
      key: "visible",
      value: function visible() {
        var _this2 = this;
        _superPropGet(Screensaver, "visible", this, 3)([]);
        if (this.data.premium) this.premium();
        this.img = this.html.querySelector('.extensions__item-image');
        this.img.onload = function () {
          _this2.img.classList.add('loaded');
        };
        this.img.src = Utils$2.fixMirrorLink(Utils$2.rewriteIfHTTPS(this.data.image));
        this.html.addEventListener('hover:enter', this.menu.bind(this));
      }
    }, {
      key: "menu",
      value: function menu() {
        var _this3 = this;
        var menu = [];
        var controller = Controller.enabled().name;
        menu.push({
          title: Lang.translate('extensions_' + (this.active() ? 'disable' : 'enable')),
          toggle: true
        });
        menu.push({
          title: Lang.translate('title_watch'),
          watch: true
        });
        Select.show({
          title: Lang.translate('title_action'),
          items: menu,
          onBack: function onBack(a) {
            Controller.toggle(controller);
          },
          onSelect: function onSelect(a) {
            Controller.toggle(controller);
            if (a.toggle) {
              if (_this3.active()) Storage.set('cub_screensaver', '');else {
                if (_this3.data.premium && !Account.hasPremium()) return Prisma.Account.showPrismaPremium();
                Storage.set('cub_screensaver', _this3.link);
                Storage.set('screensaver_type', 'cub');
              }
              _this3.update();
            } else {
              Screensaver$2.show('cub', {
                url: _this3.link
              });
            }
          }
        });
      }
    }, {
      key: "destroy",
      value: function destroy() {
        _superPropGet(Screensaver, "destroy", this, 3)([]);
        if (this.img) {
          this.img.onload = false;
          this.img.onerror = false;
        }
      }
    }]);
  }(Item);

  var Line = /*#__PURE__*/function () {
    function Line(data, params) {
      _classCallCheck(this, Line);
      this.params = params;
      this.data = data;
      this.items = [];
      this.active = 0;
      this.view = 4;
      this.last;
    }
    return _createClass(Line, [{
      key: "create",
      value: function create() {
        var _this = this;
        this.scroll = new create$f({
          horizontal: true,
          step: window.innerWidth / 4
        });
        this.html = Template.js('extensions_block', {});
        this.html.querySelector('.extensions__block-title').innerText = this.params.title;
        this.html.addEventListener('visible', this.visible.bind(this));
        this.html.querySelector('.extensions__block-body').appendChild(this.scroll.render(true));
        this.scroll.onWheel = function (step) {
          if (!Controller.own(_this)) _this.toggle();
          Controller.enabled().controller[step > 0 ? 'right' : 'left']();
        };
        this.scroll.onScroll = this.attach.bind(this);
      }
    }, {
      key: "display",
      value: function display(num) {
        var _this2 = this;
        this.data.filter(function (p) {
          if (p.platform) {
            var platforms = p.platform.split(',');
            return platforms.find(function (n) {
              return Platform.is(n);
            });
          } else return true;
        }).filter(function (e) {
          return e.premium ? window.prisma_settings.account_use : true;
        }).filter(function (e) {
          return !_this2.items.find(function (f) {
            return f.data == e;
          });
        }).forEach(this.append.bind(this));
      }
    }, {
      key: "visible",
      value: function visible() {
        this.display(this.view);
        Layer.visible(this.scroll.render(true));
      }
    }, {
      key: "append",
      value: function append(elem) {
        var _this3 = this;
        var Class = Extension;
        if (this.params.hpu == 'recomend') Class = Recomend;
        if (this.params.hpu == 'theme') Class = Theme;
        if (this.params.hpu == 'screensaver') Class = Screensaver;
        var item = new Class(elem, this.params);
        item.create();
        item.render().addEventListener('hover:focus', function () {
          _this3.last = item.render();
          var prev_active = _this3.active;
          _this3.active = _this3.items.indexOf(item);
          if (_this3.active > 0 || prev_active > _this3.active) _this3.scroll.update(_this3.last, true);
        });
        this.scroll.body(true).appendChild(item.render());
        this.items.push(item);
        if (Controller.own(this)) Controller.collectionAppend(item.render());
      }
    }, {
      key: "attach",
      value: function attach() {
        var size = Platform.screen('tv') ? (Math.round(this.active / this.view) + 1) * this.view + 1 : this.data.length;
        this.display(size);
        Layer.visible(this.scroll.render(true));
      }
    }, {
      key: "render",
      value: function render() {
        return this.html;
      }
    }, {
      key: "toggle",
      value: function toggle() {
        var _this4 = this;
        Controller.add('extensions_line', {
          link: this,
          toggle: function toggle() {
            Controller.collectionSet(_this4.scroll.render(true));
            Controller.collectionFocus(_this4.items.length ? _this4.last : false, _this4.scroll.render(true));
            if (_this4.onToggle) _this4.onToggle(_this4);
          },
          update: function update() {},
          right: function right() {
            Navigator.move('right');
          },
          left: function left() {
            Navigator.move('left');
          },
          down: this.onDown,
          up: this.onUp,
          back: this.onBack
        });
        Controller.toggle('extensions_line');
      }
    }, {
      key: "destroy",
      value: function destroy() {
        Arrays.destroy(this.items);
        this.scroll.destroy();
        this.html.remove();
        this.items = null;
      }
    }]);
  }();

  var Add = /*#__PURE__*/function () {
    function Add() {
      var _this = this;
      _classCallCheck(this, Add);
      this.html = document.createElement('div');
      this.html.classList.add('extensions__block-add');
      this.html.classList.add('selector');
      this.html.innerText = Lang.translate('extensions_add');
      this.html.addEventListener('hover:enter', function () {
        Input.edit({
          title: Lang.translate('extensions_set_url'),
          value: '',
          free: true,
          nosave: true
        }, function (new_value) {
          _this.onAdd(new_value);
        });
      });
    }
    return _createClass(Add, [{
      key: "render",
      value: function render() {
        return this.html;
      }
    }]);
  }();

  var Main = /*#__PURE__*/function () {
    function Main(params) {
      _classCallCheck(this, Main);
      this.items = [];
      this.active = 0;
      this.params = params;
    }
    return _createClass(Main, [{
      key: "create",
      value: function create() {
        var _this = this;
        this.html = Template.js('extensions');
        this.scroll = new create$f({
          mask: true
        });
        this.scroll.onWheel = function (step) {
          if (step > 0) _this.down();else _this.up();
        };
        this.scroll.append(HeadBackward(Lang.translate('settings_main_plugins'), true));
        this.scroll.height();
        this.html.querySelector('.extensions__body').appendChild(this.scroll.render(true));
        if (this.params.store) this.loadCustomStore();else this.load();
      }
    }, {
      key: "add",
      value: function add() {
        var add = new Add();
        var line = this.items[0];
        add.onAdd = function (url) {
          if (url) {
            if (url.length > 300) {
              line.toggle();
              Noty$1.show(Lang.translate('account_export_fail_600'));
              return;
            }
            var data = {
              url: url,
              status: 1
            };
            var plugin = new Extension(data, {
              type: 'installs',
              autocheck: true
            });
            plugin.create();
            Plugins.add(data);
            $(add.render()).after(plugin.render());
            line.last = add.render();
            Layer.visible(line.render());
            line.toggle();
          } else {
            line.toggle();
          }
        };
        line.scroll.body(true).appendChild(add.render());
      }
    }, {
      key: "loadCustomStore",
      value: function loadCustomStore() {
        var _this2 = this;
        this.appendLoader();
        var net = new create$e();
        net.silent(this.params.store, function (data) {
          _this2.loader.remove();
          net = null;
          if (data.results && data.results.length) {
            if (_this2.params.with_installed) {
              _this2.appendLine(Plugins.get().reverse(), {
                title: Lang.translate('extensions_from_memory'),
                type: 'installs',
                autocheck: true
              });
            }
            data.results.forEach(function (a) {
              _this2.appendLine(a.results, {
                title: a.title || Lang.translate('player_unknown'),
                type: 'extensions',
                hpu: a.hpu,
                noedit: true
              });
            });
            if (_this2.params.with_installed) _this2.add();
            _this2.items.slice(0, 3).forEach(function (i) {
              return i.display();
            });
            Layer.visible(_this2.html);
            _this2.toggle();
          } else {
            _this2.error();
          }
        }, function () {
          _this2.loader.remove();
          net = null;
          _this2.error();
        });
      }
    }, {
      key: "load",
      value: function load() {
        var _this3 = this;
        this.appendLoader();
        var need = 2;
        if (window.prisma_settings.plugins_store) need += 2;
        var status = new status$2(need);
        status.onComplite = function () {
          _this3.loader.remove();
          _this3.appendLine(status.data.installs, {
            title: Lang.translate('extensions_from_memory'),
            type: 'installs',
            autocheck: true
          });
          if (status.data.plugins.length) _this3.appendLine(status.data.plugins, {
            title: Lang.translate('extensions_from_cub'),
            cub: true,
            type: 'plugins',
            autocheck: true
          });
          if (status.data.best && status.data.best.length) _this3.appendLine(status.data.best, {
            title: Lang.translate('extensions_from_popular'),
            cub: true,
            type: 'extensions'
          });
          if (status.data.all && status.data.all.length) _this3.appendLine(status.data.all.reverse(), {
            title: Lang.translate('extensions_from_lib'),
            cub: true,
            type: 'extensions'
          });
          if (status.data.list) {
            status.data.list.forEach(function (data) {
              if (data.results.length) {
                _this3.appendLine(data.results, {
                  title: Lang.translate('extensions_hpu_' + data.hpu),
                  cub: true,
                  type: 'extensions',
                  hpu: data.hpu
                });
              }
            });
          }
          _this3.add();
          _this3.items.slice(0, 3).forEach(function (i) {
            return i.display();
          });
          Layer.visible(_this3.html);
          _this3.toggle();
        };
        status.append('installs', Plugins.get().reverse());
        Account.plugins(function (plugins) {
          status.append('plugins', plugins);
        });
        if (window.prisma_settings.plugins_store) {
          Account.extensions(function (extensions) {
            if (extensions.results) {
              status.need--;
              status.append('list', extensions.results);
            } else {
              status.append('best', extensions.best);
              status.append('all', extensions.plugins);
            }
          });
        }
      }
    }, {
      key: "appendLoader",
      value: function appendLoader() {
        this.loader = document.createElement('div');
        this.loader.classList.add('broadcast__scan');
        this.loader.appendChild(document.createElement('div'));
        this.scroll.body(true).appendChild(this.loader);
      }
    }, {
      key: "error",
      value: function error() {
        var empty = new Prisma.Empty();
        this.scroll.body(true).appendChild(empty.render(true));
      }
    }, {
      key: "appendLine",
      value: function appendLine(data, params) {
        var _this4 = this;
        var line = new Line(data, params);
        line.onBack = this.onBack.bind(this);
        line.onUp = this.up.bind(this);
        line.onDown = this.down.bind(this);
        line.onToggle = function () {
          _this4.active = _this4.items.indexOf(line);
          _this4.scroll.update(line.render(), true);
        };
        line.create();
        this.scroll.body(true).appendChild(line.render());
        this.items.push(line);
      }
    }, {
      key: "down",
      value: function down() {
        this.active++;
        if (this.active <= this.items.length - 1) this.items[this.active].toggle();
        this.active = Math.min(this.items.length - 1, this.active);
      }
    }, {
      key: "up",
      value: function up() {
        this.active--;
        if (this.active >= 0) this.items[this.active].toggle();
        this.active = Math.max(0, this.active);
      }
    }, {
      key: "render",
      value: function render() {
        return this.html;
      }
    }, {
      key: "toggle",
      value: function toggle() {
        var _this5 = this;
        Controller.add('extensions', {
          toggle: function toggle() {
            Controller.collectionSet(_this5.html);
            if (_this5.items.length) {
              _this5.items[_this5.active].toggle();
            }
          },
          back: this.onBack
        });
        Controller.toggle('extensions');
      }
    }, {
      key: "destroy",
      value: function destroy() {
        Arrays.destroy(this.items);
        this.scroll.destroy();
        this.html.remove();
      }
    }]);
  }();

  var extensions;
  var listener$4 = start$8();
  function init$s() {
    ParentalControl.add('extensions', {
      title: 'settings_main_plugins'
    });
  }
  function show$6() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (extensions) return;
    var controller = Controller.enabled().name;
    extensions = new Main(params);
    extensions.onBack = function () {
      extensions.destroy();
      extensions = null;
      document.body.toggleClass('ambience--enable', false);
      Controller.toggle(controller);
      if (params.onClose) params.onClose();
      if (!params.store) listener$4.send('close', {});
    };
    extensions.create();
    document.body.toggleClass('ambience--enable', true);
    document.body.appendChild(extensions.render(true));
    extensions.toggle();
    if (!params.store) listener$4.send('open', {
      extensions: extensions
    });
  }
  function render$4(js) {
    var html = extensions ? extensions.render() : document.createElement('div');
    return js ? html : $(html);
  }
  var Extensions = {
    init: init$s,
    listener: listener$4,
    show: show$6,
    render: render$4
  };

  var _created = [];
  var _loaded = [];
  var _network = new create$e();
  var _blacklist = [];
  var _awaits = [];
  var _noload = [];

  /**
   * Запуск
   */
  function init$r() {
    _loaded = Storage.get('plugins', '[]');
    Settings.main().render().find('[data-component="plugins"]').unbind('hover:enter').on('hover:enter', function () {
      ParentalControl.personal('extensions', function () {
        Extensions.show();
      }, false, true);
    });
  }
  function get$4() {
    return _loaded.map(function (a) {
      return a;
    });
  }
  function modify() {
    var list = Storage.get('plugins', '[]');
    list = list.map(function (a) {
      return typeof a == 'string' ? {
        url: a,
        status: 1
      } : a;
    });
    list.forEach(function (a) {
      a.url = (a.url + '').replace('cub.watch', object$2.cub_domain);
    });
    console.log('Plugins', 'modify:', list);
    Storage.set('plugins', list);
  }
  function remove$1(plug) {
    Arrays.remove(_loaded, plug);
    console.log('Plugins', 'remove:', plug, 'index:', _loaded.indexOf(plug), 'from:', _loaded);
    Storage.set('plugins', _loaded);
  }
  function add$6(plug) {
    _loaded.push(plug);
    console.log('Plugins', 'add:', plug);
    Storage.set('plugins', _loaded);
    push$2(plug);
  }
  function push$2(plug) {
    var find = _created.find(function (a) {
      return a == plug.url;
    });
    if (!find && plug.status == 1) {
      if (_blacklist.find(function (a) {
        return plug.url.indexOf(a) >= 0;
      })) return Noty$1.show(Lang.translate('torrent_error_connect'), {
        time: 8000
      });
      _created.push(plug.url);
      console.log('Plugins', 'push:', plug);
      Utils$2.putScriptAsync([addPluginParams(plug.url)], false, function () {
        Noty$1.show(Lang.translate('plugins_check_fail'), {
          time: 8000
        });
      }, function () {
        updatePluginDB(plug.url, addPluginParams(plug.url));
        Noty$1.show(Lang.translate('plugins_add_success'));
      }, false);
    }
  }
  function save$1() {
    console.log('Plugins', 'save:', _loaded);
    Storage.set('plugins', _loaded);
  }
  function updatePluginDB(name, url) {
    //if(Account.hasPremium()){
    var cu = Utils$2.addUrlComponent(url, 'cache=true');
    _network["native"](cu, function (str) {
      Cache.rewriteData('plugins', name, str).then(function () {
        console.log('Plugins', 'update plugin cache:', name);
      })["catch"](function (e) {
        console.log('Plugins', 'add to cache fail:', name, typeof e == 'string' ? e : e ? e.message : 'no details');
      });
    }, false, false, {
      dataType: 'text'
    });
    //}
  }
  function createPluginDB(name) {
    //if(Account.hasPremium()){
    Cache.getData('plugins', name).then(function (code) {
      if (code) {
        var s = document.createElement('script');
        s.type = 'text/javascript';
        try {
          s.appendChild(document.createTextNode(code));
          document.body.appendChild(s);
        } catch (e) {
          s.text = code;
          document.body.appendChild(s);
        }
        console.log('Plugins', 'add plugin from cache:', name);
      } else console.log('Plugins', 'no find in cache:', name);
    })["catch"](function (e) {
      console.log('Plugins', 'include from cache fail:', name, typeof e == 'string' ? e : e.message);
    });
    //}
  }
  function addPluginParams(url) {
    var encode = url;
    encode = encode.replace('cub.watch', object$2.cub_domain);
    encode = Utils$2.fixMirrorLink(encode);
    if (!/[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}/.test(encode)) {
      encode = encode.replace(/\{storage_(\w+|\d+|_|-)\}/g, function (match, key) {
        return encodeURIComponent(Base64.encode(localStorage.getItem(key) || ''));
      });
      var email = (localStorage.getItem('account_email') || '').trim();
      if (Account.logged() && email) encode = Utils$2.addUrlComponent(encode, 'email=' + encodeURIComponent(Base64.encode(email)));
      encode = Utils$2.addUrlComponent(encode, 'logged=' + encodeURIComponent(Account.logged() ? 'true' : 'false'));
      encode = Utils$2.addUrlComponent(encode, 'reset=' + Math.random());
      encode = Utils$2.addUrlComponent(encode, 'origin=' + encodeURIComponent(Base64.encode(window.location.host)));
      encode = Utils$2.rewriteIfHTTPS(encode);
    }
    return encode;
  }
  function loadBlackList(call) {
    if (window.prisma_settings.disable_features.blacklist) return call([]);
    var status = new status$2(2);
    status.onComplite = function (res) {
      call([].concat(res.cub, res.custom));
    };
    _network.silent(Utils$2.protocol() + object$2.pris_domain + '/api/plugins/blacklist', function (result) {
      var list = result.map(function (a) {
        return a.url;
      });
      Storage.set('plugins_blacklist', list);
      status.append('cub', list);
    }, function () {
      status.append('cub', Storage.get('plugins_blacklist', '[]'));
    }, false, {
      timeout: 1000 * 5
    });
    _network.silent('./plugins_black_list.json', function (list) {
      status.append('custom', list);
    }, function () {
      status.append('custom', []);
    }, false, {
      timeout: 1000 * 5
    });
  }

  /**
   * Загрузка всех плагинов
   */
  function load(call) {
    var errors = [];
    var original = {};
    var include = [];
    _awaits.forEach(function (url) {
      var encode = addPluginParams(url);
      include.push(encode);
      original[encode] = url;
    });
    Utils$2.putScriptAsync(include, function () {
      call();
      if (errors.length) {
        setTimeout(function () {
          Noty$1.show(Lang.translate('plugins_no_loaded') + ' (' + errors.join(', ') + ')', {
            time: 6000
          });
        }, 2000);
      }
    }, function (u) {
      if (u.indexOf('modification.js') == -1) {
        console.log('Plugins', 'error:', original[u]);
        errors.push(original[u]);
        _noload.push(original[u]);
        createPluginDB(original[u]);
      }
    }, function (u) {
      console.log('Plugins', 'include:', original[u]);
      console.log('Extensions', 'include:', original[u]);
      _created.push(original[u]);
      updatePluginDB(original[u], u);
    }, false);
  }
  function task$1(call) {
    modify();
    _loaded = Storage.get('plugins', '[]');
    loadBlackList(function (black_list) {
      Account.plugins(function (plugins) {
        var puts = window.prisma_settings.plugins_use ? plugins.filter(function (plugin) {
          return plugin.status;
        }).map(function (plugin) {
          return plugin.url;
        }).concat(Storage.get('plugins', '[]').filter(function (plugin) {
          return plugin.status;
        }).map(function (plugin) {
          return plugin.url;
        })) : [];
        puts = puts.filter(function (element, index) {
          return puts.indexOf(element) === index;
        });
        console.log('Plugins', 'load list:', puts);
        _blacklist = black_list;
        console.log('Plugins', 'black list:', black_list);
        black_list.forEach(function (b) {
          puts = puts.filter(function (p) {
            return p.toLowerCase().indexOf(b) == -1;
          });
        });
        console.log('Plugins', 'clear list:', puts);
        _awaits = puts;
        call();
      });
    });
  }
  function awaits() {
    return _awaits;
  }
  var Plugins = {
    init: init$r,
    load: load,
    remove: remove$1,
    loaded: function loaded() {
      return _created;
    },
    errors: function errors() {
      return _noload;
    },
    add: add$6,
    get: get$4,
    save: save$1,
    push: push$2,
    task: task$1,
    awaits: awaits
  };

  /**
   * Показать шаблон пустого экрана
   * @doc
   * @name class
   * @alias Empty
   * @param {Object} params заголовок и описание JSON({"title":"Заголовок","descr":"Описание"})
   * @returns {Object} объект класса
   */

  function Empty() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Arrays.extend(params, {
      title: Lang.translate('empty_title_two'),
      descr: Lang.translate('empty_text_two'),
      noicon: false,
      width: 'large'
    });
    var html = Template.get('empty', params);
    html.addClass('empty--width-' + params.width);
    if (params.noicon) html.addClass('empty--noicon');
    this.start = function () {
      var _this = this;
      Controller.add('content', {
        toggle: function toggle() {
          var selects = html.find('.selector').filter(function () {
            return !$(this).hasClass('empty__img');
          });
          html.find('.empty__img').toggleClass('selector', selects.length > 0 ? false : true);
          Controller.collectionSet(html);
          Controller.collectionFocus(selects.length > 0 ? selects.eq(0)[0] : false, html);
        },
        left: function left() {
          if (_this.onLeft) _this.onLeft();else if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          Navigator.move('down');
        },
        right: function right() {
          Navigator.move('right');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.addInfoButton = function (add_information) {
      var footer = html.find('.empty__footer');
      if (!footer.length) {
        footer = $('<div class="empty__footer"></div>');
        html.append(footer);
      }
      var button = $('<div class="simple-button selector">' + Lang.translate('extensions_info') + '</div>');
      button.on('hover:enter', function () {
        var controller = Controller.enabled().name;
        var html = $('<div></div>');
        var line = function line(name, value) {
          html.append($("<div class=\"console__line selector\"><span class=\"console__time\">".concat(name, "</span> - <span>").concat(value, "</span></div>")));
        };
        line('Protocol', window.location.protocol);
        line('Host', window.location.host);
        line('Platform', Platform.get());
        line('Safe connection', Storage.field('protocol') == 'https' ? 'Yes' : 'No');
        line('Connection', Utils$2.protocol());
        // line('TMDB Proxy', Storage.field('tmdb_proxy') ? 'Yes' : 'No')
        // line('TMDB Proxy plugin',  Plugins.loaded().find(u=>/\/plugin\/tmdb-proxy/.test(u)) ? 'Yes' : 'No')
        line('Premium', Account.hasPremium() ? 'Yes' : 'No');
        if (add_information) {
          add_information.forEach(function (info) {
            line(info[0], info[1]);
          });
        }
        Modal.open({
          title: Lang.translate('extensions_info'),
          html: html,
          size: 'medium',
          onBack: function onBack() {
            Modal.close();
            Controller.toggle(controller);
          }
        });
      });
      footer.append(button);
    };
    this.append = function (add) {
      html.append(add);
    };
    this.render = function (add) {
      if (typeof add == 'boolean') return html[0];
      if (add) html.append(add);
      return html;
    };
  }

  function create$8(data) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var html, scroll, last;
    var view = 6;
    var tv = Platform.screen('tv');
    var active = 0;
    this.create = function () {
      var _this = this;
      html = Template.get('items_line', {
        title: params.season.name || Lang.translate('full_series_release')
      });
      scroll = new create$f({
        horizontal: true
      });
      scroll.render().find('.scroll__body').addClass('full-episodes');
      scroll.onWheel = function (step) {
        if (!Controller.own(_this)) _this.toggle();
        Controller.enabled().controller[step > 0 ? 'right' : 'left']();
      };
      scroll.onScroll = function (step) {
        data.slice(active, tv ? active + view : data.length).filter(function (e) {
          return !e.ready;
        }).forEach(function (elem) {
          Controller.collectionAppend(_this.append(elem));
        });
        Layer.visible(scroll.render(true));
      };
      html.find('.items-line__body').append(scroll.render());
      data.reverse();
      data.sort(function (a, b) {
        return a.episode_number - b.episode_number;
      });
      data.forEach(function (episode, num) {
        return episode.episode_number = episode.episode_number || num + 1;
      });
      var wath_all = Template.get('full_episode', {
        name: Lang.translate('more')
      });
      wath_all.addClass('full-episode--wath-all');
      wath_all.on('hover:enter', function () {
        Activity$1.push({
          url: '',
          title: Lang.translate('title_episodes'),
          component: 'episodes',
          movie: params.movie,
          page: 1
        });
      });
      scroll.append(wath_all);
      data.slice(0, view).forEach(this.append.bind(this));
    };
    this.append = function (element) {
      element.ready = true;
      element.date = element.air_date ? Utils$2.parseTime(element.air_date).full : '----';
      element.num = element.episode_number;
      var episode = Template.get('full_episode', element);
      var hash = Utils$2.hash([element.season_number, element.season_number > 10 ? ':' : '', element.episode_number, params.title].join(''));
      var view = Timeline$1.view(hash);
      episode.append('<div class="full-episode__viewed">' + Template.get('icon_viewed', {}, true) + '</div>');
      episode.toggleClass('full-episode--viewed', Boolean(view.percent));
      if (element.plus) {
        episode.addClass('full-episode--next');
      }
      episode.on('visible', function () {
        var img = episode.find('img')[0];
        img.onerror = function (e) {
          img.src = './img/img_broken.svg';
        };
        img.onload = function () {
          episode.addClass('full-episode--loaded');
        };
        if (element.still_path) img.src = Api.img(element.still_path, 'w300');else if (element.img) img.src = element.img;else img.src = './img/img_broken.svg';
      });
      episode.on('hover:focus', function (e) {
        last = e.target;
        active = data.indexOf(element);
        scroll.update($(e.target), true);
      }).on('hover:enter', function () {
        if (element.overview) {
          Modal.open({
            title: element.name,
            html: $('<div class="about">' + element.overview + '</div>'),
            onBack: function onBack() {
              Modal.close();
              Controller.toggle('content');
            },
            onSelect: function onSelect() {
              Modal.close();
              Controller.toggle('content');
            }
          });
        }
      }).on('hover:long', function () {
        if (Boolean(view.percent)) {
          view.time = 0;
          view.percent = 0;
        } else {
          view.time = view.duration * 0.95;
          view.percent = 95;
        }
        Timeline$1.update(view);
        episode.toggleClass('full-episode--viewed', Boolean(view.percent));
      });
      scroll.append(episode);
      return episode;
    };
    this.toggle = function () {
      var _this2 = this;
      Controller.add('full_episodes', {
        link: this,
        toggle: function toggle() {
          Controller.collectionSet(_this2.render());
          Controller.collectionFocus(last, _this2.render());
          if (_this2.onToggle) _this2.onToggle(_this2);
        },
        update: function update() {},
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('full_episodes');
    };
    this.render = function () {
      return html;
    };
  }

  var components$1 = {
    start: create$c,
    descr: create$b,
    persons: create$a,
    recomend: create$l,
    discuss: Discuss,
    comments: create$9,
    simular: create$l,
    episodes: create$8
  };
  function component$j(object) {
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      step: 400,
      scroll_by_item: false
    });
    var items = [];
    var create = [];
    var active = 0;
    var tv = Platform.screen('tv');
    var html = $('<div class="layer--wheight"><img class="full-start__background"></div>');
    var background_image;
    var loaded_data;
    var backdrop_timer = null;
    var backdrops = [];
    var current_backdrop_index = 0;
    var updateBackdrop = function updateBackdrop() {
      if (backdrops.length > 0) {
        var imgNew = new Image();
        imgNew.onload = function () {
          if (background_image) {
            // Убираем класс loaded для сброса анимации
            html.find('.full-start__background').removeClass('loaded');
            setTimeout(function () {
              background_image.src = imgNew.src;
              html.find('.full-start__background').addClass('loaded');
            }, 100);
          }
        };
        imgNew.src = Prisma.TMDB.image('t/p/w1280' + backdrops[current_backdrop_index]) + '?t=' + new Date().getTime();
        current_backdrop_index = (current_backdrop_index + 1) % backdrops.length;
      }
    };
    this.create = function () {
      var _this = this;
      this.activity.loader(true);
      if (object.source == 'tmdb' && Storage.field('source') == 'cub') {
        object.source = 'cub';
      }
      scroll.minus();
      scroll.onWheel = function (step) {
        if (step > 0) _this.down();else if (active > 0) _this.up();
      };
      scroll.onScroll = this.visible.bind(this);
      html.append(scroll.render());
      if (tv) {
        document.body.classList.add('tv-mode');
        // console.log('TV mode enabled')
      }
      Api.full(object, function (data) {
        if (data.movie && data.movie.blocked) {
          _this.empty({
            blocked: true
          });
        } else if (data.movie) {
          loaded_data = data;
          if (Activity$1.active().activity == _this.activity) Activity$1.active().card = data.movie;
          Prisma.Listener.send('full', {
            type: 'start',
            object: object,
            data: data
          });
          _this.build('start', data);
          if (data.discuss) _this.build('discuss', data);else if (data.comments && data.comments.length) _this.build('comments', data);
          _this.build('descr', data);
          if (data.episodes && data.episodes.episodes) {
            var today = new Date();
            var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
            var time = Utils$2.parseToDate(date).getTime();
            var plus = false;
            var cameout = data.episodes.episodes.filter(function (a) {
              return a.air_date;
            }).filter(function (e) {
              var air = Utils$2.parseToDate(e.air_date).getTime();
              if (air <= time) return true;else if (!plus) {
                plus = true;
                e.plus = true;
                return true;
              }
              return false;
            });
            _this.build('episodes', cameout, {
              title: data.movie.original_title || data.movie.original_name,
              season: data.episodes,
              movie: data.movie
            });
          }
          if (data.persons && data.persons.crew && data.persons.crew.length) {
            var directors = data.persons.crew.filter(function (member) {
              return member.job === 'Director';
            });
            if (directors.length) {
              _this.build('persons', directors, {
                title: Lang.translate('title_producer')
              });
            }
          }
          if (data.persons && data.persons.cast && data.persons.cast.length) _this.build('persons', data.persons.cast);
          if (data.collection && data.collection.results.length) {
            data.collection.title = Lang.translate('title_collection');
            data.collection.noimage = true;
            data.collection.results.sort(function (a, b) {
              return new Date(a.release_date) - new Date(b.release_date);
            });
            _this.build('recomend', data.collection);
          }
          if (data.recomend && data.recomend.results.length) {
            data.recomend.title = Lang.translate('title_recomendations');
            data.recomend.noimage = true;
            _this.build('recomend', data.recomend);
          }
          if (data.simular && data.simular.results.length) {
            data.simular.title = Lang.translate('title_similar');
            data.simular.noimage = true;
            _this.build('simular', data.simular);
          }
          TimeTable.update(data.movie);
          _this.visible(0);
          Prisma.Listener.send('full', {
            type: 'complite',
            object: object,
            data: data
          });
          _this.loadBackground(data);
          _this.activity.toggle();
          _this.activity.loader(false);
          Layer.update(html);
        } else {
          _this.empty();
        }
      }, this.empty.bind(this));
      return this.render();
    };
    this.empty = function () {
      var er = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var button;
      if (object.source == 'tmdb') {
        button = $('<div class="empty__footer"><div class="simple-button selector">' + Lang.translate('change_source_on_cub') + '</div></div>');
        button.find('.selector').on('hover:enter', function () {
          Storage.set('source', 'cub');
          Activity$1.replace({
            source: 'cub'
          });
        });
      }
      var text = {};
      if (Utils$2.dcma(object.method, object.id) || er.blocked) {
        text.title = Lang.translate('dmca_title');
        text.descr = Lang.translate('dmca_descr');
        text.noicon = true;
      }
      var empty = new Empty(text);
      if (button) empty.append(button);
      empty.addInfoButton([['Movie id', object.id], ['DCMA', Utils$2.dcma(object.method, object.id) ? 'Yes' : 'No']]);
      scroll.append(empty.render(true));
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.build = function (name, data, params) {
      var _this2 = this;
      create.push({
        created: false,
        create: function create() {
          var item = new components$1[name](data, _objectSpread2({
            object: object,
            nomore: true,
            parent: _this2
          }, params));
          item.mscroll = scroll;
          item.onDown = _this2.down.bind(_this2);
          item.onUp = _this2.up.bind(_this2);
          item.onBack = _this2.back.bind(_this2);
          item.onToggle = function () {
            active = items.indexOf(item);
          };
          item.onScroll = function (e, center) {
            scroll.update(e, center);
          };
          item.create();
          items.push(item);
          Prisma.Listener.send('full', {
            type: 'build',
            name: name,
            body: item.render()
          });
          scroll.append(item.render());
          return item.render();
        }
      });
    };
    this.visible = function (position) {
      create.slice(0, tv ? active + 3 : create.length).filter(function (e) {
        return !e.created;
      }).forEach(function (e) {
        e.created = true;
        e.create();
      });
      setTimeout(function () {
        Layer.visible(scroll.render(true));
      }, 100);
      this.toggleBackgroundOpacity(position);
    };
    this.down = function () {
      active++;
      active = Math.min(active, items.length - 1);
      if (items[active]) {
        items[active].toggle();
        scroll.update(items[active].render());
      }
    };
    this.up = function () {
      active--;
      if (active < 0) {
        active = 0;
        Controller.toggle('head');
      } else {
        items[active].toggle();
        scroll.update(items[active].render());
      }
    };
    this.toggleBackgroundOpacity = function (position) {
      if (background_image) {
        html.find('.full-start__background').toggleClass('dim', position > 0);
      }
    };
    this.back = function () {
      Activity$1.backward();
    };
    this.loadBackground = function (data) {
      var background = data.movie.backdrop_path ? Api.img(data.movie.backdrop_path, 'w1280') : data.movie.background_image ? data.movie.background_image : '';
      var loadBackdrops = function loadBackdrops() {
        if (data.movie && data.movie.id) {
          var method = data.movie.name ? 'tv' : 'movie';
          Api.sources.tmdb.get("".concat(method, "/").concat(data.movie.id, "/images"), {
            filter: {
              include_image_language: 'null'
            }
          }, function (result) {
            if (result && result.backdrops) {
              backdrops = result.backdrops.map(function (item) {
                return item.file_path;
              }).filter(Boolean);
              if (data.movie.backdrop_path && !backdrops.includes(data.movie.backdrop_path)) {
                backdrops.unshift(data.movie.backdrop_path);
              }
              if (backdrops.length > 1) {
                backdrop_timer = setInterval(updateBackdrop, 10000);
              }
            }
          }, function () {
            console.log('Failed to load backdrops');
          });
        }
      };
      if (window.innerWidth > 790 && background && !Storage.field('light_version')) {
        background_image = html.find('.full-start__background')[0] || {};
        background_image.onload = function (e) {
          html.find('.full-start__background').addClass('loaded');
        };
        background_image.src = background;
        loadBackdrops();
      } else html.find('.full-start__background').remove();
    };
    this.start = function () {
      if (items.length && Activity$1.active().activity == this.activity) {
        if (loaded_data) Activity$1.active().card = loaded_data.movie;
        items[0].toggleBackground();
      }
      Controller.add('content', {
        update: function update() {},
        toggle: function toggle() {
          if (items.length) {
            items[active].toggle();
          } else {
            Controller.collectionSet(scroll.render());
            Controller.collectionFocus(false, scroll.render());
          }
        },
        left: function left() {
          Controller.toggle('menu');
        },
        up: function up() {
          Controller.toggle('head');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return html;
    };
    this.stopBackdropTimer = function () {
      if (backdrop_timer) {
        clearInterval(backdrop_timer);
        backdrop_timer = null;
      }
    };
    this.startBackdropTimer = function () {
      if (backdrops.length > 1 && !backdrop_timer) {
        backdrop_timer = setInterval(updateBackdrop, 10000);
      }
    };
    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      if (backdrop_timer) {
        clearInterval(backdrop_timer);
        backdrop_timer = null;
      }
      backdrops = [];
      html.remove();
      items = null;
      network = null;
      if (background_image) {
        background_image.onload = function () {};
        background_image.src = '';
        background_image = null;
      }
    };
  }

  function component$i(object) {
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      step: 250,
      end_ratio: 2
    });
    var items = [];
    var html = document.createElement('div');
    var body = document.createElement('div');
    var total_pages = 0;
    var last;
    var waitload;
    var active = 0;
    this.create = function () {};
    this.empty = function () {
      var button;
      if (object.source == 'tmdb') {
        button = $('<div class="empty__footer"><div class="simple-button selector">' + Lang.translate('change_source_on_cub') + '</div></div>');
        button.find('.selector').on('hover:enter', function () {
          Storage.set('source', 'cub');
          Activity$1.replace({
            source: 'cub'
          });
        });
      }
      var empty = new Empty();
      if (button) empty.append(button);
      empty.addInfoButton();
      html.appendChild(empty.render(true));
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.next = function () {
      var _this = this;
      if (waitload) return;
      if (object.page < total_pages) {
        waitload = true;
        object.page++;
        this.nextPageReuest(object, function (result) {
          _this.append(result, true);
          waitload = false;
          _this.limit();
        }, function () {
          waitload = false;
        });
      }
    };
    this.nextPageReuest = function (object, resolve, reject) {
      Api.list(object, resolve.bind(this), reject.bind(this));
    };
    this.append = function (data, append) {
      var _this2 = this;
      data.results.forEach(function (element) {
        var card = new Card(element, {
          object: object,
          card_category: typeof data.card_category == 'undefined' ? true : data.category,
          card_big: data.big,
          card_wide: data.wide,
          card_small: data.small,
          card_broad: data.broad,
          card_collection: data.collection,
          card_continue: data["continue"],
          card_events: data.card_events
        });
        card.create();
        card.onFocus = function (target, card_data) {
          last = target;
          active = items.indexOf(card);
          scroll.update(card.render(true));
          Background.change(Utils$2.cardImgBackground(card_data));
        };
        card.onTouch = function (target, card_data) {
          last = target;
          active = items.indexOf(card);
        };
        card.onEnter = function (target, card_data) {
          last = target;
          if (typeof card_data.gender !== 'undefined') {
            Activity$1.push({
              url: element.url,
              title: Lang.translate('title_person'),
              component: 'actor',
              id: element.id,
              source: element.source || object.source
            });
          } else {
            Activity$1.push({
              url: card_data.url,
              component: 'full',
              id: element.id,
              method: card_data.name ? 'tv' : 'movie',
              card: element,
              source: element.source || object.source
            });
          }
        };
        body.appendChild(card.render(true));
        items.push(card);
        if (_this2.cardRender) _this2.cardRender(object, element, card);
        if (append) Controller.collectionAppend(card.render(true));
      });
    };
    this.limit = function () {
      var limit_view = 12;
      var lilit_collection = 36;
      var colection = items.slice(Math.max(0, active - limit_view), active + limit_view);
      items.forEach(function (item) {
        if (colection.indexOf(item) == -1) {
          item.render(true).classList.remove('layer--render');
        } else {
          item.render(true).classList.add('layer--render');
        }
      });
      Navigator.setCollection(items.slice(Math.max(0, active - lilit_collection), active + lilit_collection).map(function (c) {
        return c.render(true);
      }));
      Navigator.focused(last);
      Layer.visible(scroll.render(true));
    };
    this.build = function (data) {
      var _this3 = this;
      if (data.results.length) {
        total_pages = data.total_pages;
        body.classList.add('category-full');
        scroll.minus();
        scroll.onEnd = this.next.bind(this);
        scroll.onScroll = this.limit.bind(this);
        scroll.onWheel = function (step) {
          if (!Controller.own(_this3)) _this3.start();
          if (step > 0) Navigator.move('down');else Navigator.move('up');
        };
        this.append(data);
        scroll.append(body);
        html.appendChild(scroll.render(true));
        this.limit();
        this.activity.loader(false);
        this.activity.toggle();
      } else {
        this.empty();
      }
    };
    this.start = function () {
      var _this4 = this;
      Controller.add('content', {
        link: this,
        toggle: function toggle() {
          if (_this4.activity.canRefresh()) return false;
          Controller.collectionSet(scroll.render(true));
          Controller.collectionFocus(last || false, scroll.render(true));
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          if (_this4.onRight) {
            if (Navigator.canmove('right')) Navigator.move('right');else _this4.onRight();
          } else Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.refresh = function () {
      this.activity.needRefresh();
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function (js) {
      return js ? html : $(html);
    };
    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      html.remove();
      body.remove();
      items = [];
    };
  }

  function component$h(object) {
    var comp = new component$i(object);
    comp.create = function () {
      this.activity.loader(true);
      Api.list(object, this.build.bind(this), this.empty.bind(this));
    };
    return comp;
  }

  function component$g(object) {
    var comp = new Prisma.InteractionMain(object);
    comp.create = function () {
      this.activity.loader(true);
      var next = Api.category(object, this.build.bind(this), this.empty.bind(this));
      if (typeof next == 'function') this.next = next;
      return this.render();
    };
    return comp;
  }

  function create$7(data) {
    var html;
    var last;
    this.create = function () {
      html = Template.get('person_start', {
        name: data.name,
        birthday: Utils$2.parseTime(data.birthday).full,
        descr: Utils$2.substr(data.biography || '', 1020),
        img: data.profile_path ? Api.img(data.profile_path) : data.img || 'img/img_broken.svg',
        place: data.place_of_birth || ''
      });
      if (!data.birthday) html.find('.person-start__tag').remove();
      if (!data.place_of_birth) html.find('.person-start__place').remove();
      if (!data.biography) html.addClass('person-start--small');
    };
    this.toggle = function () {
      var _this = this;
      Controller.add('full_start', {
        toggle: function toggle() {
          Controller.collectionSet(_this.render());
          Controller.collectionFocus(last, _this.render());
        },
        update: function update() {},
        right: function right() {
          Navigator.move('right');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        gone: function gone() {},
        back: this.onBack
      });
      Controller.toggle('full_start');
    };
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      last = null;
      html.remove();
    };
  }

  var components = {
    start: create$7,
    line: create$l
  };
  function component$f(object) {
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      scroll_by_item: true
    });
    var items = [];
    var active = 0;
    var poster;
    this.create = function () {
      var _this = this;
      this.activity.loader(true);
      scroll.minus();
      Api.person(object, function (data) {
        _this.activity.loader(false);
        if (data.person) {
          poster = data.person.profile_path;
          _this.build('start', data.person);
          if (data.credits && data.credits.knownFor && data.credits.knownFor.length > 0) {
            for (var i = 0; i < data.credits.knownFor.length; i++) {
              var departament = data.credits.knownFor[i];
              var credits = departament.credits.map(function (a) {
                a.time_sort = new Date(a.first_air_date || a.release_date || '').getTime();
                return a;
              });
              credits.sort(function (a, b) {
                return b.time_sort - a.time_sort;
              });
              _this.build('line', {
                title: departament.name,
                noimage: true,
                results: credits
              });
            }
          }
          Layer.update(scroll.render(true));
          Layer.visible(scroll.render(true));
          _this.activity.toggle();
        } else {
          _this.empty();
        }
      }, this.empty.bind(this));
      return this.render();
    };
    this.empty = function () {
      var empty = new Empty();
      scroll.append(empty.render());
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.build = function (name, data) {
      var item = new components[name](data, {
        object: object,
        nomore: true
      });
      item.onDown = this.down;
      item.onUp = this.up;
      item.onBack = this.back;
      item.onToggle = function () {
        active = items.indexOf(item);
      };
      items.push(item);
      item.create();
      scroll.append(item.render());
    };
    this.down = function () {
      active++;
      active = Math.min(active, items.length - 1);
      scroll.update(items[active].render());
      items[active].toggle();
    };
    this.up = function () {
      active--;
      if (active < 0) {
        active = 0;
        Controller.toggle('head');
      } else {
        items[active].toggle();
        scroll.update(items[active].render());
      }
    };
    this.back = function () {
      Activity$1.backward();
    };
    this.start = function () {
      if (Activity$1.active().activity == this.activity && poster) Background.immediately(poster ? Api.img(poster, 'w200') : '');
      Controller.add('content', {
        toggle: function toggle() {
          if (items.length) {
            items[active].toggle();
          } else {
            Controller.collectionSet(scroll.render());
            Controller.collectionFocus(false, scroll.render());
          }
        },
        update: function update() {},
        left: function left() {
          Controller.toggle('menu');
        },
        up: function up() {
          Controller.toggle('head');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return scroll.render();
    };
    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      items = [];
    };
  }

  function component$e(object) {
    var comp = new component$i(object);
    comp.create = function () {
      this.activity.loader(true);
      Api.favorite(object, this.build.bind(this), this.empty.bind(this));
    };
    comp.nextPageReuest = function (object, resolve, reject) {
      Api.favorite(object, resolve.bind(this), reject.bind(this));
    };

    // Перегружаем метод build, чтобы добавить информацию о родителе в данные карточек
    var originalBuild = comp.build;
    comp.build = function (data) {
      // Для каждой карточки добавляем информацию, что она от компонента favorite
      if (data && data.results) {
        data.results.forEach(function (item) {
          if (item) {
            item.from_favorite = true;
            item.from_component = 'favorite';
            item.card_style = 'standard';
          }
        });
      } else if (Array.isArray(data)) {
        // Если это массив линий
        data.forEach(function (line) {
          if (line && line.results) {
            line.results.forEach(function (item) {
              if (item) {
                item.from_favorite = true;
                item.from_component = 'favorite';
                item.card_style = 'standard';
              }
            });
          }
        });
      }

      // Вызываем оригинальный метод
      return originalBuild.call(this, data);
    };
    if (object.type == 'history') {
      comp.cardRender = function (object, data, card) {
        card.onMenuShow = function (menu_list) {
          menu_list.push({
            title: Lang.translate('menu_history'),
            separator: true
          });
          menu_list.push({
            title: Lang.translate('fav_clear_title'),
            subtitle: Lang.translate('fav_clear_descr'),
            all: true
          });
          menu_list.push({
            title: Lang.translate('fav_clear_label_title'),
            subtitle: Lang.translate('fav_clear_label_descr'),
            label: true
          });
          menu_list.push({
            title: Lang.translate('fav_clear_time_title'),
            subtitle: Lang.translate('fav_clear_time_descr'),
            timecode: true
          });
        };
        card.onMenuSelect = function (action) {
          if (action.all) {
            Favorite.clear('history');
            Prisma.Activity.replace({});
          } else if (action.label) {
            Storage.set('online_view', []);
            Storage.set('torrents_view', []);
            Noty$1.show(Lang.translate('fav_label_cleared'));
          } else if (action.timecode) {
            Storage.set('file_view', {});
            Noty$1.show(Lang.translate('fav_time_cleared'));
          }
        };
      };
    }
    return comp;
  }

  function create$6() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var search = Template.get('search_box');
    var input = '';
    function destroy() {
      $('body').toggleClass('ambience--enable', false);
      keyboard.destroy();
      search.remove();
      search = null;
    }
    function back() {
      destroy();
      params.onBack();
    }
    function enter() {
      destroy();
      params.onSearch(input);
    }
    function change(text) {
      input = text;
      if (input) {
        search.find('.search-box__input').toggleClass('filled', true).html(input.replace(/\s/g, '&nbsp;'));
      } else {
        search.find('.search-box__input').toggleClass('filled', false).text(Lang.translate('search_input') + '...');
      }
    }
    if (Storage.field('keyboard_type') !== 'prisma') search.find('.search-box__input').hide();
    $('body').append(search);
    $('body').toggleClass('ambience--enable', true);
    var keyboard = new create$2({
      layout: 'clarify'
    });
    keyboard.create();
    keyboard.listener.follow('change', function (event) {
      change(event.value);
    });
    keyboard.listener.follow('focus', function (event) {
      search.toggleClass('search-box--focus', true);
    });
    keyboard.listener.follow('blur', function (event) {
      search.toggleClass('search-box--focus', false);
    });
    keyboard.listener.follow('back', back);
    keyboard.listener.follow('enter', enter);
    keyboard.value(params.input);
    change(params.input);
    keyboard.toggle();
  }

  function create$5() {
    var _this2 = this;
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var line = Template.get('filter').addClass('torrent-filter');
    var empty = $('<div class="empty__footer"><div class="simple-button selector">' + Lang.translate('filter_clarify_two') + '</div></div>');
    var data = {
      sort: [],
      filter: []
    };
    var similars = [];
    var buttons_scroll = new create$f({
      horizontal: true,
      nopadding: true
    });
    if (typeof params.search == 'string') line.find('.filter--search div').text(Utils$2.shortText(params.search, 20)).removeClass('hide');
    function selectSearch() {
      var _this = this;
      var search = [];
      var year = ((params.movie ? params.movie.first_air_date || params.movie.release_date : '0000') + '').slice(0, 4);
      var earlier = Storage.get('user_clarifys', '{}')[params.movie.id];
      search.push({
        title: Lang.translate('filter_set_name'),
        query: ''
      });
      if (earlier) {
        search.push({
          title: Lang.translate('search'),
          separator: true
        });
        earlier.map(function (a) {
          return a;
        }).reverse().forEach(function (ear) {
          search.push({
            title: ear,
            query: ear
          });
        });
      }
      if (params.movie.names && params.movie.names.length) {
        search.push({
          title: Lang.translate('filter_alt_names'),
          separator: true
        });
        params.movie.names.forEach(function (n) {
          search.push({
            title: n,
            query: n
          });
        });
      }
      if (params.movie.alternative_titles && params.movie.alternative_titles.titles && params.movie.alternative_titles.titles.length) {
        params.movie.alternative_titles.titles.forEach(function (a) {
          if (['us', Storage.field('language')].indexOf(a.iso_3166_1.toLowerCase()) >= 0) {
            if (!search.find(function (s) {
              return s.title == a.title;
            })) {
              search.push({
                title: a.title,
                query: a.title
              });
            }
          }
        });
      }
      search.push({
        title: Lang.translate('filter_combinations'),
        separator: true
      });
      if (similars.length) {
        similars.forEach(function (sim) {
          search.push({
            title: sim,
            query: sim
          });
        });
      } else {
        var combinations = [];
        if (params.search_one) {
          combinations.push(params.search_one);
          combinations.push(params.search_one + ' ' + year);
          if (params.search_two) {
            combinations.push(params.search_one + ' ' + params.search_two);
            combinations.push(params.search_one + ' ' + params.search_two + ' ' + year);
          }
        }
        if (params.search_two) {
          combinations.push(params.search_two);
          combinations.push(params.search_two + ' ' + year);
          if (params.search_one) {
            combinations.push(params.search_two + ' ' + params.search_one);
            combinations.push(params.search_two + ' ' + params.search_one + ' ' + year);
          }
        }
        combinations.forEach(function (word) {
          search.push({
            title: word,
            query: word
          });
        });
      }
      var selected;
      search.forEach(function (elem) {
        elem.selected = elem.query == params.search && !selected;
        if (elem.selected) selected = true;
      });
      Select.show({
        title: Lang.translate('filter_clarify'),
        items: search,
        onBack: this.onBack,
        onSelect: function onSelect(a) {
          if (!a.query) {
            new create$6({
              input: params.search,
              onSearch: function onSearch(new_query) {
                var earliers = Storage.get('user_clarifys', '{}');
                if (!earliers[params.movie.id]) earliers[params.movie.id] = [];
                if (earliers[params.movie.id].indexOf(new_query) == -1) {
                  earliers[params.movie.id].push(new_query);
                  Storage.set('user_clarifys', earliers);
                }
                _this.onSearch(new_query);
              },
              onBack: _this.onBack
            });
          } else {
            _this.onSearch(a.query);
          }
        }
      });
    }
    empty.on('hover:enter', selectSearch.bind(this));
    line.find('.filter--search').on('hover:enter', selectSearch.bind(this));
    line.find('.filter--sort').on('hover:enter', function () {
      _this2.show(Lang.translate('filter_sorted'), 'sort');
    });
    line.find('.filter--filter').on('hover:enter', function () {
      _this2.show(Lang.translate('filter_filtred'), 'filter');
    });
    buttons_scroll.append(line);
    this.addButtonBack = function () {
      if (params.movie && params.movie.id) {
        line.prepend(Template.get('explorer_button_back'));
        line.find('.filter--back').on('hover:enter', function () {
          if (Activity$1.all().length > 1) {
            Activity$1.back();
          } else {
            Activity$1.push({
              url: params.movie.url,
              component: 'full',
              id: params.movie.id,
              method: params.movie.name ? 'tv' : 'movie',
              card: params.movie,
              source: params.movie.source
            });
          }
        });
      }
    };
    this.show = function (title, type) {
      var _this3 = this;
      var where = data[type];
      Select.show({
        title: title,
        items: where,
        onBack: this.onBack,
        onSelect: function onSelect(a) {
          if (!a.noselect) _this3.selected(where, a);
          if (a.items) {
            Select.show({
              title: a.title,
              items: a.items,
              onBack: function onBack() {
                _this3.show(title, type);
              },
              onSelect: function onSelect(b) {
                if (!b) _this3.selected(a.items, b);
                _this3.onSelect(type, a, b);
                _this3.show(title, type);
              },
              onCheck: function onCheck(b) {
                _this3.onCheck(type, a, b);
              }
            });
          } else {
            _this3.onSelect(type, a);
          }
        }
      });
    };
    this.selected = function (items, a) {
      items.forEach(function (element) {
        element.selected = false;
      });
      a.selected = true;
    };
    this.render = function () {
      return buttons_scroll.render();
    };
    this.append = function (add) {
      html.find('.files__body').append(add);
    };
    this.empty = function () {
      return empty;
    };
    this.toggle = function () {
      line.find('.filter--sort').toggleClass('selector', data.sort.length ? true : false).toggleClass('hide', data.sort.length ? false : true);
      line.find('.filter--filter').toggleClass('selector', data.filter.length ? true : false).toggleClass('hide', data.filter.length ? false : true);
    };
    this.set = function (type, items) {
      data[type] = items;
      this.toggle();
    };
    this.get = function (type) {
      return data[type];
    };
    this.similar = function (sim) {
      similars = sim;
      return empty;
    };
    this.sort = function (items, by) {
      items.sort(function (c, b) {
        if (c[by] < b[by]) return 1;
        if (c[by] > b[by]) return -1;
        return 0;
      });
    };
    this.chosen = function (type, select) {
      line.find('.filter--' + type + ' > div').html(Utils$2.shortText(select.join(', '), 25)).toggleClass('hide', select.length ? false : true);
    };
    this.destroy = function () {
      empty.remove();
      line.remove();
      buttons_scroll.destroy();
      empty = null;
      line = null;
      data = null;
    };
  }

  var html$8 = $("<div class=\"helper\">\n    <div class=\"helper__body\"> \n        <div class=\"helper__ico\">\n            <svg fill=\"#000000\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" \n                width=\"800px\" height=\"800px\" viewBox=\"0 0 416.979 416.979\"\n                xml:space=\"preserve\">\n            <g>\n                <path d=\"M356.004,61.156c-81.37-81.47-213.377-81.551-294.848-0.182c-81.47,81.371-81.552,213.379-0.181,294.85\n                    c81.369,81.47,213.378,81.551,294.849,0.181C437.293,274.636,437.375,142.626,356.004,61.156z M237.6,340.786\n                    c0,3.217-2.607,5.822-5.822,5.822h-46.576c-3.215,0-5.822-2.605-5.822-5.822V167.885c0-3.217,2.607-5.822,5.822-5.822h46.576\n                    c3.215,0,5.822,2.604,5.822,5.822V340.786z M208.49,137.901c-18.618,0-33.766-15.146-33.766-33.765\n                    c0-18.617,15.147-33.766,33.766-33.766c18.619,0,33.766,15.148,33.766,33.766C242.256,122.755,227.107,137.901,208.49,137.901z\"/>\n            </g>\n            </svg>\n        </div>\n        <div class=\"helper__text\"></div>\n    </div>\n</div>");
  var body = html$8.find('.helper__text'),
    time;
  var memorys = {};
  var remember = 1000 * 60 * 60 * 14;
  function show$5(name, text, elem) {
    if (!Storage.field('helper')) return;
    var help = memorys[name];
    if (!help) {
      help = {
        time: 0,
        count: 0
      };
      if (_typeof(memorys) !== 'object') memorys = {}; //хз, вылазит ошибка, что в переменную true нельзя записать значение, откуда там true хз

      memorys[name] = help;
    }
    if (help.time + remember < Date.now() && help.count < 3) {
      help.time = Date.now();
      help.count++;
      Storage.set('helper', memorys);
      clearTimeout(time);
      time = setTimeout(function () {
        html$8.removeClass('helper--visible');
      }, 10000);
      body.html(text);
      html$8.addClass('helper--visible');
      if (elem) {
        var blink = $('<div class="helper-blink"></div>');
        elem.append(blink);
        setTimeout(function () {
          blink.remove();
        }, 3000);
      }
    }
  }
  function init$q() {
    memorys = Storage.cache('helper', 300, {});
    Settings.listener.follow('open', function (e) {
      if (e.name == 'more') {
        e.body.find('.helper--start-again').on('hover:enter', function () {
          memorys = {};
          Storage.set('helper', memorys);
          Noty$1.show(Lang.translate('helper_cleared'));
        });
      }
    });
    $('body').append(html$8);
  }
  var Helper = {
    show: show$5,
    init: init$q
  };

  var SERVER = {};
  var timers = {};
  var callback$1;
  var callback_back;
  var autostart_timer;
  var autostart_progress;
  var formats = ['asf', 'wmv', 'divx', 'avi', 'mp4', 'm4v', 'mov', '3gp', '3g2', 'mkv', 'trp', 'tp', 'mts', 'mpg', 'mpeg', 'dat', 'vob', 'rm', 'rmvb', 'm2ts', 'ts'];
  var formats_individual = ['vob', 'm2ts'];
  function start$4(element, movie) {
    SERVER.object = element;
    if (movie) SERVER.movie = movie;
    if (Platform.is('android') && !Storage.field('internal_torrclient')) {
      Android.openTorrent(SERVER);
      if (movie && movie.id) Favorite.add('history', movie, 100);
      if (callback$1) callback$1();
    } else if (Torserver.url()) {
      loading();
      connect();
    } else install();
  }
  function open$2(hash, movie) {
    SERVER.hash = hash;
    if (movie) SERVER.movie = movie;
    if (Platform.is('android') && !Storage.field('internal_torrclient')) {
      Android.playHash(SERVER);
      if (callback$1) callback$1();
    } else if (Torserver.url()) {
      loading();
      files();
    } else install();
  }
  function loading() {
    Modal.open({
      title: '',
      html: Template.get('modal_loading'),
      size: 'large',
      mask: true,
      onBack: function onBack() {
        Modal.close();
        close$3();
      }
    });
  }
  function connect() {
    Torserver.connected(function () {
      hash();
    }, function (echo) {
      Torserver.error();
    });
  }
  function hash() {
    Torserver.hash({
      title: SERVER.object.title,
      link: SERVER.object.MagnetUri || SERVER.object.Link,
      poster: SERVER.object.poster,
      data: {
        prisma: true,
        movie: SERVER.movie
      }
    }, function (json) {
      SERVER.hash = json.hash;
      files();
    }, function (echo) {
      //Torserver.error()

      var jac = Storage.field('parser_torrent_type') == 'jackett';
      var tpl = Template.get('torrent_nohash', {
        title: Lang.translate('title_error'),
        text: Lang.translate('torrent_parser_no_hash'),
        url: SERVER.object.MagnetUri || SERVER.object.Link,
        echo: echo
      });
      if (jac) tpl.find('.is--torlook').remove();else tpl.find('.is--jackett').remove();
      Modal.update(tpl);
    });
  }
  function files() {
    var repeat = 0;
    timers.files = setInterval(function () {
      repeat++;
      Torserver.files(SERVER.hash, function (json) {
        if (json.file_stats) {
          clearInterval(timers.files);
          show$4(json.file_stats);
        }
      });
      if (repeat >= 45) {
        Modal.update(Template.get('error', {
          title: Lang.translate('title_error'),
          text: Lang.translate('torrent_parser_timeout')
        }));
        Torserver.clear();
        Torserver.drop(SERVER.hash);
      }
    }, 2000);
  }
  function install() {
    Modal.open({
      title: '',
      html: Template.get('torrent_install', {}),
      size: 'large',
      onBack: function onBack() {
        Modal.close();
        Controller.toggle('content');
      }
    });
  }
  function show$4(files) {
    files.sort(function (a, b) {
      var an = a.path.replace(/\d+/g, function (m) {
        return m.length > 3 ? m : ('000' + m).substr(-4);
      });
      var bn = b.path.replace(/\d+/g, function (m) {
        return m.length > 3 ? m : ('000' + m).substr(-4);
      });
      return an.localeCompare(bn);
    });
    var active = Activity$1.active(),
      movie = active.movie || SERVER.movie || {};
    var plays = Torserver.clearFileName(files.filter(function (a) {
      var exe = a.path.split('.').pop().toLowerCase();
      return formats.indexOf(exe) >= 0;
    }));
    var seasons = [];
    plays.forEach(function (element) {
      var info = Torserver.parse({
        movie: movie,
        files: plays,
        filename: element.path_human,
        path: element.path
      });
      if (info.serial && info.season && seasons.indexOf(info.season) == -1) {
        seasons.push(info.season);
      }
    });
    if (seasons.length) {
      Api.seasons(movie, seasons, function (data) {
        list(plays, {
          movie: movie,
          seasons: data,
          files: files
        });
      });
    } else {
      list(plays, {
        movie: movie,
        files: files
      });
    }
  }
  function parseSubs(path, files) {
    var name = path.split('/').pop().split('.').slice(0, -1).join('.');
    var index = -1;
    var supportedFormats = subsrt.list();
    var subtitles = files.filter(function (a) {
      var _short = a.path.split('/').pop();
      var issub = supportedFormats.indexOf(a.path.split('.').pop().toLowerCase()) >= 0;
      return _short.indexOf(name) >= 0 && issub;
    }).map(function (a) {
      index++;
      var segments = a.path.split('/');
      segments.pop(); // drop filename
      var label = segments.slice(1).join(' - '); // drop initial folder and concat the rest

      return {
        label: label,
        url: Torserver.stream(a.path, SERVER.hash, a.id),
        index: index
      };
    });
    return subtitles.length ? subtitles : false;
  }
  function preload(data, run) {
    var need_preload = Torserver.ip() && data.url.indexOf(Torserver.ip()) > -1 && data.url.indexOf('&preload') > -1;
    if (need_preload) {
      var checkout;
      var network = new create$e();
      var first = true;
      Loading.start(function () {
        clearInterval(checkout);
        network.clear();
        Loading.stop();
      });
      var update = function update() {
        network.timeout(2000);
        network.silent(first ? data.url : data.url.replace('preload', 'stat'), function (res) {
          var pb = res.preloaded_bytes || 0,
            ps = res.preload_size || 0,
            sp = res.download_speed ? Utils$2.bytesToSize(res.download_speed * 8, true) : '0.0';
          var progress = Math.min(100, pb * 100 / ps);
          if (progress >= 95 || isNaN(progress)) {
            Loading.stop();
            clearInterval(checkout);
            run();
          } else {
            Loading.setText(Math.round(progress) + '%' + ' - ' + sp);
          }
        });
        first = false;
      };
      checkout = setInterval(update, 1000);
      update();
    } else run();
  }
  function list(items, params) {
    var html = $('<div class="torrent-files"></div>');
    var playlist = [];
    var scroll_to_element;
    var first_item;
    Prisma.Listener.send('torrent_file', {
      type: 'list_open',
      items: items
    });
    var folder = '';
    items.forEach(function (element, inx) {
      var exe = element.path.split('.').pop().toLowerCase();
      var info = Torserver.parse({
        movie: params.movie,
        files: items,
        filename: element.path_human,
        path: element.path,
        is_file: formats_individual.indexOf(exe) >= 0
      });
      var view = Timeline$1.view(info.hash);
      var item;
      Arrays.extend(element, {
        season: info.season,
        episode: info.episode,
        title: element.path_human,
        first_title: params.movie.name || params.movie.title,
        size: Utils$2.bytesToSize(element.length),
        url: Torserver.stream(element.path, SERVER.hash, element.id),
        torrent_hash: SERVER.hash,
        ffprobe: SERVER.object && SERVER.object.ffprobe ? SERVER.object.ffprobe : false,
        timeline: view,
        air_date: '--',
        img: './img/img_broken.svg',
        exe: exe
      });
      if (params.seasons) {
        var episodes = params.seasons[info.season];
        element.title = (info.episode ? info.episode + ' / ' : '') + element.path_human;
        element.fname = element.title;
        if (episodes) {
          var episode = episodes.episodes.filter(function (a) {
            return a.episode_number == info.episode;
          })[0];
          if (episode) {
            element.title = info.episode + ' / ' + episode.name;
            element.air_date = Utils$2.parseTime(episode.air_date).full;
            element.fname = episode.name;
            if (episode.still_path) element.img = Api.img(episode.still_path);else if (episode.img) element.img = episode.img;
          }
        }
        if (info.episode) {
          item = Template.get('torrent_file_serial', element);
          item.find('.torrent-serial__content').append(Timeline$1.render(view));
        } else {
          item = Template.get('torrent_file', element);
          item.append(Timeline$1.render(view));
        }
      } else if (items.length == 1 && params.movie && !params.movie.name) {
        element.fname = params.movie.title || element.title;
        if (params.movie.backdrop_path) element.img = Api.img(params.movie.backdrop_path);
        item = Template.get('torrent_file_serial', element);
        item.find('.torrent-serial__line').empty().text(params.movie.tagline || '');
        item.find('.torrent-serial__episode').remove();
        item.find('.torrent-serial__content').append(Timeline$1.render(view));
      } else {
        item = Template.get('torrent_file', element);
        item.append(Timeline$1.render(view));
        if (params.movie.title) element.title = params.movie.title;
      }
      item[0].visibility = 'hidden';
      if (view.percent > 0) scroll_to_element = item;
      element.subtitles = parseSubs(element.path, params.files);
      element.title = (element.fname || element.title).replace(/<[^>]*>?/gm, '');
      playlist.push(element);
      item.on('hover:enter', function () {
        stopAutostart();

        //если это андроид, но не андроид, то нефиг смотреть
        if (navigator.userAgent.toLowerCase().indexOf('android') >= 0 && !Platform.is('android')) return Platform.install('apk');
        if (params.movie.id) Favorite.add('history', params.movie, 100);
        if ((Platform.is('android') || Platform.is('apple_tv')) && playlist.length > 1) {
          var trim_playlist = [];
          playlist.forEach(function (elem) {
            trim_playlist.push({
              title: elem.title,
              url: elem.url,
              timeline: elem.timeline
            });
          });
          element.playlist = trim_playlist;
        }
        preload(element, function () {
          Player.play(element);
          Player.callback(function () {
            Controller.toggle('modal');
          });
          Player.playlist(playlist);
          Player.stat(element.url);
          if (callback$1) {
            callback$1();
            callback$1 = false;
          }
          Prisma.Listener.send('torrent_file', {
            type: 'onenter',
            element: element,
            item: item,
            items: items
          });
        });
      }).on('hover:long', function () {
        stopAutostart();
        var enabled = Controller.enabled().name;
        var menu = [{
          title: Lang.translate('time_reset'),
          timeclear: true
        }];
        if (Platform.is('webos')) {
          menu.push({
            title: Lang.translate('player_lauch') + ' - WebOS',
            player: 'webos'
          });
        }
        if (Platform.is('android')) {
          menu.push({
            title: Lang.translate('player_lauch') + ' - Android',
            player: 'android'
          });
        }
        menu.push({
          title: Lang.translate('player_lauch') + ' - Prisma',
          player: 'prisma'
        });
        if (!Platform.tv()) {
          menu.push({
            title: Lang.translate('copy_link'),
            link: true
          });
        }
        Prisma.Listener.send('torrent_file', {
          type: 'onlong',
          element: element,
          item: item,
          menu: menu,
          items: items
        });
        Select.show({
          title: Lang.translate('title_action'),
          items: menu,
          onBack: function onBack() {
            Controller.toggle(enabled);
          },
          onSelect: function onSelect(a) {
            if (a.timeclear) {
              view.percent = 0;
              view.time = 0;
              view.duration = 0;
              element.timeline = view;
              Timeline$1.update(view);
            }
            if (a.link) {
              Utils$2.copyTextToClipboard(element.url.replace('&preload', '&play'), function () {
                Noty$1.show(Lang.translate('copy_secuses'));
              }, function () {
                Noty$1.show(Lang.translate('copy_error'));
              });
            }
            Controller.toggle(enabled);
            if (a.player) {
              Player.runas(a.player);
              item.trigger('hover:enter');
            }
          }
        });
      }).on('hover:focus', function () {
        Prisma.Listener.send('torrent_file', {
          type: 'onfocus',
          element: element,
          item: item,
          items: items
        });
        Helper.show('torrents_view', Lang.translate('helper_torrents_view'), item);
      }).on('visible', function () {
        var img = item.find('img');
        img[0].onload = function () {
          img.addClass('loaded');
        };
        img[0].src = img.attr('data-src');
      });
      if (element.folder_name && element.folder_name !== folder) {
        html.append($('<div class="torrnet-folder-name' + (folder ? '' : ' selector') + '">' + element.folder_name + '</div>'));
        folder = element.folder_name;
      }
      html.append(item);
      if (!first_item) first_item = item;
      Prisma.Listener.send('torrent_file', {
        type: 'render',
        element: element,
        item: item,
        items: items
      });
    });
    if (items.length == 0) html = Template.get('error', {
      title: Lang.translate('empty_title'),
      text: Lang.translate('torrent_parser_nofiles')
    });else Modal.title(Lang.translate('title_files'));
    if (playlist.length == 1) autostart(first_item);
    Modal.update(html);
    if (scroll_to_element) Controller.collectionFocus(scroll_to_element, Modal.scroll().render());
  }
  function autostart(item) {
    var tim = Date.now();
    var div = $('<div class="torrent-serial__progress"></div>');
    autostart_timer = setInterval(function () {
      var dif = (Date.now() - tim) / 1000;
      div.css('height', Math.round(dif / 10 * 100) + '%');
      if (dif > 10) {
        stopAutostart();
        item.trigger('hover:enter');
      }
    }, 10);
    Keypad.listener.follow('keydown', listenKeydown);
    autostart_progress = div;
    item.prepend(div);
  }
  function listenKeydown() {
    stopAutostart();
    Keypad.listener.remove('keydown', listenKeydown);
  }
  function stopAutostart() {
    clearInterval(autostart_timer);
    if (autostart_progress) autostart_progress.remove();
    autostart_progress = null;
  }
  function opened(call) {
    callback$1 = call;
  }
  function back$4(call) {
    callback_back = call;
  }
  function close$3() {
    Torserver.drop(SERVER.hash);
    Torserver.clear();
    clearInterval(timers.files);
    if (callback_back) {
      callback_back();
    } else {
      Controller.toggle('content');
    }
    callback_back = false;
    SERVER = {};
    clearInterval(autostart_timer);
    Prisma.Listener.send('torrent_file', {
      type: 'list_close'
    });
  }
  var Torrent = {
    start: start$4,
    open: open$2,
    opened: opened,
    back: back$4
  };

  var url;
  var network$4 = new create$e();
  function init$p() {
    Storage.set('parser_torrent_type', Storage.get('parser_torrent_type') || 'jackett');
    var source = {
      title: Lang.translate('title_parser'),
      search: function search(params, oncomplite) {
        get$3({
          search: decodeURIComponent(params.query),
          other: true,
          from_search: true
        }, function (json) {
          json.title = Lang.translate('title_parser');
          json.results = json.Results.slice(0, 20);
          json.Results = null;
          json.results.forEach(function (element) {
            element.Title = Utils$2.shortText(element.Title, 110);
          });
          oncomplite(json.results.length ? [json] : []);
        }, function () {
          oncomplite([]);
        });
      },
      onCancel: function onCancel() {
        network$4.clear();
      },
      params: {
        lazy: true,
        align_left: true,
        isparser: true,
        card_events: {
          onMenu: function onMenu() {}
        }
      },
      onMore: function onMore(params, close) {
        close();
        Activity$1.push({
          url: '',
          title: Lang.translate('title_torrents'),
          component: 'torrents',
          search: params.query,
          from_search: true,
          noinfo: true,
          movie: {
            title: params.query,
            original_title: '',
            img: './img/img_broken.svg',
            genres: []
          },
          page: 1
        });
      },
      onSelect: function onSelect(params, close) {
        Torrent.start(params.element, {
          title: params.element.Title
        });
        Torrent.back(params.line.toggle.bind(params.line));
      }
    };
    function addSource() {
      var reg = Platform.is('android') ? true : Torserver.url();
      if (Storage.field('parse_in_search') && reg) Search.addSource(source);
    }
    Storage.listener.follow('change', function (e) {
      if (e.name == 'parse_in_search' || e.name == 'torrserver_url' || e.name == 'torrserver_url_two' || e.name == 'torrserver_use_link') {
        Search.removeSource(source);
        addSource();
      }
    });
    addSource();
  }
  function get$3() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    function complite(data) {
      oncomplite(data);
    }
    function error(e) {
      onerror(e);
    }
    if (Storage.field('parser_torrent_type') == 'jackett') {
      if (Storage.field('jackett_url')) {
        url = Utils$2.checkEmptyUrl(Storage.field('jackett_url'));
        var ignore = false; //params.from_search && !url.match(/\d+\.\d+\.\d+/g)

        if (ignore) error('');else {
          jackett(params, complite, error);
        }
      } else {
        error(Lang.translate('torrent_parser_set_link') + ': Jackett');
      }
    } else if (Storage.field('parser_torrent_type') == 'prowlarr') {
      if (Storage.field('prowlarr_url')) {
        url = Utils$2.checkEmptyUrl(Storage.field('prowlarr_url'));
        prowlarr(params, complite, error);
      } else {
        error(Lang.translate('torrent_parser_set_link') + ': Prowlarr');
      }
    } else if (Storage.field('parser_torrent_type') == 'torrserver') {
      if (Storage.field(Storage.field('torrserver_use_link') == 'two' ? 'torrserver_url_two' : 'torrserver_url')) {
        url = Utils$2.checkEmptyUrl(Storage.field(Storage.field('torrserver_use_link') == 'two' ? 'torrserver_url_two' : 'torrserver_url'));
        torrserver(params, complite, error);
      } else {
        error(Lang.translate('torrent_parser_set_link') + ': TorrServer');
      }
    }
  }
  function viewed(hash) {
    var view = Storage.cache('torrents_view', 5000, []);
    return view.indexOf(hash) > -1;
  }
  function jackett() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    network$4.timeout(1000 * Storage.field('parse_timeout'));
    var u = url + '/api/v2.0/indexers/' + (Storage.field('jackett_interview') == 'healthy' ? 'status:healthy' : 'all') + '/results?apikey=' + Storage.field('jackett_key') + '&Query=' + encodeURIComponent(params.search);
    if (!params.from_search) {
      var genres = params.movie.genres.map(function (a) {
        return a.name;
      });
      if (!params.clarification) {
        u = Utils$2.addUrlComponent(u, 'title=' + encodeURIComponent(params.movie.title));
        u = Utils$2.addUrlComponent(u, 'title_original=' + encodeURIComponent(params.movie.original_title));
      }
      u = Utils$2.addUrlComponent(u, 'year=' + encodeURIComponent(((params.movie.release_date || params.movie.first_air_date || '0000') + '').slice(0, 4)));
      u = Utils$2.addUrlComponent(u, 'is_serial=' + (params.movie.original_name ? '2' : params.other ? '0' : '1'));
      u = Utils$2.addUrlComponent(u, 'genres=' + encodeURIComponent(genres.join(',')));
      u = Utils$2.addUrlComponent(u, 'Category[]=' + (params.movie.number_of_seasons > 0 ? 5000 : 2000) + (params.movie.original_language == 'ja' ? ',5070' : ''));
    }
    network$4["native"](u, function (json) {
      if (json.Results) {
        json.Results.forEach(function (element) {
          element.PublisTime = Utils$2.strToTime(element.PublishDate);
          element.hash = Utils$2.hash(element.Title);
          element.viewed = viewed(element.hash);
          element.size = Utils$2.bytesToSize(element.Size);
        });
        oncomplite(json);
      } else onerror(Lang.translate('torrent_parser_no_responce') + ' (' + url + ') ' + Lang.translate('torrent_parser_settings_info'));
    }, function (a, c) {
      onerror(Lang.translate('torrent_parser_no_responce') + ' (' + url + ')' + Lang.translate('torrent_parser_settings_info'));
    });
  }

  // доки https://wiki.servarr.com/en/prowlarr/search#search-feed
  function prowlarr() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    var q = [];
    q.push({
      name: 'apikey',
      value: Storage.field('prowlarr_key')
    });
    q.push({
      name: 'query',
      value: params.search
    });
    if (!params.from_search) {
      var isSerial = !!params.movie.original_name;
      if (params.movie.number_of_seasons > 0) {
        q.push({
          name: 'categories',
          value: '5000'
        });
      }
      if (params.movie.original_language == 'ja') {
        q.push({
          name: 'categories',
          value: '5070'
        });
      }
      q.push({
        name: 'type',
        value: isSerial ? 'tvsearch' : 'search'
      });
    }
    var u = Utils$2.buildUrl(url, '/api/v1/search', q);
    network$4.timeout(1000 * Storage.field('parse_timeout'));
    network$4["native"](u, function (json) {
      if (Array.isArray(json)) {
        oncomplite({
          Results: json.filter(function (e) {
            return e.protocol === 'torrent';
          }).map(function (e) {
            var hash = Utils$2.hash(e.title);
            return {
              Title: e.title,
              Tracker: e.indexer,
              size: Utils$2.bytesToSize(e.size),
              PublishDate: Utils$2.strToTime(e.publishDate),
              Seeders: parseInt(e.seeders),
              Peers: parseInt(e.leechers),
              MagnetUri: e.downloadUrl,
              viewed: viewed(hash),
              hash: hash
            };
          })
        });
      } else {
        onerror(Lang.translate('torrent_parser_request_error') + ' (' + JSON.stringify(json) + ')');
      }
    }, function () {
      onerror(Lang.translate('torrent_parser_no_responce') + ' (' + url + ')' + Lang.translate('torrent_parser_settings_info'));
    });
  }
  function torrserver() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oncomplite = arguments.length > 1 ? arguments[1] : undefined;
    var onerror = arguments.length > 2 ? arguments[2] : undefined;
    network$4.timeout(1000 * Storage.field('parse_timeout'));
    var u = Utils$2.buildUrl(url, '/search/', [{
      name: 'query',
      value: params.search
    }]);
    network$4["native"](u, function (json) {
      if (Array.isArray(json)) {
        oncomplite({
          Results: json.map(function (e) {
            var hash = Utils$2.hash(e.Title);
            return {
              Title: e.Title,
              Tracker: e.Tracker,
              size: e.Size,
              PublishDate: Utils$2.strToTime(e.CreateDate),
              Seeders: parseInt(e.Seed),
              Peers: parseInt(e.Peer),
              MagnetUri: e.Magnet,
              viewed: viewed(hash),
              CategoryDesc: e.Categories,
              bitrate: '-',
              hash: hash
            };
          })
        });
      } else onerror(Lang.translate('torrent_parser_request_error') + ' (' + JSON.stringify(json) + ')');
    }, function (a, c) {
      onerror(Lang.translate('torrent_parser_no_responce') + ' (' + url + ')');
    });
  }
  function clear$3() {
    network$4.clear();
  }
  var Parser = {
    init: init$p,
    get: get$3,
    jackett: jackett,
    clear: clear$3
  };

  var html$7 = null;

  /**
   * Показать подсказку по управлению
   * @param {Object} params - Параметры
   * @param {string} params.name - Имя для кеша
   * @param {string} params.text - Текст подсказки
   * @param {string} params.button - Кнопка для подсветки (ok, up, down, left, right)
   * @param {number} params.interval - Интервал показа в минутах (по умолчанию 7 дней)
   * @return {void}
   */
  function show$3() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (html$7 || Platform.screen('mobile')) return;
    Arrays.extend(params, {
      name: 'none',
      text: Lang.translate('remote_helper_long'),
      button: 'ok',
      interval: 60 * 24 * 7 // week
    });
    var cache_name = 'remote_helper_' + params.name;
    Cache.getDataAnyCase('other', cache_name, params.interval).then(function (cached_time) {
      if (cached_time) return;
      html$7 = Template.get('remote_helper', params);
      html$7.addClass('highlight--' + params.button);
      $('body').append(html$7);
      setTimeout(function () {
        html$7.addClass('active');
        setTimeout(function () {
          html$7.removeClass('active');
          setTimeout(function () {
            html$7.remove();
            html$7 = null;
          }, 500);
        }, 10000);
      }, 10);
      Cache.rewriteData('other', cache_name, Date.now());
    });
  }
  var RemoteHelper = {
    show: show$3
  };

  function Explorer() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var html = Template.get('explorer', {});
    var scroll = new create$f({
      mask: true,
      over: true
    });
    var card = html.find('.explorer__card').clone();
    var backdrop_timer = null;
    var backdrops = [];
    var current_backdrop_index = 0;
    var qr_timer = null;
    html.find('.explorer__left').empty().append(scroll.render());
    scroll.append(card);
    scroll.minus();
    Arrays.extend(params, {
      movie: {
        title: '',
        original_title: '',
        img: './img/img_broken.svg',
        genres: []
      }
    });

    // Инициализируем таймер для QR-блока
    var initQrTimer = function initQrTimer() {
      var qrBlock = html.find('.explorer-card__qr-block--top');
      if (qrBlock.length && !params.noqr && !params.noinfo) {
        // Активируем таймер
        setTimeout(function () {
          qrBlock.addClass('timer-active');
        }, 300);

        // Запускаем таймер на скрытие
        qr_timer = setTimeout(function () {
          qrBlock.addClass('hide-animation');

          // Полностью удаляем элемент после окончания анимации
          setTimeout(function () {
            if (qrBlock.length && qrBlock.parent().length) {
              qrBlock.remove();
              // Принудительно обновляем layout
              html.find('.explorer__files-head').trigger('resize');
            }
          }, 500);
        }, 10000);

        // Добавляем возможность восстановить блок при наведении мыши
        qrBlock.on('mouseenter', function () {
          if (qr_timer) {
            clearTimeout(qr_timer);
            qr_timer = null;
          }
          qrBlock.removeClass('hide-animation timer-active');
        }).on('mouseleave', function () {
          if (!qrBlock.hasClass('hide-animation')) {
            qrBlock.addClass('timer-active');
            qr_timer = setTimeout(function () {
              qrBlock.addClass('hide-animation');

              // Полностью удаляем элемент после окончания анимации
              setTimeout(function () {
                if (qrBlock.length && qrBlock.parent().length) {
                  qrBlock.remove();
                  // Принудительно обновляем layout
                  html.find('.explorer__files-head').trigger('resize');
                }
              }, 500);
            }, 10000);
          }
        });
      }
    };
    if (params.noinfo || params.noqr) {
      html.find('.explorer-card__qr-block').remove();
    } else {
      // Запускаем таймер после рендеринга страницы
      setTimeout(initQrTimer, 1000);
    }
    if (params.movie.id) {
      html.find('.selector').on('hover:enter', function () {
        if (Activity$1.all().length > 1) {
          Activity$1.back();
        } else {
          Activity$1.push({
            url: params.movie.url,
            component: 'full',
            id: params.movie.id,
            method: params.movie.name ? 'tv' : 'movie',
            card: params.movie,
            source: params.movie.source
          });
        }
      });
    } else {
      html.find('.selector').removeClass('selector');
    }
    var year = ((params.movie.release_date || params.movie.first_air_date || '0000') + '').slice(0, 4);
    var pg = Api.sources.tmdb.parsePG(params.movie);
    var countries = Api.sources.tmdb.parseCountries(params.movie);
    var img = html.find('.explorer-card__head-img > img')[0];
    var rate = parseFloat((params.movie.vote_average || 0) + '');
    var title = params.movie.title || params.movie.name || '';
    var genres = (params.movie.genres || [{
      name: ''
    }]).slice(0, 3).map(function (a) {
      return Utils$2.capitalizeFirstLetter(a.name);
    });
    var loadBackdrops = function loadBackdrops() {
      if (params.movie && params.movie.id) {
        var method = params.movie.name ? 'tv' : 'movie';
        Api.sources.tmdb.get("".concat(method, "/").concat(params.movie.id, "/images"), {
          filter: {
            include_image_language: 'null'
          }
        }, function (result) {
          if (result && result.backdrops) {
            backdrops = result.backdrops.map(function (item) {
              return item.file_path;
            }).filter(Boolean);
            if (params.movie.backdrop_path && !backdrops.includes(params.movie.backdrop_path)) {
              backdrops.unshift(params.movie.backdrop_path);
            }

            // Перемешиваем массив для случайного порядка показа
            backdrops = backdrops.sort(function () {
              return Math.random() - 0.5;
            });

            // console.log('Available backdrops:', backdrops)

            if (backdrops.length > 1) {
              backdrop_timer = setInterval(updateBackdrop, 10000);
            }
          }
        }, function () {
          console.log('Failed to load backdrops');
        });
      }
    };
    var updateBackdrop = function updateBackdrop() {
      if (backdrops.length > 0) {
        var imgNew = new Image();
        imgNew.onload = function () {
          img.src = imgNew.src;
        };
        imgNew.src = Prisma.TMDB.image('t/p/w780' + backdrops[current_backdrop_index]) + '?t=' + new Date().getTime();
        current_backdrop_index = (current_backdrop_index + 1) % backdrops.length;
      } else if (params.movie.backdrop_path) {
        img.src = Prisma.TMDB.image('t/p/w780' + params.movie.backdrop_path);
      } else {
        img.src = params.movie.img;
      }
    };
    img.onerror = function (e) {
      img.src = './img/img_broken.svg';
    };

    // Первоначальная загрузка бэкдропа
    if (params.movie.backdrop_path) {
      img.src = Prisma.TMDB.image('t/p/w780' + params.movie.backdrop_path);
    } else {
      img.src = params.movie.img;
    }
    if (params.movie.id) {
      loadBackdrops();
    }
    html.find('.explorer-card__head-create').text(year + (countries.length ? ' - ' + countries[0] : '')).toggleClass('hide', Boolean(year == '0000'));
    html.find('.explorer-card__head-rate').toggleClass('hide', !Boolean(rate > 0)).find('span').text(rate.toFixed(1));
    html.find('.explorer-card__title').text(title).toggleClass('small', Boolean(title.length > 50));
    html.find('.explorer-card__descr').text(params.movie.overview || '');
    html.find('.explorer-card__genres').text(genres.join(', '));
    if (pg) html.find('.explorer-card__head-body').append('<div class="explorer-card__head-age">' + pg + '</div>');
    if (params.noinfo) html.addClass('explorer--fullsize');
    this.appendFiles = function (element) {
      html.find('.explorer__files-body').append(element);
    };
    this.appendHead = function (element) {
      html.find('.explorer__files-head').append(element);
    };
    this.render = function () {
      return html;
    };
    this.clearFiles = function () {
      html.find('.explorer__files-body').empty();
    };
    this.clearHead = function () {
      html.find('.explorer__files-head').empty();
    };
    this.toggle = function () {
      Controller.add('explorer', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render(true));
          Controller.collectionFocus(false, scroll.render(true));
        },
        left: function left() {
          Controller.toggle('menu');
        },
        up: function up() {
          if (scroll.position() == 0) Controller.toggle('head');else if (scroll.position() > -170) {
            scroll.wheel(scroll.position());
            Controller.toggle('explorer');
          } else scroll.wheel(-150);
        },
        right: function right() {
          Controller.toggle('content');
        },
        down: function down() {
          Controller.clear();
          scroll.wheel(150);
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('explorer');
    };
    this.destroy = function () {
      if (backdrop_timer) {
        clearInterval(backdrop_timer);
        backdrop_timer = null;
      }
      if (qr_timer) {
        clearTimeout(qr_timer);
        qr_timer = null;
      }
      backdrops = [];
      html.remove();
      img.onerror = function () {};
      img.src = '';
    };
  }

  function component$d(object) {
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true
    });
    var files = new Explorer(object);
    var filter;
    var results = [];
    var filtred = [];
    var total_pages = 1;
    var last;
    var initialized;
    var filter_items = {
      quality: [Lang.translate('torrent_parser_any_one'), '4k', '1080p', '720p'],
      hdr: [Lang.translate('torrent_parser_no_choice'), Lang.translate('torrent_parser_yes'), Lang.translate('torrent_parser_no')],
      dv: [Lang.translate('torrent_parser_no_choice'), 'Dolby Vision', 'Dolby Vision TV', Lang.translate('torrent_parser_no')],
      imax: [Lang.translate('torrent_parser_no_choice'), Lang.translate('torrent_parser_yes'), Lang.translate('torrent_parser_no')],
      sub: [Lang.translate('torrent_parser_no_choice'), Lang.translate('torrent_parser_yes'), Lang.translate('torrent_parser_no')],
      voice: [],
      tracker: [Lang.translate('torrent_parser_any_two')],
      year: [Lang.translate('torrent_parser_any_two')],
      lang: [Lang.translate('torrent_parser_any_two')]
    };
    var filter_translate = {
      quality: Lang.translate('torrent_parser_quality'),
      hdr: 'HDR',
      dv: 'Dolby Vision',
      imax: 'IMAX',
      sub: Lang.translate('torrent_parser_subs'),
      voice: Lang.translate('torrent_parser_voice'),
      tracker: Lang.translate('torrent_parser_tracker'),
      year: Lang.translate('torrent_parser_year'),
      season: Lang.translate('torrent_parser_season'),
      lang: Lang.translate('title_language_short')
    };
    var filter_multiple = ['quality', 'voice', 'tracker', 'season', 'lang'];
    var sort_translate = {
      Seeders: Lang.translate('torrent_parser_sort_by_seeders'),
      Size: Lang.translate('torrent_parser_sort_by_size'),
      Title: Lang.translate('torrent_parser_sort_by_name'),
      Tracker: Lang.translate('torrent_parser_sort_by_tracker'),
      PublisTime: Lang.translate('torrent_parser_sort_by_date'),
      viewed: Lang.translate('torrent_parser_sort_by_viewed')
    };
    var i = 20,
      y = new Date().getFullYear();
    while (i--) {
      filter_items.year.push(y - (19 - i) + '');
    }
    var viewed = Storage.cache('torrents_view', 5000, []);
    var finded_seasons = [];
    var finded_seasons_full = [];
    var voices = ["Laci", "Kerob", "LE-Production", "Parovoz Production", "Paradox", "Omskbird", "LostFilm", "Причудики", "BaibaKo", "NewStudio", "AlexFilm", "FocusStudio", "Gears Media", "Jaskier", "ViruseProject", "Кубик в Кубе", "IdeaFilm", "Sunshine Studio", "Ozz.tv", "Hamster Studio", "Сербин", "To4ka", "Кравец", "Victory-Films", "SNK-TV", "GladiolusTV", "Jetvis Studio", "ApofysTeam", "ColdFilm", "Agatha Studdio", "KinoView", "Jimmy J.", "Shadow Dub Project", "Amedia", "Red Media", "Selena International", "Гоблин", "Universal Russia", "Kiitos", "Paramount Comedy", "Кураж-Бамбей", "Студия Пиратского Дубляжа", "Чадов", "Карповский", "RecentFilms", "Первый канал", "Alternative Production", "NEON Studio", "Колобок", "Дольский", "Синема УС", "Гаврилов", "Живов", "SDI Media", "Алексеев", "GreenРай Studio", "Михалев", "Есарев", "Визгунов", "Либергал", "Кузнецов", "Санаев", "ДТВ", "Дохалов", "Sunshine Studio", "Горчаков", "LevshaFilm", "CasStudio", "Володарский", "ColdFilm", "Шварко", "Карцев", "ETV+", "ВГТРК", "Gravi-TV", "1001cinema", "Zone Vision Studio", "Хихикающий доктор", "Murzilka", "turok1990", "FOX", "STEPonee", "Elrom", "Колобок", "HighHopes", "SoftBox", "GreenРай Studio", "NovaFilm", "Четыре в квадрате", "Greb&Creative", "MUZOBOZ", "ZM-Show", "RecentFilms", "Kerems13", "Hamster Studio", "New Dream Media", "Игмар", "Котов", "DeadLine Studio", "Jetvis Studio", "РенТВ", "Андрей Питерский", "Fox Life", "Рыбин", "Trdlo.studio", "Studio Victory Аsia", "Ozeon", "НТВ", "CP Digital", "AniLibria", "STEPonee", "Levelin", "FanStudio", "Cmert", "Интерфильм", "SunshineStudio", "Kulzvuk Studio", "Кашкин", "Вартан Дохалов", "Немахов", "Sedorelli", "СТС", "Яроцкий", "ICG", "ТВЦ", "Штейн", "AzOnFilm", "SorzTeam", "Гаевский", "Мудров", "Воробьев Сергей", "Студия Райдо", "DeeAFilm Studio", "zamez", "ViruseProject", "Иванов", "STEPonee", "РенТВ", "СВ-Дубль", "BadBajo", "Комедия ТВ", "Мастер Тэйп", "5-й канал СПб", "SDI Media", "Гланц", "Ох! Студия", "СВ-Кадр", "2x2", "Котова", "Позитив", "RusFilm", "Назаров", "XDUB Dorama", "Реальный перевод", "Kansai", "Sound-Group", "Николай Дроздов", "ZEE TV", "Ozz.tv", "MTV", "Сыендук", "GoldTeam", "Белов", "Dream Records", "Яковлев", "Vano", "SilverSnow", "Lord32x", "Filiza Studio", "Sony Sci-Fi", "Flux-Team", "NewStation", "XDUB Dorama", "Hamster Studio", "Dream Records", "DexterTV", "ColdFilm", "Good People", "RusFilm", "Levelin", "AniDUB", "SHIZA Project", "AniLibria.TV", "StudioBand", "AniMedia", "Kansai", "Onibaku", "JWA Project", "MC Entertainment", "Oni", "Jade", "Ancord", "ANIvoice", "Nika Lenina", "Bars MacAdams", "JAM", "Anika", "Berial", "Kobayashi", "Cuba77", "RiZZ_fisher", "OSLIKt", "Lupin", "Ryc99", "Nazel & Freya", "Trina_D", "JeFerSon", "Vulpes Vulpes", "Hamster", "KinoGolos", "Fox Crime", "Денис Шадинский", "AniFilm", "Rain Death", "LostFilm", "New Records", "Ancord", "Первый ТВЧ", "RG.Paravozik", "Profix Media", "Tycoon", "RealFake", "HDrezka", "Jimmy J.", "AlexFilm", "Discovery", "Viasat History", "AniMedia", "JAM", "HiWayGrope", "Ancord", "СВ-Дубль", "Tycoon", "SHIZA Project", "GREEN TEA", "STEPonee", "AlphaProject", "AnimeReactor", "Animegroup", "Shachiburi", "Persona99", "3df voice", "CactusTeam", "AniMaunt", "AniMedia", "AnimeReactor", "ShinkaDan", "Jaskier", "ShowJet", "RAIM", "RusFilm", "Victory-Films", "АрхиТеатр", "Project Web Mania", "ko136", "КураСгречей", "AMS", "СВ-Студия", "Храм Дорам ТВ", "TurkStar", "Медведев", "Рябов", "BukeDub", "FilmGate", "FilmsClub", "Sony Turbo", "ТВЦ", "AXN Sci-Fi", "NovaFilm", "DIVA Universal", "Курдов", "Неоклассика", "fiendover", "SomeWax", "Логинофф", "Cartoon Network", "Sony Turbo", "Loginoff", "CrezaStudio", "Воротилин", "LakeFilms", "Andy", "CP Digital", "XDUB Dorama + Колобок", "SDI Media", "KosharaSerials", "Екатеринбург Арт", "Julia Prosenuk", "АРК-ТВ Studio", "Т.О Друзей", "Anifilm", "Animedub", "AlphaProject", "Paramount Channel", "Кириллица", "AniPLague", "Видеосервис", "JoyStudio", "HighHopes", "TVShows", "AniFilm", "GostFilm", "West Video", "Формат AB", "Film Prestige", "West Video", "Екатеринбург Арт", "SovetRomantica", "РуФилмс", "AveBrasil", "Greb&Creative", "BTI Studios", "Пифагор", "Eurochannel", "NewStudio", "Кармен Видео", "Кошкин", "Кравец", "Rainbow World", "Воротилин", "Варус-Видео", "ClubFATE", "HiWay Grope", "Banyan Studio", "Mallorn Studio", "Asian Miracle Group", "Эй Би Видео", "AniStar", "Korean Craze", "LakeFilms", "Невафильм", "Hallmark", "Netflix", "Mallorn Studio", "Sony Channel", "East Dream", "Bonsai Studio", "Lucky Production", "Octopus", "TUMBLER Studio", "CrazyCatStudio", "Amber", "Train Studio", "Анастасия Гайдаржи", "Мадлен Дюваль", "Fox Life", "Sound Film", "Cowabunga Studio", "Фильмэкспорт", "VO-Production", "Sound Film", "Nickelodeon", "MixFilm", "GreenРай Studio", "Sound-Group", "Back Board Cinema", "Кирилл Сагач", "Bonsai Studio", "Stevie", "OnisFilms", "MaxMeister", "Syfy Universal", "TUMBLER Studio", "NewStation", "Neo-Sound", "Муравский", "IdeaFilm", "Рутилов", "Тимофеев", "Лагута", "Дьяконов", "Zone Vision Studio", "Onibaku", "AniMaunt", "Voice Project", "AniStar", "Пифагор", "VoicePower", "StudioFilms", "Elysium", "AniStar", "BeniAffet", "Selena International", "Paul Bunyan", "CoralMedia", "Кондор", "Игмар", "ViP Premiere", "FireDub", "AveTurk", "Sony Sci-Fi", "Янкелевич", "Киреев", "Багичев", "2x2", "Лексикон", "Нота", "Arisu", "Superbit", "AveDorama", "VideoBIZ", "Киномания", "DDV", "Alternative Production", "WestFilm", "Анастасия Гайдаржи + Андрей Юрченко", "Киномания", "Agatha Studdio", "GreenРай Studio", "VSI Moscow", "Horizon Studio", "Flarrow Films", "Amazing Dubbing", "Asian Miracle Group", "Видеопродакшн", "VGM Studio", "FocusX", "CBS Drama", "NovaFilm", "Novamedia", "East Dream", "Дасевич", "Анатолий Гусев", "Twister", "Морозов", "NewComers", "kubik&ko", "DeMon", "Анатолий Ашмарин", "Inter Video", "Пронин", "AMC", "Велес", "Volume-6 Studio", "Хоррор Мэйкер", "Ghostface", "Sephiroth", "Акира", "Деваль Видео", "RussianGuy27", "neko64", "Shaman", "Franek Monk", "Ворон", "Andre1288", "Selena International", "GalVid", "Другое кино", "Студия NLS", "Sam2007", "HaseRiLLoPaW", "Севастьянов", "D.I.M.", "Марченко", "Журавлев", "Н-Кино", "Lazer Video", "SesDizi", "Red Media", "Рудой", "Товбин", "Сергей Дидок", "Хуан Рохас", "binjak", "Карусель", "Lizard Cinema", "Варус-Видео", "Акцент", "RG.Paravozik", "Max Nabokov", "Barin101", "Васька Куролесов", "Фортуна-Фильм", "Amalgama", "AnyFilm", "Студия Райдо", "Козлов", "Zoomvision Studio", "Пифагор", "Urasiko", "VIP Serial HD", "НСТ", "Кинолюкс", "Project Web Mania", "Завгородний", "AB-Video", "Twister", "Universal Channel", "Wakanim", "SnowRecords", "С.Р.И", "Старый Бильбо", "Ozz.tv", "Mystery Film", "РенТВ", "Латышев", "Ващенко", "Лайко", "Сонотек", "Psychotronic", "DIVA Universal", "Gremlin Creative Studio", "Нева-1", "Максим Жолобов", "Good People", "Мобильное телевидение", "Lazer Video", "IVI", "DoubleRec", "Milvus", "RedDiamond Studio", "Astana TV", "Никитин", "КТК", "D2Lab", "НСТ", "DoubleRec", "Black Street Records", "Останкино", "TatamiFilm", "Видеобаза", "Crunchyroll", "Novamedia", "RedRussian1337", "КонтентикOFF", "Creative Sound", "HelloMickey Production", "Пирамида", "CLS Media", "Сонькин", "Мастер Тэйп", "Garsu Pasaulis", "DDV", "IdeaFilm", "Gold Cinema", "Че!", "Нарышкин", "Intra Communications", "OnisFilms", "XDUB Dorama", "Кипарис", "Королёв", "visanti-vasaer", "Готлиб", "Paramount Channel", "СТС", "диктор CDV", "Pazl Voice", "Прямостанов", "Zerzia", "НТВ", "MGM", "Дьяков", "Вольга", "АРК-ТВ Studio", "Дубровин", "МИР", "Netflix", "Jetix", "Кипарис", "RUSCICO", "Seoul Bay", "Филонов", "Махонько", "Строев", "Саня Белый", "Говинда Рага", "Ошурков", "Horror Maker", "Хлопушка", "Хрусталев", "Антонов Николай", "Золотухин", "АрхиАзия", "Попов", "Ultradox", "Мост-Видео", "Альтера Парс", "Огородников", "Твин", "Хабар", "AimaksaLTV", "ТНТ", "FDV", "3df voice", "The Kitchen Russia", "Ульпаней Эльром", "Видеоимпульс", "GoodTime Media", "Alezan", "True Dubbing Studio", "FDV", "Карусель", "Интер", "Contentica", "Мельница", "RealFake", "ИДДК", "Инфо-фильм", "Мьюзик-трейд", "Кирдин | Stalk", "ДиоНиК", "Стасюк", "TV1000", "Hallmark", "Тоникс Медиа", "Бессонов", "Gears Media", "Бахурани", "NewDub", "Cinema Prestige", "Набиев", "New Dream Media", "ТВ3", "Малиновский Сергей", "Superbit", "Кенс Матвей", "LE-Production", "Voiz", "Светла", "Cinema Prestige", "JAM", "LDV", "Videogram", "Индия ТВ", "RedDiamond Studio", "Герусов", "Элегия фильм", "Nastia", "Семыкина Юлия", "Электричка", "Штамп Дмитрий", "Пятница", "Oneinchnales", "Gravi-TV", "D2Lab", "Кинопремьера", "Бусов Глеб", "LE-Production", "1001cinema", "Amazing Dubbing", "Emslie", "1+1", "100 ТВ", "1001 cinema", "2+2", "2х2", "3df voice", "4u2ges", "5 канал", "A. Lazarchuk", "AAA-Sound", "AB-Video", "AdiSound", "ALEKS KV", "AlexFilm", "AlphaProject", "Alternative Production", "Amalgam", "AMC", "Amedia", "AMS", "Andy", "AniLibria", "AniMedia", "Animegroup", "Animereactor", "AnimeSpace Team", "Anistar", "AniUA", "AniWayt", "Anything-group", "AOS", "Arasi project", "ARRU Workshop", "AuraFilm", "AvePremier", "AveTurk", "AXN Sci-Fi", "Azazel", "AzOnFilm", "BadBajo", "BadCatStudio", "BBC Saint-Petersburg", "BD CEE", "Black Street Records", "Bonsai Studio", "Boльгa", "Brain Production", "BraveSound", "BTI Studios", "Bubble Dubbing Company", "Byako Records", "Cactus Team", "Cartoon Network", "CBS Drama", "CDV", "Cinema Prestige", "CinemaSET GROUP", "CinemaTone", "ColdFilm", "Contentica", "CP Digital", "CPIG", "Crunchyroll", "Cuba77", "D1", "D2lab", "datynet", "DDV", "DeadLine", "DeadSno", "DeMon", "den904", "Description", "DexterTV", "Dice", "Discovery", "DniproFilm", "DoubleRec", "DreamRecords", "DVD Classic", "East Dream", "Eladiel", "Elegia", "ELEKTRI4KA", "Elrom", "ELYSIUM", "Epic Team", "eraserhead", "erogg", "Eurochannel", "Extrabit", "F-TRAIN", "Family Fan Edition", "FDV", "FiliZa Studio", "Film Prestige", "FilmGate", "FilmsClub", "FireDub", "Flarrow Films", "Flux-Team", "FocusStudio", "FOX", "Fox Crime", "Fox Russia", "FoxLife", "Foxlight", "Franek Monk", "Gala Voices", "Garsu Pasaulis", "Gears Media", "Gemini", "General Film", "GetSmart", "Gezell Studio", "Gits", "GladiolusTV", "GoldTeam", "Good People", "Goodtime Media", "GoodVideo", "GostFilm", "Gramalant", "Gravi-TV", "GREEN TEA", "GreenРай Studio", "Gremlin Creative Studio", "Hallmark", "HamsterStudio", "HiWay Grope", "Horizon Studio", "hungry_inri", "ICG", "ICTV", "IdeaFilm", "IgVin &amp; Solncekleshka", "ImageArt", "INTERFILM", "Ivnet Cinema", "IНТЕР", "Jakob Bellmann", "JAM", "Janetta", "Jaskier", "JeFerSon", "jept", "JetiX", "Jetvis", "JimmyJ", "KANSAI", "KIHO", "kiitos", "KinoGolos", "Kinomania", "KosharaSerials", "Kолобок", "L0cDoG", "LakeFilms", "LDV", "LE-Production", "LeDoyen", "LevshaFilm", "LeXiKC", "Liga HQ", "Line", "Lisitz", "Lizard Cinema Trade", "Lord32x", "lord666", "LostFilm", "Lucky Production", "Macross", "madrid", "Mallorn Studio", "Marclail", "Max Nabokov", "MC Entertainment", "MCA", "McElroy", "Mega-Anime", "Melodic Voice Studio", "metalrus", "MGM", "MifSnaiper", "Mikail", "Milirina", "MiraiDub", "MOYGOLOS", "MrRose", "MTV", "Murzilka", "MUZOBOZ", "National Geographic", "NemFilm", "Neoclassica", "NEON Studio", "New Dream Media", "NewComers", "NewStation", "NewStudio", "Nice-Media", "Nickelodeon", "No-Future", "NovaFilm", "Novamedia", "Octopus", "Oghra-Brown", "OMSKBIRD", "Onibaku", "OnisFilms", "OpenDub", "OSLIKt", "Ozz TV", "PaDet", "Paramount Comedy", "Paramount Pictures", "Parovoz Production", "PashaUp", "Paul Bunyan", "Pazl Voice", "PCB Translate", "Persona99", "PiratVoice", "Postmodern", "Profix Media", "Project Web Mania", "Prolix", "QTV", "R5", "Radamant", "RainDeath", "RATTLEBOX", "RealFake", "Reanimedia", "Rebel Voice", "RecentFilms", "Red Media", "RedDiamond Studio", "RedDog", "RedRussian1337", "Renegade Team", "RG Paravozik", "RinGo", "RoxMarty", "Rumble", "RUSCICO", "RusFilm", "RussianGuy27", "Saint Sound", "SakuraNight", "Satkur", "Sawyer888", "Sci-Fi Russia", "SDI Media", "Selena", "seqw0", "SesDizi", "SGEV", "Shachiburi", "SHIZA", "ShowJet", "Sky Voices", "SkyeFilmTV", "SmallFilm", "SmallFilm", "SNK-TV", "SnowRecords", "SOFTBOX", "SOLDLUCK2", "Solod", "SomeWax", "Sony Channel", "Sony Turbo", "Sound Film", "SpaceDust", "ssvss", "st.Elrom", "STEPonee", "SunshineStudio", "Superbit", "Suzaku", "sweet couple", "TatamiFilm", "TB5", "TF-AniGroup", "The Kitchen Russia", "The Mike Rec.", "Timecraft", "To4kaTV", "Tori", "Total DVD", "TrainStudio", "Troy", "True Dubbing Studio", "TUMBLER Studio", "turok1990", "TV 1000", "TVShows", "Twister", "Twix", "Tycoon", "Ultradox", "Universal Russia", "VashMax2", "VendettA", "VHS", "VicTeam", "VictoryFilms", "Video-BIZ", "Videogram", "ViruseProject", "visanti-vasaer", "VIZ Media", "VO-production", "Voice Project Studio", "VoicePower", "VSI Moscow", "VulpesVulpes", "Wakanim", "Wayland team", "WestFilm", "WiaDUB", "WVoice", "XL Media", "XvidClub Studio", "zamez", "ZEE TV", "Zendos", "ZM-SHOW", "Zone Studio", "Zone Vision", "Агапов", "Акопян", "Алексеев", "Артемьев", "Багичев", "Бессонов", "Васильев", "Васильцев", "Гаврилов", "Герусов", "Готлиб", "Григорьев", "Дасевич", "Дольский", "Карповский", "Кашкин", "Киреев", "Клюквин", "Костюкевич", "Матвеев", "Михалев", "Мишин", "Мудров", "Пронин", "Савченко", "Смирнов", "Тимофеев", "Толстобров", "Чуев", "Шуваев", "Яковлев", "ААА-sound", "АБыГДе", "Акалит", "Акира", "Альянс", "Амальгама", "АМС", "АнВад", "Анубис", "Anubis", "Арк-ТВ", "АРК-ТВ Studio", "Б. Федоров", "Бибиков", "Бигыч", "Бойков", "Абдулов", "Белов", "Вихров", "Воронцов", "Горчаков", "Данилов", "Дохалов", "Котов", "Кошкин", "Назаров", "Попов", "Рукин", "Рутилов", "Варус Видео", "Васька Куролесов", "Ващенко С.", "Векшин", "Велес", "Весельчак", "Видеоимпульс", "Витя «говорун»", "Войсовер", "Вольга", "Ворон", "Воротилин", "Г. Либергал", "Г. Румянцев", "Гей Кино Гид", "ГКГ", "Глуховский", "Гризли", "Гундос", "Деньщиков", "Есарев", "Нурмухаметов", "Пучков", "Стасюк", "Шадинский", "Штамп", "sf@irat", "Держиморда", "Домашний", "ДТВ", "Дьяконов", "Е. Гаевский", "Е. Гранкин", "Е. Лурье", "Е. Рудой", "Е. Хрусталёв", "ЕА Синема", "Екатеринбург Арт", "Живаго", "Жучков", "З Ранку До Ночі", "Завгородний", "Зебуро", "Зереницын", "И. Еремеев", "И. Клушин", "И. Сафронов", "И. Степанов", "ИГМ", "Игмар", "ИДДК", "Имидж-Арт", "Инис", "Ирэн", "Ист-Вест", "К. Поздняков", "К. Филонов", "К9", "Карапетян", "Кармен Видео", "Карусель", "Квадрат Малевича", "Килька", "Кипарис", "Королев", "Котова", "Кравец", "Кубик в Кубе", "Кураж-Бамбей", "Л. Володарский", "Лазер Видео", "ЛанселаП", "Лапшин", "Лексикон", "Ленфильм", "Леша Прапорщик", "Лизард", "Люсьена", "Заугаров", "Иванов", "Иванова и П. Пашут", "Латышев", "Ошурков", "Чадов", "Яроцкий", "Максим Логинофф", "Малиновский", "Марченко", "Мастер Тэйп", "Махонько", "Машинский", "Медиа-Комплекс", "Мельница", "Мика Бондарик", "Миняев", "Мительман", "Мост Видео", "Мосфильм", "Муравский", "Мьюзик-трейд", "Н-Кино", "Н. Антонов", "Н. Дроздов", "Н. Золотухин", "Н.Севастьянов seva1988", "Набиев", "Наталья Гурзо", "НЕВА 1", "Невафильм", "НеЗупиняйПродакшн", "Неоклассика", "Несмертельное оружие", "НЛО-TV", "Новий", "Новый диск", "Новый Дубляж", "Новый Канал", "Нота", "НСТ", "НТВ", "НТН", "Оверлорд", "Огородников", "Омикрон", "Гланц", "Карцев", "Морозов", "Прямостанов", "Санаев", "Парадиз", "Пепелац", "Первый канал ОРТ", "Переводман", "Перец", "Петербургский дубляж", "Петербуржец", "Пирамида", "Пифагор", "Позитив-Мультимедиа", "Прайд Продакшн", "Премьер Видео", "Премьер Мультимедиа", "Причудики", "Р. Янкелевич", "Райдо", "Ракурс", "РенТВ", "Россия", "РТР", "Русский дубляж", "Русский Репортаж", "РуФилмс", "Рыжий пес", "С. Визгунов", "С. Дьяков", "С. Казаков", "С. Кузнецов", "С. Кузьмичёв", "С. Лебедев", "С. Макашов", "С. Рябов", "С. Щегольков", "С.Р.И.", "Сolumbia Service", "Самарский", "СВ Студия", "СВ-Дубль", "Светла", "Селена Интернешнл", "Синема Трейд", "Синема УС", "Синта Рурони", "Синхрон", "Советский", "Сокуров", "Солодухин", "Сонотек", "Сонькин", "Союз Видео", "Союзмультфильм", "СПД - Сладкая парочка", "Строев", "СТС", "Студии Суверенного Лепрозория", "Студия «Стартрек»", "KOleso", "Студия Горького", "Студия Колобок", "Студия Пиратского Дубляжа", "Студия Райдо", "Студия Трёх", "Гуртом", "Супербит", "Сыендук", "Так Треба Продакшн", "ТВ XXI век", "ТВ СПб", "ТВ-3", "ТВ6", "ТВИН", "ТВЦ", "ТВЧ 1", "ТНТ", "ТО Друзей", "Толмачев", "Точка Zрения", "Трамвай-фильм", "ТРК", "Уолт Дисней Компани", "Хихидок", "Хлопушка", "Цікава Ідея", "Четыре в квадрате", "Швецов", "Штамп", "Штейн", "Ю. Живов", "Ю. Немахов", "Ю. Сербин", "Ю. Товбин", "Я. Беллманн", "Red Head Sound", "UKR"];
    var filter_langs = [{
      title: '#{filter_lang_ru}',
      code: 'ru'
    }, {
      title: '#{filter_lang_uk}',
      code: 'uk'
    }, {
      title: '#{filter_lang_en}',
      code: 'en'
    }, {
      title: '#{filter_lang_be}',
      code: 'be'
    }, {
      title: '#{filter_lang_zh}',
      code: 'zh|cn'
    }, {
      title: '#{filter_lang_ja}',
      code: 'ja'
    }, {
      title: '#{filter_lang_ko}',
      code: 'ko'
    }, {
      title: '#{filter_lang_af}',
      code: 'af'
    }, {
      title: '#{filter_lang_sq}',
      code: 'sq'
    }, {
      title: '#{filter_lang_ar}',
      code: 'ar'
    }, {
      title: '#{filter_lang_az}',
      code: 'az'
    }, {
      title: '#{filter_lang_hy}',
      code: 'hy'
    }, {
      title: '#{filter_lang_ba}',
      code: 'ba'
    }, {
      title: '#{filter_lang_bg}',
      code: 'bg'
    }, {
      title: '#{filter_lang_bn}',
      code: 'bn'
    }, {
      title: '#{filter_lang_bs}',
      code: 'bs'
    }, {
      title: '#{filter_lang_ca}',
      code: 'ca'
    }, {
      title: '#{filter_lang_ce}',
      code: 'ce'
    }, {
      title: '#{filter_lang_cs}',
      code: 'cs'
    }, {
      title: '#{filter_lang_da}',
      code: 'da'
    }, {
      title: '#{filter_lang_ka}',
      code: 'ka'
    }, {
      title: '#{filter_lang_de}',
      code: 'de'
    }, {
      title: '#{filter_lang_el}',
      code: 'el'
    }, {
      title: '#{filter_lang_es}',
      code: 'es'
    }, {
      title: '#{filter_lang_et}',
      code: 'et'
    }, {
      title: '#{filter_lang_fa}',
      code: 'fa'
    }, {
      title: '#{filter_lang_fi}',
      code: 'fi'
    }, {
      title: '#{filter_lang_fr}',
      code: 'fr'
    }, {
      title: '#{filter_lang_ga}',
      code: 'ga'
    }, {
      title: '#{filter_lang_gl}',
      code: 'gl'
    }, {
      title: '#{filter_lang_gn}',
      code: 'gn'
    }, {
      title: '#{filter_lang_he}',
      code: 'he'
    }, {
      title: '#{filter_lang_hi}',
      code: 'hi'
    }, {
      title: '#{filter_lang_hr}',
      code: 'hr'
    }, {
      title: '#{filter_lang_hu}',
      code: 'hu'
    }, {
      title: '#{filter_lang_id}',
      code: 'id'
    }, {
      title: '#{filter_lang_is}',
      code: 'is'
    }, {
      title: '#{filter_lang_it}',
      code: 'it'
    }, {
      title: '#{filter_lang_kk}',
      code: 'kk'
    }, {
      title: '#{filter_lang_ks}',
      code: 'ks'
    }, {
      title: '#{filter_lang_ku}',
      code: 'ku'
    }, {
      title: '#{filter_lang_ky}',
      code: 'ky'
    }, {
      title: '#{filter_lang_lt}',
      code: 'lt'
    }, {
      title: '#{filter_lang_lv}',
      code: 'lv'
    }, {
      title: '#{filter_lang_mi}',
      code: 'mi'
    }, {
      title: '#{filter_lang_mk}',
      code: 'mk'
    }, {
      title: '#{filter_lang_mn}',
      code: 'mn'
    }, {
      title: '#{filter_lang_mo}',
      code: 'mo'
    }, {
      title: '#{filter_lang_mt}',
      code: 'mt'
    }, {
      title: '#{filter_lang_no}',
      code: 'no|nb|nn'
    }, {
      title: '#{filter_lang_ne}',
      code: 'ne'
    }, {
      title: '#{filter_lang_nl}',
      code: 'nl'
    }, {
      title: '#{filter_lang_pa}',
      code: 'pa'
    }, {
      title: '#{filter_lang_pl}',
      code: 'pl'
    }, {
      title: '#{filter_lang_ps}',
      code: 'ps'
    }, {
      title: '#{filter_lang_pt}',
      code: 'pt'
    }, {
      title: '#{filter_lang_ro}',
      code: 'ro'
    }, {
      title: '#{filter_lang_si}',
      code: 'si'
    }, {
      title: '#{filter_lang_sk}',
      code: 'sk'
    }, {
      title: '#{filter_lang_sl}',
      code: 'sl'
    }, {
      title: '#{filter_lang_sm}',
      code: 'sm'
    }, {
      title: '#{filter_lang_so}',
      code: 'so'
    }, {
      title: '#{filter_lang_sr}',
      code: 'sr'
    }, {
      title: '#{filter_lang_sv}',
      code: 'sv'
    }, {
      title: '#{filter_lang_sw}',
      code: 'sw'
    }, {
      title: '#{filter_lang_ta}',
      code: 'ta'
    }, {
      title: '#{filter_lang_tg}',
      code: 'tg'
    }, {
      title: '#{filter_lang_th}',
      code: 'th'
    }, {
      title: '#{filter_lang_tk}',
      code: 'tk'
    }, {
      title: '#{filter_lang_tr}',
      code: 'tr'
    }, {
      title: '#{filter_lang_tt}',
      code: 'tt'
    }, {
      title: '#{filter_lang_ur}',
      code: 'ur'
    }, {
      title: '#{filter_lang_uz}',
      code: 'uz'
    }, {
      title: '#{filter_lang_vi}',
      code: 'vi'
    }, {
      title: '#{filter_lang_yi}',
      code: 'yi'
    }];
    filter_items.lang = filter_items.lang.concat(filter_langs.map(function (a) {
      return Lang.translate(a.title);
    }));
    scroll.minus(files.render().find('.explorer__files-head'));
    scroll.body().addClass('torrent-list');
    this.create = function () {
      return this.render();
    };
    this.initialize = function () {
      var _this = this;
      this.activity.loader(true);
      if ((object.movie.original_language == 'ja' || object.movie.original_language == 'zh') && object.movie.genres.find(function (g) {
        return g.id == 16;
      }) && Storage.field('language') !== 'en') {
        network.silent(TMDB$1.api((object.movie.name ? 'tv' : 'movie') + '/' + object.movie.id + '?api_key=' + TMDB$1.key() + '&language=en'), function (result) {
          object.search_two = result.name || result.title;
          _this.parse();
        }, this.parse.bind(this));
      } else {
        this.parse();
      }
      scroll.onEnd = this.next.bind(this);
      return this.render();
    };
    this.parse = function () {
      var _this2 = this;
      filter = new create$5(object);
      Parser.get(object, function (data) {
        results = data;
        _this2.build();
        Layer.update(scroll.render(true));
        _this2.activity.loader(false);
        _this2.activity.toggle();
      }, function (text) {
        _this2.empty(Lang.translate('torrent_error_connect') + ': ' + text);
      });
      filter.onSearch = function (value) {
        Activity$1.replace({
          search: value,
          clarification: true
        });
      };
      filter.onBack = function () {
        _this2.start();
      };
      filter.render().find('.selector').on('hover:focus', function (e) {
      });
      filter.addButtonBack();
      files.appendHead(filter.render());
    };
    this.empty = function (descr) {
      var empty = new Empty({
        descr: descr
      });
      files.render().find('.explorer__files-head').addClass('hide');
      files.appendFiles(empty.render(filter.empty()));
      empty.render().find('.simple-button').on('hover:enter', function () {
        filter.render().find('.filter--search').trigger('hover:enter');
      });
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.listEmpty = function () {
      var em = Template.get('empty_filter');
      var bn = $('<div class="simple-button selector"><span>' + Lang.translate('filter_clarify') + '</span></div>');
      bn.on('hover:enter', function () {
        filter.render().find('.filter--filter').trigger('hover:enter');
      });
      em.find('.empty-filter__title').remove();
      em.find('.empty-filter__buttons').removeClass('hide').append(bn);
      scroll.append(em);
    };
    this.buildSorted = function () {
      var need = Storage.get('torrents_sort', 'Seeders');
      var select = [{
        title: Lang.translate('torrent_parser_sort_by_seeders'),
        sort: 'Seeders'
      }, {
        title: Lang.translate('torrent_parser_sort_by_size'),
        sort: 'Size'
      }, {
        title: Lang.translate('torrent_parser_sort_by_name'),
        sort: 'Title'
      }, {
        title: Lang.translate('torrent_parser_sort_by_tracker'),
        sort: 'Tracker'
      }, {
        title: Lang.translate('torrent_parser_sort_by_date'),
        sort: 'PublisTime'
      }, {
        title: Lang.translate('torrent_parser_sort_by_viewed'),
        sort: 'viewed'
      }];
      select.forEach(function (element) {
        if (element.sort == need) element.selected = true;
      });
      filter.sort(results.Results, need);
      this.sortWithPopular();
      filter.set('sort', select);
      this.selectedSort();
    };
    this.sortWithPopular = function () {
      var popular = [];
      var other = [];
      results.Results.forEach(function (a) {
        if (a.viewing_request) popular.push(a);else other.push(a);
      });
      popular.sort(function (a, b) {
        return b.viewing_average - a.viewing_average;
      });
      results.Results = popular.concat(other);
    };
    this.cardID = function () {
      return object.movie.id + ':' + (object.movie.number_of_seasons ? 'tv' : 'movie');
    };
    this.getFilterData = function () {
      var all = Storage.cache('torrents_filter_data', 500, {});
      var cid = this.cardID();
      return all[cid] || Storage.get('torrents_filter', '{}');
    };
    this.setFilterData = function (filter) {
      var all = Storage.cache('torrents_filter_data', 500, {});
      var cid = this.cardID();
      all[cid] = filter;
      Storage.set('torrents_filter_data', all);
      Storage.set('torrents_filter', filter);
    };
    this.buildFilterd = function () {
      var need = this.getFilterData();
      var select = [];
      var add = function add(type, title) {
        var items = filter_items[type];
        var subitems = [];
        var multiple = filter_multiple.indexOf(type) >= 0;
        var value = need[type];
        if (multiple) value = Arrays.toArray(value);
        items.forEach(function (name, i) {
          subitems.push({
            title: name,
            //selected: multiple ? i == 0 : value == i,
            checked: multiple && value.indexOf(name) >= 0,
            checkbox: multiple && i > 0,
            noselect: true,
            index: i
          });
        });
        select.push({
          title: title,
          subtitle: multiple ? value.length ? value.join(', ') : items[0] : typeof value == 'undefined' ? items[0] : items[value],
          items: subitems,
          noselect: true,
          stype: type
        });
      };
      filter_items.voice = [Lang.translate('torrent_parser_any_two'), Lang.translate('torrent_parser_voice_dubbing'), Lang.translate('torrent_parser_voice_polyphonic'), Lang.translate('torrent_parser_voice_two'), Lang.translate('torrent_parser_voice_amateur')];
      filter_items.tracker = [Lang.translate('torrent_parser_any_two')];
      filter_items.season = [Lang.translate('torrent_parser_any_two')];
      results.Results.forEach(function (element) {
        var title = element.Title.toLowerCase(),
          tracker = element.Tracker;
        for (var _i = 0; _i < voices.length; _i++) {
          var voice = voices[_i].toLowerCase();
          if (title.indexOf(voice) >= 0) {
            if (filter_items.voice.indexOf(voices[_i]) == -1) filter_items.voice.push(voices[_i]);
          }
          if (element.info && element.info.voices) {
            if (element.info.voices.map(function (v) {
              return v.toLowerCase();
            }).indexOf(voice) >= 0) {
              if (filter_items.voice.indexOf(voices[_i]) == -1) filter_items.voice.push(voices[_i]);
            }
          }
        }
        tracker.split(',').forEach(function (t) {
          if (filter_items.tracker.indexOf(t.trim()) === -1) filter_items.tracker.push(t.trim());
        });
        var season = title.match(/.?s\[(\d+)-\].?|.?s(\d+).?|.?\((\d+) сезон.?|.?season (\d+),.?/);
        if (season) {
          season = season.filter(function (c) {
            return c;
          });
          if (season.length > 1) {
            var orig = season[1];
            var number = parseInt(orig) + '';
            if (number && finded_seasons.indexOf(number) == -1) {
              finded_seasons.push(number);
              finded_seasons_full.push(orig);
            }
          }
        }
      });
      finded_seasons_full.sort(function (a, b) {
        var ac = parseInt(a);
        var bc = parseInt(b);
        if (ac > bc) return 1;else if (ac < bc) return -1;else return 0;
      });
      finded_seasons.sort(function (a, b) {
        var ac = parseInt(a);
        var bc = parseInt(b);
        if (ac > bc) return 1;else if (ac < bc) return -1;else return 0;
      });
      if (finded_seasons.length) filter_items.season = filter_items.season.concat(finded_seasons);

      //надо очистить от отсутствующих ключей
      need.voice = Arrays.removeNoIncludes(Arrays.toArray(need.voice), filter_items.voice);
      need.tracker = Arrays.removeNoIncludes(Arrays.toArray(need.tracker), filter_items.tracker);
      need.season = Arrays.removeNoIncludes(Arrays.toArray(need.season), filter_items.season);
      this.setFilterData(need);
      select.push({
        title: Lang.translate('torrent_parser_reset'),
        reset: true
      });
      add('quality', Lang.translate('torrent_parser_quality'));
      add('hdr', 'HDR');
      add('dv', 'Dolby Vision');
      add('imax', 'IMAX');
      add('sub', Lang.translate('torrent_parser_subs'));
      add('voice', Lang.translate('torrent_parser_voice'));
      add('lang', Lang.translate('title_language_short'));
      add('season', Lang.translate('torrent_parser_season'));
      add('tracker', Lang.translate('torrent_parser_tracker'));
      add('year', Lang.translate('torrent_parser_year'));
      filter.set('filter', select);
      this.selectedFilter();
    };
    this.selectedFilter = function () {
      var need = this.getFilterData(),
        select = [];
      for (var _i2 in need) {
        if (need[_i2]) {
          if (Arrays.isArray(need[_i2])) {
            if (need[_i2].length) select.push(filter_translate[_i2] + ':' + need[_i2].join(', '));
          } else {
            select.push(filter_translate[_i2] + ': ' + filter_items[_i2][need[_i2]]);
          }
        }
      }
      filter.chosen('filter', select);
    };
    this.selectedSort = function () {
      var select = Storage.get('torrents_sort', 'Seeders');
      filter.chosen('sort', [sort_translate[select]]);
    };
    this.build = function () {
      var _this3 = this;
      this.buildSorted();
      this.buildFilterd();
      this.filtred();
      filter.onSelect = function (type, a, b) {
        if (type == 'sort') {
          Storage.set('torrents_sort', a.sort);
          filter.sort(results.Results, a.sort);
          _this3.sortWithPopular();
        } else {
          if (a.reset) {
            _this3.setFilterData({});
            _this3.buildFilterd();
          } else {
            a.items.forEach(function (n) {
              return n.checked = false;
            });
            var filter_data = _this3.getFilterData();
            filter_data[a.stype] = filter_multiple.indexOf(a.stype) >= 0 ? [] : b.index;
            a.subtitle = b.title;
            _this3.setFilterData(filter_data);
          }
        }
        _this3.applyFilter();
        _this3.start();
      };
      filter.onCheck = function (type, a, b) {
        var data = _this3.getFilterData(),
          need = Arrays.toArray(data[a.stype]);
        if (b.checked && need.indexOf(b.title)) need.push(b.title);else if (!b.checked) Arrays.remove(need, b.title);
        data[a.stype] = need;
        _this3.setFilterData(data);
        a.subtitle = need.length ? need.join(', ') : a.items[0].title;
        _this3.applyFilter();
      };
      if (results.Results.length) this.showResults();else {
        this.empty(Lang.translate('torrent_parser_empty'));
      }
    };
    this.applyFilter = function () {
      this.filtred();
      this.selectedFilter();
      this.selectedSort();
      this.reset();
      this.showResults();
      last = scroll.render().find('.torrent-item:eq(0)')[0];
      if (last) scroll.update(last);else scroll.reset();
    };
    this.filtred = function () {
      var filter_data = this.getFilterData();
      var filter_any = false;
      for (var _i3 in filter_data) {
        var filr = filter_data[_i3];
        if (filr) {
          if (Arrays.isArray(filr)) {
            if (filr.length) filter_any = true;
          } else filter_any = true;
        }
      }
      filtred = results.Results.filter(function (element) {
        if (filter_any) {
          var passed = false,
            nopass = false,
            title = element.Title.toLowerCase(),
            tracker = element.Tracker;
          var qua = Arrays.toArray(filter_data.quality),
            hdr = filter_data.hdr,
            dv = filter_data.dv,
            imax = filter_data.imax,
            sub = filter_data.sub,
            voi = Arrays.toArray(filter_data.voice),
            tra = Arrays.toArray(filter_data.tracker),
            ses = Arrays.toArray(filter_data.season),
            lng = Arrays.toArray(filter_data.lang),
            yer = filter_data.year;
          var test = function test(search, test_index) {
            var regex = new RegExp(search);
            return test_index ? title.indexOf(search) >= 0 : regex.test(title);
          };
          var check = function check(search, invert) {
            if (test(search)) {
              if (invert) nopass = true;else passed = true;
            } else {
              if (invert) passed = true;else nopass = true;
            }
          };
          var includes = function includes(type, arr) {
            if (!arr.length) return;
            var any = false;
            arr.forEach(function (a) {
              if (type == 'quality') {
                if (a == '4k' && test('(4k|uhd)[ |\\]|,|$]|2160[pр]|ultrahd')) any = true;
                if (a == '1080p' && test('fullhd|1080[pр]')) any = true;
                if (a == '720p' && test('720[pр]')) any = true;
              }
              if (type == 'voice') {
                var p = filter_items.voice.indexOf(a);
                var n = element.info && element.info.voices ? element.info.voices.map(function (v) {
                  return v.toLowerCase();
                }) : [];
                if (p == 1) {
                  if (test('дублирован|дубляж|  apple| dub| d[,| |$]|[,|\\s]дб[,|\\s|$]')) any = true;
                } else if (p == 2) {
                  if (test('многоголос| p[,| |$]|[,|\\s](лм|пм)[,|\\s|$]')) any = true;
                } else if (p == 3) {
                  if (test('двухголос|двуголос| l2[,| |$]|[,|\\s](лд|пд)[,|\\s|$]')) any = true;
                } else if (p == 4) {
                  if (test('любитель|авторский| l1[,| |$]|[,|\\s](ло|ап)[,|\\s|$]')) any = true;
                } else if (test(a.toLowerCase(), true)) any = true;else if (n.length && n.indexOf(a.toLowerCase()) >= 0) any = true;
              }
              if (type == 'lang') {
                var _p = filter_items.lang.indexOf(a);
                var c = filter_langs[_p - 1];
                if (c) {
                  if (element.languages) {
                    if (element.languages.find(function (l) {
                      return l.toLowerCase().slice(0, 2) == c.code;
                    })) any = true;
                  } else if (title.indexOf(c.code) >= 0) any = true;
                } else any = true;
              }
              if (type == 'tracker') {
                if (tracker.split(',').find(function (t) {
                  return t.trim().toLowerCase() == a.toLowerCase();
                })) any = true;
              }
              if (type == 'season') {
                var pad = function pad(n) {
                  return n < 10 && n != '01' ? '0' + n : n;
                };
                var _i4 = finded_seasons.indexOf(a);
                var f = finded_seasons_full[_i4];
                var SES1 = title.match(/\[s(\d+)-(\d+)\]/);
                var SES2 = title.match(/season (\d+)-(\d+)/);
                var SES3 = title.match(/season (\d+) - (\d+).?/);
                var SES4 = title.match(/сезон: (\d+)-(\d+) \/.?/);
                if (Array.isArray(SES1) && (f >= SES1[1] && f <= SES1[2] || pad(f) >= SES1[1] && pad(f) <= SES1[2] || f >= pad(SES1[1]) && f <= pad(SES1[2]))) any = true;
                if (Array.isArray(SES2) && (f >= SES2[1] && f <= SES2[2] || pad(f) >= SES2[1] && pad(f) <= SES2[2] || f >= pad(SES2[1]) && f <= pad(SES2[2]))) any = true;
                if (Array.isArray(SES3) && (f >= SES3[1] && f <= SES3[2] || pad(f) >= SES3[1] && pad(f) <= SES3[2] || f >= pad(SES3[1]) && f <= pad(SES3[2]))) any = true;
                if (Array.isArray(SES4) && (f >= SES4[1] && f <= SES4[2] || pad(f) >= SES4[1] && pad(f) <= SES4[2] || f >= pad(SES4[1]) && f <= pad(SES4[2]))) any = true;
                if (test('.?\\[0' + f + 'x0.?|.?\\[s' + f + '-.?|.?-' + f + '\\].?|.?\\[s0' + f + '\\].?|.?\\[s' + f + '\\].?|.?s' + f + 'e.?|.?s' + f + '-.?|.?сезон: ' + f + ' .?|.?сезон:' + f + '.?|сезон ' + f + ',.?|\\[' + f + ' сезон.?|.?\\(' + f + ' сезон.?|.?season ' + f + '.?')) any = true;
              }
            });
            if (any) passed = true;else nopass = true;
          };
          includes('quality', qua);
          includes('voice', voi);
          includes('tracker', tra);
          includes('season', ses);
          includes('lang', lng);
          if (hdr) check('[\\[| ]hdr[10| |\\]|,|$]', hdr !== 1);
          if (imax) check('[\\[| ]imax[ |\\]|,|$]', imax !== 1);
          if (dv == 0) {
            check(filter_items.dv[dv], dv !== 1);
          } else if (dv == 1) {
            check('dolby vision');
          } else if (dv == 2) {
            check('dolby vision tv');
          } else if (dv == 3) {
            check('dolby vision', dv !== 0);
          }
          if (sub) check(' sub|[,|\\s]ст[,|\\s|$]', sub !== 1);
          if (yer) {
            check(filter_items.year[yer]);
          }
          return nopass ? false : passed;
        } else return true;
      });
    };
    this.showResults = function () {
      total_pages = Math.ceil(filtred.length / 20);
      if (filtred.length) {
        this.append(filtred.slice(0, 20));
      } else {
        this.listEmpty();
      }
      files.appendFiles(scroll.render());
    };
    this.reset = function () {
      last = false;
      scroll.clear();
    };
    this.next = function () {
      if (object.page < 15 && object.page < total_pages) {
        object.page++;
        var offset = (object.page - 1) * 20;
        this.append(filtred.slice(offset, offset + 20), true);
      }
    };
    this.mark = function (element, item, add) {
      if (add) {
        if (viewed.indexOf(element.hash) == -1) {
          viewed.push(element.hash);
          item.append('<div class="torrent-item__viewed">' + Template.get('icon_viewed', {}, true) + '</div>');
        }
      } else {
        element.viewed = true;
        Arrays.remove(viewed, element.hash);
        item.find('.torrent-item__viewed').remove();
      }
      element.viewed = add;
      Storage.set('torrents_view', viewed);
      if (!add) Storage.remove('torrents_view', element.hash);
    };
    this.addToBase = function (element) {
      Torserver.add({
        poster: object.movie.img,
        title: object.movie.title + ' / ' + object.movie.original_title,
        link: element.MagnetUri || element.Link,
        data: {
          prisma: true,
          movie: object.movie
        }
      }, function () {
        RemoteHelper.show({
          name: 'torrent_added',
          text: object.movie.title + ' - ' + Lang.translate('torrent_parser_added_to_mytorrents'),
          button: 'ok',
          interval: 60 * 24 * 7 // week
        });
      });
    };
    this.append = function (items, append) {
      var _this4 = this;
      items.forEach(function (element) {
        var date = Utils$2.parseTime(element.PublishDate);
        var bitrate = object.movie.runtime ? Utils$2.calcBitrate(element.Size, object.movie.runtime) : 0;
        Arrays.extend(element, {
          title: element.Title,
          date: date.full,
          tracker: element.Tracker,
          bitrate: bitrate,
          size: !isNaN(parseInt(element.Size)) ? Utils$2.bytesToSize(element.Size) : element.size,
          seeds: element.Seeders,
          grabs: element.Peers
        });
        var item = Template.get('torrent', element);
        if (element.ffprobe) {
          var ffprobe_elem = item.find('.torrent-item__ffprobe');
          var ffprobe_tags = [];
          var video = element.ffprobe.find(function (a) {
            return a.codec_type == 'video';
          });
          var audio = element.ffprobe.filter(function (a) {
            return a.codec_type == 'audio' && a.tags;
          });
          var subs = element.ffprobe.filter(function (a) {
            return a.codec_type == 'subtitle' && a.tags;
          });
          var voice = element.info && element.info.voices ? element.info.voices : [];
          if (video) ffprobe_tags.push({
            media: 'video',
            value: video.width + 'x' + video.height
          });
          var is_71 = element.ffprobe.find(function (a) {
            return a.codec_type == 'audio' && a.channels == 8;
          });
          var is_51 = element.ffprobe.find(function (a) {
            return a.codec_type == 'audio' && a.channels == 6;
          });
          if (is_71) ffprobe_tags.push({
            media: 'channels',
            value: '7.1'
          });
          if (is_51) ffprobe_tags.push({
            media: 'channels',
            value: '5.1'
          });
          audio.forEach(function (a) {
            var line = [];
            var lang = (a.tags.language || '').toUpperCase();
            var name = a.tags.title || a.tags.handler_name;
            if (lang) line.push(lang);
            if (name && lang !== 'ENG') {
              var translate = voice.find(function (v) {
                return name.toLowerCase().indexOf(v.toLowerCase()) >= 0;
              });
              name = translate ? translate : name;
              if (name.toLowerCase().indexOf('dub') >= 0 || name.toLowerCase() == 'd') name = Lang.translate('torrent_parser_voice_dubbing');
              line.push(Utils$2.shortText(Utils$2.capitalizeFirstLetter(name), 20));
            }
            if (line.length) ffprobe_tags.push({
              media: 'audio',
              value: line.join(' - ')
            });
          });
          var find_subtitles = [];
          subs.forEach(function (a) {
            var lang = (a.tags.language || '').toUpperCase();
            if (lang) find_subtitles.push(lang);
          });
          find_subtitles = find_subtitles.filter(function (el, pos) {
            return find_subtitles.indexOf(el) == pos;
          });
          find_subtitles.slice(0, 4).forEach(function (a) {
            ffprobe_tags.push({
              media: 'subtitle',
              value: a
            });
          });
          if (find_subtitles.length > 4) ffprobe_tags.push({
            media: 'subtitle',
            value: '+' + (find_subtitles.length - 4)
          });
          ffprobe_tags = ffprobe_tags.filter(function (el, pos) {
            return ffprobe_tags.map(function (a) {
              return a.value + a.media;
            }).indexOf(el.value + el.media) == pos;
          });
          ffprobe_tags.forEach(function (tag) {
            ffprobe_elem.append('<div class="m-' + tag.media + '">' + tag.value + '</div>');
          });
          if (ffprobe_tags.length) ffprobe_elem.removeClass('hide');
        }
        if (!bitrate) item.find('.bitrate').remove();
        if (element.viewed) item.append('<div class="torrent-item__viewed">' + Template.get('icon_viewed', {}, true) + '</div>');
        if (!element.size || parseInt(element.size) == 0) item.find('.torrent-item__size').remove();
        item.on('hover:focus', function (e) {
          last = e.target;
          scroll.update($(e.target), true);
          RemoteHelper.show({
            name: 'torrents_helper',
            text: Lang.translate('helper_torrents'),
            button: 'ok',
            interval: 60 * 24 * 7 // week
          });
        }).on('hover:hover hover:touch', function (e) {
          last = e.target;
          Navigator.focused(last);
        }).on('hover:enter', function (e) {
          last = e.target;
          Torrent.opened(function () {
            _this4.mark(element, item, true);
          });
          element.poster = object.movie.img;
          _this4.start();
          Torrent.start(element, object.movie);
          Prisma.Listener.send('torrent', {
            type: 'onenter',
            element: element,
            item: item
          });
        }).on('hover:long', function () {
          var enabled = Controller.enabled().name;
          var menu = [{
            title: Lang.translate('torrent_parser_add_to_mytorrents'),
            tomy: true
          }, {
            title: Lang.translate('torrent_parser_label_title'),
            subtitle: Lang.translate('torrent_parser_label_descr'),
            mark: true
          }, {
            title: Lang.translate('torrent_parser_label_cancel_title'),
            subtitle: Lang.translate('torrent_parser_label_cancel_descr'),
            unmark: true
          }];
          Prisma.Listener.send('torrent', {
            type: 'onlong',
            element: element,
            item: item,
            menu: menu
          });
          Select.show({
            title: Lang.translate('title_action'),
            items: menu,
            onBack: function onBack() {
              Controller.toggle(enabled);
            },
            onSelect: function onSelect(a) {
              if (a.tomy) {
                _this4.addToBase(element);
              } else if (a.mark) {
                _this4.mark(element, item, true);
              } else if (a.unmark) {
                _this4.mark(element, item, false);
              }
              Controller.toggle(enabled);
            }
          });
        });
        Prisma.Listener.send('torrent', {
          type: 'render',
          element: element,
          item: item
        });
        scroll.append(item);
        if (append) Controller.collectionAppend(item);
      });
    };
    this.back = function () {
      Activity$1.backward();
    };
    this.start = function () {
      if (Prisma.Activity.active().activity !== this.activity) return;
      if (!initialized) {
        initialized = true;
        this.initialize();
      }
      Background.immediately(Utils$2.cardImgBackgroundBlur(object.movie));
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render(), files.render(true));
          Controller.collectionFocus(last || false, scroll.render(true));
          Navigator.remove(files.render().find('.explorer-card__head-img')[0]);
        },
        update: function update() {},
        up: function up() {
          if (Navigator.canmove('up')) {
            Navigator.move('up');
          } else Controller.toggle('head');
        },
        down: function down() {
          Navigator.move('down');
        },
        right: function right() {
          if (Navigator.canmove('right')) Navigator.move('right');else filter.render().find('.filter--filter').trigger('hover:enter');
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else files.toggle();
        },
        back: this.back
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return files.render();
    };
    this.destroy = function () {
      network.clear();
      Parser.clear();
      files.destroy();
      scroll.destroy();
      results = null;
      network = null;
    };
  }

  function component$c(object) {
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      step: 250,
      end_ratio: 2
    });
    var items = [];
    var html = $('<div></div>');
    var body = $('<div class="category-full"></div>');
    var total_pages = 0;
    var last;
    var torrents = [];
    this.create = function () {
      var _this = this;
      this.activity.loader(true);
      Torserver.my(this.build.bind(this), function () {
        var empty = new Empty();
        html.append(empty.render());
        _this.start = empty.start;
        _this.activity.loader(false);
        _this.activity.toggle();
      });
      return this.render();
    };
    this.next = function () {
      if (object.page < 15 && object.page < total_pages) {
        object.page++;
        var offset = object.page - 1;
        this.append(torrents.slice(20 * offset, 20 * offset + 20), true);
      }
    };
    this.append = function (data, append) {
      var _this2 = this;
      data.forEach(function (element) {
        element.title = element.title.replace(' ', '');
        var item_data = Arrays.decodeJson(element.data, {});
        var card = new Card(element, {
          card_category: true
        });
        card.create();
        card.onFocus = function (target, card_data) {
          last = target;
          scroll.update(card.render(), true);
          Background.change(item_data.movie ? Utils$2.cardImgBackground(item_data.movie) : element.poster);
          if (scroll.isEnd()) _this2.next();
        };
        card.onEnter = function (target, card_data) {
          last = target;
          _this2.start();
          Torrent.open(card_data.hash, item_data.prisma && item_data.movie ? item_data.movie : false);
        };
        card.onMenu = function (target, card_data) {
          var enabled = Controller.enabled().name;
          var menu = [];
          if (item_data.movie) {
            menu.push({
              title: Lang.translate('title_card')
            });
          }
          menu.push({
            title: Lang.translate('torrent_remove_title'),
            subtitle: Lang.translate('torrent_remove_descr'),
            remove: true
          });
          Select.show({
            title: Lang.translate('title_action'),
            items: menu,
            onBack: function onBack() {
              Controller.toggle(enabled);
            },
            onSelect: function onSelect(a) {
              if (a.remove) {
                Torserver.remove(card_data.hash);
                Arrays.remove(items, card);
                card.destroy();
                last = false;
                Controller.toggle(enabled);
              } else {
                Activity$1.push({
                  url: item_data.movie.url,
                  component: 'full',
                  id: item_data.movie.id,
                  method: item_data.movie.name ? 'tv' : 'movie',
                  card: item_data.movie,
                  source: item_data.movie.source || 'cub'
                });
              }
            }
          });
        };
        card.visible();
        body.append(card.render());
        if (append) Controller.collectionAppend(card.render());
        items.push(card);
      });
    };
    this.build = function (data) {
      torrents = data;
      total_pages = Math.ceil(torrents.length / 20);
      scroll.minus();
      this.append(torrents.slice(0, 20));
      scroll.append(body);
      html.append(scroll.render());
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last || false, scroll.render());
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      html.remove();
      body.remove();
      network = null;
      items = null;
      html = null;
      body = null;
    };
  }

  function component$b(object) {
    var comp = new component$i(object);
    comp.create = function () {
      this.activity.loader(true);
      Api.relise(object, this.build.bind(this), this.empty.bind(this));
    };
    comp.nextPageReuest = function (object, resolve, reject) {
      Api.relise(object, resolve.bind(this), reject.bind(this));
    };
    return comp;
  }

  function component$a(object) {
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      step: 250,
      end_ratio: 2
    });
    var items = [];
    var html = $('<div></div>');
    var body = $('<div class="category-full"></div>');
    var last;
    var collections = [];
    var waitload;
    this.create = function () {
      var _this = this;
      this.activity.loader(true);
      Api.collections(object, this.build.bind(this), function () {
        var empty = new Empty();
        html.append(empty.render());
        _this.start = empty.start;
        _this.activity.loader(false);
        _this.activity.toggle();
      });
      return this.render();
    };
    this.next = function () {
      var _this2 = this;
      if (waitload) return;
      if (object.page < 30) {
        waitload = true;
        object.page++;
        Api.collections(object, function (result) {
          _this2.append(result.results, true);
          if (result.results.length) waitload = false;
        }, function () {});
      }
    };
    this.append = function (data, append) {
      var _this3 = this;
      data.forEach(function (element) {
        var card = new Card(element, {
          card_collection: true,
          object: object
        });
        card.create();
        card.onFocus = function (target, card_data) {
          last = target;
          scroll.update(card.render(), true);
          Background.change(Utils$2.cardImgBackground(card_data));
          if (scroll.isEnd()) _this3.next();
        };
        card.onEnter = function (target, card_data) {
          Activity$1.push({
            url: card_data.url,
            id: card_data.id,
            title: Lang.translate('title_collections') + ' - ' + card_data.title,
            component: 'collections_view',
            source: object.source,
            page: 1
          });
        };
        card.onMenu = function (target, card_data) {};
        card.visible();
        body.append(card.render());
        if (append) Controller.collectionAppend(card.render());
        items.push(card);
      });
    };
    this.build = function (data) {
      collections = data.results;
      scroll.minus();
      this.append(collections.slice(0, 20));
      scroll.append(body);
      html.append(scroll.render());
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last || false, scroll.render());
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      html.remove();
      body.remove();
      network = null;
      items = null;
      html = null;
      body = null;
    };
  }

  function component$9(object) {
    var comp = new component$i(object);
    comp.create = function () {
      this.activity.loader(true);
      Api.collections(object, this.build.bind(this), this.empty.bind(this));
    };
    return comp;
  }

  function component$8(object) {
    var html = $('<div></div>');
    var empty = new Empty();
    this.create = function () {
      var card = object.movie || object.card;
      var foot = $('<div class="empty__footer"></div>');
      var button_reset = $('<div class="simple-button selector">' + Lang.translate('title_reset') + '</div>');
      var button_movie = $('<div class="simple-button selector">' + Lang.translate('back_to_card') + '</div>');
      button_reset.on('hover:enter', function () {
        Activity$1.replace();
      });
      foot.append(button_reset);
      if (card) {
        button_movie.on('hover:enter', function () {
          Activity$1.replace({
            component: 'full',
            card: card,
            id: card.id,
            method: card.number_of_seasons ? 'tv' : 'movie',
            source: card.source || 'cub'
          });
        });
        foot.append(button_movie);
      }
      empty.append(foot);
      html.append(empty.render());
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(empty.render());
          Controller.collectionFocus(false, empty.render());
        },
        left: function left() {
          Controller.toggle('menu');
        },
        up: function up() {
          Controller.toggle('head');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      html.remove();
    };
  }

  function component$7(object) {
    var _this = this;
    var scroll = new create$f({
      mask: true,
      over: true,
      step: 300
    });
    var html = $('<div></div>');
    var body = $('<div class="timetable"></div>');
    var cards = Favorite.full().card;
    var table = TimeTable.all();
    var last;
    this.create = function () {
      if (Account.working()) cards = Account.all();
      if (table.length) {
        var date_max = 0;
        var date_now = new Date();
        var date_end = new Date();
        var date_one = 24 * 60 * 60 * 1000;
        table.forEach(function (elem) {
          elem.episodes.forEach(function (ep) {
            var air = Utils$2.parseToDate(ep.air_date);
            var tim = air.getTime();
            if (date_max < tim) {
              date_max = tim;
              date_end = air;
            }
          });
        });
        var date_dif = Math.max(30, Math.min(30, Math.round(Math.abs((date_now - date_end) / date_one))));
        if (date_dif > 0) {
          for (var i = 0; i < date_dif; i++) {
            this.append(date_now);
            date_now.setDate(date_now.getDate() + 1);
          }
          scroll.minus();
          scroll.append(body);
          html.append(scroll.render());
        } else this.empty();
      } else this.empty();
      this.activity.loader(false);
      this.activity.toggle();
      return this.render();
    };
    this.empty = function () {
      var empty = new Empty({
        descr: Lang.translate('timetable_empty')
      });
      html.append(empty.render());
      _this.start = empty.start;
      _this.activity.loader(false);
      _this.activity.toggle();
    };
    this.append = function (date) {
      var item = $("\n            <div class=\"timetable__item selector\">\n                <div class=\"timetable__inner\">\n                    <div class=\"timetable__date\"></div>\n                    <div class=\"timetable__body\"></div>\n                </div>\n            </div>\n        ");
      var air_date = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);
      var air_epis = [];
      var day_week = Utils$2.parseTime(date.getTime());
      var weeks = [Lang.translate('week_7'), Lang.translate('week_1'), Lang.translate('week_2'), Lang.translate('week_3'), Lang.translate('week_4'), Lang.translate('week_5'), Lang.translate('week_6')];
      table.forEach(function (elem) {
        elem.episodes.forEach(function (ep) {
          var card = cards.find(function (card) {
            return card.id == elem.id;
          });
          if (ep.air_date == air_date && card) {
            air_epis.push({
              episode: ep,
              card: cards.find(function (card) {
                return card.id == elem.id;
              })
            });
          }
        });
      });
      if (air_epis.length) {
        air_epis.slice(0, 3).forEach(function (elem) {
          item.find('.timetable__body').append('<div><span style="background-color: ' + Utils$2.stringToHslColor(elem.card.name, 50, 50) + '"></span>' + elem.card.name + '</div>');
        });
        if (air_epis.length > 3) {
          item.find('.timetable__body').append('<div>+' + (air_epis.length - 3) + '</div>');
        }
        if (air_epis.length == 1) {
          var preview = $('<div class="timetable__preview"><img><div>' + (air_epis[0].episode.name || Lang.translate('noname')) + '</div></div>');
          Utils$2.imgLoad(preview.find('img'), TMDB$1.image('t/p/w200/' + air_epis[0].episode.still_path), false, function () {
            preview.find('img').remove();
          });
          item.find('.timetable__body').prepend(preview);
        }
        item.addClass('timetable__item--any');
      }
      item.find('.timetable__date').text(day_week["short"] + ' - ' + weeks[date.getDay()] + '.');
      item.on('hover:focus', function () {
        last = $(this)[0];
        scroll.update($(this));
      }).on('hover:hover', function () {
        last = $(this)[0];
        Navigator.focused(last);
      }).on('hover:enter', function () {
        last = $(this)[0];
        var modal = $('<div></div>');
        air_epis.forEach(function (elem) {
          var noty = Template.get('notice_card', {
            time: Utils$2.parseTime(air_date).full,
            title: elem.card.name,
            descr: Lang.translate('full_season') + ' - <b>' + elem.episode.season_number + '</b><br>' + Lang.translate('full_episode') + ' - <b>' + elem.episode.episode_number + '</b>'
          });
          Utils$2.imgLoad(noty.find('img'), elem.card.poster ? elem.card.poster : elem.card.img ? elem.card.img : TMDB$1.image('t/p/w200/' + elem.card.poster_path), function () {
            noty.addClass('image--loaded');
          });
          noty.on('hover:enter', function () {
            Modal.close();
            Activity$1.push({
              url: '',
              component: 'full',
              id: elem.card.id,
              method: 'tv',
              card: elem.card,
              source: elem.card.source
            });
          });
          modal.append(noty);
        });
        Modal.open({
          title: Lang.translate('menu_tv'),
          size: 'medium',
          html: modal,
          onBack: function onBack() {
            Modal.close();
            Controller.toggle('content');
          }
        });
      });
      body.append(item);
    };
    this.back = function () {
      Activity$1.backward();
    };
    this.start = function () {
      Controller.add('content', {
        link: this,
        toggle: function toggle() {
          Controller.collectionSet(scroll.render());
          Controller.collectionFocus(last || false, scroll.render());
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: this.back
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      scroll.destroy();
      html.remove();
    };
  }

  function component$6(object) {
    var comp = new component$i(object);
    comp.create = function () {
      this.activity.loader(true);
      Account.subscribes(object, this.build.bind(this), this.empty.bind(this));
      return this.render();
    };
    return comp;
  }

  function Company(data) {
    var html;
    this.create = function () {
      html = Template.get('company', {
        name: data.name,
        img: data.logo_path ? Api.img(data.logo_path) : data.img || 'img/img_broken.svg',
        place: (data.headquarters ? data.headquarters + (data.origin_country ? ', ' : '') : '') + (data.origin_country ? data.origin_country : '')
      });
      if (!data.logo_path) html.addClass('icon--broken');
    };
    this.toggle = function () {
      var _this = this;
      Controller.add('company', {
        invisible: true,
        toggle: function toggle() {
          Controller.collectionSet(_this.render());
          Controller.collectionFocus(false, _this.render());
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        down: this.onDown,
        up: this.onUp,
        back: this.onBack
      });
      Controller.toggle('company');
    };
    this.render = function (js) {
      return js ? html[0] : html;
    };
    this.destroy = function () {
      html.remove();
    };
  }

  function component$5(object) {
    var comp = new Prisma.InteractionMain(object);
    comp.create = function () {
      var _this = this;
      this.activity.loader(true);
      Api.company(object, function (data) {
        var company = new Company(data.company);
        company.create();
        _this.push(company);
        _this.build(data.lines);
      }, this.empty.bind(this));
      return this.render();
    };
    return comp;
  }

  function Feed(object) {
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      step: 250,
      end_ratio: 2
    });
    var html = document.createElement('div');
    var feed = [];
    var last;
    this.create = function () {
      var _this = this;
      this.activity.loader(true);
      network.silent(Utils$2.protocol() + object$2.cub_domain + '/api/feed/all', this.build.bind(this), function () {
        var empty = new Empty();
        html.append(empty.render(true));
        _this.start = empty.start;
        _this.activity.loader(false);
        _this.activity.toggle();
      });
      return this.render();
    };
    this.next = function () {
      if (object.page < 15) {
        object.page++;
        var offset = object.page - 1;
        this.append(feed.slice(20 * offset, 20 * offset + 20), true);
      }
    };
    this.loadImg = function (box, src) {
      var img = box.find('img');
      img.onload = function () {
        box.addClass('loaded');
      };
      img.onerror = function () {
        img.src = './img/img_broken.svg';
      };
      img.src = src;
    };
    this.append = function (data, append) {
      var _this2 = this;
      data.forEach(function (element) {
        var item = Template.js(element.type == 'episode' || element.type == 'trailer' ? 'feed_episode' : 'feed_item');
        item.addClass('feed-item--' + element.type);
        var type = {
          top: Prisma.Lang.translate('title_in_top'),
          now_playing: Prisma.Lang.translate('title_now_watch'),
          uhd: Prisma.Lang.translate('title_in_high_quality'),
          popular: Prisma.Lang.translate('title_popular'),
          trailer: Prisma.Lang.translate('title_trailers'),
          episode: Prisma.Lang.translate('card_new_episode'),
          now: Prisma.Lang.translate('title_new')
        };
        var sity = element.data.countries || [];
        var year = ((element.data.release_date || element.data.first_air_date) + '').slice(0, 4);
        var info = [];
        var tags = [];
        info.push(year + (sity.length ? ' - ' + sity.slice(0, 2).join(', ') : ''));
        if (element.data.imdb_rating && parseFloat(element.data.imdb_rating) > 0) {
          info.push('IMDB ' + element.data.imdb_rating);
        }
        if (element.data.kp_rating && parseFloat(element.data.kp_rating) > 0) {
          info.push('KP ' + element.data.kp_rating);
        }
        if (element.type == 'episode') {
          tags = element.hash.split(';').map(function (a) {
            return Lang.translate(a.slice(0, 1) == 's' ? 'torrent_serial_season' : 'torrent_serial_episode') + ' - ' + a.slice(1);
          });
        } else if (element.data.genres) tags.push(element.data.genres.join(', '));else if (element.data.genre_ids) {
          tags.push(Api.sources.tmdb.getGenresNameFromIds(element.card_type, element.data.genre_ids).join(', '));
        }
        item.find('.feed-item__label').addClass('feed-item__label--' + element.type).text(type[element.type]);
        item.find('.feed-item__title').text(element.data.title || element.data.name);
        item.find('.feed-item__info').text(info.join(' / '));
        item.find('.feed-item__descr').text(element.data.overview || '');
        item.find('.feed-item__tags').text(tags.join(' / '));
        _this2.loadImg(item.find('.feed-item__poster-box'), element.data.poster_path ? Api.img(element.data.poster_path, 'w500') : './img/img_broken.svg');
        var image = item.find('.feed-item__image-box');
        if (image) {
          _this2.loadImg(image, Api.img(element.type == 'episode' ? element.data.episode.still_path : element.data.backdrop_path, 'w780'));
        }
        scroll.append(item);
        var btn_watch = document.createElement('div');
        btn_watch.addClass('simple-button selector');
        btn_watch.text(Lang.translate('title_watch'));
        btn_watch.on('hover:focus', function () {
          last = btn_watch;
          scroll.update(item);
          Background.change(Api.img(element.data.poster_path, 'w500'));
        });
        btn_watch.on('hover:enter', function () {
          Activity$1.push({
            url: '',
            component: 'full',
            id: element.card_id,
            method: element.card_type,
            card: element.data,
            source: element.data.source || 'tmdb'
          });
        });
        item.find('.feed-item__buttons').append(btn_watch);
        if (append) Controller.collectionAppend(btn_watch);
      });
    };
    this.build = function (data) {
      feed = data.result;
      html.addClass('feed');
      var head = Template.js('feed_head');
      head.find('.feed-head__title').text(Lang.translate('prisma_movie_title'));
      head.find('.feed-head__info').html(Lang.translate('prisma_movie_descr'));
      head.on('hover:focus', scroll.update.bind(scroll, head));
      scroll.minus();
      scroll.onWheel = function (step) {
        Navigator.move(step > 0 ? 'down' : 'up');
      };
      scroll.onEnd = this.next.bind(this);
      scroll.append(head);
      this.append(feed.slice(0, 20));
      html.append(scroll.render(true));
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.start = function () {
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render(true));
          Controller.collectionFocus(last || false, scroll.render(true));
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return html;
    };
    this.destroy = function () {
      network.clear();
      scroll.destroy();
      html.remove();
    };
  }

  /**
   * Карточка
   * @param {object} data
   * @param {{isparser:boolean, card_small:boolean, card_category:boolean, card_collection:boolean, card_wide:true}} params 
   */
  function Folder(data) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.data = data;
    this.params = params;
    this.card = this.data.length ? this.data[0] : {};
    this.create = function () {
      var _this = this;
      this.folder = Template.js('bookmarks_folder');
      this.folder.querySelector('.bookmarks-folder__title').innerText = Lang.translate('menu_' + params.media);
      this.folder.querySelector('.bookmarks-folder__num').innerText = this.data.length;
      this.folder.addEventListener('hover:focus', function () {
        if (_this.onFocus) _this.onFocus(_this.folder, _this.card);
      });
      this.folder.addEventListener('hover:touch', function () {
        if (_this.onTouch) _this.onTouch(_this.folder, _this.card);
      });
      this.folder.addEventListener('hover:hover', function () {
        if (_this.onHover) _this.onHover(_this.folder, _this.card);
      });
      this.folder.addEventListener('hover:enter', function () {
        Activity$1.push({
          url: '',
          title: Lang.translate('title_' + params.category) + ' - ' + Lang.translate('menu_' + params.media),
          component: 'favorite',
          type: params.category,
          filter: params.media,
          page: 1,
          card_style: 'standard'
        });
      });
      this.folder.addEventListener('visible', this.visible.bind(this));
    };

    /**
     * Загрузить картинку
     */
    this.image = function (src, i) {
      var _this2 = this;
      var img = document.createElement('img');
      img.addClass('card__img');
      img.addClass('i-' + i);
      img.onload = function () {
        _this2.folder.classList.add('card--loaded');
      };
      img.onerror = function () {
        img.src = './img/img_broken.svg';
      };
      this.folder.querySelector('.bookmarks-folder__body').append(img);
      img.src = src;
    };

    /**
     * Загружать картинку если видна карточка
     */
    this.visible = function () {
      var _this3 = this;
      var filtred = this.data.filter(function (a) {
        return a.backdrop_path;
      }).slice(0, 3);
      filtred.forEach(function (a, i) {
        _this3.image(Api.img(a.backdrop_path), i);
      });
      if (filtred.length == 0) this.image('./img/img_load.svg');
      if (this.onVisible) this.onVisible(this.folder, data);
    };

    /**
     * Уничтожить
     */
    this.destroy = function () {
      this.folder.remove();
    };

    /**
     * Рендер
     * @returns {object}
     */
    this.render = function (js) {
      return js ? this.folder : $(this.folder);
    };
  }

  function component$4(object) {
    var all = Favorite.all();
    var comp = new Prisma.InteractionMain(object);
    var viev_all = false;
    var timer;
    comp.create = function () {
      this.activity.loader(true);
      Account.notice(function (notice) {
        var invoice = notice.filter(function (a) {
          return a.method == 'tv-voice';
        });
        var category = ['look', 'scheduled', 'book', 'like', 'wath', 'viewed', 'continued', 'thrown'];
        var lines = [];
        var voice = [];
        var folders = ['book', 'like', 'wath', 'look'];
        var media = ['movies', 'tv'];
        function draw() {
          category.forEach(function (a) {
            if (all[a].length) {
              var items = Arrays.clone(all[a].slice(0, 20));
              if (folders.indexOf(a) > -1) {
                var i = 0;
                media.forEach(function (m) {
                  var filter = Utils$2.filterCardsByType(all[a], m);
                  if (filter.length) {
                    Arrays.insert(items, i, {
                      cardClass: function cardClass() {
                        return new Folder(filter, {
                          category: a,
                          media: m
                        });
                      }
                    });
                    i++;
                  }
                });
                items = items.slice(0, 20);
              }
              items.forEach(function (a) {
                return a.ready = false;
              });
              lines.push({
                title: Lang.translate('title_' + a),
                results: items,
                type: a
              });
              all[a].forEach(function (card) {
                var noti = invoice.find(function (a) {
                  return a.card_id == card.id;
                });
                if (noti) {
                  // сам не помню, баг будет если не клонировать
                  var card_clone = Arrays.clone(card);
                  card_clone.ready = false;
                  var hash = Utils$2.hash([noti.season, noti.season > 10 ? ':' : '', noti.episode, card_clone.original_title].join(''));
                  var view = Timeline$1.view(hash);
                  if (!view.percent && !voice.find(function (a) {
                    return a.id == card_clone.id;
                  })) {
                    voice.push(card_clone);
                  }
                }
              });
            }
          });
          if (voice.length) {
            Storage.set('player_continue_watch', Arrays.clone(voice.slice(0, 20)));
            Arrays.insert(lines, 0, {
              title: Lang.translate('card_new_episode'),
              results: voice.slice(0, 20)
            });
          }
          if (lines.length) {
            Arrays.insert(lines, 0, {
              title: '',
              results: []
            });
            comp.build(lines);
            setTimeout(function () {
              Layer.visible(comp.render(true));
            }, 100);
          } else comp.empty();
        }
        draw();

        // if(Account.working()){
        //     let tic = 0

        //     timer = setInterval(()=>{
        //         let any = Account.all()

        //         if(any.length){
        //             all = Favorites.all()

        //             clearInterval(timer)

        //             draw()
        //         }
        //         else if(tic > 10){
        //             clearInterval(timer)

        //             comp.empty()
        //         }

        //         tic++
        //     },1000)
        // }
        // else{
        //     all = Favorites.all()

        //     draw()
        // }
      });
      return this.render();
    };
    comp.onAppend = function (line, elem) {
      if (elem.results.length == 0) {
        line.render(true).removeClass('items-line--type-cards').find('.items-line__head').addClass('hide');
        var body = line.render(true).find('.scroll__body');
        var category = ['book', 'look', 'like', 'wath'];
        category.forEach(function (a) {
          var register = Template.js('register');
          register.addClass('selector');
          register.find('.register__name').text(Lang.translate('title_' + a));
          register.find('.register__counter').text(all[a].length);
          register.on('hover:enter', function () {
            Activity$1.push({
              url: '',
              title: Lang.translate('title_' + a),
              component: 'favorite',
              type: a,
              page: 1
            });
          });
          register.on('hover:focus', function () {
            line.render(true).find('.scroll').Scroll.update(register, true);
          });
          body.append(register);
        });
      } else {
        line.render(true).on('visible', function () {
          var more = line.render(true).find('.items-line__more');
          if (more) {
            more.text(Lang.translate('settings_param_card_view_all'));
            more.on('hover:enter', function () {
              viev_all = true;
            });
          }
        });
      }
    };
    comp.onMore = function (line) {
      setTimeout(function () {
        Activity$1.push({
          url: '',
          title: Lang.translate('title_' + line.type),
          component: 'favorite',
          type: line.type,
          page: viev_all ? 1 : 2
        });
        viev_all = false;
      }, 50);
    };
    comp.onDestroy = function () {
      clearInterval(timer);
    };
    return comp;
  }

  function component$3(object) {
    var explorer = new Explorer(object);
    var filter = new create$5(object);
    var scroll = new create$f({
      mask: true,
      over: true
    });
    var last;
    var choice = {
      season: object.movie.number_of_seasons
    };
    this.create = function () {
      this.filter();
      this.selected();
      explorer.appendFiles(scroll.render());
      explorer.appendHead(filter.render());
      scroll.body().addClass('torrent-list');
      explorer.render().find('.filter--search, .filter--sort').remove();
      scroll.minus(explorer.render().find('.explorer__files-head'));
      this.load();
      this.activity.toggle();
      return this.render();
    };
    this.filter = function () {
      var _this = this;
      filter.addButtonBack();
      filter.onSelect = function (type, a, b) {
        choice.season = b.season; //и так сойде ;]

        _this.selected();
        _this.load();
      };
      filter.onBack = function () {
        _this.start();
      };
    };
    this.selected = function () {
      var select = [];
      var seasons = [];
      for (var i in choice) {
        if (i == 'season') select.push(Lang.translate('torrent_serial_season') + ': ' + choice[i]);
      }
      for (var _i = 0; _i < object.movie.number_of_seasons; _i++) {
        seasons.push({
          title: _i + 1,
          season: _i + 1
        });
      }
      filter.set('filter', [{
        title: Lang.translate('torrent_serial_season'),
        subtitle: choice.season,
        noselect: true,
        items: seasons
      }]);
      filter.chosen('filter', select);
    };
    this.load = function () {
      var _this2 = this;
      this.activity.loader(true);
      var season = choice.season;
      Api.clear();
      Api.seasons(object.movie, [season], function (v) {
        last = false;
        scroll.clear();
        scroll.reset();
        if (v[season] && v[season].episodes && v[season].episodes.length) {
          _this2.season(v[season]);
          _this2.draw(v[season].episodes);
        } else {
          _this2.empty();
        }
        _this2.activity.loader(false);
      });
    };
    this.season = function (season) {
      var head = [];
      if (season.vote_average) head.push(Lang.translate('title_rating') + ': ' + parseFloat(season.vote_average + '').toFixed(1));
      if (season.air_date) head.push(Lang.translate('full_date_of_release') + ': ' + Utils$2.parseTime(season.air_date).full);
      head.push(Lang.translate('title_episodes') + ': ' + season.episodes.length);
      season.head = head.join('&nbsp; ● &nbsp;');
      var tpl = Template.get('season_info', season);
      tpl.on('hover:focus', function (e) {
        scroll.update($(e.target), true);
      });
      if (!season.overview) tpl.find('.season-info__overview').remove();
      scroll.append(tpl);
    };
    this.empty = function () {
      var em = Template.get('empty_filter');
      var bn = $('<div class="simple-button selector"><span>' + Lang.translate('filter_clarify') + '</span></div>');
      bn.on('hover:enter', function () {
        filter.render().find('.filter--filter').trigger('hover:enter');
      });
      em.find('.empty-filter__title').remove();
      em.find('.empty-filter__buttons').removeClass('hide').append(bn);
      scroll.append(em);
      Controller.enable('content');
    };
    this.draw = function (episodes) {
      episodes.forEach(function (episode, index) {
        var number = episode.episode_number || index + 1;
        var hash = Utils$2.hash([choice.season, choice.season > 10 ? ':' : '', number, object.movie.original_title].join(''));
        var info = [];
        var out_air = new Date((episode.air_date + '').replace(/-/g, '/'));
        var out_now = Date.now();
        var out_day = episode.air_date ? Math.round((out_air.getTime() - out_now) / (24 * 60 * 60 * 1000)) : 1;
        var out_txt = Lang.translate('full_episode_days_left') + ': ' + (episode.air_date ? out_day : '- -');
        episode.timeline = Timeline$1.view(hash);
        episode.time = Utils$2.secondsToTime(episode.runtime * 60, true);
        episode.title = episode.name || Lang.translate('torrent_serial_episode') + ' ' + number;
        episode.quality = out_day > 0 ? out_txt : '';
        if (episode.vote_average) info.push(Template.get('season_episode_rate', {
          rate: parseFloat(episode.vote_average + '').toFixed(1)
        }, true));
        if (episode.air_date) info.push(Utils$2.parseTime(episode.air_date).full);
        episode.info = info.length ? info.map(function (i) {
          return '<span>' + i + '</span>';
        }).join('<span class="season-episode-split">●</span>') : '';
        var html = Template.get('season_episode', episode);
        var loader = html.find('.season-episode__loader');
        var image = html.find('.season-episode__img');
        var viewed = function viewed() {
          html.find('.season-episode__viewed').remove();
          if (Boolean(episode.timeline.percent)) html.find('.season-episode__img').append('<div class="season-episode__viewed">' + Template.get('icon_viewed', {}, true) + '</div>');
        };
        html.find('.season-episode__timeline').append(Timeline$1.render(episode.timeline));
        if (out_day > 0) html.css('opacity', '0.5');else {
          viewed();
          if (Boolean(episode.timeline.percent)) last = html[0];
          html.on('hover:enter', function () {
            if (Boolean(episode.timeline.percent)) {
              episode.timeline.time = 0;
              episode.timeline.percent = 0;
            } else {
              episode.timeline.time = episode.timeline.duration * 0.95;
              episode.timeline.percent = 95;
            }
            Timeline$1.update(episode.timeline);
            viewed();
          });
        }
        html.on('hover:focus', function (e) {
          last = e.target;
          scroll.update($(e.target), true);
        }).on('visible', function () {
          var img = html.find('img')[0];
          img.onerror = function () {
            img.src = './img/img_broken.svg';
          };
          img.onload = function () {
            image.addClass('season-episode__img--loaded');
            loader.remove();
            image.append('<div class="season-episode__episode-number">' + ('0' + number).slice(-2) + '</div>');
          };
          if (episode.still_path) img.src = TMDB$1.image('t/p/w300' + episode.still_path);else if (episode.img) img.src = episode.img;else {
            loader.remove();
            image.append('<div class="season-episode__episode-number">' + ('0' + number).slice(-2) + '</div>');
          }
        }).on('hover:hover hover:touch', function (e) {
          last = e.target;
          Navigator.focused(last);
        });
        scroll.append(html);
      });
      if (last) scroll.update($(last), true);
      Layer.visible(scroll.render(true));
      Controller.enable('content');
    };
    this.start = function () {
      if (Activity$1.active().activity !== this.activity) return;
      Background.immediately(Utils$2.cardImgBackgroundBlur(object.movie));
      Controller.add('content', {
        toggle: function toggle() {
          Controller.collectionSet(scroll.render(), explorer.render());
          Controller.collectionFocus(last || false, scroll.render());
          Navigator.remove(explorer.render().find('.explorer-card__head-img')[0]);
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else explorer.toggle();
        },
        right: function right() {
          filter.show(Lang.translate('title_filter'), 'filter');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return explorer.render();
    };
    this.destroy = function () {};
  }

  function component$2(object) {
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      step: 250,
      end_ratio: 2
    });
    var items = [];
    var html = document.createElement('div');
    var body = document.createElement('div');
    var last;
    var active = 0;
    var follow = function follow(event) {
      if (event.name == 'person_subscribes_id') {
        items.forEach(function (card) {
          if (event.value.indexOf(card.data.id) == -1) {
            card.render(true).style.opacity = 0.5;
            card.onEnter = function () {};
          }
        });
      }
    };
    this.create = function () {
      this.activity.loader(true);
      Storage.listener.follow('change', follow);
      Account.persons(this.build.bind(this), this.empty.bind(this));
    };
    this.empty = function () {
      var empty = new Empty();
      html.appendChild(empty.render(true));
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.append = function (data, append) {
      data.forEach(function (element) {
        var card = new Card(element.person, {
          card_category: true
        });
        card.create();
        card.onFocus = function (target, card_data) {
          last = target;
          active = items.indexOf(card);
          scroll.update(card.render(true));
          Background.change(Utils$2.cardImgBackgroundBlur(card_data));
        };
        card.onTouch = function (target, card_data) {
          last = target;
          active = items.indexOf(card);
        };
        card.onEnter = function (target, card_data) {
          last = target;
          Activity$1.push({
            url: element.person.url,
            title: Lang.translate('title_person'),
            component: 'actor',
            id: element.person_id,
            source: object.source
          });
        };
        card.onMenu = function () {};
        body.appendChild(card.render(true));
        items.push(card);
        if (append) Controller.collectionAppend(card.render(true));
      });
    };
    this.limit = function () {
      var limit_view = 12;
      var lilit_collection = 36;
      var colection = items.slice(Math.max(0, active - limit_view), active + limit_view);
      items.forEach(function (item) {
        if (colection.indexOf(item) == -1) {
          item.render(true).classList.remove('layer--render');
        } else {
          item.render(true).classList.add('layer--render');
        }
      });
      Navigator.setCollection(items.slice(Math.max(0, active - lilit_collection), active + lilit_collection).map(function (c) {
        return c.render(true);
      }));
      Navigator.focused(last);
      Layer.visible(scroll.render(true));
    };
    this.build = function (data) {
      var _this = this;
      if (data.length) {
        body.classList.add('category-full');
        scroll.minus();
        scroll.onScroll = this.limit.bind(this);
        scroll.onWheel = function (step) {
          if (!Controller.own(_this)) _this.start();
          if (step > 0) Navigator.move('down');else Navigator.move('up');
        };
        this.append(data);
        scroll.append(body);
        html.appendChild(scroll.render(true));
        this.limit();
        this.activity.loader(false);
        this.activity.toggle();
      } else {
        this.empty();
      }
    };
    this.start = function () {
      var _this2 = this;
      Controller.add('content', {
        link: this,
        toggle: function toggle() {
          if (_this2.activity.canRefresh()) return false;
          Controller.collectionSet(scroll.render(true));
          Controller.collectionFocus(last || false, scroll.render(true));
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          if (_this2.onRight) {
            if (Navigator.canmove('right')) Navigator.move('right');else _this2.onRight();
          } else Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.refresh = function () {
      this.activity.needRefresh();
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function (js) {
      return js ? html : $(html);
    };
    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      Storage.listener.remove('change', follow);
      html.remove();
      body.remove();
      items = [];
    };
  }

  var network$3 = new create$e();
  function api$1() {
    return Utils$2.protocol() + object$2.pris_domain + '/api/';
  }
  function account() {
    return new Promise(function (resolve, reject) {
      var account = Storage.get('account', '{}');
      if (account.token) {
        resolve(account);
      } else {
        reject({
          status: 345
        });
      }
    });
  }
  function facts(card_id, card_type, callback, error) {
    account().then(function (acc) {
      network$3.silent(api$1() + 'ai/generate/facts/' + card_id + '/' + card_type, callback, error, false, {
        headers: {
          token: acc.token,
          profile: acc.profile.id
        }
      });
    })["catch"](error);
  }
  function recommendations(card_id, card_type, callback, error) {
    account().then(function (acc) {
      network$3.silent(api$1() + 'ai/generate/recommend/' + card_id + '/' + card_type, callback, error, false, {
        headers: {
          token: acc.token,
          profile: acc.profile.id
        }
      });
    })["catch"](error);
  }
  function _search(query, callback, error) {
    account().then(function (acc) {
      network$3.silent(api$1() + 'ai/search/' + encodeURIComponent(query), callback, error, false, {
        headers: {
          token: acc.token,
          profile: acc.profile.id
        }
      });
    })["catch"](error);
  }
  function discovery() {
    var source = {
      title: Lang.translate('title_ai_assistant'),
      search: function search(params, oncomplite) {
        source.params.nofound = Lang.translate('search_nofound');
        _search(decodeURIComponent(params.query), function (json) {
          json.title = Lang.translate('title_ai_assistant');
          json.results.forEach(function (element) {
            element.source = 'tmdb';
          });
          oncomplite(json.results.length ? [json] : []);
        }, function (e) {
          if (e.decode_code == 600) source.params.nofound = Lang.translate('ai_search_limit');
          oncomplite([]);
        });
      },
      onCancel: function onCancel() {
        network$3.clear();
      },
      params: {
        lazy: true,
        align_left: true,
        start_typing: Lang.translate('ai_search_start_typing')
      }
    };
    return source;
  }
  var Ai = {
    facts: facts,
    recommendations: recommendations,
    discovery: discovery
  };

  function Facts(object) {
    var explorer = new Explorer(object);
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      nopadding: true
    });
    var html = $('<div class="torrent-list"></div>');
    var cache = 'facts_' + object.movie.id + '_' + (object.movie.name ? 'tv' : 'movie');
    this.create = function () {
      var _this = this;
      this.activity.loader(false);
      explorer.render().find('.explorer__files-head').remove();
      explorer.appendFiles(scroll.render(true));
      scroll.append(html);
      scroll.minus();
      var text_cache = '';
      Prisma.Cache.getData('other', cache).then(function (text) {
        text_cache = text;
      })["finally"](function () {
        if (text_cache) {
          _this.build(text_cache);
        } else {
          _this.loading();
          Layer.update();
          Ai.facts(object.movie.id, object.movie.name ? 'tv' : 'movie', function (data) {
            Cache.rewriteData('other', cache, data.text)["finally"](function () {});
            _this.build(data.text);
          }, _this.empty.bind(_this));
        }
      });
      return this.render();
    };
    this.loading = function () {
      var ico = Template.get('icon_text', {}, true);
      var tpl = Template.get('ai_search_animation', {
        icon: ico
      });
      var box = $('<div class="ai-box-scroll layer--wheight"></div>');
      box.append(tpl);
      scroll.append(box);
    };
    this.empty = function (event) {
      var code = network.errorCode(event);
      var text = {
        title: Lang.translate('network_error'),
        descr: Lang.translate('subscribe_noinfo')
      };
      if (code == 600) {
        text.title = Lang.translate('ai_subscribe_title');
        text.descr = Lang.translate('ai_subscribe_descr');
        text.noicon = true;
        text.width = 'medium';
      }
      if (code == 347) {
        text.title = Lang.translate('empty_title_two');
        text.descr = Lang.translate('empty_text_two');
      }
      if (code == 345) {
        text.title = Lang.translate('account_login_failed');
        text.descr = Lang.translate('account_login_wait');
      }
      if (code == 245) {
        text.descr = event.message || Lang.translate('subscribe_noinfo');
      }
      scroll.clear();
      var empty = new Empty(text);
      empty.onLeft = function () {
        explorer.toggle();
      };
      empty.render().addClass('layer--wheight');
      html.append(empty.render());
      scroll.append(html);
      this.start = empty.start.bind(empty);
      this.activity.toggle();
    };
    this.build = function (text) {
      try {
        html.html(Utils$2.simpleMarkdownParser(text));
        html.find('h1').remove();
        html.addClass('text-markdow');
        scroll.render(true).removeClass('scroll--nopadding');
        scroll.clear();
        scroll.append(html);
        html.addClass('animate-up-content animate-opacity');
        this.activity.toggle();
      } catch (e) {
        this.empty({
          status: 245,
          message: e.message
        });
      }
    };
    this.start = function () {
      if (Activity$1.active().activity !== this.activity) return;
      Background.immediately(Utils$2.cardImgBackgroundBlur(object.movie));
      Controller.add('content', {
        link: this,
        invisible: true,
        toggle: function toggle() {
          Controller.collectionSet(scroll.render(true));
          Controller.collectionFocus(false, scroll.render(true));
        },
        left: function left() {
          explorer.toggle();
        },
        up: function up() {
          if (scroll.position() == 0) Controller.toggle('head');else scroll.wheel(-150);
        },
        down: function down() {
          scroll.wheel(150);
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return explorer.render();
    };
    this.destroy = function () {
      network.clear();
      scroll.destroy();
      html.remove();
    };
  }

  function Recommendations(object) {
    var explorer = new Explorer(object);
    var network = new create$e();
    var scroll = new create$f({
      mask: true,
      over: true,
      nopadding: true
    });
    var html = $('<div></div>');
    var items = [];
    var last;
    var active;
    this.create = function () {
      var _this = this;
      this.activity.loader(false);
      explorer.render().find('.explorer__files-head').remove();
      explorer.appendFiles(scroll.render(true));
      scroll.append(html);
      scroll.minus();
      this.loading();
      Ai.recommendations(object.movie.id, object.movie.name ? 'tv' : 'movie', function (data) {
        if (data.results.length == 0) _this.empty({
          status: 347
        });else _this.build(data);
      }, this.empty.bind(this));
      return this.render();
    };
    this.loading = function () {
      var ico = Template.get('icon_card', {}, true);
      var tpl = Template.get('ai_search_animation', {
        icon: ico
      });
      var box = $('<div class="ai-box-scroll layer--wheight"></div>');
      box.append(tpl);
      scroll.append(box);
    };
    this.empty = function (event) {
      var code = network.errorCode(event);
      var text = {
        title: Lang.translate('network_error'),
        descr: Lang.translate('subscribe_noinfo')
      };
      if (code == 600) {
        text.title = Lang.translate('ai_subscribe_title');
        text.descr = Lang.translate('ai_subscribe_descr');
        text.noicon = true;
        text.width = 'medium';
      }
      if (code == 347) {
        text.title = Lang.translate('empty_title_two');
        text.descr = Lang.translate('empty_text_two');
      }
      if (code == 345) {
        text.title = Lang.translate('account_login_failed');
        text.descr = Lang.translate('account_login_wait');
      }
      if (code == 245) {
        text.descr = event.message || Lang.translate('subscribe_noinfo');
      }
      scroll.clear();
      var empty = new Empty(text);
      empty.onLeft = function () {
        explorer.toggle();
      };
      empty.render().addClass('layer--wheight');
      html.append(empty.render());
      scroll.append(html);
      this.start = empty.start.bind(empty);
      this.activity.toggle();
    };
    this.build = function (data) {
      var _this2 = this;
      try {
        scroll.render(true).removeClass('scroll--nopadding');
        scroll.clear();
        html.addClass('category-full');
        scroll.onScroll = this.limit.bind(this);
        scroll.onWheel = function (step) {
          if (!Controller.own(_this2)) _this2.start();
          if (step > 0) Navigator.move('down');else Navigator.move('up');
        };
        this.draw(data.results);
        scroll.append(html);
        this.limit();
        this.activity.toggle();
      } catch (e) {
        this.empty({
          status: 245,
          message: e.message
        });
      }
    };
    this.draw = function (results) {
      results.forEach(function (element) {
        var card = new Card(element, {
          object: object,
          card_explorer: true
        });
        card.create();
        card.onFocus = function (target, card_data) {
          last = target;
          active = items.indexOf(card);
          scroll.update(card.render(true));
          Background.change(Utils$2.cardImgBackground(card_data));
        };
        card.onTouch = function (target, card_data) {
          last = target;
          active = items.indexOf(card);
        };
        card.onEnter = function (target, card_data) {
          last = target;
          Activity$1.push({
            url: card_data.url,
            component: 'full',
            id: element.id,
            method: card_data.name ? 'tv' : 'movie',
            card: element,
            source: element.source || object.source
          });
        };
        html.append(card.render(true));
        items.push(card);
      });
    };
    this.limit = function () {
      var limit_view = 12;
      var lilit_collection = 36;
      var colection = items.slice(Math.max(0, active - limit_view), active + limit_view);
      items.forEach(function (item) {
        if (colection.indexOf(item) == -1) {
          item.render(true).classList.remove('layer--render');
        } else {
          item.render(true).classList.add('layer--render');
        }
      });
      Navigator.setCollection(items.slice(Math.max(0, active - lilit_collection), active + lilit_collection).map(function (c) {
        return c.render(true);
      }));
      Navigator.focused(last);
      Layer.visible(scroll.render(true));
    };
    this.start = function () {
      if (Activity$1.active().activity !== this.activity) return;
      Background.immediately(Utils$2.cardImgBackgroundBlur(object.movie));
      Controller.add('content', {
        link: this,
        invisible: true,
        toggle: function toggle() {
          Controller.collectionSet(scroll.render(true));
          Controller.collectionFocus(last || false, scroll.render(true));
        },
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else explorer.toggle();
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: function back() {
          Activity$1.backward();
        }
      });
      Controller.toggle('content');
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function () {
      return explorer.render();
    };
    this.destroy = function () {
      network.clear();
      Arrays.destroy(items);
      scroll.destroy();
      html.remove();
      items = [];
    };
  }

  var component$1 = {
    main: component$k,
    full: component$j,
    category: component$g,
    category_full: component$h,
    actor: component$f,
    favorite: component$e,
    torrents: component$d,
    mytorrents: component$c,
    relise: component$b,
    collections: component$a,
    collections_view: component$9,
    nocomponent: component$8,
    timetable: component$7,
    subscribes: component$6,
    company: component$5,
    feed: Feed,
    bookmarks: component$4,
    episodes: component$3,
    myperson: component$2,
    ai_facts: Facts,
    ai_recommendations: Recommendations
  };

  /**
   * Создать компонент
   * @param {{component:string}} object 
   * @returns 
   */
  function create$4(object) {
    if (component$1[object.component]) {
      try {
        return new component$1[object.component](object);
      } catch (e) {
        console.log('Component', 'create error', e.stack);
        return new component$1.nocomponent(object);
      }
    } else {
      return new component$1.nocomponent(object);
    }
  }

  /**
   * Добавить
   * @param {string} name 
   * @param {class} comp 
   */
  function add$5(name, comp) {
    component$1[name] = comp;
  }

  /**
   * Получить компонент
   * @param {string} name 
   * @returns {class}
   */
  function get$2(name) {
    return component$1[name];
  }
  var Component = {
    create: create$4,
    add: add$5,
    get: get$2
  };

  var html$6;
  function init$o() {
    html$6 = $("<div style=\"position: fixed; left: 0; top: 50%; right: 0; z-index: 101; text-align: center; padding-top: 6em; padding-top: 13vh;\">\n        <div style=\"font-size: 1.5em; line-height: 1.6\" class=\"lp-step\"></div>\n        <div style=\"font-size: 0.9em; opacity: 0.5\" class=\"lp-status\"></div>\n    </div>");
    $('body').append(html$6);
  }
  function step(position) {
    // html.find('.lp-step').text(Lang.translate('loading_progress_step_' + position))
  }
  function status(text) {
    // html.find('.lp-status').text(text)
  }
  function destroy$1() {
    html$6.remove();
  }
  var LoadingProgress = {
    init: init$o,
    step: step,
    status: status,
    destroy: destroy$1
  };

  function close$2() {
    if (Platform.is('apple_tv')) window.location.assign('exit://exit');
    if (Platform.is('tizen') && typeof tizen !== 'undefined' && tizen.application) {
      try {
        tizen.application.getCurrentApplication().exit();
      } catch (e) {
        console.log('Tizen exit error:', e);
      }
    }
    if (Platform.is('webos') && typeof window.close == 'function') window.close();
    if (Platform.is('android')) Android.exit();
    if (Platform.is('orsay')) Orsay$1.exit();
    if (Platform.is('netcast')) window.NetCastBack();
    if (Platform.is('noname')) window.history.back();
  }
  function loadStyle() {
    /** Start - для orsay одни стили, для других другие */
    var old_css = $('link[href="css/app.css"]');
    if (Platform.is('orsay') && window.location.host.indexOf('localhost') == -1) {
      var urlStyle = 'http://prisma.ws/css/app.css?v';
      //Для нового типа виджета берем сохраненный адрес загрузки
      if (Orsay$1.isNewWidget()) {
        //Для фрейм загрузчика запишем полный url
        if (location.protocol != 'file:') {
          var newloaderUrl = location.href.replace(/[^/]*$/, '');
          if (newloaderUrl.slice(-1) == '/') {
            newloaderUrl = newloaderUrl.substring(0, newloaderUrl.length - 1);
          }
          if (Orsay$1.getLoaderUrl() != newloaderUrl) {
            Orsay$1.setLoaderUrl(newloaderUrl);
          }
        }
        //console.log('Loader', 'start url: ', Orsay.getLoaderUrl());
        urlStyle = Orsay$1.getLoaderUrl() + '/css/app.css?v';
      }
      Utils$2.putStyle([urlStyle + object$2.css_version], function () {
        old_css.remove();
      });
    } else if (old_css.length) {
      Utils$2.putStyle([object$2.github_prisma + 'css/app.css?v' + object$2.css_version], function () {
        LoadingProgress.status('PutStyle ' + object$2.css_version);
        old_css.remove();
      }, function () {});
    }
  }
  function modalClose() {
    var controller = Controller.enabled().name;
    Modal.open({
      title: '',
      align: 'center',
      zIndex: 300,
      html: $('<div class="about">' + Lang.translate('close_app_modal') + '</div>'),
      buttons: [{
        name: Lang.translate('settings_param_no'),
        onSelect: function onSelect() {
          Modal.close();
          Controller.toggle(controller);
        }
      }, {
        name: Lang.translate('settings_param_yes'),
        onSelect: function onSelect() {
          Modal.close();
          Controller.toggle(controller);
          close$2();
        }
      }]
    });
  }
  var App = {
    close: close$2,
    loadStyle: loadStyle,
    modalClose: modalClose
  };

  var listener$3 = start$8();
  var activites = [];
  var callback = false;
  var fullout = false;
  var content;
  var slides;
  var maxsave;
  var base;
  function Activity(component, object) {
    var slide = Template.js('activity');
    var body = slide.querySelector('.activity__body');
    this.stoped = false;
    this.started = false;

    /**
     * Добовляет активити в список активитис
     */
    this.append = function () {
      slides.appendChild(slide);
    };

    /**
     * Создает новую активность
     */
    this.create = function () {
      try {
        component.create(body);
        var _render = component.render(true);
        body.appendChild(_render instanceof jQuery ? _render[0] : _render);
      } catch (e) {
        console.log('Activity', 'create error:', e.stack);
      }
    };

    /**
     * Показывает загрузку
     * @param {boolean} status 
     */
    this.loader = function (status) {
      if (status) slide.classList.add('activity--load');else slide.classList.remove('activity--load');
    };

    /**
     * Создает повторно
     */
    this.restart = function () {
      this.append();
      this.stoped = false;
      component.start();
    };

    /**
     * Стартуем активную активность
     */
    this.start = function () {
      this.started = true;
      Controller.add('content', {
        invisible: true,
        update: function update() {},
        toggle: function toggle() {},
        left: function left() {
          Controller.toggle('menu');
        },
        up: function up() {
          Controller.toggle('head');
        },
        back: function back() {
          backward();
        }
      });
      Controller.toggle('content');

      //Layer.update(slide)

      if (this.stoped) this.restart();else component.start();
    };

    /**
     * Пауза
     */
    this.pause = function () {
      this.started = false;
      component.pause();
    };

    /**
     * Включаем активность если она активна
     */
    this.toggle = function () {
      if (this.started) this.start();
    };
    this.refresh = function () {
      if (component.refresh) component.refresh();
    };
    this.canRefresh = function () {
      var status = this.started && this.need_refresh && inActivity() ? true : false;
      if (status) {
        this.need_refresh = false;
        replace(object);
      }
      return status;
    };
    this.needRefresh = function () {
      var _this = this;
      if (body.parentElement) body.parentElement.removeChild(body);
      this.need_refresh = true;
      var wait = Template.js('activity_wait_refresh');
      wait.addEventListener('click', function (e) {
        if (DeviceInput.canClick(e.originalEvent)) _this.canRefresh();
      });
      slide.appendChild(wait);
    };

    /**
     * Стоп
     */
    this.stop = function () {
      this.started = false;
      if (this.stoped) return;
      this.stoped = true;
      component.stop();
      if (slide.parentElement) slide.parentElement.removeChild(slide);
    };

    /**
     * Рендер
     */
    this.render = function (js) {
      return js ? slide : $(slide);
    };

    /**
     * Получить класс компонента
     */
    this.component = function () {
      return component;
    };

    /**
     * Уничтожаем активность
     */
    this.destroy = function () {
      component.destroy();

      //после create работает долгий запрос и затем вызывается build, однако уже было вызвано destroy и возникают ошибки, поэтому заодно чистим функцию build и empty
      for (var f in component) {
        if (typeof component[f] == 'function') {
          component[f] = function () {};
        }
      }
      slide.remove();
    };
    this.append();
  }
  function parseStart() {
    if (window.start_deep_link) return;
    var id = Utils$2.gup('card');
    if (id) {
      window.start_deep_link = {
        id: id,
        component: "full",
        method: Utils$2.gup('media') || 'movie',
        source: Utils$2.gup('source') || 'cub',
        card: {
          id: id,
          source: Utils$2.gup('source') || 'cub'
        }
      };
    } else if (!(Platform.is('orsay') || Platform.is('netcast') || Platform.is('webos') || Platform.is('tizen'))) {
      try {
        var params = new URLSearchParams(window.location.search);
        if (params.has('component')) {
          window.start_deep_link = {};
          params.forEach(function (v, n) {
            window.start_deep_link[n] = v;
          });
        }
      } catch (e) {
        console.log('Activity', 'url params start error:', e.message);
      }
    }
  }

  /**
   * Запуск
   */
  function init$n() {
    content = Template.js('activitys');
    slides = content.querySelector('.activitys__slides');
    maxsave = Storage.get('pages_save_total', 5);
    base = document.querySelector('head base');
    parseStart();
    empty();
    var wait = true;
    var swip_status = 0;
    var swip_timer;
    var start_time = Date.now();
    setTimeout(function () {
      wait = false;
    }, 1500);
    setTimeout(last$1, 500);
    window.addEventListener('popstate', function () {
      if (window.god_enabled) Prisma.Noty.show('Popstate - [' + (fullout || wait) + ']');
      if (fullout || wait) return;
      Screensaver$2.stop();
      if (swip_status == 0) empty(); //это чтоб не выходило с приложения, однако на айфонах это вызвает зависание на 2-3 сек

      listener$3.send('popstate', {
        count: activites.length
      });
      if (callback) callback();else {
        backward();
      }
    });
    Storage.listener.follow('change', function (event) {
      if (event.name == 'pages_save_total') maxsave = Storage.get('pages_save_total', 5);
      if (event.name == 'light_version') {
        activites.forEach(function (activity) {
          if (activity.activity) activity.activity.refresh();
        });
      }
    });

    // исключительно для огрызков пришлось мутить работу свайпа назад

    if (Platform.is('apple')) {
      var body = document.querySelector('body');
      body.addEventListener('touchstart', function (e) {
        var point = e.touches[0] || e.changedTouches[0];
        if (point.clientX < window.innerWidth * 0.15 && point.clientX < window.innerHeight - 120) {
          swip_status = 1;
          clearTimeout(swip_timer);
          swip_timer = setTimeout(function () {
            swip_status = 0;
          }, 2000);
        } else {
          swip_status = 0;
        }
      });
    }

    // выход из приложения

    listener$3.follow('backward', function (event) {
      var noout = Platform.is('browser') || Platform.desktop();
      if (event.count == 1 && Date.now() > start_time + 1000 * 2 && !noout) {
        var enabled = Controller.enabled().name;
        Select.show({
          title: Lang.translate('title_out'),
          items: [{
            title: Lang.translate('title_out_confirm'),
            out: true
          }, {
            title: Lang.translate('cancel')
          }],
          onSelect: function onSelect(a) {
            if (a.out) {
              out();
              Controller.toggle(enabled);
              App.close();
            } else {
              Controller.toggle(enabled);
            }
          },
          onBack: function onBack() {
            Controller.toggle(enabled);
          }
        });
      }
    });
  }

  /**
   * Лимит активностей, уничтожать если больше maxsave
   */
  function limit() {
    var curent = active$2();
    if (curent && curent.activity) curent.activity.pause();
    var tree_stop = activites.slice(-2);
    if (tree_stop.length > 1 && tree_stop[0].activity) tree_stop[0].activity.stop();
    var tree_destroy = activites.slice(-maxsave);
    if (tree_destroy.length > maxsave - 1) {
      var first = tree_destroy[0];
      if (first.activity) {
        first.activity.destroy();
        Prisma.Listener.send('activity', {
          component: first.component,
          type: 'destroy',
          object: first
        });
        first.activity = null;
      }
    }
  }

  /**
   * Обновить адрес в строке из активности
   */
  function pushState(object, replace, mix) {
    var path = window.location.protocol == 'file:' ? '' : base ? '/' : '';
    if (!window.prisma_settings.push_state) return window.history.pushState(null, null, path);
    var data = Arrays.clone(object);
    delete data.activity;
    var comp = [];
    for (var n in data) {
      if (typeof data[n] == 'string' || typeof data[n] == 'number' || typeof data[n] == 'boolean') comp.push(n + '=' + encodeURIComponent(data[n]));
    }
    var card = object.card || object.movie;
    var meth = object.method || (card ? card.name ? 'tv' : 'movie' : '');
    var sour = object.source || (card ? card.source : 'tmdb');
    var durl = card && card.id ? '?card=' + card.id + (meth ? '&media=' + meth : '') + (sour ? '&source=' + sour : '') : '?' + comp.join('&');
    if (mix) durl += '&' + mix;
    if (replace) window.history.replaceState(null, null, path + durl);else window.history.pushState(null, null, path + durl);
  }

  /**
   * Обновить адрес в строке из активности с добавлением дополнительных параметров
   */
  function mixState(mix) {
    var curent = active$2();
    if (curent && curent.activity) pushState(curent, true, mix);
  }

  /**
   * Добавить новую активность
   * @param {{component:string}} object 
   */
  function push$1(object) {
    limit();
    create$3(object);
    activites.push(object);
    start$3(object);
    pushState(object);
  }

  /**
   * Создать новую активность
   * @param {{component:string}} object 
   */
  function create$3(object) {
    var comp = Component.create(object);
    object.activity = new Activity(comp, object);
    comp.activity = object.activity;
    Prisma.Listener.send('activity', {
      component: object.component,
      type: 'init',
      object: object
    });
    object.activity.create();
    Prisma.Listener.send('activity', {
      component: object.component,
      type: 'create',
      object: object
    });
  }

  /**
   * Вызов обратно пользователем
   */
  function back$3() {
    listener$3.send('popstate', {
      count: activites.length
    });
    if (callback) callback();else {
      backward();
    }
  }

  /**
   * Получить активную активность
   * @returns {object}
   */
  function active$2() {
    return activites[activites.length - 1];
  }
  function inActivity() {
    return $('body').hasClass('settings--open') || $('body').hasClass('menu--open') ? false : true;
  }

  /**
   * Создать пустую историю
   */
  function empty() {
    var curent = active$2();
    if (curent && curent.activity) pushState(curent, false, 'r=' + Math.random());
  }

  /**
   * Получить все активности
   * @returns {[{component:string, activity:class}]}
   */
  function all() {
    return activites;
  }

  /**
   * Получить рендеры всех активностей
   * @returns {array}
   */
  function renderLayers(js) {
    var result = [];
    all().forEach(function (item) {
      if (item.activity) result.push(item.activity.render(js));
    });
    return result;
  }

  /**
   * Обработать событие назад
   */
  function backward() {
    callback = false;
    listener$3.send('backward', {
      count: activites.length
    });
    if (activites.length == 1) return;
    Array.from(slides.children).forEach(function (slide) {
      return slide.classList.remove('activity--active');
    });
    var curent = activites.pop();
    if (curent) {
      setTimeout(function () {
        curent.activity.destroy();
        Prisma.Listener.send('activity', {
          component: curent.component,
          type: 'destroy',
          object: curent
        });
      }, 200);
    }
    var previous_tree = activites.slice(-maxsave);
    if (previous_tree.length > maxsave - 1) {
      create$3(previous_tree[0]);
    }
    previous_tree = activites.slice(-1)[0];
    if (previous_tree) {
      if (previous_tree.activity) {
        start$3(previous_tree);
        Prisma.Listener.send('activity', {
          component: previous_tree.component,
          type: 'archive',
          object: previous_tree
        });
        pushState(previous_tree, true);
      } else {
        create$3(previous_tree);
        start$3(previous_tree);
        pushState(previous_tree);
      }
    }
  }

  /**
   * Сохранить активность в память
   * @param {{component:string, activity:class}} object 
   */
  function save(object) {
    var saved = {};
    for (var i in object) {
      if (i !== 'activity') saved[i] = object[i];
    }
    Storage.set('activity', saved);
  }

  /**
   * Получить данные активности
   * @param {{component:string, activity:class}} object 
   * @returns {{component:string}}
   */
  function extractObject(object) {
    var saved = {};
    for (var i in object) {
      if (i !== 'activity') saved[i] = object[i];
    }
    return saved;
  }

  /**
   * Активируем следующию активность 
   * @param {{component:string, activity:class}} object 
   */
  function start$3(object) {
    object.activity.start();
    save(object);
    Array.from(slides.children).forEach(function (slide) {
      return slide.classList.remove('activity--active');
    });
    object.activity.render(true).classList.add('activity--active');
    Head.title(object.title);
    Prisma.Listener.send('activity', {
      component: object.component,
      type: 'start',
      object: object
    });
  }

  /**
   * С какой активности начать запуск лампы
   */
  function last$1() {
    var active = Storage.get('activity', 'false');
    var start_from = Storage.field("start_page");
    if (window.prisma_settings.iptv) {
      active = {
        component: 'iptv',
        page: 1
      };
      push$1(active);
    } else if (window.start_deep_link) {
      push$1(window.start_deep_link);
    } else if (active && start_from === "last") {
      if (active.page) active.page = 1;
      push$1(active);
    } else {
      var _start_from$split = start_from.split('@'),
        _start_from$split2 = _slicedToArray(_start_from$split, 2),
        action = _start_from$split2[0],
        type = _start_from$split2[1];
      if (action == 'favorite') {
        push$1({
          url: '',
          title: Lang.translate(type == 'bookmarks' ? 'settings_input_links' : 'title_history'),
          component: type == 'bookmarks' ? 'bookmarks' : 'favorite',
          type: type,
          page: 1
        });
      } else if (action == 'movie') {
        push$1({
          url: action,
          title: 'Фильмы',
          component: "category",
          source: 'tmdb'
        });
      } else if (action == 'tv') {
        push$1({
          url: action,
          title: 'Сериалы',
          component: "category",
          source: 'tmdb'
        });
      } else if (action == 'anime') {
        push$1({
          url: 'discover/movie',
          title: 'Аниме',
          component: "category_full",
          keywords: "210024-anime",
          sort_by: 'primary_release_date.desc',
          source: 'tmdb',
          card_type: true,
          page: 1
        });
      } else {
        push$1({
          url: '',
          title: Lang.translate('title_main'),
          component: 'main',
          source: Storage.field('source'),
          page: 1
        });
      }
    }
  }

  /**
   * Рендер
   * @returns {object}
   */
  function render$3() {
    return content;
  }

  /**
   * Подключить обратный вызов при изменени истории
   * @param {*} call 
   */
  function call(call) {
    callback = call;
  }

  /**
   * Выход из лампы
   */
  function out() {
    fullout = true;
    back$3();
    for (var i = 0; i < window.history.length; i++) {
      back$3();
    }
    setTimeout(function () {
      fullout = false;
      empty();
    }, 100);
  }

  /**
   * Заменить активную активность
   * @param {object} replace 
   */
  function replace() {
    var replace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var clear = arguments.length > 1 ? arguments[1] : undefined;
    var object = extractObject(active$2());
    for (var i in replace) {
      object[i] = replace[i];
    }
    var made = active$2();
    made.activity.destroy();
    Prisma.Listener.send('activity', {
      component: made.component,
      type: 'destroy',
      object: made
    });
    activites.pop();
    push$1(clear ? replace : object);
  }
  var Activity$1 = {
    init: init$n,
    listener: listener$3,
    push: push$1,
    back: back$3,
    render: render$3,
    backward: backward,
    call: call,
    last: last$1,
    out: out,
    replace: replace,
    active: active$2,
    all: all,
    extractObject: extractObject,
    renderLayers: renderLayers,
    inActivity: inActivity,
    pushState: pushState,
    mixState: mixState
  };

  var listener$2 = start$8();
  var active$1;
  var active_name = '';
  var controlls = {};
  var select_active;
  var try_close = false;
  function observe$1() {
    if (typeof MutationObserver == 'undefined') return;
    var observer = new MutationObserver(function (mutations) {
      for (var i = 0; i < mutations.length; i++) {
        var mutation = mutations[i];
        if (mutation.type == 'childList' && !mutation.removedNodes.length) {
          var selectors = Array.from(mutation.target.querySelectorAll('.selector'));
          selectors.forEach(function (elem) {
            if (!elem.classList.contains('hg-button')) bindEvents(elem);
          });
        }
      }
    });
    observer.observe(document, {
      childList: true,
      subtree: true
    });
  }
  function animateTriggerEnter(elem) {
    if (Storage.field('advanced_animation')) {
      elem.addClass('animate-trigger-enter');
      setTimeout(function () {
        elem.removeClass('animate-trigger-enter');
      }, 500);
    }
  }

  /**
   * Добавить контроллер
   * @param {String} name 
   * @param {Object} calls 
   */
  function add$4(name, calls) {
    controlls[name] = calls;
  }

  /**
   * Запустить функцию
   * @param {String} name 
   * @param {Object} params 
   */
  function run(name, params) {
    if (active$1) {
      if (active$1[name]) {
        if (typeof active$1[name] == 'function') active$1[name](params);else if (typeof active$1[name] == 'string') {
          run(active$1[name], params);
        }
      }
    }
  }

  /**
   * Двигать
   * @param {String} direction 
   */
  function move(direction) {
    run(direction);
  }

  /**
   * Вызов enter
   */
  function enter() {
    if (active$1 && active$1.enter) run('enter');else if (select_active) {
      animateTriggerEnter(select_active);
      Utils$2.trigger(select_active, 'hover:enter');
    }
  }

  /**
   * Вызов long
   */
  function _long() {
    if (active$1 && active$1["long"]) run('long');else if (select_active) Utils$2.trigger(select_active, 'hover:long');
  }

  /**
   * Завершить
   */
  function finish() {
    run('finish');
  }

  /**
   * Нажали назад
   */
  function back$2() {
    run('back');
  }

  /**
   * Переключить контроллер
   * @param {String} name 
   */
  function toggle$2(name) {
    if (active$1 && active$1.gone) active$1.gone(name);
    if (controlls[name]) {
      if (name == 'content') toContent();
      active$1 = controlls[name];
      active_name = name;
      Activity$1.call(function () {
        run('back');
      });
      if (active$1.toggle) active$1.toggle();
      if (active$1.update) active$1.update();else {
        Layer.update();
      }
      listener$2.send('toggle', {
        name: name
      });
    }
  }
  function bindEvents(elem) {
    if (elem.classList.contains('selector') && !elem.bind_events) {
      elem.bind_events = true;
      var long_position = 0;
      var long_timer;
      var longStart = function longStart() {
        clearTimeout(long_timer);
        var offset = elem.getBoundingClientRect();
        long_timer = setTimeout(function () {
          var time = elem.long_time || 0;
          offset = elem.getBoundingClientRect();
          if (time + 100 < Date.now()) {
            var mutation = Math.abs(long_position - (offset.top + offset.left));
            if (mutation < 30) Utils$2.trigger(elem, 'hover:long');
          }
          elem.long_time = Date.now();
        }, 800);
        long_position = offset.top + offset.left;
      };
      var longClear = function longClear() {
        clearTimeout(long_timer);
      };
      var touchStart = function touchStart() {
        longStart();
        Utils$2.trigger(elem, 'hover:touch');
      };
      var rightClick = function rightClick(e) {
        Utils$2.trigger(elem, 'hover:long');
      };
      elem.trigger_click = function (e) {
        if (Storage.field('navigation_type') == 'mouse' || Platform.screen('mobile')) {
          if (DeviceInput.canClick(e)) {
            animateTriggerEnter(elem);
            Utils$2.trigger(elem, 'hover:enter');
          }
        }
      };
      elem.trigger_mouseenter = function () {
        clearAllFocus();
        elem.classList.add('focus');
        Utils$2.trigger(elem, 'hover:hover');
      };
      elem.trigger_mouseleave = function () {
        elem.classList.remove('focus');
      };
      if (Storage.field('navigation_type') == 'mouse' || Platform.screen('mobile')) {
        elem.addEventListener('click', elem.trigger_click);
      }
      if (!Utils$2.isTouchDevice() && Storage.field('navigation_type') == 'mouse') {
        elem.addEventListener('mouseenter', elem.trigger_mouseenter);
        elem.addEventListener('mouseleave', elem.trigger_mouseleave);
        elem.addEventListener('mouseout', longClear);
        elem.addEventListener('mouseup', longClear);
        elem.addEventListener('mousedown', longStart);
        elem.addEventListener('contextmenu', rightClick);
      }
      if (Utils$2.isTouchDevice()) {
        elem.addEventListener('touchstart', touchStart);
        elem.addEventListener('touchend', longClear);
        elem.addEventListener('touchmove', longClear);
      }
    }
  }
  function enable(name) {
    if (active_name == name) toggle$2(name);
  }
  function clearSelects() {
    select_active = false;
    removeClass(['focus']);
  }
  function clearAllFocus() {
    var collection = Array.from(document.body.querySelectorAll('.selector'));
    collection.forEach(function (item) {
      return item.classList.remove('focus');
    });
  }

  /**
   * Вызвать событие
   * @param {String} name 
   * @param {Object} params 
   */
  function trigger$1(name, params) {
    run(name, params);
  }

  /**
   * Очистить классы
   * @param {Array} classes 
   */
  function removeClass(classes) {
    if (Navigator._collection) {
      Navigator._collection.forEach(function (element) {
        classes.forEach(function (class_name) {
          element.classList.remove(class_name);
        });
      });
    }
  }

  /**
   * Фокус на элементе
   * @param {Object} target 
   */
  function focus(target) {
    Utils$2.trigger(target, 'hover:focus');
    if (Platform.screen('tv')) {
      removeClass(['focus']);
      target.classList.add('focus');
    }
    select_active = target;
  }
  function collectionSet(html) {
    var append = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var visible_only = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    html = html instanceof jQuery ? html[0] : html;
    append = append instanceof jQuery ? append[0] : append;
    var colection = Array.from(html.querySelectorAll('.selector'));
    if (visible_only) colection = colection.filter(function (e) {
      return e.offsetParent !== null;
    });
    if (append) {
      colection = colection.concat(Array.from(append.querySelectorAll('.selector')));
    }
    if (colection.length || active$1.invisible) {
      clearSelects();
      Navigator.setCollection(colection);
    }
  }
  function collectionAppend(append) {
    append = append instanceof jQuery ? append.toArray() : append;
    if (!append.length) append = Array.from([append]);
    Navigator.multiAdd(append);
  }
  function collectionFocus(target, html) {
    var visible_only = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    html = html instanceof jQuery ? html[0] : html;
    target = target instanceof jQuery ? target[0] : target;
    if (target && target.offsetParent === null) target = false;
    if (target) {
      Navigator.focus(target);
    } else {
      var colection = Array.from(html.querySelectorAll('.selector')).filter(function (elem) {
        return !elem.classList.contains('hide');
      });
      if (visible_only) colection = colection.filter(function (e) {
        return e.offsetParent !== null;
      });
      if (colection.length) Navigator.focus(colection[0]);
    }
  }
  function own(link) {
    return active$1 && active$1.link == link;
  }
  function enabled() {
    return {
      name: active_name,
      controller: active$1
    };
  }
  function toContent() {
    if (try_close) return;
    try_close = true;
    var trys = 0;
    Screensaver$2.stopSlideshow();
    var any = function any() {
      return parseInt([$('body').hasClass('settings--open') ? 1 : 0, $('body').hasClass('selectbox--open') ? 1 : 0, $('.modal,.youtube-player,.player,.search-box,.search').length ? 1 : 0].join(''));
    };
    var _close = function close() {
      var contrl = enabled();
      trys++;
      if (any()) {
        try {
          if (contrl.controller.back) contrl.controller.back();
        } catch (e) {}
        if (trys < 10) _close();
      }
    };
    var remove = function remove() {
      try {
        if ($('body').hasClass('settings--open')) $('body').removeClass('settings--open');
        if ($('body').hasClass('selectbox--open')) Select.close();
        if ($('.modal').length) Modal.close();
        if ($('.player').length) Player.close();
        if ($('.search-box').length) $('.search-box').remove();
        if ($('body').hasClass('search--open')) Search.close();
        $('body').removeClass('ambience--enable');
      } catch (e) {}
    };
    _close();
    remove();
    try_close = false;
  }
  function clear$2() {
    clearSelects();
    Navigator.setCollection([]);
  }
  var Controller = {
    listener: listener$2,
    observe: observe$1,
    add: add$4,
    move: move,
    enter: enter,
    finish: finish,
    toggle: toggle$2,
    trigger: trigger$1,
    back: back$2,
    focus: focus,
    collectionSet: collectionSet,
    collectionFocus: collectionFocus,
    collectionAppend: collectionAppend,
    enable: enable,
    enabled: enabled,
    "long": _long,
    toContent: toContent,
    updateSelects: function updateSelects() {},
    own: own,
    clear: clear$2
  };

  var http = window.location.protocol == 'https:' ? 'https://' : 'http://';
  var layers = {
    search: {
      'sim': ['{MIC} {ABC} 1 2 3 4 5 6 7 8 9 0 {BKSP}', '{LANG} - + _ : ( ) [ ] . / {SPACE}'],
      'en': ['{MIC} q w e r t y u i o p {BKSP}', '{LANG} a s d f g h j k l', '{SIM} z x c v b n m . {SPACE}'],
      'uk': ['{MIC} й ц у к е н г ш щ з х ї {BKSP}', '{LANG} ф і в а п р о л д ж є', '{SIM} я ч с м и т ь б ю . {SPACE}'],
      'he': ['{MIC} ק ר א ט ו ן ם פ {BKSP}', '{LANG} ש ד ג כ ע י ח ל ך ף', '{SIM} ז ס ב ה נ מ צ ת ץ . {SPACE}'],
      'default': ['{MIC} й ц у к е н г ш щ з х ъ {BKSP}', '{LANG} ё ф ы в а п р о л д ж э', '{SIM} я ч с м и т ь б ю . {SPACE}']
    },
    clarify: {
      'en': ['1 2 3 4 5 6 7 8 9 0 - {BKSP}', 'q w e r t y u i o p', 'a s d f g h j k l', 'z x c v b n m .', '{MIC} {LANG} {SPACE} {SEARCH}'],
      'uk': ['1 2 3 4 5 6 7 8 9 0 - {BKSP}', 'й ц у к е н г ш щ з х ї', 'ф і в а п р о л д ж є', 'я ч с м и т ь б ю .', '{MIC} {LANG} {SPACE} {SEARCH}'],
      'he': ['1 2 3 4 5 6 7 8 9 0 - {BKSP}', 'ק ר א ט ו ן ם פ', 'ש ד ג כ ע י ח ל ך ף', 'ז ס ב ה נ מ צ ת ץ .', '{MIC} {LANG} {SPACE} {SEARCH}'],
      'default': ['1 2 3 4 5 6 7 8 9 0 - {BKSP}', 'й ц у к е н г ш щ з х ъ', 'ф ы в а п р о л д ж э', 'я ч с м и т ь б ю .', '{MIC} {LANG} {SPACE} {SEARCH}']
    },
    "default": {
      'en': ['{SIM} 1 2 3 4 5 6 7 8 9 0 - + = {BKSP}', '{LANG} q w e r t y u i o p', 'a s d f g h j k l / {ENTER}', '{SHIFT} z x c v b n m , . : ' + http, '{SPACE}'],
      'uk': ['{SIM} 1 2 3 4 5 6 7 8 9 0 - + = {BKSP}', '{LANG} й ц у к е н г ш щ з х ї', 'ф і в а п р о л д ж є {ENTER}', '{SHIFT} я ч с м и т ь б ю . : ' + http, '{SPACE}'],
      'he': ['{SIM} ק ר א ט ו ן ם פ {BKSP}', '{LANG} ש ד ג כ ע י ח ל ך ף', 'ז ס ב ה נ מ צ ת ץ . /', '{SHIFT} ! @ # $ % ^ & * ( ) {SPACE}'],
      'sim': ['{ABC} 1 2 3 4 5 6 7 8 9 0 - + = {BKSP}', '{LANG} ! @ # $ % ^ & * ( ) [ ]', '- _ = + \\ | [ ] { }', '; : \' " , . < > / ?', '{SPACE}'],
      'default': ['{SIM} 1 2 3 4 5 6 7 8 9 0 - + = {BKSP}', '{LANG} й ц у к е н г ш щ з х ъ', 'ф ы в а п р о л д ж э {ENTER}', '{SHIFT} я ч с м и т ь б ю , . : ' + http, '{SPACE}']
    },
    nums: {
      'default': ['0 1 2 3 4 {BKSP}', '5 6 7 8 9 {ENTER}']
    }
  };
  function add$3(name, layout) {
    layers[name] = layout;
  }
  function addLang(name, code, layout) {
    layers[name][code] = layout;
  }
  function get$1(name) {
    return layers[name];
  }
  var Layers = {
    add: add$3,
    addLang: addLang,
    get: get$1
  };

  function create$2() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _keyClass = window.SimpleKeyboard["default"],
      _keyBord;
    var _lang_codes = {
      'ru': 'ru-RU',
      'en': 'en-US',
      'uk': 'uk-UA'
    };
    var last;
    var ime;
    var recognition;
    var simple = Storage.field('keyboard_type') !== 'prisma';
    var input;
    var last_value;
    var height = window.innerHeight;
    var mobile = Platform.screen('mobile') && params.textarea;
    if (params.keyboard) {
      simple = params.keyboard !== 'prisma';
    }
    this.listener = start$8();
    this.create = function () {
      var _this = this;
      if (simple) {
        input = $('<input type="text" id="orsay-keyboard" autocomplete="off" name="random_field_' + Utils$2.uid() + '" class="simple-keyboard-input selector" placeholder="' + Lang.translate('search_input') + '..." />');
        if (mobile) {
          input = $('<textarea id="orsay-keyboard" autocomplete="off" name="random_field_' + Utils$2.uid() + '" class="simple-keyboard-input selector" placeholder="' + Lang.translate('search_input') + '..." /></textarea>');
          input.on('input', function () {
            input[0].style.height = 'auto';
            input[0].style.height = input[0].scrollHeight + 'px';
          });
        }
        var time_blur = 0;
        var time_focus = 0;
        var stated, ended;
        if (Platform.is('orsay')) {
          ime = new IMEShell_Common();
          if ($('.settings-input--free').length > 0) {
            ime.setUseNumberMode(true);
          }
          ime.inputboxID = 'orsay-keyboard';
          ime.setUseIMEDim(false);
          ime.setMaxlength(256);
          ime.inputTitle = Lang.translate('search_input') + "...";
          ime.onKeyPressFunc = function (key, str, id) {
            switch (key) {
              case 29443: // Enter Key
              case 88: //return
              case 45:
                //exit 
                _this.listener.send('enter');
                ime.onClose();
                input.blur();
                break;
            }
          };
          ime.setOnTextChangeFunc = function (e) {
            input.val(e);
            var now_value = input.val();
            if (last_value !== now_value) {
              last_value = now_value;
              stated = ended = false;
              _this.listener.send('change', {
                value: now_value
              });
            }
          };
        }
        input.on('keyup change input keypress', function (e) {
          var now_value = input.val();
          if (last_value !== now_value) {
            last_value = now_value;
            stated = ended = false;
            _this.listener.send('change', {
              value: now_value
            });
          }
        });
        input.on('blur', function () {
          Keypad.enable();
          time_blur = Date.now();
          if (Platform.is('android') && Platform.screen('tv')) input.attr('disabled', 'true');
          _this.listener.send('blur');
        });
        input.on('focus', function () {
          if (!Platform.is('apple_tv')) Keypad.disable();
          time_focus = Date.now();
          if (!(Platform.is('browser') || Platform.desktop())) _this.listener.send('focus');
        });
        input.on('keyup', function (e) {
          if (time_focus + 1000 > Date.now()) return;
          var keys = [13, 65376, 29443, 117, 65385, 461, 27];
          var valu = input.val();
          var cart = e.target.selectionStart;
          if (keys.indexOf(e.keyCode) >= 0 && !(Utils$2.isTouchDevice() && params.textarea && Platform.screen('mobile'))) {
            e.preventDefault();
            console.log('Keyboard', 'blur key:', e.keyCode, 'value:', valu);
            input.blur();
          }
          if ((e.keyCode == 13 || e.keyCode == 65376) && !(Utils$2.isTouchDevice() && params.textarea && Platform.screen('mobile'))) _this.listener.send('enter');
          if (e.keyCode == 37 && cart == 0 && height == window.innerHeight) {
            if (stated) input.blur(), _this.listener.send('left');
            stated = true;
            ended = false;
          }
          if (e.keyCode == 39 && cart >= valu.length && height == window.innerHeight) {
            if (ended) input.blur(), _this.listener.send('right');
            ended = true;
            stated = false;
          }
          if (e.keyCode == 40) {
            if (height == window.innerHeight) input.blur(), _this.listener.send('down');
          }
          if (e.keyCode == 38) {
            if (height == window.innerHeight) input.blur(), _this.listener.send('up');
          }
        });
        input.on('hover:focus', function () {
          if (Platform.is('orsay')) ime.onShow();
          input.removeAttr('disabled');
          input.focus();
        });
        input.on('hover:enter', function () {
          if (time_blur + 1000 < Date.now()) {
            if (Platform.is('orsay')) ime.onShow();
            input.focus();
          }
        });
        var keyboard = $('.simple-keyboard');
        if (!Platform.is('orsay') && (window.SpeechRecognition || window.webkitSpeechRecognition) && !params.nomic) {
          var mic = $("<div class=\"selector simple-keyboard-mic\">\n                    <svg viewBox=\"0 0 24 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <rect x=\"5\" width=\"14\" height=\"23\" rx=\"7\" fill=\"currentColor\"/>\n                        <path d=\"M3.39272 18.4429C3.08504 17.6737 2.21209 17.2996 1.44291 17.6073C0.673739 17.915 0.299615 18.7879 0.607285 19.5571L3.39272 18.4429ZM23.3927 19.5571C23.7004 18.7879 23.3263 17.915 22.5571 17.6073C21.7879 17.2996 20.915 17.6737 20.6073 18.4429L23.3927 19.5571ZM0.607285 19.5571C2.85606 25.179 7.44515 27.5 12 27.5V24.5C8.55485 24.5 5.14394 22.821 3.39272 18.4429L0.607285 19.5571ZM12 27.5C16.5549 27.5 21.1439 25.179 23.3927 19.5571L20.6073 18.4429C18.8561 22.821 15.4451 24.5 12 24.5V27.5Z\" fill=\"currentColor\"/>\n                        <rect x=\"10\" y=\"25\" width=\"4\" height=\"6\" rx=\"2\" fill=\"currentColor\"/>\n                    </svg>\n                </div>");
          mic.on('hover:enter', function () {
            if (Platform.is('android')) {
              Android.voiceStart();
              window.voiceResult = _this.value.bind(_this);
            } else if (recognition) {
              try {
                if (recognition.record) recognition.stop();else recognition.start();
              } catch (e) {
                recognition.stop();
              }
            }
          });
          keyboard.addClass('simple-keyboard--with-mic').append(mic);
        }
        keyboard.append(input);
        if (mobile) keyboard.addClass('simple-keyboard--with-textarea');
        if (Platform.screen('mobile')) {
          var buttons = $('<div class="simple-keyboard-buttons"><div class="simple-keyboard-buttons__enter">' + Lang.translate('ready') + '</div><div class="simple-keyboard-buttons__cancel">' + Lang.translate('cancel') + '</div></div>');
          buttons.find('.simple-keyboard-buttons__enter').on('click', function () {
            input.blur();
            _this.listener.send('enter');
          });
          buttons.find('.simple-keyboard-buttons__cancel').on('click', function () {
            _this.value('');
            Controller.back();
          });
          $('.simple-keyboard').append(buttons);
        }
      } else {
        var layout = typeof params.layout == 'string' ? Layers.get(params.layout) : params.layout || Layers.get('default');
        var press = Date.now();
        _keyBord = new _keyClass({
          display: {
            '{BKSP}': '&nbsp;',
            '{ENTER}': '&nbsp;',
            '{SHIFT}': '&nbsp;',
            '{SPACE}': '&nbsp;',
            '{LANG}': '&nbsp;',
            '{ABC}': 'Aa',
            '{SIM}': '#+',
            '{SEARCH}': Lang.translate('search'),
            '{MIC}': "<svg viewBox=\"0 0 24 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <rect x=\"5\" width=\"14\" height=\"23\" rx=\"7\" fill=\"currentColor\"/>\n                        <path d=\"M3.39272 18.4429C3.08504 17.6737 2.21209 17.2996 1.44291 17.6073C0.673739 17.915 0.299615 18.7879 0.607285 19.5571L3.39272 18.4429ZM23.3927 19.5571C23.7004 18.7879 23.3263 17.915 22.5571 17.6073C21.7879 17.2996 20.915 17.6737 20.6073 18.4429L23.3927 19.5571ZM0.607285 19.5571C2.85606 25.179 7.44515 27.5 12 27.5V24.5C8.55485 24.5 5.14394 22.821 3.39272 18.4429L0.607285 19.5571ZM12 27.5C16.5549 27.5 21.1439 25.179 23.3927 19.5571L20.6073 18.4429C18.8561 22.821 15.4451 24.5 12 24.5V27.5Z\" fill=\"currentColor\"/>\n                        <rect x=\"10\" y=\"25\" width=\"4\" height=\"6\" rx=\"2\" fill=\"currentColor\"/>\n                        </svg>"
          },
          layout: layout,
          onChange: function onChange(value) {
            _this.listener.send('change', {
              value: value
            });
          },
          onKeyPress: function onKeyPress(button) {
            if (Date.now() - press < 100) return;
            press = Date.now();
            if (button === "{SHIFT}" || button === "{SIM}" || button === "{ABC}") _this._handle(button);else if (button === '{MIC}') {
              if (Platform.is('android')) {
                Android.voiceStart();
                window.voiceResult = _this.value.bind(_this);
              } else if (recognition) {
                try {
                  if (recognition.record) recognition.stop();else recognition.start();
                } catch (e) {
                  recognition.stop();
                }
              }
            } else if (button === '{LANG}') {
              var codes = Lang.codes();
              var items = [];
              var select_code = _keyBord.options.layoutName.split('-')[0];
              items.push({
                title: codes.ru,
                value: 'default',
                selected: select_code == 'default'
              });
              Arrays.getKeys(codes).forEach(function (code) {
                if (layout[code]) {
                  items.push({
                    title: codes[code],
                    value: code,
                    selected: select_code == code
                  });
                }
              });
              setTimeout(function () {
                Select.show({
                  title: Lang.translate('title_choice_language'),
                  items: items,
                  onSelect: function onSelect(item) {
                    Select.hide();
                    Storage.set('keyboard_default_lang', item.value);
                    var shifted = _keyBord.options.layoutName.split('-')[1] == 'shift';
                    var new_layout = item.value + (shifted ? '-shift' : '');
                    _this.shifted(!shifted, new_layout, item.value);
                    _keyBord.setOptions({
                      layoutName: new_layout
                    });
                    last = false;
                    _keyBord.options.lastLayerSelect = _keyBord.options.layoutName;
                    Controller.toggle('keybord');
                    $('.simple-keyboard').attr('shifted', Boolean(shifted));
                    Controller.collectionFocus($('.simple-keyboard [data-skbtn="{LANG}"]')[0], $('.simple-keyboard'));
                  },
                  onBack: function onBack() {
                    Select.hide();
                    Controller.toggle('keybord');
                  }
                });
              }, 300);
            } else if (button === '{SPACE}') {
              _this.value(_keyBord.getInput() + ' ');
            } else if (button === '{BKSP}') {
              _this.value(_keyBord.getInput().slice(0, -1));
            } else if (button === '{ENTER}' || button === '{SEARCH}') {
              _this.listener.send('enter');
            }
          }
        });
        var lang = Storage.get('keyboard_default_lang', Storage.get('language', 'ru'));
        _keyBord.setOptions({
          layoutName: lang == 'ru' ? 'default' : Arrays.getKeys(layout).indexOf(lang) >= 0 ? lang : layout.en ? 'en' : 'default'
        });
        $('.simple-keyboard').addClass('hg-style-' + (params.layout || 'default'));
      }
      this.speechRecognition();
    };
    this.speechRecognition = function () {
      var _this2 = this;
      var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      console.log('Speech', 'status:', SpeechRecognition ? true : false);
      if (SpeechRecognition) {
        recognition = new SpeechRecognition();
        recognition.continuous = false;
        recognition.lang = _lang_codes[Storage.get('language', 'ru')] || 'en-US';
        console.log('Speech', 'lang:', recognition.lang);
        recognition.addEventListener("start", function () {
          console.log('Speech', 'start');
          $('.simple-keyboard [data-skbtn="{mic}"]').css('color', 'red');
          $('.simple-keyboard-mic').addClass('record');
          recognition.record = true;
          Noty$1.show(Lang.translate('keyboard_listen'));
        });
        recognition.addEventListener("end", function () {
          console.log('Speech', 'end');
          $('.simple-keyboard [data-skbtn="{mic}"]').css('color', 'white');
          $('.simple-keyboard-mic').removeClass('record');
          recognition.record = false;
        });
        recognition.addEventListener("result", function (event) {
          console.log('Speech', 'result:', event.resultIndex, event.results[event.resultIndex]);
          var current = event.resultIndex;
          var transcript = event.results[current][0].transcript;
          console.log('Speech', 'transcript:', transcript);
          if (transcript.toLowerCase().trim() === "stop recording") {
            recognition.stop();
          } else {
            if (transcript.toLowerCase().trim() === "reset input") {
              _this2.value('');
            } else {
              _this2.value(transcript);
            }
          }
        });
        recognition.addEventListener("error", function (event) {
          console.log('Speech', 'error:', event);
          if (event.error == 'not-allowed') {
            Noty$1.show(Lang.translate('keyboard_nomic'));
          }
          recognition.stop();
        });
      } else {
        $('.simple-keyboard [data-skbtn="{mic}"]').css('opacity', '0.3');
      }
    };
    this.value = function (value) {
      if (simple) {
        input.val(value);
        if (mobile) {
          input[0].style.height = 'auto';
          input[0].style.height = input[0].scrollHeight + 'px';
        }
      } else _keyBord.setInput(value);
      last_value = value;
      this.listener.send('change', {
        value: value
      });
    };
    this._layout = function () {
      var _this3 = this;
      var keys = $('.simple-keyboard .hg-button').addClass('selector');
      Controller.collectionSet($('.simple-keyboard'));
      Controller.collectionFocus(last || keys[0], $('.simple-keyboard'));
      $('.simple-keyboard .hg-button:not(.binded)').on('hover:enter', function (e) {
        Controller.collectionFocus($(this)[0]);
        _keyBord.handleButtonClicked($(this).attr('data-skbtn'), e);
      }).on('hover:focus', function (e) {
        last = e.target;
        _this3.listener.send('hover', {
          button: e.target
        });
      });
      keys.addClass('binded');
      $('.simple-keyboard').addClass('hg-style-' + (params.layout || 'default'));
    };
    this.shifted = function (shifted, layout, code) {
      if (!(shifted && _keyBord.options.layout[layout])) {
        var shift_layer = Arrays.clone(_keyBord.options.layout[code]);
        shift_layer = shift_layer.map(function (button) {
          return button.toUpperCase();
        });
        _keyBord.options.layout[layout] = shift_layer;
      }
    };
    this._handle = function (button) {
      var current_layout = _keyBord.options.layoutName,
        layout = 'default',
        focus;
      var shifted = current_layout.split('-')[1] == 'shift';
      var code = current_layout.split('-')[0];
      $('.simple-keyboard').attr('shifted', Boolean(!shifted));
      if (button == '{SHIFT}') {
        if (shifted) layout = code;else layout = code + '-shift';
        this.shifted(shifted, layout, code);
      } else if (button == '{SIM}') {
        layout = 'sim';
        focus = '{ABC}';
        _keyBord.options.lastLayerSelect = current_layout;
      } else if (button == '{ABC}') {
        layout = _keyBord.options.lastLayerSelect || 'default';
        focus = '{SIM}';
      }
      _keyBord.setOptions({
        layoutName: layout
      });
      last = false;
      Controller.toggle('keybord');
      Controller.collectionFocus($('.simple-keyboard [data-skbtn="' + (focus || button) + '"]')[0], $('.simple-keyboard'));
    };
    this.toggle = function () {
      var _this4 = this;
      Controller.add('keybord', {
        toggle: function toggle() {
          if (simple) {
            Controller.collectionSet($('.simple-keyboard'));
            Controller.collectionFocus(mobile ? $('.simple-keyboard-input') : false, $('.simple-keyboard'));
          } else _this4._layout();
        },
        update: function update() {},
        up: function up() {
          if (!Navigator.canmove('up')) {
            _this4.listener.send('up');
          } else Navigator.move('up');
        },
        down: function down() {
          if (!Navigator.canmove('down')) {
            _this4.listener.send('down');
          } else Navigator.move('down');
        },
        left: function left() {
          if (!Navigator.canmove('left')) {
            _this4.listener.send('left');
          } else Navigator.move('left');
        },
        right: function right() {
          if (!Navigator.canmove('right')) {
            _this4.listener.send('right');
          } else Navigator.move('right');
        },
        back: function back() {
          _this4.listener.send('back');
        }
      });
      Controller.toggle('keybord');
    };
    this.destroy = function () {
      try {
        if (simple) {
          input.remove();
        } else _keyBord.destroy();
        if (recognition) recognition.stop();
      } catch (e) {}
      this.listener.destroy();
      Keypad.enable();
    };
  }

  var html$5,
    keyboard,
    input,
    input_value = '';

  /**
   * Заустить редактор
   * @param {{title:string, value:string, free:boolean, nosave:boolean}} params 
   * @param {function} call 
   */
  function edit(params, call) {
    html$5 = Template.get('settings_input');
    input = html$5.find('.settings-input__input');
    var lamp = Storage.field('keyboard_type') == 'prisma' || params.keyboard == 'prisma';
    if (!lamp) input.hide();
    $('body').addClass('keyboard-input--visible').append(html$5);
    var pass = function pass(v) {
      return params.password ? v.replace(/./g, '*') : v;
    };
    keyboard = new create$2(params);
    keyboard.listener.follow('change', function (event) {
      input_value = event.value.trim();
      input.toggleClass('filled', Boolean(event.value));
      input.html(pass(Utils$2.inputDisplay(event.value)));
    });
    keyboard.listener.follow('enter', function (event) {
      back$1();
      call(input_value);
    });
    keyboard.listener.follow('focus', function (event) {
      html$5.toggleClass('settings-input--focus', true);
    });
    keyboard.listener.follow('blur', function (event) {
      html$5.toggleClass('settings-input--focus', false);
    });
    html$5.toggleClass('settings-input--free', params.free ? true : false);
    $('.settings-input__links', html$5).toggleClass('hide', params.nosave ? true : false);
    if (params.title) html$5.find('.settings-input__content').prepend('<div class="settings-input__title">' + params.title + '</div>');
    keyboard.listener.follow('down', function (event) {
      if (params.nosave) return;
      var members = Storage.get('setting_member', []);
      var links = [];
      links.push({
        title: (members.indexOf(input_value) == -1 ? Lang.translate('settings_add') : Lang.translate('settings_remove')) + ' ' + Lang.translate('settings_this_value'),
        subtitle: input_value,
        add: true
      });
      members.forEach(function (link) {
        links.push({
          title: link,
          subtitle: Lang.translate('settings_user_links'),
          url: link,
          member: true
        });
      });
      links = links.concat([{
        title: '127.0.0.1:8090',
        subtitle: Lang.translate('settings_for_local'),
        url: '127.0.0.1:8090'
      }]);
      Select.show({
        title: Lang.translate('title_links'),
        items: links,
        onSelect: function onSelect(a) {
          if (a.add) {
            if (members.indexOf(a.subtitle) == -1) {
              Arrays.insert(members, 0, a.subtitle);
              Noty$1.show(Lang.translate('settings_added') + ' (' + a.subtitle + ')');
            } else {
              Arrays.remove(members, a.subtitle);
              Noty$1.show(Lang.translate('settings_removed') + ' (' + a.subtitle + ')');
            }
            Storage.set('setting_member', members);
          } else {
            keyboard.value(a.url);
          }
          keyboard.toggle();
        },
        onLong: function onLong(a, elem) {
          if (a.member) {
            Arrays.remove(members, a.url);
            Noty$1.show(Lang.translate('settings_removed') + ' (' + a.url + ')');
            Storage.set('setting_member', members);
            $(elem).css({
              opacity: 0.4
            });
          }
        },
        onBack: function onBack() {
          keyboard.toggle();
        }
      });
    });
    keyboard.listener.follow('back', function () {
      back$1();
      call(input_value);
    });
    keyboard.create();
    keyboard.value(params.value);
    keyboard.toggle();
    input_value = params.value;
    RemoteHelper.show({
      name: 'keyboard_helper',
      text: Lang.translate('helper_keyboard'),
      button: 'back',
      interval: 60 * 24 // 1 день
    });
    return keyboard;
  }

  /**
   * Назад
   */
  function back$1() {
    destroy();
    Controller.toggle('settings_component');
  }

  /**
   * Уничтожить
   */
  function destroy() {
    keyboard.destroy();
    html$5.remove();
    $('body').removeClass('keyboard-input--visible');
    html$5 = null;
    keyboard = null;
    input = null;
  }
  var Input = {
    edit: edit
  };

  var values = {};
  var defaults = {};
  var listener$1 = start$8();

  /**
   * Запуск
   */
  function init$m() {
    if (Platform.is('tizen')) {
      select$1('player', {
        'inner': '#{settings_param_player_inner}',
        'tizen': 'Tizen'
      }, 'tizen');
      select$1('player_iptv', {
        'inner': '#{settings_param_player_inner}',
        'tizen': 'Tizen'
      }, 'inner');
      select$1('player_torrent', {
        'inner': '#{settings_param_player_inner}',
        'tizen': 'Tizen'
      }, 'tizen');
    }
    if (Platform.is('orsay')) {
      select$1('player', {
        'inner': '#{settings_param_player_inner}',
        'orsay': 'Orsay'
      }, 'orsay');
      select$1('player_iptv', {
        'inner': '#{settings_param_player_inner}',
        'orsay': 'Orsay'
      }, 'inner');
      select$1('player_torrent', {
        'inner': '#{settings_param_player_inner}',
        'orsay': 'Orsay'
      }, 'orsay');
    } else if (Platform.is('webos')) {
      select$1('player', {
        'inner': '#{settings_param_player_inner}',
        'webos': 'WebOS'
      }, 'inner');
      select$1('player_iptv', {
        'inner': '#{settings_param_player_inner}',
        'webos': 'WebOS'
      }, 'inner');
      select$1('player_torrent', {
        'inner': '#{settings_param_player_inner}',
        'webos': 'WebOS'
      }, 'inner');
    } else if (Platform.is('android')) {
      select$1('player', {
        'inner': '#{settings_param_player_inner}',
        'android': 'Android'
      }, 'android');
      select$1('player_iptv', {
        'inner': '#{settings_param_player_inner}',
        'android': 'Android'
      }, 'inner');
      select$1('player_torrent', {
        'android': 'Android'
      }, 'android');
      trigger('internal_torrclient', false);
    } else if (Platform.desktop() && !Platform.macOS()) {
      select$1('player', {
        'inner': '#{settings_param_player_inner}',
        'other': '#{settings_param_player_outside}'
      }, 'inner');
      select$1('player_iptv', {
        'inner': '#{settings_param_player_inner}',
        'other': '#{settings_param_player_outside}'
      }, 'inner');
      select$1('player_torrent', {
        'inner': '#{settings_param_player_inner}',
        'other': '#{settings_param_player_outside}'
      }, 'other');
    } else if (Platform.macOS()) {
      select$1('player', {
        'inner': '#{settings_param_player_inner}',
        'iina': 'IINA',
        'infuse': 'Infuse',
        'mpv': 'MPV',
        'nplayer': 'nPlayer',
        'tracyplayer': 'KS Player'
      }, 'inner');
      select$1('player_iptv', {
        'inner': '#{settings_param_player_inner}',
        'iina': 'IINA',
        'infuse': 'Infuse',
        'mpv': 'MPV',
        'nplayer': 'nPlayer',
        'tracyplayer': 'KS Player'
      }, 'inner');
      select$1('player_torrent', {
        'inner': '#{settings_param_player_inner}',
        'iina': 'IINA',
        'infuse': 'Infuse',
        'mpv': 'MPV',
        'nplayer': 'nPlayer',
        'tracyplayer': 'KS Player'
      }, 'inner');
    } else if (Platform.is('apple')) {
      select$1('player', {
        'inner': '#{settings_param_player_inner}',
        'ios': 'iOS',
        'vlc': 'VLC',
        'nplayer': 'nPlayer',
        'infuse': 'Infuse',
        'vidhub': 'Vidhub',
        'svplayer': 'SVPlayer',
        'tracyplayer': 'KS Player',
        'senplayer': 'SenPlayer'
      }, 'inner');
      select$1('player_iptv', {
        'inner': '#{settings_param_player_inner}',
        'ios': 'iOS',
        'vlc': 'VLC',
        'nplayer': 'nPlayer',
        'infuse': 'Infuse',
        'svplayer': 'SVPlayer',
        'tracyplayer': 'KS Player',
        'senplayer': 'SenPlayer'
      }, 'inner');
      select$1('player_torrent', {
        'inner': '#{settings_param_player_inner}',
        'ios': 'iOS',
        'vlc': 'VLC',
        'nplayer': 'nPlayer',
        'infuse': 'Infuse',
        'vidhub': 'Vidhub',
        'svplayer': 'SVPlayer',
        'tracyplayer': 'KS Player',
        'senplayer': 'SenPlayer'
      }, 'inner');
    } else if (Platform.is('apple_tv')) {
      select$1('player', {
        'tvos': '#{settings_param_player_inner_tvos} tvOS Universal',
        'tvosl': '#{settings_param_player_inner_tvos} tvOS Player',
        'tvosSelect': '#{settings_param_player_outside}',
        'vlc': 'VLC',
        'infuse': 'Infuse',
        'vidhub': 'Vidhub',
        'inner': '#{settings_param_player_inner}',
        'svplayer': 'SVPlayer'
      }, 'inner');
      select$1('player_iptv', {
        'tvos': '#{settings_param_player_inner_tvos} tvOS Universal',
        'tvosl': '#{settings_param_player_inner_tvos} tvOS Player',
        'tvosSelect': '#{settings_param_player_outside}',
        'vlc': 'VLC',
        'infuse': 'Infuse',
        'vidhub': 'Vidhub',
        'inner': '#{settings_param_player_inner}',
        'svplayer': 'SVPlayer'
      }, 'inner');
      select$1('player_torrent', {
        'tvos': '#{settings_param_player_inner_tvos} tvOS Universal',
        'tvosSelect': '#{settings_param_player_outside}',
        'infuse': 'Infuse',
        'vidhub': 'Vidhub',
        'vlc': 'VLC',
        'inner': '#{settings_param_player_inner}',
        'svplayer': 'SVPlayer'
      }, 'inner');
    }

    // trigger('glass_style', Platform.screen('mobile'))
    trigger('advanced_animation', Platform.is('apple_tv') || Platform.is('browser') || Platform.desktop() || navigator.userAgent.toLowerCase().indexOf('shield') >= 0);
    var screensaver_types = {
      'chrome': 'Google',
      'aerial': 'Aerial',
      'nature': 'Nature'
    };
    select$1('screensaver_type', screensaver_types, 'aerial');
    select$1('keyboard_type', {
      'prisma': '#{settings_param_keyboard_prisma}',
      'integrate': '#{settings_param_keyboard_system}'
    }, Platform.screen('mobile') || Platform.macOS() ? 'integrate' : 'prisma');
    select$1('navigation_type', {
      'controll': '#{settings_param_navigation_remote}',
      'mouse': '#{settings_param_navigation_mouse}'
    }, Platform.is('browser') || Platform.desktop() ? 'mouse' : 'controll');

    // Комбинации для поиска
    var langcode = Storage.get('language', 'ru');
    var langname = Lang.codes()[langcode];
    var selector = {
      'df': '#{settings_param_torrent_lang_orig}',
      'df_year': '#{settings_param_torrent_lang_orig} + #{torrent_parser_year}',
      'df_lg': '#{settings_param_torrent_lang_orig} + ' + langname,
      'df_lg_year': '#{settings_param_torrent_lang_orig} + ' + langname + ' + #{torrent_parser_year}',
      'lg': langname,
      'lg_year': langname + ' + #{torrent_parser_year}',
      'lg_df': langname + ' + #{settings_param_torrent_lang_orig}',
      'lg_df_year': langname + ' + #{settings_param_torrent_lang_orig} + #{torrent_parser_year}'
    };
    if (Arrays.getKeys(selector).indexOf(Storage.get('parse_lang', 'df')) == -1) Storage.set('parse_lang', 'df');
    select$1('parse_lang', selector, 'df');
    select$1('tmdb_lang', Lang.codes(), 'ru');

    // let agent = navigator.userAgent.toLowerCase()
    // let versi = agent.match(/chrome\/(\d+)/)

    // versi = versi ? parseInt(versi[1]) : 60
    // versi = isNaN(versi) ? 60 : versi

    select$1('protocol', {
      'http': '#{settings_param_no}',
      'https': '#{settings_param_yes}'
    }, 'https');
  }

  /**
   * Переключатель
   * @param {string} name - название
   * @param {boolean} value_default - значение по дефолту
   */
  function trigger(name, value_default) {
    values[name] = {
      'true': '#{settings_param_yes}',
      'false': '#{settings_param_no}'
    };
    defaults[name] = value_default;
  }

  /**
   * Выбрать
   * @param {string} name - название
   * @param {{key:string}} select_data - значение
   * @param {string} select_default_value - значение по дефолту
   */
  function select$1(name, select_data, select_default_value) {
    values[name] = select_data;
    defaults[name] = select_default_value;
  }

  /**
   * Биндит события на элемент
   * @param {object} elems
   */
  function bind(elems, elems_html) {
    elems.on('hover:enter', function (event) {
      var elem = $(event.target);
      var type = elem.data('type');
      var name = elem.data('name');
      var onChange = elem.data('onChange');
      if (type == 'toggle') {
        var params = values[name];
        var keys = Arrays.isArray(params) ? params : Arrays.getKeys(params),
          value = Storage.get(name, defaults[name]) + '',
          position = keys.indexOf(value);
        position++;
        if (position >= keys.length) position = 0;
        position = Math.max(0, Math.min(keys.length - 1, position));
        value = keys[position];
        Storage.set(name, value);
        update$1(elem, elems, elems_html);
        if (onChange) onChange(value);
      }
      if (type == 'input') {
        Input.edit({
          elem: elem,
          name: name,
          nomic: true,
          value: elem.data('string') ? window.localStorage.getItem(name) || defaults[name] : Storage.get(name, defaults[name]) + ''
        }, function (new_value) {
          Storage.set(name, new_value);
          update$1(elem, elems, elems_html);
          if (onChange) onChange(new_value);
        });
      }
      if (type == 'button') {
        listener$1.send('button', {
          name: name
        });
        if (onChange) onChange();
      }
      if (type == 'add') {
        Input.edit({
          value: ''
        }, function (new_value) {
          if (new_value && Storage.add(name, new_value)) {
            displayAddItem(elem, new_value);
            listener$1.send('update_scroll');
          }
        });
      }
      if (type == 'select') {
        var _params = values[name];
        var _value = Storage.get(name, defaults[name]) + '';
        var items = [];
        for (var i in _params) {
          items.push({
            title: Lang.translate(_params[i]),
            value: i,
            selected: i == _value
          });
        }
        var enabled = Controller.enabled().name;
        Select.show({
          title: Lang.translate('title_choice'),
          items: items,
          onBack: function onBack() {
            Controller.toggle(enabled);
          },
          onSelect: function onSelect(a) {
            Storage.set(name, a.value);
            update$1(elem, elems, elems_html);
            Controller.toggle(enabled);
            if (onChange) onChange(a.value);
          }
        });
      }
    }).on('hover:hover', function (e) {
      Navigator.focused(e.target);
    }).each(function () {
      if (!$(this).data('static')) update$1($(this), elems, elems_html);
    });
    if (elems.eq(0).data('type') == 'add') {
      displayAddList(elems.eq(0));
    }
  }

  /**
   * Добавить дополнительное поле
   * @param {object} elem
   * @param {object} element
   */
  function displayAddItem(elem, element) {
    var name = elem.data('name');
    var item = $('<div class="settings-param selector"><div class="settings-param__name">' + element + '</div>' + '</div>');
    item.on('hover:long', function () {
      var list = Storage.get(name, '[]');
      Arrays.remove(list, element);
      Storage.set(name, list);
      item.css({
        opacity: 0.5
      });
    });
    elem.after(item);
  }

  /**
   * Вывести дополнительные поля
   * @param {object} elem
   */
  function displayAddList(elem) {
    var list = Storage.get(elem.data('name'), '[]');
    list.forEach(function (element) {
      displayAddItem(elem, element);
    });
    listener$1.send('update_scroll');
  }

  /**
   * Обновляет значения на элементе
   * @param {object} elem
   */
  function update$1(elem, elems, elems_html) {
    var name = elem.data('name');
    var key = elem.data('string') ? window.localStorage.getItem(name) || defaults[name] : Storage.get(name, defaults[name] + '');
    var val = typeof values[name] == 'string' ? key : values[name][key] || values[name][defaults[name]];
    var plr = elem.attr('placeholder');
    if (!val && plr) val = plr;
    elem.find('.settings-param__value').text(Lang.translate(val));
    var children = elem.data('children');
    if (children) {
      var parent = elems_html ? elems_html.find('[data-parent="' + children + '"]') : elems.filter('[data-parent="' + children + '"]');
      var value = elem.data('children-value');
      var visibl = value ? Storage.field(name) !== value : !Storage.field(name);
      if (elem.data('children-reverse')) visibl = !visibl;
      parent.toggleClass('hide', visibl);
      parent.filter('[data-visible-value]').each(function () {
        $(this).toggleClass('hide', $(this).data('visible-value') !== key);
      });
      listener$1.send('update_scroll_position');
    }
  }

  /**
   * Получить значение параметра
   * @param {string} name
   * @returns *
   */
  function field$1(name) {
    return Storage.get(name, defaults[name] + '');
  }

  /**
       * Добовляем селекторы
       */
  select$1('interface_style', {
    'standard': '#{settings_param_interface_style_standard}',
    'space': '#{settings_param_interface_style_space}'
  }, 'standard');
  select$1('interface_size', {
    'small': '#{settings_param_interface_size_small}',
    'normal': '#{settings_param_interface_size_normal}',
    'fixed': '#{settings_param_interface_size_fixed}'
  }, 'small');
  select$1('interface_size_fixed', {
    '10': '10',
    '12': '12',
    '14': '14',
    '16': '16',
    '20': '20',
    '24': '24',
    '28': '28',
    '32': '32'
  }, '16');
  select$1('poster_size', {
    'w200': '#{settings_param_poster_quality_low}',
    'w300': '#{settings_param_poster_quality_average}',
    'w500': '#{settings_param_poster_quality_high}'
  }, 'w200');
  select$1('parser_torrent_type', {
    'jackett': 'Jackett'
    // 'prowlarr': 'Prowlarr',
    // 'torrserver': 'TorrServer'
  }, 'jackett');
  select$1('jackett_interview', {
    'all': '#{settings_param_jackett_interview_all}',
    'healthy': '#{settings_param_jackett_interview_healthy}'
  }, 'all');
  select$1('background_type', {
    'complex': '#{settings_param_background_complex}',
    'simple': '#{settings_param_background_simple}',
    'poster': '#{settings_param_background_image}'
  }, 'simple');
  select$1('pages_save_total', {
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5'
  }, '1');
  select$1('player', {
    'inner': '#{settings_param_player_inner}'
  }, 'inner');
  select$1('player_iptv', {
    'inner': '#{settings_param_player_inner}'
  }, 'inner');
  select$1('player_torrent', {
    'inner': '#{settings_param_player_inner}'
  }, 'inner');
  select$1('torrserver_use_link', {
    'one': '#{settings_param_link_use_one}',
    'two': '#{settings_param_link_use_two}'
  }, 'one');
  select$1('subtitles_size', {
    'small': '#{settings_param_subtitles_size_small}',
    'normal': '#{settings_param_subtitles_size_normal}',
    'large': '#{settings_param_subtitles_size_bigger}'
  }, 'normal');
  select$1('screensaver_time', {
    '1': '1 мин',
    '5': '5 мин',
    '10': '10 мин',
    '15': '15 мин',
    '30': '30 мин',
    '60': '1 час'
  }, '5');
  select$1('parse_lang', {
    'df': '#{settings_param_torrent_lang_orig}'
  }, 'df');
  select$1('parse_timeout', {
    '15': '15',
    '30': '30',
    '60': '60'
  }, '15');
  select$1('player_rewind', {
    '5': '5 Сек',
    '10': '10 Сек',
    '15': '15 Сек',
    '20': '20 Сек',
    '30': '30 Сек'
  }, '20');
  select$1('player_timecode', {
    'again': '#{settings_param_player_timecode_again}',
    'continue': '#{settings_param_player_timecode_continue}',
    'ask': '#{settings_param_player_timecode_ask}'
  }, 'continue');
  select$1('player_scale_method', {
    'transform': 'Transform',
    'calculate': '#{settings_param_player_scale_method}'
  }, 'transform');
  select$1('player_hls_method', {
    'application': '#{settings_param_player_hls_app}',
    'hlsjs': '#{settings_param_player_hls_js}'
  }, 'application');
  select$1('source', {
    'tmdb': 'TMDB'
  }, 'tmdb');
  select$1('start_page', {
    'main': '#{title_main}',
    'movie': '#{menu_movies}',
    'tv': '#{menu_tv}',
    'anime': '#{menu_anime}',
    'favorite@bookmarks': '#{settings_input_links}',
    'favorite@history': '#{title_history}',
    // 'mytorrents': '#{title_mytorrents}',
    'last': '#{title_last}'
  }, 'main');
  select$1('scroll_type', {
    'css': 'CSS',
    'js': 'Javascript'
  }, 'css');
  select$1('card_views_type', {
    'preload': '#{settings_param_card_view_load}',
    'view': '#{settings_param_card_view_all}'
  }, 'preload');
  select$1('keyboard_type', {
    'prisma': '#{settings_param_keyboard_prisma}',
    'integrate': '#{settings_param_keyboard_system}'
  }, 'prisma');
  select$1('card_interfice_type', {
    'old': '#{settings_param_card_interface_old}',
    'new': '#{settings_param_card_interface_new}'
  }, 'new');
  select$1('glass_opacity', {
    'easy': '#{settings_param_glass_easy}',
    'medium': '#{settings_param_glass_medium}',
    'blacked': '#{settings_param_glass_blacked}'
  }, 'blacked');
  select$1('time_offset', {
    'n-10': '-10',
    'n-9': '-9',
    'n-8': '-8',
    'n-7': '-7',
    'n-6': '-6',
    'n-5': '-5',
    'n-4': '-4',
    'n-3': '-3',
    'n-2': '-2',
    'n-1': '-1',
    'n0': '0',
    'n1': '1',
    'n2': '2',
    'n3': '3',
    'n4': '4',
    'n5': '5',
    'n6': '6',
    'n7': '7',
    'n8': '8',
    'n9': '9',
    'n10': '10'
  }, 'n0');
  select$1('video_quality_default', {
    '480': '480p',
    '720': '720p',
    '1080': '1080p',
    '1440': '1440p',
    '2160': '2160p'
  }, '1080');
  select$1('player_launch_trailers', {
    'inner': '#{settings_param_player_inner}',
    'youtube': 'YouTube'
  }, 'inner');

  /**
   * Добовляем триггеры
   */
  trigger('animation', true);
  trigger('background', true);
  trigger('torrserver_savedb', false);
  trigger('torrserver_preload', true);
  trigger('parser_use', true);
  trigger('cloud_use', true);
  trigger('account_use', true);
  trigger('torrserver_auth', false);
  trigger('mask', true);
  trigger('playlist_next', true);
  trigger('internal_torrclient', true);
  trigger('subtitles_stroke', true);
  trigger('subtitles_backdrop', false);
  trigger('screensaver', true);
  trigger('proxy_tmdb', true);
  trigger('proxy_tmdb_auto', true);
  trigger('proxy_other', true);
  trigger('parse_in_search', false);
  trigger('subtitles_start', false);
  trigger('helper', true);
  trigger('light_version', false);
  trigger('player_normalization', false);
  trigger('card_quality', true);
  trigger('footer_card', false);
  trigger('cache_images', false);
  trigger('card_episodes', true);
  trigger('card_interfice_poster', false);
  trigger('glass_style', true);
  trigger('black_style', false);
  trigger('hide_outside_the_screen', true);
  trigger('card_interfice_cover', true);
  trigger('card_interfice_reactions', true);
  trigger('background_trailer', true);
  trigger('poster_trailer', false);
  trigger('view_trailer', true);
  trigger('show_options_button', true);
  trigger('news_style', true);

  /**
   * Добовляем поля
   */
  select$1('jackett_url', '', 'https://jacred.xyz');
  select$1('jackett_key', '', '1');
  select$1('prowlarr_url', '', '');
  select$1('prowlarr_key', '', '');
  select$1('torrserver_url', '', '');
  select$1('torrserver_url_two', '', '');
  select$1('torrserver_login', '', '');
  select$1('torrserver_password', '', '');
  select$1('parser_website_url', '', '');
  select$1('cloud_token', '', '');
  select$1('account_email', '', '');
  select$1('account_password', '', '');
  select$1('device_name', '', 'Prisma');
  select$1('player_nw_path', '', 'C:/Program Files/VideoLAN/VLC/vlc.exe');
  select$1('tmdb_proxy_api', '', '');
  select$1('tmdb_proxy_image', '', '');
  var Params = {
    listener: listener$1,
    init: init$m,
    bind: bind,
    update: update$1,
    field: field$1,
    select: select$1,
    trigger: trigger,
    values: values,
    defaults: defaults
  };

  var network$2 = new create$e();
  function api() {
    return Utils$2.protocol() + object$2.pris_domain + '/api/';
  }
  var WorkerArray = /*#__PURE__*/function () {
    function WorkerArray(field) {
      _classCallCheck(this, WorkerArray);
      this.field = field;
      this.empty = [];
      this.data = [];
      this.limit = 3000;
      this.loaded = false;
    }
    return _createClass(WorkerArray, [{
      key: "init",
      value: function init(class_type) {
        var _this = this;
        var timer_update;
        var start_time = Date.now();
        this.class_type = class_type;
        console.log('StorageWorker', this.field, 'start follow');
        Storage.listener.follow('change', function (e) {
          if (_this.field == e.name && _this.loaded && Account.canSync() && Account.hasPremium()) {
            try {
              _this.save(e.value);
            } catch (e) {
              console.log('StorageWorker', _this.field, e.message);
            }
          }
          if (e.name == 'account') {
            clearTimeout(timer_update);
            timer_update = setTimeout(_this.update.bind(_this, true), 5 * 1000);
          }
        });
        Socket.listener.follow('message', function (e) {
          if (e.method == 'storage' && e.data.name == _this.field) {
            try {
              if (e.data.remove) _this.removeFromSocket(e.data);else _this.updateFromSocket(e.data);
            } catch (e) {
              console.log('StorageWorker', _this.field, e.message);
            }
          }
        });
        Socket.listener.follow('open', function (e) {
          if (Date.now() - start_time > 1000 * 60 * 5) {
            clearTimeout(timer_update);
            timer_update = setTimeout(_this.update.bind(_this, false, true), 10 * 1000);
          }
        });
        this.update();
        setInterval(this.update.bind(this), 1000 * 60 * 10);
      }
    }, {
      key: "restrict",
      value: function restrict(result) {
        if (Arrays.isObject(result)) {
          var keys = Arrays.getKeys(result);
          if (keys.length > this.limit) {
            var remv = keys.slice(0, keys.length - this.limit);
            remv.forEach(function (k) {
              delete result[k];
            });
          }
        } else if (result.length > this.limit) {
          result = result.slice(result.length - this.limit);
        }
        return result;
      }
    }, {
      key: "parse",
      value: function parse(from, nolisten) {
        var to = Storage.cache(this.field, this.limit, Arrays.clone(this.empty));
        this.filter(from, to);
        Storage.set(this.field, to, nolisten);
        this.data = this.restrict(Arrays.decodeJson(localStorage.getItem(this.field), Arrays.clone(this.empty)));
        Prisma.Listener.send('worker_storage', {
          type: 'insert',
          name: this.field,
          from: from,
          to: to
        });
      }
    }, {
      key: "filter",
      value: function filter(from, to) {
        from.forEach(function (a) {
          if (to.indexOf(a) == -1) to.push(a);
        });
      }
    }, {
      key: "update",
      value: function update(full, nolisten) {
        var _this2 = this;
        var account = Account.canSync();
        if (account && Account.hasPremium()) {
          console.log('StorageWorker', this.field, 'update start');
          var url = api() + 'storage/data/' + encodeURIComponent(this.field) + '/' + this.class_type;
          var all = full;
          if (Storage.get('storage_' + this.field + '_update_time', '0') + 1000 * 60 * 60 * 24 < Date.now()) all = true;
          if (all) url = url + '?full=true';
          network$2.silent(url, function (result) {
            try {
              _this2.parse(result.data, nolisten);
              console.log('StorageWorker', _this2.field, 'update end');
            } catch (e) {
              console.log('StorageWorker', _this2.field, e.message);
            }
            Storage.set('storage_' + _this2.field + '_update_time', Date.now());
            _this2.loaded = true;
          }, false, false, {
            headers: {
              token: account.token,
              profile: account.profile.id
            }
          });
        }
      }
    }, {
      key: "removeFromSocket",
      value: function removeFromSocket(data) {
        Arrays.remove(this.data, data.value);
        var store = Storage.cache(this.field, this.limit, Arrays.clone(this.empty));
        Arrays.remove(store, data.value);
        Storage.set(this.field, store, true);
      }
    }, {
      key: "updateFromSocket",
      value: function updateFromSocket(data) {
        var from = [data.value];
        this.parse(from, true);
      }
    }, {
      key: "send",
      value: function send(id, value) {
        if (!Account.hasPremium()) return;
        console.log('StorageWorker', 'save:', this.field, id, value);
        var str = JSON.stringify(value);
        if (str.length < 10000) {
          Socket.send('storage', {
            params: {
              id: id,
              name: this.field,
              value: value
            }
          });
        }
      }
    }, {
      key: "sendRemove",
      value: function sendRemove(id, value) {
        var str = JSON.stringify(value);
        console.log('StorageWorker', 'remove:', this.field, id, value);
        if (str.length < 10000) {
          Socket.send('storage', {
            params: {
              id: id,
              name: this.field,
              value: value,
              remove: true
            }
          });
        }
      }
    }, {
      key: "sendClean",
      value: function sendClean() {
        Socket.send('storage', {
          params: {
            id: null,
            name: this.field,
            value: '',
            clean: true
          }
        });
      }
    }, {
      key: "save",
      value: function save(value) {
        var _this3 = this;
        var uniq = value.filter(function (a) {
          return _this3.data.indexOf(a) == -1;
        });
        uniq.forEach(function (val) {
          _this3.data.push(val);
          _this3.send(null, val);
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        Arrays.remove(this.data, value);
        this.sendRemove(null, value);
      }
    }, {
      key: "clean",
      value: function clean() {
        this.data = [];
        this.sendClean();
      }
    }]);
  }();
  var WorkerFilterID = /*#__PURE__*/function (_WorkerArray) {
    function WorkerFilterID() {
      _classCallCheck(this, WorkerFilterID);
      return _callSuper(this, WorkerFilterID, arguments);
    }
    _inherits(WorkerFilterID, _WorkerArray);
    return _createClass(WorkerFilterID, [{
      key: "filter",
      value: function filter(from, to) {
        from.forEach(function (a) {
          var find = to.find(function (b) {
            return b.id == a.id;
          });
          if (!find) to.push(a);else {
            to[to.indexOf(find)] = a;
          }
        });
      }
    }, {
      key: "removeFromSocket",
      value: function removeFromSocket(data) {
        var find = this.data.find(function (a) {
          return a.id == data.id;
        });
        if (find) Arrays.remove(this.data, find);
        var store = Storage.cache(this.field, this.limit, Arrays.clone(this.empty));
        find = store.find(function (a) {
          return a.id == data.id;
        });
        if (find) Arrays.remove(store, find);
        Storage.set(this.field, store, true);
      }
    }, {
      key: "updateFromSocket",
      value: function updateFromSocket(data) {
        var from = [data.value];
        this.parse(from, true);
      }
    }, {
      key: "save",
      value: function save(value) {
        var _this4 = this;
        var uniq = [];
        value.forEach(function (val) {
          var find = _this4.data.find(function (a) {
            return a.id == val.id;
          });
          if (!find) {
            _this4.data.push(_typeof(val) == 'object' ? Arrays.clone(val) : val);
            uniq.push(val);
          } else if (JSON.stringify(val) !== JSON.stringify(find)) {
            _this4.data[_this4.data.indexOf(find)] = _typeof(val) == 'object' ? Arrays.clone(val) : val;
            uniq.push(val);
          }
        });
        uniq.forEach(function (val) {
          _this4.send(val.id, val);
        });
      }
    }, {
      key: "remove",
      value: function remove(id) {
        var find = this.data.find(function (a) {
          return a.id == id;
        });
        if (find) Arrays.remove(this.data, find);
        this.sendRemove(id, null);
      }
    }]);
  }(WorkerArray);
  var WorkerObject = /*#__PURE__*/function (_WorkerArray2) {
    function WorkerObject(params) {
      var _this5;
      _classCallCheck(this, WorkerObject);
      _this5 = _callSuper(this, WorkerObject, [params]);
      _this5.data = {};
      _this5.empty = {};
      return _this5;
    }
    _inherits(WorkerObject, _WorkerArray2);
    return _createClass(WorkerObject, [{
      key: "filter",
      value: function filter(from, to) {
        for (var _id in from) {
          to[_id] = from[_id];
        }
      }
    }, {
      key: "removeFromSocket",
      value: function removeFromSocket(data) {
        delete this.data[id];
        var store = Storage.cache(this.field, this.limit, Arrays.clone(this.empty));
        delete store[id];
        Storage.set(this.field, store, true);
      }
    }, {
      key: "updateFromSocket",
      value: function updateFromSocket(data) {
        var object = {};
        object[data.id] = data.value;
        this.parse(object, true);
      }
    }, {
      key: "save",
      value: function save(value) {
        var _this6 = this;
        var uniq = [];
        for (var _id2 in value) {
          var a = value[_id2];
          var b = this.data[_id2];
          if (!this.data[_id2]) {
            this.data[_id2] = _typeof(a) == 'object' ? Arrays.clone(a) : a;
            uniq.push(_id2);
          } else {
            a = JSON.stringify(a);
            b = JSON.stringify(b);
            if (a !== b) {
              this.data[_id2] = _typeof(value[_id2]) == 'object' ? Arrays.clone(value[_id2]) : value[_id2];
              uniq.push(_id2);
            }
          }
        }
        uniq.forEach(function (id) {
          _this6.send(id, value[id]);
        });
      }
    }, {
      key: "remove",
      value: function remove(id) {
        delete this.data[id];
        this.sendRemove(id, null);
      }
    }, {
      key: "clean",
      value: function clean() {
        this.data = {};
        this.sendClean();
      }
    }]);
  }(WorkerArray);
  var Workers = {
    //['string',0499383]
    array_string: WorkerArray,
    //[{'id':'049994',...}]
    array_object_id: WorkerFilterID,
    //{'id048994':{...}, ...}
    object_object: WorkerObject,
    //{'id399884':'string', ...}
    object_string: WorkerObject
  };

  var listener = start$8();
  var readed = {};
  var workers = {};
  var reserve = {};
  function init$l() {
    // sync('online_view','array_string')
    // sync('torrents_view','array_string')
    // sync('search_history','array_string')
    sync('online_last_balanser', 'object_string');
    sync('user_clarifys', 'object_object');
    sync('torrents_filter_data', 'object_object');
    Cache.getData('storage').then(function (result) {
      if (result) {
        console.log('Storage', 'load cache:', result.length);
        result.forEach(function (data) {
          reserve[data.key] = data[data.value];
        });
      }
    })["catch"](function (e) {
      console.log('Storage', 'cache error:', e.message, e.stack, e);
    });
  }

  /**
   * Получить значение переменной из оператвной памяти localStorage
   * @doc
   * @name get
   * @alias Storage
   * @param {string} name название
   * @param {string} empty значение по умолчанию
   * @returns {any}
   */

  function get(name, empty) {
    var item;
    var value = readed[name];
    if (typeof value == 'undefined') {
      item = window.localStorage.getItem(name);
      value = item;
      if (item == null && reserve[name]) {
        console.log('Storage', 'get from cache:', name, reserve[name]);
        value = reserve[name];
      }
    }
    value = value || empty || '';
    if (value == 'true' || value == 'false') return value == 'true' ? true : false;
    if (readed[name] && (Arrays.isObject(value) || Arrays.isArray(value))) return readed[name];
    var convert = parseInt(value);
    if (!isNaN(convert) && /^\d+$/.test(value)) return convert;
    var i = typeof value == 'string' ? value[0] : '';
    if (i == '[' || i == '{') {
      try {
        value = JSON.parse(value);
      } catch (error) {}
    }
    readed[name] = value;
    return value;
  }

  /**
   * Получить значение переменной напрямую из localStorage
   * @doc
   * @name value
   * @alias Storage
   * @param {string} name название
   * @param {string} empty значение по умолчанию
   * @returns {string}
   */

  function value(name, empty) {
    return window.localStorage.getItem(name) || empty || '';
  }

  /**
   * Установить значение переменной в оператвную память и localStorage
   * @doc
   * @name set
   * @alias Storage
   * @param {string} name название
   * @param {any} value значение
   * @param {boolean} nolisten по умолчанию `false`, если `true`, то не отправлять событие об изменении
   * @returns {string}
   */

  function set(name, value, nolisten, callerror) {
    readed[name] = value;
    var write = '';
    try {
      write = Arrays.isObject(value) || Arrays.isArray(value) ? JSON.stringify(value) : value;
    } catch (e) {
      console.log('Storage', name, 'JSON.stringify error:', e, value);
    }
    try {
      window.localStorage.setItem(name, write);
    } catch (e) {
      if (e.name == 'QuotaExceededError') {
        console.log('Storage', 'QuotaExceededError:', name, value);
        window.localStorage.removeItem(name);
        Cache.rewriteData('storage', name, {
          key: name,
          value: write
        }).then(function () {
          reserve[name] = write;
        })["catch"](function (e) {
          console.log('Storage', 'Cache error:', e.message, e.stack, e);
        });
        if (callerror) callerror(e);
      }
    }
    if (!nolisten) listener.send('change', {
      name: name,
      value: value
    });
  }

  /**
   * Добавить значение в массив к уже существующим
   * @doc
   * @name add
   * @alias Storage
   * @param {string} name название
   * @param {any} new_value значение
   * @returns {boolean} true если значение добавлено, false если значение уже существует
   */

  function add$2(name, new_value) {
    var list = get(name, '[]');
    if (list.indexOf(new_value) == -1) {
      list.push(new_value);
      set(name, list);
      listener.send('add', {
        name: name,
        value: new_value
      });
      return true;
    }
  }

  /**
   * Значение по умолчанию из параметров
   * @doc
   * @name field
   * @alias Storage
   * @param {string} name название
   * @returns {any} значение
   */

  function field(name) {
    return Params.field(name);
  }

  /**
   * Записать значение в кэш с ограничением по количеству данных
   * @doc
   * @name cache
   * @alias Storage
   * @param {string} name название
   * @param {integer} max максимальное количество данных
   * @param {string} empty значение по умолчанию
   * @returns {any} значение
   */

  function cache(name, max, empty) {
    var result = get(name, JSON.stringify(empty));
    if (Arrays.isObject(empty)) {
      var keys = Arrays.getKeys(result);
      if (keys.length > max) {
        var remv = keys.slice(0, keys.length - max);
        remv.forEach(function (k) {
          delete result[k];
        });
        set(name, result);
      }
    } else if (result.length > max) {
      result = result.slice(result.length - max);
      set(name, result);
    }
    return result;
  }

  /**
   * Добавить переменную в синхронизацию с сервером
   * @doc
   * @name sync
   * @alias Storage
   * @param {string} field_name название
   * @param {string} class_type тип данных, доступно (array_string | array_object_id | object_string | object_object) \n\n `array_string` - ['a','b','c'] \n\n `array_object_id` - [{id:1,..},{id:2,..}] \n\n `object_string` - {a:'a',b:'b'} \n\n `object_object` - {a:{a:'a'},b:{b:'b'}}
   */

  function sync(field_name, class_type) {
    if (Workers[class_type] && !workers[field_name]) {
      workers[field_name] = new Workers[class_type](field_name);
      workers[field_name].init(class_type);
    }
  }

  /**
   * Удалить значение из синхронизации
   * @doc
   * @name remove
   * @alias Storage
   * @param {string} field_name название
   * @param {any} value значение
   */

  function remove(field_name, value) {
    if (workers[field_name]) workers[field_name].remove(value);
  }

  /**
   * Очистить полностью значение из синхронизации
   * @doc
   * @name clean
   * @alias Storage
   * @param {string} field_name название
   */

  function clean(field_name) {
    if (workers[field_name]) workers[field_name].clean();
  }

  /**
   * Очистить кэш
   * @doc
   * @name clear
   * @alias Storage
   * @param {function} full `true` - полностью очистить, `false` - очистить только кеш
   */

  function clear$1(full) {
    if (full) {
      Bell.push({
        text: Prisma.Lang.translate('settings_clear_cache')
      });
      localStorage.clear();
    } else {
      Bell.push({
        text: Prisma.Lang.translate('settings_clear_cache_only')
      });
      var need = ['online_view', 'ser_clarifys', 'torrents_view', 'account_bookmarks', 'recomends_list', 'file_view', 'timetable', 'search_history', 'recomends_scan'];
      var more = ['online_', 'file_view_', 'storage_'];
      for (var key in localStorage) {
        if (more.find(function (w) {
          return key.indexOf(w) >= 0;
        })) need.push(key);
      }
      need.forEach(function (a) {
        localStorage.setItem(a, '');
      });
    }
    setTimeout(function () {
      window.location.reload();
    }, 3000);
  }

  /**
   * Получить размер данных в localStorage
   * @doc
   * @name getsize
   * @alias Storage
   * @param {function} call функция обратного вызова
   */

  function getsize(call) {
    if (localStorage) {
      var i = 0;
      var t = setInterval(function () {
        i += 250;
        try {
          localStorage.setItem('testsize', new Array(i * 1024 + 1).join('a'));
        } catch (e) {
          localStorage.removeItem('testsize');
          clearInterval(t);
        }
        call((i - 250) * 1024);
      }, 100);
    } else {
      call(5000 * 1024);
    }
  }
  var Storage = {
    listener: listener,
    init: init$l,
    get: get,
    set: set,
    field: field,
    cache: cache,
    add: add$2,
    value: value,
    sync: sync,
    remove: remove,
    clear: clear$1,
    clean: clean,
    getsize: getsize
  };

  var meta = {
    languages: {
      ru: {
        code: 'ru',
        name: 'Русский',
        lang_choice_title: 'Добро пожаловать',
        lang_choice_subtitle: 'Выберите свой язык'
      },
      en: {
        code: 'en',
        name: 'English',
        lang_choice_title: 'Welcome',
        lang_choice_subtitle: 'Choose your language'
      },
      uk: {
        code: 'uk',
        name: 'Українська',
        lang_choice_title: 'Ласкаво просимо',
        lang_choice_subtitle: 'Виберіть мову'
      }
      // be: {
      //     code: 'be',
      //     name: 'Беларуская',

      //     lang_choice_title: 'Сардэчна запрашаем',
      //     lang_choice_subtitle: 'Выберыце сваю мову',
      // },
      // zh: {
      //     code: 'zh',
      //     name: '简体中文',

      //     lang_choice_title: '欢迎',
      //     lang_choice_subtitle: '选择你的语言',
      // },
      // pt: {
      //     code: 'pt',
      //     name: 'Português',

      //     lang_choice_title: 'Bem-vindo',
      //     lang_choice_subtitle: 'Escolhe o teu idioma',
      // },
      // bg: {
      //     code: 'bg',
      //     name: 'Български',

      //     lang_choice_title: 'Здравейте',
      //     lang_choice_subtitle: 'Изберете вашият език',
      // },
      // he: {
      //     code: 'he',
      //     name: 'עִברִית',

      //     lang_choice_title: 'ברוך הבא',
      //     lang_choice_subtitle: 'בחר את השפה שלך',
      // },
      // cs: {
      //     code: "cs",
      //     name: "Čeština",

      //     lang_choice_title: "Vítejte",
      //     lang_choice_subtitle: "Vyberte svůj jazyk",
      // }
    }
  };

  var _lang_choice_title$la;
  var ru = (_lang_choice_title$la = {
    lang_choice_title: 'Добро пожаловать',
    lang_choice_subtitle: 'Выберите свой язык',
    more: 'Показать все',
    show_more: 'Показать ещё',
    more_results: 'Показать больше результатов',
    loading: 'Загрузка',
    nofind_movie: 'Не удалось найти фильм.',
    noname: 'Без названия',
    nochoice: 'Не выбрано',
    cancel: 'Отменить',
    confirm: 'Подтверждаю',
    sure: 'Вы уверены?',
    nodata: 'Нет данных',
    back: 'Назад',
    back_to_start: 'В начало',
    ready: 'Готово',
    close_app_modal: 'Вы уверены, что хотите покинуть приложение?',
    connected_seeds: 'подкл.',
    search: 'Поиск',
    search_input: 'Введите название',
    search_empty: 'История поиска пуста.',
    search_delete: 'Влево - удалить',
    search_start_typing: 'Начните вводить текст для поиска.',
    search_searching: 'Идет поиск...',
    search_start: 'Начать поиск',
    search_nofound: 'По вашему запросу ничего не найдено.',
    full_genre: 'Жанр',
    full_production: 'Производство',
    full_date_of_release: 'Дата релиза',
    full_budget: 'Бюджет',
    full_revenue: 'Сборы',
    full_countries: 'Страны',
    full_like: 'Нравится',
    full_torrents: 'Торренты',
    full_trailers: 'Трейлеры',
    full_sound: 'Звук трейлера в фоне',
    full_trailer_mute: 'Отключить звук',
    full_trailer_unmute: 'Включить звук',
    full_more: 'Ещё',
    full_detail: 'Описание',
    full_notext: 'Без описания.',
    full_series_release: 'Выход серий',
    full_next_episode: 'Следующая',
    full_episode_days_left: 'Осталось дней',
    full_trailer_official: 'Официальный',
    full_trailer_no_official: 'Неофициальный',
    full_season: 'Cезон',
    full_episode: 'Эпизод',
    full_directing: 'Режиссура',
    full_writing: 'Сценарий',
    full_keywords: 'Теги',
    full_soon_available_quality: 'Новинка ещё горячая! <br>Версии в высоком качестве подоспеют чуть позже — немножко терпения.',
    add_comment: 'Добавить',
    add_comments: 'Отзывы',
    comments_cancel: 'Закрыть',
    comments_send: 'Добавить',
    comments_error: 'Ошибка сервера',
    comments_offensive_content: 'Отзыв содержит недопустимые выражения. Пожалуйста, исправьте его и попробуйте снова',
    comments_religiosn_content: 'Отзыв содержит религиозные термины. Пожалуйста, исправьте его и попробуйте снова',
    comments_politic_content: 'Отзыв содержит политические термины. Пожалуйста, исправьте его и попробуйте снова',
    comments_spoiler_content: 'Отзыв содержит спойлеры. Пожалуйста, исправьте его и попробуйте снова',
    comment_added_successfully: 'Ваш отзыв опубликован',
    comments_autor: 'Укажите ваше имя',
    autor_comments: 'Напишите свой отзыв',
    comments_empty: 'Станьте первым, кто поделится впечатлениями! ✨<br><br>Расскажите о своих эмоциях от просмотра.',
    review_type_title: 'Эмоция от просмотра',
    review_type_neutral: 'Нейтральная',
    review_type_positive: 'Положительная',
    review_type_negative: 'Отрицательная',
    settings_cloud_sync: 'Синхронизация',
    settings_cloud_sync_descr: 'Синхронизируйте ваши закладки, историю просмотров и тайм-коды.',
    settings_cloud__text: 'Данная авторизация утратит актуальность и отключится 31.12.2024',
    settings_cloud__title: 'Авторизация',
    settings_cloud__atoken: 'Укажите ваш токен для авторизации',
    settings_cloud__token: 'Ваш токен',
    settings_cloud__status: 'Статус',
    settings_cloud_nosync: 'Не авторизованы',
    settings_cloud_nosync_desk: 'Необходимо авторизоваться',
    settings_cloud_sync_off: 'Отключено',
    settings_cloud_sync_on: 'Включите синхронизацию',
    settings_cloud_sync_error: 'Авторизация не удалась',
    settings_cloud_sync_errdesk: 'Проверьте введённые данные и повторите попытку',
    settings_cloud_sync_ok: 'Проверьте введённые данные и повторите попытку',
    settings_cloud_sync_status: 'Вошли',
    settings_cloud_status_ok: 'Вы успешно авторизовались',
    settings_cloud_sync_yes: 'Синхронизовано',
    settings_prisma_usercam_descr: 'Настройте список источников под себя – подключите свои аккаунты Filmix, Kinopub, Vokino, HDRezka или отключите лишние.',
    settings_prisma_sync: 'Авторизация',
    settings_prisma_sync_descr: 'Синхронизруйте ваши закладки, истории просмотров, метки и тайм-коды.',
    settings_prisma_account: 'Аккаунт',
    settings_prisma_logged_in_as: 'Вошли как',
    settings_prisma_profile: 'Профиль',
    settings_prisma_sync_btn: 'Синхронизировать',
    settings_prisma_sync_btn_descr: 'Сохранить локальные закладки на сервере',
    settings_prisma_backup: 'Бэкап',
    settings_prisma_backup_export_descr: 'Сохранить в облаке',
    settings_prisma_backup_import_descr: 'Восстановить из облака',
    settings_prisma_backup_descr: 'Сохранить или загрузить бэкап данных',
    settings_prisma_logout: 'Выйти из аккаунта',
    settings_prisma_signin: 'Авторизация',
    settings_prisma_not_specified: 'Не указан',
    settings_prisma_password: 'Пароль',
    settings_prisma_status: 'Статус',
    settings_prisma_backup_import: 'Импорт',
    settings_prisma_backup_export: 'Экспорт',
    settings_prisma_sync_filters: 'Синхронизация фильтров',
    settings_prisma_sync_calendar: 'Синхронизация календаря',
    settings_prisma_sync_quality: 'Синхронизация отметок (качество)',
    settings_prisma_sync_search: 'Синхронизация истории поиска',
    settings_prisma_sync_recomends: 'Синхронизация рекомендаций',
    settings_prisma_sync_timecodes: 'Синхронизация тайм-кодов',
    settings_prisma_signin_button: 'Выполнить вход',
    settings_input_links: 'Избранное',
    settings_interface_type: 'Облегчённая версия',
    settings_interface_size: 'Размер интерфейса',
    settings_interface_size_fixed: 'Фиксированный размер',
    settings_interface_size_fixed_descr: 'Если не стандартное разрешение экрана',
    settings_param_interface_size_fixed: 'Фиксированный',
    settings_interface_background: 'Фон',
    settings_interface_background_use: 'Показывать фон',
    settings_interface_background_type: 'Тип фона',
    settings_interface_performance: 'Быстродействие',
    settings_interface_footer_card: 'Карточка в плеере',
    settings_interface_footer_card_descr: 'Отображение карточки в плеере',
    settings_interface_background_trailer: 'Трейлер в карточке фильма',
    settings_interface_background_trailer_descr: 'Автоматически воспроизводить трейлер (отключается и в новом интерфейсе)',
    settings_interface_poster_trailer: 'Тизер в постере',
    settings_interface_poster_trailer_descr: 'На слабых устройствах выключить',
    settings_interface_trailer_quality: 'Качество трейлеров',
    settings_interface_trailer_quality_descr: 'Снижение качества трейлеров для повышения производительности на слабых устройствах',
    settings_interface_animation: 'Анимация контента',
    settings_interface_advanced_animation: 'Интерактивная анимация',
    settings_interface_advanced_animation_descr: 'Анимации активно реагирует на действия пользователя',
    settings_interface_animation_descr: 'На слабых устройствах выключить анимацию',
    settings_interface_attenuation: 'Затухание',
    settings_interface_attenuation_descr: 'Эффект затухания при скроллинге',
    settings_interface_scroll: 'Тип навигации',
    settings_interface_view_card: 'Отображение карточек',
    settings_interface_view_card_descr: 'На слабых устройствах только подгружать',
    settings_interface_lang: 'Язык интерфейса',
    settings_interface_lang_reload: 'Необходимо перезапустить приложение, нажмите «OK» для перезагрузки',
    settings_interface_card_interfice: 'Интерфейс карточек',
    settings_interface_card_poster: 'Показать постер',
    settings_interface_card_cover: 'Показать обложку',
    settings_interface_card_reactions: 'Показать реакции',
    settings_interface_glass: 'Стекло',
    settings_interface_glass_descr: 'Показывать интерфейс в стекловидном стиле',
    settings_interface_glass_opacity: 'Прозрачность стекла',
    settings_interface_black_style: 'Чёрный стиль',
    settings_interface_hide_outside_the_screen: 'Скрывать блоки карточек за границами экрана',
    settings_interface_hide_outside_the_screen_descr: 'Для лучшей производительности',
    settings_interface_view_trailer: 'Кнопка трейлера',
    settings_interface_hide_ai: 'Кнопка асистента',
    settings_main_account: 'Аккаунт',
    settings_main_interface: 'Интерфейс',
    settings_main_more: 'Остальные настройки',
    settings_main_player: 'Плеер',
    settings_main_parser: 'Парсер',
    settings_main_torrserver: 'TorrServer',
    settings_main_plugins: 'Расширения',
    settings_main_rest: 'Остальное',
    settings_rest_start: 'Стартовая страница',
    settings_rest_start_descr: 'Выберете с какой страницы начать при запуске приложения',
    settings_rest_source: 'Источник',
    settings_rest_source_use: 'Основной источник',
    settings_rest_source_descr: 'Откуда брать информацию о фильмах',
    settings_rest_tmdb_lang: 'На каком языке отображать данные с TMDB',
    settings_rest_tmdb_prox: 'Проксировать TMDB',
    settings_rest_tmdb_prox_auto: 'Включить прокси автоматически',
    settings_rest_tmdb_posters: 'Разрешение постеров',
    settings_rest_screensaver: 'Заставка',
    settings_rest_screensaver_use: 'Показывать заставку при бездействии',
    settings_rest_screensaver_type: 'Источник',
    settings_rest_screensaver_time: 'Период неактивности',
    settings_rest_helper: 'Подсказки',
    settings_rest_helper_use: 'Показывать подсказки',
    settings_rest_helper_reset: 'Показать подсказки снова',
    settings_rest_pages: 'Сколько страниц хранить в памяти',
    settings_rest_pages_descr: 'Хранит страницы в том состоянии, в котором вы их покинули.',
    settings_rest_time: 'Сместить время',
    settings_rest_navigation: 'Тип навигации',
    settings_rest_keyboard: 'Выберите тип клавиатуры',
    settings_rest_device: 'Название устройства',
    settings_rest_device_placeholder: 'Например: Моя компьютер',
    settings_rest_cache: 'Очистить кэш устройства',
    settings_сlear_cache: 'Кэш',
    settings_rest_tmdb_example: 'Например:',
    settings_rest_tmdb_api_descr: 'Для получения данных',
    settings_rest_tmdb_image_descr: 'Для получения изображений',
    settings_rest_card_quality: 'Отметки качества',
    settings_rest_card_quality_descr: 'Отображать отметки качества на карточках',
    settings_rest_card_episodes: 'Отметки эпизодов',
    settings_rest_card_episodes_descr: 'Отображать отметки эпизодов на карточках',
    settings_rest_cache_images: 'Кэшировать изображения',
    settings_rest_cache_images_descr: 'Кэш изображений в локальное хранилище',
    settings_rest_protocol_use: 'Безопасное соединение',
    settings_rest_protocol_descr: 'Использовать протокол HTTPS',
    settings_rest_cache_only: 'Только кеш',
    settings_rest_cache_only_descr: 'Основные настройки сохранятся',
    settings_rest_cache_all: 'Кеш и данные',
    settings_rest_cache_all_descr: 'Внимание: Будут очищены все настройки и данные',
    settings_rest_cache_calculate: 'Сколько осталось памяти',
    settings_parser_use: 'Использовать парсер',
    settings_parser_use_descr: 'Тем самым, вы соглашаетесь принять на себя всю ответственность за использование публичных ссылок для просмотра торрент и онлайн контента.',
    settings_parser_type: 'Тип парсера для торрентов',
    settings_parser_jackett_placeholder: 'Например: 192.168.х',
    settings_parser_jackett_link: 'Ссылка',
    settings_parser_jackett_link_descr: 'Укажите ссылку на скрипт Jackett',
    settings_parser_prowlarr_link_descr: 'Укажите ссылку на сервер Prowlarr',
    settings_parser_jackett_key_placeholder: 'Например: sa0sk83d..',
    settings_parser_jackett_key: 'Api-ключ',
    settings_parser_jackett_key_descr: 'Находится в Jackett',
    settings_parser_prowlarr_key_descr: 'Находится во вкладке настроек Prowlarr в категории основное',
    settings_parser_torlook_type: 'Метод парсинга сайта TorLook',
    settings_parser_scraperapi_placeholder: 'Например: scraperapi.com',
    settings_parser_scraperapi_link: 'Ссылка на парсер сайтов',
    settings_parser_scraperapi_descr: 'Зарегистрируйтесь на сайте scraperapi.com, введите ссылку api.scraperapi.com?api_key=...&url={q}<br>В {q} будет поставляться сайт w41.torlook.info',
    settings_parser_search: 'Поиск',
    settings_parser_search_descr: 'На каком языке производить поиск?',
    settings_parser_in_search: 'Парсер в поиске',
    settings_parser_in_search_descr: 'Показывать результаты в поиске?',
    settings_parser_timeout_title: 'Таймаут парсера',
    settings_parser_timeout_descr: 'Время (в секундах) ожидания ответа от сервера',
    settings_player_type: 'Тип плеера',
    settings_player_type_descr: 'Каким плеером воспроизводить',
    settings_player_iptv_type: 'Тип плеера для IPTV',
    settings_player_iptv_type_descr: 'Каким плеером воспроизводить IPTV каналы',
    settings_player_torrent_type: 'Тип плеера для торрентов',
    settings_player_torrent_type_descr: 'Каким плеером воспроизводить торренты',
    settings_player_reset: 'Сбросить плеер по умолчанию',
    settings_player_reset_descr: 'Сбрасывает выбранный Android плеер в приложении',
    settings_player_path: 'Путь к плееру',
    settings_player_path_descr: 'Укажите путь к плееру .exe',
    settings_player_normalization: 'Нормализация звука',
    settings_player_normalization_descr: 'Нормализирует звук в один уровень',
    settings_player_next_episode: 'Следующая серия',
    settings_player_next_episode_descr: 'Автоматическое воспроизведение следующей серии',
    settings_player_timecode: 'Тайм-код',
    settings_player_timecode_descr: 'Воспроизводить с последнего места или с начала',
    settings_player_scale: 'Метод масштабирования',
    settings_player_scale_descr: 'Каким образом производить вычисления для масштабирования видео',
    settings_player_subs: 'Субтитры',
    settings_player_subs_use: 'Включить',
    settings_player_subs_use_descr: 'Влючает субтитры на экране по умолчанию',
    settings_player_subs_size: 'Размер',
    settings_player_subs_size_descr: 'Размер субтитров на экране',
    settings_player_subs_stroke_use: 'Использовать обводку',
    settings_player_subs_stroke_use_descr: 'Субтитры будут отображаться с обводкой для улучшения читаемости',
    settings_player_subs_backdrop_use: 'Подложка субтитров',
    settings_player_subs_backdrop_use_descr: 'Субтитры будут отображаться с подложкой для улучшения читаемости',
    settings_player_quality: 'Качество видео по умолчанию',
    settings_player_quality_descr: 'Выберете качество видео по умолчанию',
    settings_player_hls_title: 'Обработка потока .m3u8',
    settings_player_hls_descr: 'Не трогайте этот параметр, если не знаете, зачем он',
    settings_player_rewind_title: 'Интервал перемотки',
    settings_player_rewind_descr: 'Выберете необходимый интервал перемотки',
    settings_player_launch_trailers: 'Плеер для трейлеров',
    settings_plugins_notice: 'Для применения плагина необходимо перезагрузить приложение',
    settings_plugins_add: 'Добавить плагин',
    settings_plugins_add_descr: 'Для удаления добавленного плагина удерживайте или нажмите дважды клавишу (OK) на нем',
    settings_plugins_install: 'Установить плагин',
    settings_plugins_install_descr: 'Установить плагин из списка доступных',
    settings_server_link: 'Использовать ссылку',
    settings_server_links: 'TorrServer',
    settings_server_placeholder: 'Например: 192.168.х',
    settings_server_link_one: 'Ссылка на скрипт TorrServer',
    settings_server_link_one_descr: 'Укажите ссылку на скрипт TorrServer',
    settings_server_link_one_localip: 'Для локального 127.0.0.1:8090',
    settings_server_link_two: 'Дополнительная ссылка',
    settings_server_link_two_descr: 'Укажите дополнительную ссылку на скрипт TorrServer',
    settings_server_additionally: 'Дополнительно',
    settings_server_client: 'Встроенный клиент',
    settings_server_client_descr: 'Использовать встроенный JS-клиент TorrServer, иначе запускается системный.',
    settings_server_base: 'Сохранять в базу',
    settings_server_base_descr: 'Торрент будет добавлен в базу TorrServer',
    settings_server_preload: 'Буфер предварительной загрузки',
    settings_server_preload_descr: 'Дождаться заполнения буфера предварительной загрузки TorrServer перед проигрыванием контента',
    settings_server_auth: 'Авторизация',
    settings_server_password_use: 'Вход по паролю',
    settings_server_login: 'Логин',
    settings_server_password: 'Пароль',
    settings_server_not_specified: 'Не указан',
    settings_webos_launcher: 'Запуск приложения',
    settings_webos_launcher_add_device: 'Установить как стартовое',
    settings_webos_launcher_remove_device: 'Убрать из стартовых приложений',
    settings_parental_control_param_time_always: 'Всегда',
    settings_parental_control_param_time_once: 'Один раз',
    settings_parental_control_param_time_10: 'Через 10 минут',
    settings_parental_control_param_time_20: 'Через 20 минут',
    settings_parental_control_param_time_30: 'Через 30 минут',
    settings_parental_control_param_time_60: 'Через 1 час',
    settings_parental_control_param_time_120: 'Через 2 часа',
    settings_parental_control_change_pin: 'Изменить PIN-код',
    settings_parental_control_demand_title: 'Когда запрашивать',
    settings_parental_control_demand_descr: 'Через какое время запрашивать PIN-код',
    settings_parental_control_enabled: 'Включено',
    settings_parental_control_disabled: 'Отключено',
    parental_control_input_new_code: 'Введите новый PIN-код',
    parental_control_confirm_new_code: 'Повторите PIN-код',
    parental_control_no_match_code: 'PIN-код не совпадает с прошлым кодом',
    parental_control_input_code: 'Введите PIN-код',
    parental_control_input_error: 'Вы ввели неправильный PIN-код',
    torent_nohash_reasons: 'Причины',
    torent_nohash_reason_one: 'TorServer не смог скачать торрент файл',
    torent_nohash_reason_two: 'Ответ от TorServer',
    torent_nohash_reason_three: 'Ссылка',
    torent_nohash_do: 'Что делать?',
    torent_nohash_do_one: 'Проверьте правильно ли вы настроили Jackett',
    torent_nohash_do_two: 'Приватные источники могут не выдавать ссылку на файл',
    torent_nohash_do_three: 'Убедитесь что Jackett тоже может скачать файл',
    torent_nohash_do_four: 'Написать в нашу Telegram-группу: @prisma_party',
    torent_nohash_do_five: 'Укажите какой фильм, какая раздача и по возможности фото этой раздачи',
    torrent_error_text: 'Не удалось подключиться к TorrServer. Давайте быстро пройдёмся по списку возможных проблем и всё проверим.',
    torrent_error_step_1: 'Запущен ли TorrServer',
    torrent_error_step_2: 'Динамический IP-адрес',
    torrent_error_step_3: 'Протокол и порт',
    torrent_error_step_4: 'Блокировка антивирусами',
    torrent_error_step_5: 'Проверьте на доступность',
    torrent_error_step_6: 'Все равно не работает',
    torrent_error_info_1: 'Убедитесь, что вы запустили TorrServer на устройстве, где он установлен.',
    torrent_error_info_2: 'Частая ошибка, изменился IP-адрес устройства с TorrServer. Убедитесь, что IP-адрес, который вы ввели - {ip}, совпадает с адресом устройства, на котором установлен TorrServer.',
    torrent_error_info_3: 'Для подключения к TorrServer, необходимо указать протокол http:// в начале и порт :8090 в конце адреса. Убедитесь, что после IP-адреса указан порт, ваш текущий адрес - {ip}',
    torrent_error_info_4: 'Частое явление, антивирус или брандмауэр может блокировать доступ по IP-адресу, попробуйте отключить антивирус и брандмауэр.',
    torrent_error_info_5: 'На любом другом устройстве в этой же сети, откройте в браузере адрес {ip} и проверьте, доступен ли веб-интерфейс TorrServer.',
    torrent_error_info_6: 'Если после всех проверок всё равно возникает ошибка подключения, попробуйте перезагрузить TorrServer и интернет-адаптер.',
    torrent_error_info_7: 'Если проблема не устранена, пишите в Telegram-группу @prisma_party с текстом (Prisma не подключается к TorrServer после всех проверок, текущий адрес {ip})',
    torrent_error_start: 'Начать проверку',
    torrent_error_nomatrix: 'Не удалось подтвердить версию Matrix',
    torrent_error_made: 'Выполнено',
    torrent_error_from: 'из',
    torrent_error_next: 'Далее',
    torrent_error_complite: 'Завершить',
    torrent_error_connect: 'Ошибка подключения',
    torrent_error_check_no_auth: 'Сервер ответил на запрос, но не удалось пройти авторизацию',
    torrent_install_need: 'TorrServer отсутствует',
    torrent_install_text: 'TorrServer – приложение, позволяет просматривать контент из торрент-файлов в онлайн режиме.<br><br>Подключение к торренту идет локально, если ваш провайдер блокирует торренты, будьте осторожны.<br><br>Помните, что в некоторых странах просмотр TorrServer может быть рассмотрен как нарушение авторских прав и привести к штрафам или другим юридическим последствиям. Будьте внимательны к законам вашей страны.',
    torrent_install_contact: 'Telegram',
    torrent_item_bitrate: 'Битрейт',
    torrent_item_seeds: 'Раздают',
    torrent_item_grabs: 'Качают',
    torrent_item_mb: 'Мбит/с',
    torrent_serial_episode: 'Серия',
    torrent_serial_season: 'Сезон',
    torrent_serial_date: 'Выход',
    torrent_get_magnet: 'Запрашиваю magnet ссылку',
    torrent_remove_title: 'Удалить',
    torrent_remove_descr: 'Торрент будет удален из вашего списка',
    torrent_parser_any_one: 'Любое',
    torrent_parser_any_two: 'Любой',
    torrent_parser_no_choice: 'Не выбрано',
    torrent_parser_yes: 'Да',
    torrent_parser_no: 'Нет',
    torrent_parser_quality: 'Качество',
    torrent_parser_subs: 'Субтитры',
    torrent_parser_voice: 'Перевод',
    torrent_parser_tracker: 'Трекер',
    torrent_parser_year: 'Год',
    torrent_parser_season: 'Сезон',
    torrent_parser_sort_by_seeders: 'По раздающим',
    torrent_parser_sort_by_size: 'По размеру',
    torrent_parser_sort_by_name: 'По названию',
    torrent_parser_sort_by_tracker: 'По источнику',
    torrent_parser_sort_by_date: 'По дате',
    torrent_parser_sort_by_viewed: 'По просмотренным',
    torrent_parser_voice_dubbing: 'Дубляж',
    torrent_parser_voice_polyphonic: 'Многоголосый',
    torrent_parser_voice_two: 'Двухголосый',
    torrent_parser_voice_amateur: 'Любительский',
    torrent_parser_reset: 'Сбросить фильтр',
    torrent_parser_empty: 'Не удалось получить результатов',
    torrent_parser_no_hash: 'Не удалось получить HASH',
    torrent_parser_added_to_mytorrents: 'добавлено в «Мои торренты»',
    torrent_parser_add_to_mytorrents: 'Добавить в «Мои торренты»',
    torrent_parser_label_title: 'Пометить',
    torrent_parser_label_descr: 'Пометить раздачу с флагом (просмотрено)',
    torrent_parser_label_cancel_title: 'Снять отметку',
    torrent_parser_label_cancel_descr: 'Снять отметку с раздачи (просмотрено)',
    torrent_parser_timeout: 'Время ожидания истекло',
    torrent_parser_nofiles: 'Не удалось извлечь подходящие файлы',
    torrent_parser_set_link: 'Укажите ссылку для парсинга',
    torrent_parser_request_error: 'Ошибка в запросе',
    torrent_parser_magnet_error: 'Не удалось получить magnet ссылку',
    torrent_parser_no_responce: 'Парсер не доступен',
    torrent_parser_settings_info: ' <br>Попробуйте поменять на другой в настройках или указать свой адрес.',
    torrent_parser_torlook_fallback_search_notification: 'Парсер Jackett не доступен или настройки подключения не верны. Осуществляется поиск в Torlook...',
    about_text: '1. Приложение для просмотра фильмов и сериалов использует информацию исключительно в познавательных целях. Все данные о фильмах и сериалах берутся из API открытых источников, таких как TMDB (The Movie Database), который предоставляет доступ к карточкам фильмов, актерам, трейлерам и другой связанной информации. Приложение не хранит никакую информацию на своих серверах, а лишь отображает данные, полученные из сторонних API, обеспечивая удобный доступ к ним для пользователей.',
    about_android: '2. Приложение для Android вы можете скачать в нашей группе Telegram',
    about_mobile: '3. PWA-приложение для мобильных устройств и планшетов под управлением iOS и Android можно добавить на главный экран через настройки вашего браузера, что позволит вам получить быстрый доступ к приложению прямо с домашнего экрана, как если бы это было обычное нативное приложение.',
    about_abuse: '4. По DCMA пишите нам на почту abuse@prisma.cam',
    about_channel: 'Telegram',
    about_group: 'Группа',
    about_version: 'Версия',
    about_donate: 'Донат',
    title_watched: 'Продолжить просмотр',
    title_settings: 'Настройки',
    title_collections: 'Подборки',
    title_company: 'Компания',
    title_actors: 'Актеры',
    title_actor: 'Актер',
    title_actress: 'Актриса',
    title_person: 'Персона',
    title_persons: 'Персоны',
    title_comments: 'Отзывы',
    title_torrents: 'Торренты',
    title_trailers: 'Трейлеры',
    title_watch: 'Смотреть',
    title_error: 'Ошибка',
    title_links: 'Ссылки',
    title_choice: 'Выбрать',
    title_main: 'Главная',
    title_book: 'Закладки',
    title_like: 'Нравится',
    title_wath: 'Позже',
    title_look: 'Смотрю',
    title_scheduled: 'Запланировано',
    title_viewed: 'Просмотрено',
    title_thrown: 'Брошено',
    title_continued: 'Продолжение следует',
    title_history: 'История просмотров',
    title_mytorrents: 'Мои торренты',
    title_last: 'Последняя',
    title_action: 'Действие',
    title_producer: 'Режиссер',
    title_collection: 'Коллекция',
    title_recomendations: 'Рекомендации',
    title_similar: 'Похожие',
    title_about: 'О приложении',
    title_timetable: 'Расписание',
    title_relises: 'Цифровые релизы',
    title_catalog: 'Каталог',
    title_category: 'Категория',
    title_parser: 'Парсер',
    title_type: 'Тип',
    title_rating: 'Рейтинг',
    title_country: 'Страна',
    title_year: 'Год',
    title_genre: 'Жанр',
    title_filter: 'Фильтр',
    title_notice: 'Уведомления',
    title_files: 'Файлы',
    title_now_watch: 'Сейчас смотрят',
    title_high_rating: 'Высокий рейтинг',
    title_many_votes: 'Выбор зрителей',
    title_new_releases: 'Новые релизы',
    title_audience_interest: 'Интерес зрителей',
    title_on: 'на',
    title_russian: 'Россия',
    title_best_movies: 'Популярные фильмы',
    title_best_shows: 'Популярные сериалы',
    title_premiere: 'Сейчас смотрят',
    title_latest: 'Последнее добавление',
    title_continue: 'Продолжить просмотр',
    title_recomend_watch: 'Рекомендация на основе ваших интересов',
    title_new_episodes: 'Новые серии',
    title_popular: 'Популярное',
    title_popular_movie: 'Популярные фильмы',
    title_popular_tv: 'Популярные сериалы',
    title_popular_movie_week: 'Лучшие фильмы недели по оценкам пользователей',
    title_popular_tv_week: 'Лучшие сериалы недели по оценкам пользователей',
    title_new_this_year: 'Новинки этого года',
    title_hight_voite: 'Лидируют по рейтингу',
    title_new: 'Новинки',
    title_this_year: 'Новинки этого года',
    title_trend_day: 'Сегодня в тренде',
    title_trend_netflix: 'Топ Netflix',
    title_trend_kinopoisk: 'Кинопоиск',
    title_trend_hbo: 'Топ HBO',
    title_russian_movies: 'Российские фильмы',
    title_russian_tv_shows: 'Российские сериалы',
    title_trend_week: 'В тренде за неделю',
    title_upcoming: 'Сейчас на больших экранах',
    title_top_movie: 'Топ фильмы',
    title_top_tv: 'Топ сериалы',
    title_tv_today: 'Сегодня в эфире',
    title_this_week: 'На этой неделе',
    title_in_top: 'В топе',
    title_out: 'Закрыть приложение? 😞',
    title_out_confirm: 'Закрыть',
    title_continue_two: 'Продолжить',
    title_choice_language: 'Выбрать язык',
    title_subscribe: 'Подписаться',
    title_subscribes: 'Подписки',
    title_unsubscribe: 'Отписаться',
    title_language: 'Язык оригинала',
    title_language_short: 'Язык',
    title_ongoing: 'Сериалы',
    title_pgrating: 'Возрастное ограничение',
    title_card: 'Карточка',
    title_seasons: 'Сезоны',
    title_episodes: 'Серии',
    title_rewiews: 'Отзывы',
    title_channel: 'Канал',
    title_in_high_quality: 'В высоком качестве',
    title_author: 'Автор',
    title_buffer: 'Буфер',
    title_upcoming_episodes: 'Ближайшие выходы эпизодов',
    title_aired_episodes: 'Вышедшие эпизоды',
    title_reactions: 'Рейтинг',
    title_last_year: 'Прошлый год',
    title_reset: 'Перезагрузить',
    title_left: 'Осталось',
    title_parental_control: 'Родительский контроль',
    title_worth_rewatch: 'Стоит пересмотреть',
    your_rating: 'Ваш рейтинг',
    reactions_votes: 'Голосов',
    reactions_none: 'Нет оценок',
    reactions_fire: 'Супер',
    reactions_nice: 'Неплохо',
    reactions_think: 'Смотрибельно',
    reactions_bore: 'Скука',
    reactions_shit: 'Плохо',
    reactions_ready: 'Вы уже оставили реакцию',
    reactions_error: 'Ошибка сервера, попробуйте позже.',
    reactions_thanks: 'Спасибо за ваш голос, это помогает пользователям выбрать лучший контент',
    subscribe_success: 'Вы успешно подписались',
    subscribe_error: 'Возникла ошибка при подписке, попробуйте позже',
    subscribe_noinfo: 'Не удалось получить информацию, попробуйте позже',
    company_headquarters: 'Штаб',
    company_homepage: 'Сайт',
    company_country: 'Страна',
    country_ad: 'Андорра',
    country_ae: 'ОАЭ',
    country_af: 'Афганистан',
    country_al: 'Албания',
    country_am: 'Армения',
    country_ao: 'Ангола',
    country_ar: 'Аргентина',
    country_at: 'Австрия',
    country_au: 'Австралия',
    country_aw: 'Аруба',
    country_az: 'Азербайджан',
    country_bа: 'Босния и Герцеговина',
    country_bd: 'Бангладеш',
    country_be: 'Бельгия',
    country_bg: 'Болгария',
    country_bh: 'Бахрейн',
    country_bi: 'Бурунди',
    country_bj: 'Бенин',
    country_bo: 'Боливия',
    country_br: 'Бразилия',
    country_bs: 'Багамские о-ва',
    country_bt: 'Бутан',
    country_bw: 'Ботсвана',
    country_by: 'Беларусь',
    country_ca: 'Канада',
    country_ch: 'Швейцария',
    country_cl: 'Чили',
    country_cm: 'Камерун',
    country_cn: 'Китай',
    country_co: 'Колумбия',
    country_cr: 'Коста-Рика',
    country_cu: 'Куба',
    country_cv: 'Кабо-Верде',
    country_cy: 'Кипр',
    country_cz: 'Чехия',
    country_de: 'Германия',
    country_dj: 'Джибути',
    country_dk: 'Дания',
    country_do: 'Доминикана',
    country_dz: 'Алжир',
    country_ec: 'Эквадор',
    country_ee: 'Эстония',
    country_eg: 'Египет',
    country_es: 'Испания',
    country_et: 'Эфиопия',
    country_fi: 'Финляндия',
    country_fo: 'Фарерские о-ва',
    country_fr: 'Франция',
    country_ga: 'Габон',
    country_gb: 'Великобритания',
    country_ge: 'Грузия',
    country_gh: 'Гана',
    country_gl: 'Гренландия',
    country_gp: 'Гваделупа',
    country_gr: 'Греция',
    country_gt: 'Гватемала',
    country_hk: 'Гонконг',
    country_hr: 'Хорватия',
    country_ht: 'Гаити',
    country_hu: 'Венгрия',
    country_id: 'Индонезия',
    country_ie: 'Ирландия',
    country_il: 'Израиль',
    country_in: 'Индия',
    country_iq: 'Ирак',
    country_ir: 'Иран',
    country_is: 'Исландия',
    country_it: 'Италия',
    country_jm: 'Ямайка',
    country_jo: 'Иордания',
    country_jp: 'Япония',
    country_ke: 'Кения',
    country_kg: 'Киргизия',
    country_kh: 'Камбоджа',
    country_kp: 'Северная Корея',
    country_kr: 'Южная Корея',
    country_kz: 'Казахстан',
    country_kw: 'Кувейт',
    country_la: 'Лаос',
    country_lb: 'Ливан',
    country_li: 'Лихтенштейн',
    country_lk: 'Шри-Ланка',
    country_lr: 'Либерия',
    country_lt: 'Литва',
    country_lu: 'Люксембург',
    country_lv: 'Латвия',
    country_ly: 'Ливия',
    country_ma: 'Марокко',
    country_mc: 'Монако',
    country_md: 'Молдова',
    country_me: 'Черногория',
    country_mk: 'Македония',
    country_mm: 'Мьянма',
    country_mn: 'Монголия',
    country_mo: 'Макао',
    country_mt: 'Мальта',
    country_mu: 'Маврикий',
    country_mv: 'Мальдивы',
    country_mw: 'Малави',
    country_mx: 'Мексика',
    country_my: 'Малайзия',
    country_mz: 'Мозамбик',
    country_na: 'Намибия',
    country_ne: 'Нигер',
    country_ng: 'Нигерия',
    country_ni: 'Никарагуа',
    country_nl: 'Нидерланды',
    country_no: 'Норвегия',
    country_np: 'Непал',
    country_nz: 'Новая Зеландия',
    country_om: 'Оман',
    country_pa: 'Панама',
    country_pe: 'Перу',
    country_pg: 'Папуа - Новая Гвинея',
    country_ph: 'Филиппины',
    country_pk: 'Пакистан',
    country_pl: 'Польша',
    country_pr: 'Пуэрто-Рико',
    country_ps: 'Палестина',
    country_pt: 'Португалия',
    country_py: 'Парагвай',
    country_qa: 'Катар',
    country_ro: 'Румыния',
    country_rs: 'Сербия',
    country_ru: 'Россия',
    country_rw: 'Руанда',
    country_sa: 'Саудовская Аравия',
    country_sd: 'Судан',
    country_se: 'Швеция',
    country_sg: 'Сингапур',
    country_si: 'Словения',
    country_sk: 'Словакия',
    country_sn: 'Сенегал',
    country_su: 'СССР',
    country_sv: 'Сальвадор',
    country_sy: 'Сирия',
    country_th: 'Таиланд',
    country_tj: 'Таджикистан',
    country_tm: 'Туркменистан',
    country_tn: 'Тунис',
    country_tr: 'Турция',
    country_tw: 'Тайвань',
    country_tz: 'Танзания',
    country_ua: 'Украина',
    country_ug: 'Уганда',
    country_us: 'США',
    country_uy: 'Уругвай',
    country_uz: 'Узбекистан',
    country_ve: 'Венесуэла',
    country_vn: 'Вьетнам',
    country_ws: 'Самоа',
    country_xk: 'Косово',
    country_ye: 'Йемен',
    country_yu: 'Югославия',
    country_za: 'ЮАР',
    country_zm: 'Замбия',
    country_zw: 'Зимбабве',
    filter_clarify: 'Уточнить',
    filter_clarify_two: 'Уточнить поиск',
    filter_set_name: 'Указать название',
    filter_sorted: 'Сортировать',
    filter_filtred: 'Фильтр',
    filter_any: 'Любой',
    filter_combinations: 'Комбинации',
    filter_alt_names: 'Другие названия',
    filter_rating_from: 'от',
    filter_rating_to: 'до',
    filter_lang_af: 'Африкаанс',
    filter_lang_ar: 'Арабский',
    filter_lang_az: 'Азербайджанский',
    filter_lang_ba: 'Башкирский',
    filter_lang_be: 'Белорусский',
    filter_lang_bg: 'Болгарский',
    filter_lang_bn: 'Бенгальский',
    filter_lang_bs: 'Боснийский',
    filter_lang_ca: 'Каталанский',
    filter_lang_ce: 'Чеченский',
    filter_lang_cs: 'Чешский',
    filter_lang_da: 'Датский',
    filter_lang_de: 'Немецкий',
    filter_lang_el: 'Греческий',
    filter_lang_en: 'Английский',
    filter_lang_es: 'Испанский',
    filter_lang_et: 'Эстонский',
    filter_lang_fa: 'Персидский',
    filter_lang_fi: 'Финский',
    filter_lang_fr: 'Французский',
    filter_lang_ga: 'Ирландский',
    filter_lang_gl: 'Галисийский',
    filter_lang_gn: 'Гуарани',
    filter_lang_he: 'Иврит',
    filter_lang_hi: 'Хинди',
    filter_lang_hr: 'Хорватский',
    filter_lang_hu: 'Венгерский',
    filter_lang_hy: 'Армянский',
    filter_lang_id: 'Индонезийский',
    filter_lang_is: 'Исландский',
    filter_lang_it: 'Итальянский',
    filter_lang_ja: 'Японский',
    filter_lang_ka: 'Грузинский',
    filter_lang_kk: 'Казахский',
    filter_lang_ko: 'Корейский',
    filter_lang_ks: 'Кашмири',
    filter_lang_ku: 'Курдский',
    filter_lang_ky: 'Киргизский',
    filter_lang_lt: 'Литовский',
    filter_lang_lv: 'Латышский',
    filter_lang_mi: 'Маори',
    filter_lang_mk: 'Македонский',
    filter_lang_mn: 'Монгольский',
    filter_lang_mo: 'Молдавский',
    filter_lang_mt: 'Мальтийский',
    filter_lang_ne: 'Непальский',
    filter_lang_nl: 'Нидерландский',
    filter_lang_no: 'Норвежский',
    filter_lang_pa: 'Панджаби',
    filter_lang_pl: 'Польский',
    filter_lang_ps: 'Пушту',
    filter_lang_pt: 'Португальский',
    filter_lang_ro: 'Румынский',
    filter_lang_ru: 'Русский',
    filter_lang_si: 'Сингальский',
    filter_lang_sk: 'Словацкий',
    filter_lang_sl: 'Словенский',
    filter_lang_sm: 'Самоанский',
    filter_lang_so: 'Сомалийский',
    filter_lang_sq: 'Албанский',
    filter_lang_sr: 'Сербский',
    filter_lang_sv: 'Шведский',
    filter_lang_sw: 'Суахили',
    filter_lang_ta: 'Тамильский',
    filter_lang_tg: 'Таджикский',
    filter_lang_th: 'Тайский',
    filter_lang_tk: 'Туркменский',
    filter_lang_tr: 'Турецкий',
    filter_lang_tt: 'Татарский',
    filter_lang_ur: 'Урду',
    filter_lang_uk: 'Украинский',
    filter_lang_uz: 'Узбекский',
    filter_lang_vi: 'Вьетнамский',
    filter_lang_yi: 'Идиш',
    filter_lang_zh: 'Китайский',
    filter_genre_ac: 'Боевик',
    filter_genre_ad: 'Приключения',
    filter_genre_mv: 'Мультфильм',
    filter_genre_cm: 'Комедия',
    filter_genre_cr: 'Криминал',
    filter_genre_dc: 'Документальный',
    filter_genre_dr: 'Драма',
    filter_genre_fm: 'Семейный',
    filter_genre_fe: 'Фэнтези',
    filter_genre_hi: 'История',
    filter_genre_ho: 'Ужасы',
    filter_genre_mu: 'Музыка',
    filter_genre_de: 'Детектив',
    filter_genre_md: 'Мелодрама',
    filter_genre_fa: 'Фантастика',
    filter_genre_tv: 'Телевизионный фильм',
    filter_genre_tr: 'Триллер',
    filter_genre_mi: 'Военный',
    filter_genre_ve: 'Вестерн',
    filter_genre_aa: 'Боевик и Приключения',
    filter_genre_ch: 'Детский',
    filter_genre_nw: 'Новости',
    filter_genre_rs: 'Реалити-шоу',
    filter_genre_hf: 'НФ и Фэнтези',
    filter_genre_op: 'Мыльная опера',
    filter_genre_tc: 'Ток-шоу',
    filter_genre_mp: 'Война и Политика',
    empty_title: 'Пусто',
    empty_text: 'По вашему фильтру ничего не нашлось, уточните фильтр.',
    empty_title_two: 'Упс',
    empty_text_two: 'В данный момент тут пусто',
    back_to_card: 'Вернуться в карточку',
    menu_main: 'Главная',
    menu_movies: 'Фильмы',
    menu_tv: 'Сериалы',
    menu_catalog: 'Каталог',
    menu_filter: 'Фильтр',
    menu_collections: 'Подборки',
    menu_relises: 'Релизы',
    menu_anime: 'Аниме',
    menu_bookmark: 'Закладки',
    menu_like: 'Нравится',
    menu_time: 'Позже',
    menu_history: 'История',
    menu_timeline: 'Расписание',
    menu_torrents: 'Торренты',
    menu_settings: 'Настройки',
    menu_about: 'Инфо',
    menu_console: 'Консоль',
    menu_multmovie: 'Детям',
    menu_multtv: 'Мультсериалы',
    menu_feed: 'Лента',
    prisma_movie_title: 'Ламповое кино',
    prisma_movie_descr: 'Следите за новинками на своем смартфоне. <br>Телеграм: <b>@prisma_movie</b>',
    plugins_catalog_work: 'Рабочие плагины',
    plugins_catalog_work_descr: 'Плагины, которые точно работают.',
    plugins_catalog_popular: 'Популярные плагины среди пользователей',
    plugins_catalog_popular_descr: 'Установка из неизвестных источников может привести к некорректной работе приложения.',
    plugins_online: 'Просмотр онлайн',
    plugins_check_fail: 'Не удалось проверить работоспособность плагина. Однако это не означает, что плагин не работает. Перезагрузите приложение для выяснения, загружается ли плагин.',
    plugins_need_reload: 'Для применения плагина необходимо перезагрузить приложение',
    plugins_install: 'Установить',
    plugins_install_ready: 'Этот плагин уже установлен.',
    plugins_installed: 'Установок',
    plugins_load_from: 'Загружено из CUB',
    plugins_ok_for_check: 'Нажмите (OK) для проверки плагина',
    plugins_no_loaded: 'При загрузке приложения, часть плагинов не удалось загрузить',
    plugins_remove: 'Удалить плагины',
    plugins_add_success: 'Плагин успешно подключен',
    time_viewed: 'Просмотрено',
    time_from: 'из',
    time_reset: 'Сбросить тайм-код',
    settings_clear_cache: 'Кеш и данные очищены',
    settings_clear_cache_only: 'Кеш очищен',
    settings_cache_only: 'Кеш',
    settings_user_links: 'Пользовательская ссылка',
    settings_for_local: 'Для локального TorrServer',
    settings_add: 'Добавить',
    settings_remove: 'Удалить',
    settings_manager: 'Менеджер хранилища',
    settings_this_value: 'текущее значение',
    settings_added: 'Добавлено',
    settings_removed: 'Удалено',
    settings_reset: 'Сброс настроек',
    settings_param_player_inner: 'Встроенный',
    settings_param_player_outside: 'Внешний',
    settings_param_player_inner_tvos: 'Встроенный',
    settings_param_yes: 'Да',
    settings_param_no: 'Нет',
    settings_param_interface_size_small: 'Стандартный',
    settings_param_interface_size_normal: 'Нормальный',
    settings_param_interface_size_bigger: 'Больше',
    settings_interface_size_descr: 'Выберите размер интерфейса',
    settings_param_poster_quality_low: 'Низкое',
    settings_param_poster_quality_average: 'Среднее',
    settings_param_poster_quality_high: 'Высокое',
    settings_param_parse_directly: 'Напрямую',
    settings_param_parse_api: 'Через API сайта',
    settings_param_background_complex: 'Сложный',
    settings_param_background_simple: 'Простой',
    settings_param_background_image: 'Картинка',
    settings_param_link_use_one: 'Встроенную',
    settings_server_use_link_descr: 'Используйте встроенную или дополнительную',
    settings_torrserver_auth: 'Укажите логин и пароль если это необходимо',
    settings_param_link_use_two: 'Дополнительную',
    settings_param_subtitles_size_small: '40%',
    settings_param_subtitles_size_normal: '60%',
    settings_param_subtitles_size_bigger: '90%',
    settings_param_screensaver_nature: 'Природа',
    settings_param_torrent_lang_orig: 'Оригинал',
    settings_param_player_timecode_again: 'Начать с начала',
    settings_param_player_timecode_continue: 'Продолжить',
    settings_param_player_timecode_ask: 'Спрашивать',
    settings_param_player_scale_method: 'Рассчитать',
    settings_param_player_hls_app: 'Системный',
    settings_param_player_hls_js: 'Программный',
    settings_param_card_view_load: 'Подгружать',
    settings_param_card_view_all: 'Показать все',
    settings_param_navigation_remote: 'Пульт',
    settings_param_navigation_mouse: 'Пульт с мышкой',
    settings_param_keyboard_prisma: 'Встроенная',
    settings_param_keyboard_system: 'Системная',
    settings_param_card_interface_old: 'Старый',
    settings_param_card_interface_new: 'Новый',
    settings_param_glass_easy: 'Прозрачная',
    settings_param_glass_medium: 'Полупрозрачная',
    settings_param_glass_blacked: 'Затемнённая',
    settings_param_jackett_interview_all: 'Все',
    settings_param_jackett_interview_healthy: 'Только доступные',
    settings_parser_jackett_interview: 'Опрашивать трекеры',
    helper_keyboard: 'После ввода значения нажмите кнопку «Назад» для сохранения',
    helper_torrents: 'Удерживайте клавишу (ОК) для вызова контекстного меню',
    helper_cleared: 'Успешно, подсказки будут показаны заново.',
    helper_torrents_view: 'Для сброса тайм-кода и вызова меню удерживайте клавишу (ОК)',
    helper_menu_info: 'Удерживайте кнопку для вызова меню контекста',
    fav_sync_title: 'Синхронизация закладок',
    fav_sync_text: 'Ваши любимые закладки вместе с Вами. Подключите синхронизацию и просматривайте на любом устройстве. <br><br>Для этого зарегистрируйтесь в Telegram: @prismalk_bot, создайте профиль и авторизуйтесь в приложение.',
    fav_sync_site: 'Сайт',
    fav_remove_title: 'Удалить из истории',
    fav_remove_descr: 'Удалить выделенную карточку',
    fav_clear_title: 'Очистить историю',
    fav_clear_descr: 'Удалить все карточки из истории',
    fav_clear_label_title: 'Сбросить метки',
    fav_clear_label_descr: 'Сбросить метки просмотра',
    fav_clear_time_title: 'Сбросить тайм-код',
    fav_clear_time_descr: 'Сбросить все тайм-коды',
    fav_label_cleared: 'Отметки очищены',
    fav_time_cleared: 'Тайм-коды очищены',
    timetable_empty: 'В этом разделе будут отображаться даты выхода новых серий',
    player_quality: 'Качество',
    player_flow: 'Поток',
    player_tracks: 'Аудиодорожки',
    player_disabled: 'Отключено',
    player_unknown: 'Неизвестно',
    player_subs: 'Субтитры',
    player_size_default_title: 'По умолчанию',
    player_size_default_descr: 'Размер видео по умолчанию',
    player_size_cover_title: 'Расширить',
    player_size_cover_descr: 'Расширяет видео на весь экран',
    player_size_fill_title: 'Заполнить',
    player_size_fill_descr: 'Вместить видео на весь экран',
    player_size_s115_title: 'Увеличить 115%',
    player_size_s115_descr: 'Увеличить видео на 115%',
    player_size_s130_title: 'Увеличить 130%',
    player_size_s130_descr: 'Увеличить видео на 130%',
    player_size_v115_title: 'По вертикали 115%',
    player_size_v115_descr: 'Увеличить видео на 115%',
    player_size_v130_title: 'По вертикали 130%',
    player_size_v130_descr: 'Увеличить видео на 130%',
    player_video_size: 'Размер видео',
    player_playlist: 'Плейлист',
    player_error_one: 'Не удалось декодировать видео',
    player_error_two: 'Видео не найдено или повреждено',
    player_start_from: 'Продолжить просмотр с',
    player_not_found: 'Плеер не найден',
    player_lauch: 'Запустить плеер',
    player_speed_default_title: 'Обычная',
    player_speed_two_descr: 'Воспроизводиться без звука',
    player_video_speed: 'Скорость воспроизведения',
    player_share_title: 'Поделиться',
    player_share_descr: 'Запустить это видео на другом устройстве',
    player_normalization_power_title: 'Сила нормализации',
    player_normalization_smooth_title: 'Скорость нормализации',
    player_normalization_step_none: 'Ноль',
    player_normalization_step_low: 'Низкое',
    player_normalization_step_medium: 'Среднее',
    player_normalization_step_hight: 'Высокое',
    player_normalization: 'Нормализация',
    player_normalization_type_title: 'Тип нормализации',
    player_normalization_type_all: 'Все',
    player_normalization_type_up: 'Только повышение',
    player_normalization_type_down: 'Только понижение',
    player_youtube_no_played: 'К сожалению, это видео не доступно в вашем регионе, возможно, оно было заблокировано или удалено.',
    player_youtube_start_play: 'Для начала проигрывания видео, нажмите кнопку "Плей"',
    discuss_voited: "Спасибо вам за ваш отзыв!",
    confirm_open_player: 'Другое устройство запрашивает доступ к плееру. Хотите воспроизвести видео?',
    title_ai_assistant: 'OpenAI',
    title_facts: 'Малоизвестные факты',
    ai_search_start_typing: 'Спросите у OpenAI ассистента, какие фильмы вы хотите найти. Например: "Фильмы про космос"',
    ai_search_limit: 'Лимит запросов превышен. Попробуйте повторить запрос позже. С подпиской Premium лимиты будут увеличены, и вам не придется ждать!',
    ai_subscribe_title: 'Откройте бошьше возможностей с OpenAI',
    ai_subscribe_descr: 'Оформите подписку Premium и увеличте количество запросов.   OpenAI подберет вам лучшие фильмы которые только сможет.',
    dmca_title: 'Контент заблокирован',
    dmca_descr: 'Данный материал недоступен для просмотра. Он был заблокирован по просьбе правообладателя в соответствии с законодательством об авторских правах.',
    broadcast_open: 'Открыть карточку на другом устройстве',
    broadcast_play: 'Выберите устройство для просмотра',
    card_new_episode: 'Новая серия',
    card_book_remove: 'Убрать из закладок',
    card_book_add: 'В закладки',
    card_book_descr: 'Смотрите в меню (Закладки)',
    card_like_remove: 'Убрать из понравившихся',
    card_like_add: 'Нравится',
    card_like_descr: 'Смотрите в меню (Нравится)',
    card_wath_remove: 'Убрать из ожидаемых',
    card_wath_add: 'Смотреть позже',
    card_wath_descr: 'Смотрите в меню (Позже)',
    card_history_remove: 'Убрать из истории',
    card_history_add: 'В историю',
    card_history_descr: 'Смотрите в меню (История)',
    keyboard_listen: 'Говорите, я слушаю...',
    keyboard_nomic: 'Нет доступа к микрофону',
    notice_new_quality: 'Доступно новое качество',
    notice_quality: 'Качество',
    notice_new_episode: 'Новая серия',
    notice_none: 'У вас еще нет никаких уведомлений, зарегистрируйтесь в Telegram <b>@prismalk_bot/b>, чтобы следить за новыми сериями и релизами.',
    notice_in_quality: 'В качестве',
    notice_none_account: 'У вас еще нет никаких уведомлений, добавьте сериалы в закладки и ожидайте уведомления о новых сериях.',
    notice_none_system: 'На данный момент у вас отсутствуют уведомления. Мы обязательно оповестим вас, когда появятся новые уведомления.',
    copy_link: 'Копировать ссылку на видео',
    copy_secuses: 'Ссылка скопирована в буфер обмена',
    copy_error: 'Ошибка при копирование ссылки',
    account_sync_to_profile: 'Все закладки будут перенесены в профиль',
    account_sync_secuses: 'Все закладки успешно перенесены',
    account_profiles: 'Профили',
    account_profiles_empty: 'Не удалось получить список профилей',
    account_authorized: 'Авторизованы',
    account_logged_in: 'Вы вошли под аккаунтом',
    account_login_failed: 'Вход не выполнен',
    account_login_wait: 'Ожидаем входа в аккаунт',
    account_profile_main: 'Общий',
    account_export_secuses: 'Экспорт успешно завершён',
    account_export_fail: 'Ошибка при экспорте',
    account_export_fail_500: 'Неизвестная ошибка',
    account_export_fail_610: 'К сожалению вы исчерпали лимит на сегодня',
    account_export_fail_200: 'Ошибка базы данных, попробуйте позже',
    account_export_fail_600: 'Ошибка, не удалось загрузить файл',
    account_export_fail_620: 'Ошибка, файл не передан',
    account_import_secuses: 'Импорт успешно завершён',
    account_import_fail: 'Ошибка при импорте',
    account_imported: 'Импортировано',
    account_reload_after: 'Перезагрузка приложения через 5 сек.',
    account_create: 'Авторизуйтесь для доступа к расширенным функциям',
    account_premium: 'Сделайте свой вклад в наш проект, поддержав его чеканной монетой 😉',
    account_premium_more: 'Прямая ссылка',
    account_limited: 'Ваш лимит исчерпан. Перейдите на Premium для расширения возможностей. Оформление через Telegram <span class="account-modal__site">@prismalk_bot</span>',
    account_premium_include_1: 'Увеличение количество закладок',
    account_premium_include_2: 'Увеличение истории просмотров',
    account_premium_include_3: 'Увеличение количество тайм-кодов',
    account_premium_include_4: 'Количество профилей на аккаунт',
    account_premium_include_5: 'Уведомления',
    account_premium_include_6: 'Синхронизация данных',
    account_premium_include_text_1: 'Больше закладок - больше возможностей! Сохраняйте свои любимые фильмы и сериалы, создавайте списки просмотра и наслаждайтесь просмотром в любое удобное время.',
    account_premium_include_text_2: 'Увеличьте историю просмотров в приложении и следите за тем, что уже посмотрели. Легко находите и пересматривайте свои любимые фильмы и сериалы.',
    account_premium_include_text_3: 'Не бойтесь пропустить ни одной важной сцены! Увеличьте количество тайм-кодов в приложении и легко отслеживайте, где остановились в просмотре любимых фильмов и сериалов.',
    account_premium_include_text_4: 'Получите больше свободы с нашим премиум доступом! Увеличьте количество профилей на аккаунте и позвольте своим друзьям и близким наслаждаться фильмами и сериалами вместе с вами. Никаких ограничений - наслаждайтесь просмотром с любимыми людьми.',
    account_premium_include_text_5: 'Не пропустите ни одной новой серии или перевода! Получайте уведомления вовремя и будьте в курсе всех обновлений. Увеличьте свой кинопоток вместе с нами и получайте уведомления о выходе новых серий и переводов прямо на свой смартфон.',
    account_premium_include_text_6: 'Синхронизуйте свои данные между устройствами с премиум доступом! Больше не нужно тратить время на поиск последнего эпизода, на котором вы остановились. С нашим премиум доступом вы можете синхронизировать свои данные между устройствами, чтобы продолжать просмотр с места, где вы остановились, на любом устройстве, где установлено приложение.',
    account_code_enter: 'Введите полученный код',
    account_code_error: 'Возможно, вы ввели неверный или устаревший код',
    account_code_wrong: 'Возможно, вы указали неверный формат',
    account_code_where: 'Перейдите в телеграм бот <span class="account-add-device__site">@prismalk_bot</span> и введите полученный код.',
    account_code_info: '<span class="account-add-device__attention">ВНИМАНИЕ:</span> После авторизации все ваши закладки и история просмотров, сохранённые до авторизации, будут очищены.',
    account_code_input: 'Ввести код',
    network_noconnect: 'Нет подключения к сети',
    network_404: 'Запрошенная страница не найдена. [404]',
    network_401: 'Авторизация не удалась',
    network_500: 'Внутренняя ошибка сервера. [500]',
    network_parsererror: 'Запрошенный синтаксический анализ JSON завершился неудачно.',
    network_timeout: 'Время запроса истекло.',
    network_abort: 'Запрос был прерван.',
    network_error: 'Неизвестная ошибка',
    size_zero: '0 Байт',
    size_byte: 'Байт',
    size_kb: 'КБ',
    size_mb: 'МБ',
    size_gb: 'ГБ',
    size_tb: 'ТБ',
    size_pp: 'ПБ',
    speed_bit: 'бит/c',
    speed_kb: 'Кбит/c',
    speed_mb: 'Мбит/c',
    speed_gb: 'Гбит/c',
    speed_tb: 'Тбит/c',
    speed_pp: 'Пбит/c',
    month_1: 'Январь',
    month_2: 'Февраль',
    month_3: 'Март',
    month_4: 'Апрель',
    month_5: 'Ма',
    month_6: 'Июнь',
    month_7: 'Июль',
    month_8: 'Август',
    month_9: 'Сентябрь',
    month_10: 'Октябрь',
    month_11: 'Ноябрь',
    month_12: 'Декабрь',
    day_1: 'Понедельник',
    day_2: 'Вторник',
    day_3: 'Среда',
    day_4: 'Четверг',
    day_5: 'Пятница',
    day_6: 'Суббота',
    day_7: 'Воскресенье',
    month_1_e: 'Января',
    month_2_e: 'Февраля',
    month_3_e: 'Марта',
    month_4_e: 'Апреля',
    month_5_e: 'Мая',
    month_6_e: 'Июня',
    month_7_e: 'Июля',
    month_8_e: 'Августа',
    month_9_e: 'Сентября',
    month_10_e: 'Октября',
    month_11_e: 'Ноября',
    month_12_e: 'Декабря',
    week_1: 'Пн',
    week_2: 'Вт',
    week_3: 'Ср',
    week_4: 'Чт',
    week_5: 'Пт',
    week_6: 'Сб',
    week_7: 'Вс',
    time_h: 'ч.',
    time_m: 'м.',
    time_s: 'с.',
    extensions_enable: 'Включить',
    extensions_disable: 'Отключить',
    extensions_check: 'Проверить статус',
    extensions_install: 'Установить',
    extensions_info: 'Информация',
    extensions_edit: 'Редактировать',
    extensions_change_name: 'Изменить название',
    extensions_change_link: 'Изменить ссылку',
    extensions_remove: 'Удалить',
    extensions_set_name: 'Введите название плагина',
    extensions_set_url: 'Введите адрес плагина',
    extensions_ready: 'Этот плагин уже установлен',
    extensions_no_info: 'Без информации',
    extensions_no_name: 'Без названия',
    extensions_worked: 'Рабочий',
    extensions_no_plugin: 'Плагин не подтверждён ',
    extensions_add: 'Добавить плагин',
    extensions_from_memory: 'Установленные в память ',
    extensions_from_cub: 'Установленные из CUB',
    extensions_from_popular: 'Популярные плагины',
    extensions_from_lib: 'Библиотека плагинов',
    extensions_from_connected: 'Подключенные плагины',
    extensions_hpu_best: 'Популярные',
    extensions_hpu_recomend: 'Рекомендуем',
    extensions_hpu_theme: 'Темы',
    extensions_hpu_screensaver: 'Скринсейвер',
    extensions_hpu_video: 'Видео',
    extensions_hpu_control: 'Управление',
    extensions_hpu_other: 'Разное',
    extensions_hpu_: 'Остальные',
    speedtest_connect: 'подключение',
    speedtest_test: 'тестирование',
    speedtest_ready: 'готово',
    speedtest_button: 'Тестировать скорость',
    change_source_on_cub: 'Сменить источник',
    tv_status_returning_series: 'Сериал',
    tv_status_planned: 'Запланировано',
    tv_status_in_production: 'В производстве',
    tv_status_ended: 'Завершен',
    tv_status_canceled: 'Отменен',
    tv_status_pilot: 'Пилотный выпуск',
    tv_status_released: 'В прокате',
    tv_status_rumored: 'Слухи',
    tv_status_post_production: 'Скоро на экранах',
    tv_shows_name: 'Сериал',
    input_detection_touch: 'Переключить на сенсорное управление?',
    input_detection_mouse: 'Переключить на управление мышью?',
    input_detection_remote: 'Переключить на управление пультом?',
    https_text: 'Вы используйте протокол HTTPS, c которым Prisma работает некорректно. Для корректной работы приложения используйте адрес с протоколом HTTP',
    premiere_author_recomend_1: 'Закажите пиццу и готовьтесь к драйву.',
    premiere_author_recomend_2: 'Вечеринка только начинается.',
    premiere_author_recomend_3: 'Подготовьтесь к адреналину.',
    premiere_author_recomend_4: 'Готовы к незабываемому вечеру?',
    premiere_author_recomend_5: 'Рекомендую к просмотру.',
    premiere_title: 'Премьера',
    termsofuse_t_01: 'Правила использования',
    termsofuse_t_02: 'Prisma - это удобный инструмент для ознакомления с новинками киноиндустрии, включая фильмы, сериалы, мультфильмы и другую информацию. Для получения информации о фильмах используется открытый источник - сайт themoviedb.org',
    termsofuse_t_03: 'Контент',
    termsofuse_t_04: 'Prisma использует API (Application Programming Interface) от каталога themoviedb.org для получения информации о фильмах и телесериалах, а также для просмотра связанных с ними медиафайлов, таких как постеры, трейлеры и другое.',
    termsofuse_t_05: 'API от themoviedb.org позволяет приложению Prisma получать доступ к базе данных фильмов и телесериалов, предоставляя возможность поиска медиафайлов и просмотра информации о них.',
    termsofuse_t_06: 'Взаимодействие между приложением Prisma и themoviedb.org происходит через запросы к API, которые отправляются из приложения Prisma на серверы themoviedb.org для получения информации и медиафайлов. Themoviedb.org обрабатывает запросы и отправляет обратно в приложение Prisma запрошенные данные.',
    termsofuse_t_07: 'Таким образом, благодаря использованию API от themoviedb.org, приложение Prisma предоставляет пользователям доступ к обширной базе данных фильмов и телесериалов, соблюдая при этом условия использования и ограничения, установленные правообладателем.',
    termsofuse_t_08: 'Расширения',
    termsofuse_t_09: 'Расширения - это мощный инструмент, предоставляемый для приложения Prisma, который позволяет пользователям расширить его возможности, добавить дополнительный функционал и изменить контент в соответствии с их потребностями.',
    termsofuse_t_10: 'Однако, следует отметить, что пользователи устанавливают расширения на свой страх и риск. Все последствия, возникающие в результате использования расширений, ложатся на пользователя. Пользователям рекомендуется быть осторожными при установке и использовании расширений, тщательно оценивая их надежность и безопасность.',
    termsofuse_t_11: 'Нарушения авторских прав',
    termsofuse_t_12: 'Если вы обнаружили нарушение авторских прав в приложении Prisma - свяжитесь с разработчиками, используя раздел Контакты приложения. Однако, важно учесть, что приложение Prisma использует API от каталога themoviedb.org, который предоставляет открытый доступ к информации о фильмах и сериалах. Это означает, что информация, которая отображается в приложении Prisma, является общедоступной и не нарушает авторских прав.',
    termsofuse_t_13: 'Если вы считаете, что в приложении Prisma все же есть контент, нарушающий авторские права - обратитесь к правообладателю этого контента с просьбой удалить его со страниц сайта themoviedb.org. В свою очередь, приложение Prisma может удалить контент при получении соответствующего уведомления о нарушении авторских прав.',
    install_app_apk_text: 'Мы заметили, что для запуска Prisma на Android вы используете MediaStationX. Мы рекомендуем вам установить Prisma в виде APK-приложения. Вы можете скачать последнюю версию приложения здесь:',
    ad: 'Реклама',
    ad_disable: 'С премиум-подпиской реклама останется в прошлом — только вы и ваш любимый контент. Подключить можно Telegram-боте @prismalk_bot уже сегодня!',
    ad_after: 'Реклама через',
    ad_skip: 'Пропустить',
    ad_continue_after: 'Просмотр начнется через',
    account_user_other_account: 'Другой аккаунт',
    account_user_add: 'Добавить',
    // Пользовательские закладки
    rename: 'Переименовать',
    menu_custom_bookmarks: 'Пользовательские закладки',
    custom_bookmark_category: 'Настраиваемая категория'
  }, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_lang_choice_title$la, "filter_set_name", 'Укажите название'), "custom_bookmark_limit_reached", 'Достигнут лимит кастомных закладок'), "custom_bookmark_name_used", 'Закладка с таким именем уже существует'), "custom_bookmark_error", 'Ошибка при создании закладки'), "settings_interface_style", 'Стиль интерфейса'), "settings_interface_style_descr", 'Выберите стиль отображения карточек'), "settings_param_interface_style_standard", 'Стандартный'), "settings_param_interface_style_space", 'Для TV устройств'), "settings_interface_style_reload", 'Перезагрузить для применения нового стиля'), "quality_dvb", 'ТВ качество'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_lang_choice_title$la, "quality_hdtvrip", 'HD ТВ рип'), "quality_hdrip", 'HD рип'), "quality_dvdrip", 'DVD'), "quality_ts", 'TS'), "quality_iptvrip", 'ТВ запись'));

  var en = {
    lang_choice_title: 'Welcome',
    lang_choice_subtitle: 'Choose your language',
    more: 'More',
    show_more: 'Show more',
    more_results: 'Show more results',
    loading: 'Loading',
    nofind_movie: 'The movie could not be found.',
    noname: 'Untitled',
    nochoice: 'Not chosen',
    cancel: 'Cancel',
    confirm: 'I confirm',
    sure: 'Are you sure?',
    nodata: 'No data',
    back: 'Back',
    back_to_start: 'To start',
    ready: 'Ready',
    close_app_modal: 'Are you sure you want to leave the app?',
    connected_seeds: 'connected',
    search: 'Search',
    search_input: 'Enter text',
    search_empty: 'Search history is empty.',
    search_delete: 'Left - delete',
    search_start_typing: 'Start typing search text.',
    search_searching: 'Search in progress...',
    search_start: 'To start searching',
    search_nofound: 'Nothing was found according to your request.',
    full_genre: 'Genre',
    full_production: 'Production',
    full_date_of_release: 'Date of release',
    full_budget: 'Budget',
    full_revenue: 'Box office',
    full_countries: 'Countries',
    full_like: 'Like',
    full_torrents: 'Torrents',
    full_trailers: 'Trailers',
    full_sound: 'Trailer sound',
    full_more: 'More',
    full_detail: 'In detail',
    full_notext: 'No description.',
    full_series_release: 'Series release',
    full_next_episode: 'Next',
    full_episode_days_left: 'Days left',
    full_trailer_official: 'Official',
    full_trailer_no_official: 'Informal',
    full_trailer_mute: 'Mute',
    full_trailer_unmute: 'Unmute',
    full_season: 'Season',
    full_episode: 'Episode',
    full_directing: 'Directing',
    full_writing: 'Writing',
    full_keywords: 'Tags',
    full_soon_available_quality: 'The novelty is still hot! <br>High—quality versions will arrive a little later - a little patience.',
    add_comment: 'Add',
    add_comments: 'Reviews',
    comments_cancel: 'Close',
    comments_send: 'Add',
    comments_error: 'Server error',
    comments_offensive_content: 'The review contains inappropriate expressions. Please correct it and try again',
    comments_religiosn_content: 'The review contains religious terms. Please correct it and try again',
    comments_politic_content: 'The review contains political terms. Please correct it and try again',
    comments_spoiler_content: 'The review contains spoilers. Please correct it and try again',
    comment_added_successfully: 'Your review has been published',
    comments_autor: 'Enter your name',
    autor_comments: 'Write your review',
    comments_empty: 'Be the first to share your impressions! ✨<br><br>Tell us about your feelings after watching.',
    review_type_title: 'Viewing emotion',
    review_type_neutral: 'Neutral',
    review_type_positive: 'Positive',
    review_type_negative: 'Negative',
    settings_cloud_sync: 'Synchronization',
    settings_cloud_sync_descr: 'Sync your bookmarks, history, and timecodes.',
    settings_cloud__text: 'This authorization will be disabled on 12/31/2024',
    settings_cloud__title: 'Authorization',
    settings_cloud__atoken: 'Specify your token for authorization',
    settings_cloud__token: 'Your token',
    settings_cloud__status: 'Status',
    settings_cloud_nosync: 'Not authorized',
    settings_cloud_nosync_desk: 'You need to log in',
    settings_cloud_sync_off: 'Disabled',
    settings_cloud_sync_on: 'Enable synchronization',
    settings_cloud_sync_error: 'Authorization failed',
    settings_cloud_sync_errdesk: 'Check the entered data and try again',
    settings_cloud_sync_ok: 'Check the entered data and try again',
    settings_cloud_sync_status: 'They entered',
    settings_cloud_status_ok: 'You have successfully logged in',
    settings_cloud_sync_yes: 'Synchronized',
    settings_prisma_usercam_descr: 'Customize the list of sources for yourself – connect your Filmix, Kinopub, Vokino, and HDRezka accounts or disable the extra ones.',
    settings_prisma_sync: 'Authorization',
    settings_prisma_sync_descr: 'Sync your bookmarks, browsing history, timestamps and timecodes.',
    settings_prisma_account: 'Account',
    settings_prisma_logged_in_as: 'Logged in as',
    settings_prisma_profile: 'Profile',
    settings_prisma_sync_btn: 'Synchronize',
    settings_prisma_sync_btn_descr: 'Save local bookmarks on the server',
    settings_prisma_backup: 'Backup',
    settings_prisma_backup_descr: 'Save or load backup data',
    settings_prisma_logout: 'Sign out',
    settings_prisma_signin: 'Authorization',
    settings_prisma_not_specified: 'Not specified',
    settings_prisma_password: 'Password',
    settings_prisma_status: 'Status',
    settings_prisma_backup_import: 'Import',
    settings_prisma_backup_export: 'Export',
    settings_prisma_sync_filters: 'Filters sync',
    settings_prisma_sync_calendar: 'Calendar sync',
    settings_prisma_sync_quality: 'Quality sync',
    settings_prisma_sync_search: 'Search history sync',
    settings_prisma_sync_recomends: 'Recommendations sync',
    settings_prisma_sync_timecodes: 'Timecode Synchronization',
    settings_input_links: 'Favorites',
    settings_interface_type: 'Lite version',
    settings_interface_size: 'Interface size',
    settings_interface_size_fixed: 'Fixed size',
    settings_interface_size_descr: 'Select the interface size',
    settings_interface_background: 'Background',
    settings_interface_background_use: 'Show background',
    settings_interface_background_type: 'Background type',
    settings_interface_performance: 'Performance',
    settings_interface_footer_card: 'The card is in the player',
    settings_interface_footer_card_descr: 'Displaying the card in the player',
    settings_interface_background_trailer: 'Trailer in the card',
    settings_interface_background_trailer_descr: 'Automatically play the trailer (disabled in the new interface)',
    settings_interface_poster_trailer: 'Trailer in the poster',
    settings_interface_poster_trailer_descr: 'Automatically play the trailer (disabled in the new interface)',
    settings_interface_animation: 'Animation',
    settings_interface_advanced_animation: 'Interactive animation',
    settings_interface_advanced_animation_descr: 'Animations actively respond to user actions',
    settings_interface_animation_descr: 'Animation of cards and content',
    settings_interface_attenuation: 'Attenuation',
    settings_interface_attenuation_descr: 'Smooth fading of cards from below and from above',
    settings_interface_scroll: 'Scroll Type',
    settings_interface_view_card: 'Card view type',
    settings_interface_view_card_descr: 'As you scroll the feed, the cards will load gradually or load all',
    settings_interface_lang: 'Interface language',
    settings_interface_lang_reload: 'You need to restart the application, click "OK" to restart.',
    settings_main_account: 'Account',
    settings_main_interface: 'Interface',
    settings_main_more: 'Other settings',
    settings_main_player: 'Player',
    settings_main_parser: 'Parser',
    settings_main_torrserver: 'TorrServer',
    settings_main_plugins: 'Extensions',
    settings_main_rest: 'Other',
    settings_rest_start: 'Start page',
    settings_rest_start_descr: 'Which page to start at startup',
    settings_rest_source: 'Source',
    settings_rest_source_use: 'Main source',
    settings_rest_source_descr: 'Where to get information about films',
    settings_rest_tmdb_lang: 'What language to display data from TMDB',
    settings_rest_tmdb_prox: 'Proxy TMDB',
    settings_rest_tmdb_prox_auto: 'Enable proxy automatically',
    settings_rest_tmdb_posters: 'Resolution of posters',
    settings_rest_screensaver: 'Screensaver',
    settings_rest_screensaver_use: 'Show splash screen when idle',
    settings_rest_screensaver_type: 'Screen saver type',
    settings_rest_helper: 'Hints',
    settings_rest_helper_use: 'Show hints',
    settings_rest_helper_reset: 'Show hints again',
    helper_menu_info: 'Hold the button to call the context menu',
    settings_rest_pages: 'How many pages to keep in memory',
    settings_rest_pages_descr: 'Keeps pages in the state you left them in',
    settings_rest_time: 'Shift time',
    settings_rest_navigation: 'Navigation type',
    settings_rest_keyboard: 'Keyboard type',
    settings_rest_device: 'Device name',
    settings_rest_device_placeholder: 'For example: Prisma',
    settings_rest_cache: 'Clear cache',
    settings_rest_cache_descr: 'All settings and data will be cleared',
    settings_rest_tmdb_example: 'For example:',
    settings_rest_tmdb_api_descr: 'To get data',
    settings_rest_tmdb_image_descr: 'To get images',
    settings_rest_card_quality: 'Quality marks',
    settings_rest_card_quality_descr: 'Display quality marks on cards',
    settings_rest_card_episodes: 'Episode marks',
    settings_rest_card_episodes_descr: 'Display episode markers on cards',
    settings_parser_use: 'Use parser',
    settings_parser_use_descr: 'Hereby, you agree to accept all responsibility for the use of public links to view torrent and online content.',
    settings_parser_type: 'Parser type for torrents',
    settings_parser_jackett_placeholder: 'For example: 192.168.x',
    settings_parser_jackett_link: 'Link',
    settings_parser_jackett_link_descr: 'Provide a link to the Jackett script',
    settings_parser_jackett_key_placeholder: 'For example: sa0sk83d..',
    settings_parser_jackett_key: 'Api key',
    settings_parser_jackett_key_descr: 'Located in Jackett',
    settings_parser_torlook_type: 'TorLook site parsing method',
    settings_parser_scraperapi_placeholder: 'For example: scraperapi.com',
    settings_parser_scraperapi_link: 'Link to site parser',
    settings_parser_scraperapi_descr: 'Register on the site scraperapi.com, enter the link api.scraperapi.com?api_key=...&url={q}<br>W41.torlook.info will be delivered to {q}',
    settings_parser_search: 'Search',
    settings_parser_search_descr: 'What language to search in?',
    settings_parser_in_search: 'Parser in search',
    settings_parser_in_search_descr: 'Show search results?',
    settings_parser_timeout_title: 'Parser timeout',
    settings_parser_timeout_descr: 'Time in seconds to wait for a response from the server',
    settings_player_type: 'Player type',
    settings_player_type_descr: 'Which player to play',
    settings_player_iptv_type: 'Player type for IPTV',
    settings_player_iptv_type_descr: 'Which player to play IPTV channels',
    settings_player_reset: 'Reset default player',
    settings_player_reset_descr: 'Resets the selected Android player in the application',
    settings_player_path: 'Path to the player',
    settings_player_path_descr: 'Specify the path to the player .exe',
    settings_player_normalization: 'Sound normalization',
    settings_player_normalization_descr: 'Normalizes sound to one level, lowers loud sounds and boosts quiet ones.',
    settings_player_next_episode: 'Next episode',
    settings_player_next_episode_descr: 'Automatically switch to the next series after the end of the current one',
    settings_player_timecode: 'Timecode',
    settings_player_timecode_descr: 'Continue from last viewed location',
    settings_player_scale: 'Scaling Method',
    settings_player_scale_descr: 'How to calculate video scaling',
    settings_player_subs: 'Subtitles',
    settings_player_subs_use: 'Turn on',
    settings_player_subs_use_descr: 'Always turn on subtitles after starting a video',
    settings_player_subs_size: 'The size',
    settings_player_subs_size_descr: 'Screen size of subtitles',
    settings_player_subs_stroke_use: 'Use edging',
    settings_player_subs_stroke_use_descr: 'Subtitles will be outlined in black for better readability',
    settings_player_subs_backdrop_use: 'Use an underlay',
    settings_player_subs_backdrop_use_descr: 'Subtitles will be displayed on a translucent backing to improve readability',
    settings_player_quality: 'Default video quality',
    settings_player_quality_descr: 'Preferred video quality for viewing',
    settings_player_hls_title: 'Processing the .m3u8 stream',
    settings_player_hls_descr: 'Do not touch this parameter if you do not know why it is.',
    settings_plugins_notice: 'To apply the plugin, you need to restart the application',
    settings_plugins_add: 'Add Plugin',
    settings_plugins_add_descr: 'To delete an added plugin, hold or double-click the (OK) key on it',
    settings_plugins_install: 'Install Plugin',
    settings_plugins_install_descr: 'Install a plugin from the list of available',
    settings_server_link: 'Use link',
    settings_server_links: 'Links',
    settings_server_placeholder: 'For example: 192.168.X',
    settings_server_link_one: 'Main Link',
    settings_server_link_one_descr: 'Specify the main link to the TorrServer script',
    settings_server_link_one_localip: 'Local IP:8090',
    settings_server_link_two: 'Additional link',
    settings_server_link_two_descr: 'Provide an additional link to the TorrServer script',
    settings_server_additionally: 'Additionally',
    settings_server_client: 'Embedded client',
    settings_server_client_descr: 'Use the built-in TorrServer JS client, otherwise the system one starts.',
    settings_server_base: 'Save to database',
    settings_server_base_descr: 'The torrent will be added to the TorrServer database',
    settings_server_preload: 'Use prefetch buffer',
    settings_server_preload_descr: 'Wait for TorrServer\'s preload buffer to fill before playing',
    settings_server_auth: 'Authorization',
    settings_server_password_use: 'Password login',
    settings_server_login: 'Login',
    settings_server_password: 'Password',
    settings_server_not_specified: 'Not specified',
    torent_nohash_reasons: 'The reasons',
    torent_nohash_reason_one: 'TorServer was unable to download the torrent file',
    torent_nohash_reason_two: 'Reply from TorServer',
    torent_nohash_reason_three: 'Link',
    torent_nohash_do: 'What to do?',
    torent_nohash_do_one: 'Check if you configured Jackett correctly',
    torent_nohash_do_two: 'Private sources may not provide a link to the file',
    torent_nohash_do_three: 'Make sure Jackett can download the file too',
    torent_nohash_do_four: 'Write to our telegram group: @prisma_party',
    torent_nohash_do_five: 'Specify which movie, which distribution and, if possible, a photo of this distribution',
    torrent_error_text: 'Failed to connect to TorrServer. Let\'s quickly go through the list of possible problems and check everything.',
    torrent_error_step_1: 'Is TorrServer running',
    torrent_error_step_2: 'Dynamic IP',
    torrent_error_step_3: 'Protocol and Port',
    torrent_error_step_4: 'Antivirus blocking',
    torrent_error_step_5: 'Check for availability',
    torrent_error_step_6: 'Still doesn\'t work',
    torrent_error_info_1: 'Make sure you have launched TorrServer on the device where it is installed.',
    torrent_error_info_2: 'A common mistake, the IP address of the device with TorrServer has changed. Make sure that the IP address you entered - {ip} - matches the address of the device on which TorrServer is installed.',
    torrent_error_info_3: 'To connect to TorrServer, you must specify the protocol http:// at the beginning and port :8090 at the end of the address. Make sure there is a port after the IP address, your current address is {ip}',
    torrent_error_info_4: 'Frequent occurrence, antivirus or firewall can block access by IP address, try disabling antivirus and firewall.',
    torrent_error_info_5: 'On any other device on the same network, open the {ip} address in a browser and check if the TorrServer web interface is available.',
    torrent_error_info_6: 'If, after all the checks, a connection error still occurs, try restarting TorrServer and the Internet adapter.',
    torrent_error_info_7: 'If the problem persists, write to the Telegram group @prisma_party with the text (Prisma does not connect to TorrServer after all checks, the current address is {ip})',
    torrent_error_start: 'Start verification',
    torrent_error_nomatrix: 'Failed to verify Matrix version',
    torrent_error_made: 'Performed',
    torrent_error_from: 'from',
    torrent_error_next: 'Further',
    torrent_error_complite: 'To complete',
    torrent_error_connect: 'Connection error',
    torrent_install_need: 'Requires TorrServer',
    torrent_install_text: 'TorrServer is an application that allows you to view content from torrent files online.<br><br>The connection to the torrent is local, if your provider blocks torrents, be careful.<br><br>Keep in mind that in some countries, viewing TorrServer may be considered copyright infringement and lead to fines or other legal consequences. Be attentive to the laws of your country.',
    torrent_install_contact: 'Telegram groups',
    torrent_item_bitrate: 'Bitrate',
    torrent_item_seeds: 'Seeds',
    torrent_item_grabs: 'Leechers',
    torrent_item_mb: 'Mbps',
    torrent_serial_episode: 'Series',
    torrent_serial_season: 'Season',
    torrent_serial_date: 'Exit',
    torrent_get_magnet: 'Requesting a magnet link',
    torrent_remove_title: 'Delete',
    torrent_remove_descr: 'The torrent will be removed from your list',
    torrent_parser_any_one: 'Any',
    torrent_parser_any_two: 'Any',
    torrent_parser_no_choice: 'Not chosen',
    torrent_parser_yes: 'Yes',
    torrent_parser_no: 'No',
    torrent_parser_quality: 'Quality',
    torrent_parser_subs: 'Subtitles',
    torrent_parser_voice: 'Translation',
    torrent_parser_tracker: 'tracker',
    torrent_parser_year: 'Year',
    torrent_parser_season: 'Season',
    torrent_parser_sort_by_seeders: 'By distributors',
    torrent_parser_sort_by_size: 'To size',
    torrent_parser_sort_by_name: 'by name',
    torrent_parser_sort_by_tracker: 'By source',
    torrent_parser_sort_by_date: 'By date',
    torrent_parser_sort_by_viewed: 'Viewed',
    torrent_parser_voice_dubbing: 'Dubbing',
    torrent_parser_voice_polyphonic: 'Polyphonic',
    torrent_parser_voice_two: 'Two-voiced',
    torrent_parser_voice_amateur: 'Amateur',
    torrent_parser_reset: 'Reset filter',
    torrent_parser_empty: 'Failed to get results',
    torrent_parser_no_hash: 'Failed to get HASH',
    torrent_parser_added_to_mytorrents: 'added to "My torrents"',
    torrent_parser_add_to_mytorrents: 'Add to "My torrents"',
    torrent_parser_label_title: 'Flag',
    torrent_parser_label_descr: 'Flag a hand with a flag (viewed)',
    torrent_parser_label_cancel_title: 'Uncheck',
    torrent_parser_label_cancel_descr: 'Remove the mark from the distribution (viewed)',
    torrent_parser_timeout: 'Timeout expired',
    torrent_parser_nofiles: 'Failed to extract suitable files',
    torrent_parser_set_link: 'Specify a link for parsing',
    torrent_parser_request_error: 'Request error',
    torrent_parser_magnet_error: 'Failed to get magnet link',
    torrent_parser_no_responce: 'The parser is not available',
    torrent_parser_settings_info: ' <br>Try changing it to another one in the settings or specify your address.',
    torrent_parser_torlook_fallback_search_notification: 'Jackett parser is not available or the connection settings are incorrect. Searching Torlook...',
    about_text: '1. The application for watching movies and TV series uses information exclusively for educational purposes. All movie and TV series data is taken from open source APIs such as TMDB (The Movie Database), which provides access to movie cards, actors, trailers and other related information. The application does not store any information on its servers, but only displays data received from third-party API, providing convenient access to them for users.',
    about_android: '2. You can download the Android app in our Telegram group',
    about_mobile: '3. The PWA application for mobile devices and tablets running iOS and Android can be added to the home screen through your browser settings, which will allow you to quickly access the application directly from the home screen, as if it were a regular native application.',
    about_abuse: '4. If you have any questions about DCMA, please contact us by email abuse@prisma.cam',
    about_channel: 'Telegram',
    about_group: 'Group',
    about_version: 'Version',
    about_donate: 'Donation',
    title_watched: 'You watched',
    title_settings: 'Settings',
    title_collections: 'Collections',
    title_company: 'Company',
    title_actors: 'Actors',
    title_actor: 'Actor',
    title_actress: 'Actress',
    title_person: 'A person',
    title_persons: 'Persons',
    title_comments: 'Reviews',
    title_torrents: 'Torrents',
    title_trailers: 'Trailers',
    title_watch: 'Watch',
    title_error: 'Error',
    title_links: 'Links',
    title_choice: 'Choose',
    title_main: 'Home',
    title_book: 'Bookmarks',
    title_like: 'Like',
    title_wath: 'Later',
    title_history: 'Browsing history',
    title_mytorrents: 'My torrents',
    title_last: 'Last',
    title_action: 'Action',
    title_producer: 'Producer',
    title_collection: 'Collection',
    title_recomendations: 'Recommendations',
    title_similar: 'Similar',
    title_about: 'About the application',
    title_timetable: 'Schedule',
    title_relises: 'Digital releases',
    title_catalog: 'Catalog',
    title_category: 'Category',
    title_parser: 'Parser',
    title_type: 'Type of',
    title_rating: 'Rating',
    title_country: 'Country',
    title_year: 'Year',
    title_genre: 'Genre',
    title_filter: 'Filter',
    title_notice: 'Notifications',
    title_files: 'Files',
    title_now_watch: 'Watching now',
    title_high_rating: 'High Rating',
    title_new_releases: 'New Releases',
    title_many_votes: 'Many Votes',
    title_audience_interest: 'Audience Interest',
    title_on: 'on',
    title_best_movies: 'Best movies',
    title_best_shows: 'Best shows',
    title_latest: 'Last addition',
    title_continue: 'Continue browsing',
    title_recomend_watch: 'We recommend to see',
    title_new_episodes: 'New episodes',
    title_popular: 'Popular',
    title_popular_movie: 'Popular films',
    title_popular_tv: 'Popular TV shows',
    title_popular_movie_week: 'The best movies of the week according to user ratings',
    title_popular_tv_week: 'The best TV series of the week according to user ratings',
    title_new_this_year: 'New this year',
    title_hight_voite: 'Highly rated',
    title_new: 'New',
    title_this_year: 'This years new',
    title_trend_netflix: 'Netflix',
    title_trend_kinopoisk: 'Kinopoisk',
    title_trend_hbo: 'HBO',
    title_russian_movies: 'Russian movies',
    title_russian_tv_shows: 'Russian TV',
    title_trend_day: 'Today in trend',
    title_trend_week: 'Trending for the week',
    title_upcoming: 'Watch in cinemas',
    title_top_movie: 'Top movies',
    title_top_tv: 'Top series',
    title_tv_today: 'On air today',
    title_this_week: 'This week',
    title_in_top: 'Top',
    title_out: 'Exit',
    title_out_confirm: 'Yes, get out',
    title_continue_two: 'Proceed',
    title_choice_language: 'Choose a language',
    title_subscribe: 'Subscribe',
    title_subscribes: 'Subscriptions',
    title_unsubscribe: 'Unsubscribe',
    title_language: 'Original language',
    subscribe_success: 'You have successfully subscribed',
    subscribe_error: 'An error occurred while subscribing, please try again later',
    subscribe_noinfo: 'Failed to retrieve information, please try again later',
    company_headquarters: 'Headquarters',
    company_homepage: 'Website',
    company_country: 'Country',
    country_ad: 'Andorra',
    country_ae: 'UAE',
    country_af: 'Afghanistan',
    country_al: 'Albania',
    country_am: 'Armenia',
    country_ao: 'Angola',
    country_ar: 'Argentina',
    country_at: 'Austria',
    country_au: 'Australia',
    country_aw: 'Aruba',
    country_az: 'Azerbaijan',
    country_bа: 'Bosnia & Herzegovina',
    country_bd: 'Bangladesh',
    country_be: 'Belgium',
    country_bg: 'Bulgaria',
    country_bh: 'Bahrain',
    country_bi: 'Burundi',
    country_bj: 'Benin',
    country_bo: 'Bolivia',
    country_br: 'Brazil',
    country_bs: 'Bahamas',
    country_bt: 'Bhutan',
    country_bw: 'Botswana',
    country_by: 'Belarus',
    country_ca: 'Canada',
    country_ch: 'Switzerland',
    country_cl: 'Chile',
    country_cm: 'Cameroon',
    country_cn: 'China',
    country_co: 'Colombia',
    country_cr: 'Costa Rica',
    country_cu: 'Cuba',
    country_cv: 'Cape Verde',
    country_cy: 'Cyprus',
    country_cz: 'Czech Republic',
    country_de: 'Germany',
    country_dj: 'Djibouti',
    country_dk: 'Denmark',
    country_do: 'Dominican Republic',
    country_dz: 'Algeria',
    country_ec: 'Ecuador',
    country_ee: 'Estonia',
    country_eg: 'Egypt',
    country_es: 'Spain',
    country_et: 'Ethiopia',
    country_fi: 'Finland',
    country_fo: 'Faroe Islands',
    country_fr: 'France',
    country_ga: 'Gabon',
    country_gb: 'United Kingdom',
    country_ge: 'Georgia',
    country_gh: 'Ghana',
    country_gl: 'Greenland',
    country_gp: 'Guadeloupe',
    country_gr: 'Greece',
    country_gt: 'Guatemala',
    country_hk: 'Hong Kong',
    country_hr: 'Croatia',
    country_ht: 'Haiti',
    country_hu: 'Hungary',
    country_id: 'Indonesia',
    country_ie: 'Ireland',
    country_il: 'Israel',
    country_in: 'India',
    country_iq: 'Iraq',
    country_ir: 'Iran',
    country_is: 'Iceland',
    country_it: 'Italy',
    country_jm: 'Jamaica',
    country_jo: 'Jordan',
    country_jp: 'Japan',
    country_ke: 'Kenya',
    country_kg: 'Kyrgyzstan',
    country_kh: 'Cambodia',
    country_kp: 'North Korea',
    country_kr: 'South Korea',
    country_kz: 'Kazakhstan',
    country_kw: 'Kuwait',
    country_la: 'Laos',
    country_lb: 'Lebanon',
    country_li: 'Liechtenstein',
    country_lk: 'Sri Lanka',
    country_lr: 'Liberia',
    country_lt: 'Lithuania',
    country_lu: 'Luxembourg',
    country_lv: 'Latvia',
    country_ly: 'Libya',
    country_ma: 'Morocco',
    country_mc: 'Monaco',
    country_md: 'Moldova',
    country_me: 'Montenegro',
    country_mk: 'Macedonia',
    country_mm: 'Myanmar',
    country_mn: 'Mongolia',
    country_mo: 'Macau',
    country_mt: 'Malta',
    country_mu: 'Mauritius',
    country_mv: 'Maldives',
    country_mw: 'Malawi',
    country_mx: 'Mexico',
    country_my: 'Malaysia',
    country_mz: 'Mozambique',
    country_na: 'Namibia',
    country_ne: 'Niger',
    country_ng: 'Nigeria',
    country_ni: 'Nicaragua',
    country_nl: 'Netherlands',
    country_no: 'Norway',
    country_np: 'Nepal',
    country_nz: 'New Zealand',
    country_om: 'Oman',
    country_pa: 'Panama',
    country_pe: 'Peru',
    country_pg: 'Papua New Guinea',
    country_ph: 'Philippines',
    country_pk: 'Pakistan',
    country_pl: 'Poland',
    country_pr: 'Puerto Rico',
    country_ps: 'Palestinian Territory',
    country_pt: 'Portugal',
    country_py: 'Paraguay',
    country_qa: 'Qatar',
    country_ro: 'Romania',
    country_rs: 'Serbia',
    country_ru: 'Russia',
    country_rw: 'Rwanda',
    country_sa: 'Saudi Arabia',
    country_sd: 'Sudan',
    country_se: 'Sweden',
    country_sg: 'Singapore',
    country_si: 'Slovenia',
    country_sk: 'Slovakia',
    country_sn: 'Senegal',
    country_su: 'USSR',
    country_sv: 'El Salvador',
    country_sy: 'Syria',
    country_th: 'Thailand',
    country_tj: 'Tajikistan',
    country_tm: 'Turkmenistan',
    country_tn: 'Tunisia',
    country_tr: 'Turkey',
    country_tw: 'Taiwan',
    country_tz: 'Tanzania',
    country_ua: 'Ukraine',
    country_ug: 'Uganda',
    country_us: 'USA',
    country_uy: 'Uruguay',
    country_uz: 'Uzbekistan',
    country_ve: 'Venezuela',
    country_vn: 'Viet Nam',
    country_xk: 'Kosovo',
    country_ws: 'Samoa',
    country_ye: 'Yemen',
    country_yu: 'Yugoslavia',
    country_za: 'South Africa',
    country_zm: 'Zambia',
    country_zw: 'Zimbabwe',
    filter_clarify: 'Clarify',
    filter_clarify_two: 'Refine Search',
    filter_set_name: 'Specify title',
    filter_sorted: 'Sort',
    filter_filtred: 'Filter',
    filter_any: 'Any',
    filter_combinations: 'Combinations',
    filter_alt_names: 'Other names',
    filter_rating_from: 'from',
    filter_rating_to: 'to',
    filter_lang_af: 'Afrikaans',
    filter_lang_ar: 'Arabic',
    filter_lang_az: 'Azerbaijani',
    filter_lang_ba: 'Bashkir',
    filter_lang_be: 'Belarusian',
    filter_lang_bg: 'Bulgarian',
    filter_lang_bn: 'Bengali',
    filter_lang_bs: 'Bosnian',
    filter_lang_ca: 'Catalan',
    filter_lang_ce: 'Chechen',
    filter_lang_cs: 'Czech',
    filter_lang_da: 'Danish',
    filter_lang_de: 'German',
    filter_lang_el: 'Greek',
    filter_lang_en: 'English',
    filter_lang_es: 'Spanish',
    filter_lang_et: 'Estonian',
    filter_lang_fa: 'Persian',
    filter_lang_fi: 'Finnish',
    filter_lang_fr: 'French',
    filter_lang_ga: 'Irish',
    filter_lang_gl: 'Galician',
    filter_lang_gn: 'Guarani',
    filter_lang_he: 'Hebrew',
    filter_lang_hi: 'Hindi',
    filter_lang_hr: 'Croatian',
    filter_lang_hu: 'Hungarian',
    filter_lang_hy: 'Armenian',
    filter_lang_id: 'Indonesian',
    filter_lang_is: 'Icelandic',
    filter_lang_it: 'Italian',
    filter_lang_ja: 'Japanese',
    filter_lang_ka: 'Georgian',
    filter_lang_kk: 'Kazakh',
    filter_lang_ko: 'Korean',
    filter_lang_ks: 'Kashmiri',
    filter_lang_ku: 'Kurdish',
    filter_lang_ky: 'Kirghiz',
    filter_lang_lt: 'Lithuanian',
    filter_lang_lv: 'Latvian',
    filter_lang_mi: 'Maori',
    filter_lang_mk: 'Macedonian',
    filter_lang_mn: 'Mongolian',
    filter_lang_mo: 'Moldavian',
    filter_lang_mt: 'Maltese',
    filter_lang_ne: 'Nepali',
    filter_lang_nl: 'Dutch (Nederlands)',
    filter_lang_no: 'Norwegian',
    filter_lang_pa: 'Punjabi',
    filter_lang_pl: 'Polish',
    filter_lang_ps: 'Pushto',
    filter_lang_pt: 'Portuguese',
    filter_lang_ro: 'Romanian',
    filter_lang_ru: 'Russian',
    filter_lang_si: 'Sinhalese',
    filter_lang_sk: 'Slovak',
    filter_lang_sl: 'Slovenian',
    filter_lang_sm: 'Samoan',
    filter_lang_so: 'Somali',
    filter_lang_sq: 'Albanian',
    filter_lang_sr: 'Serbian',
    filter_lang_sv: 'Swedish',
    filter_lang_sw: 'Swahili',
    filter_lang_ta: 'Tamil',
    filter_lang_tg: 'Tajik',
    filter_lang_th: 'Thai',
    filter_lang_tk: 'Turkmen',
    filter_lang_tr: 'Turkish',
    filter_lang_tt: 'Tatar',
    filter_lang_ur: 'Urdu',
    filter_lang_uk: 'Ukrainian',
    filter_lang_uz: 'Uzbek',
    filter_lang_vi: 'Vietnamese',
    filter_lang_yi: 'Yiddish',
    filter_lang_zh: 'Chinese',
    filter_genre_ac: 'Action',
    filter_genre_ad: 'Adventures',
    filter_genre_mv: 'Cartoon',
    filter_genre_cm: 'Comedy',
    filter_genre_cr: 'Crime',
    filter_genre_dc: 'Documentary',
    filter_genre_dr: 'Drama',
    filter_genre_fm: 'Family',
    filter_genre_fe: 'Fantasy',
    filter_genre_hi: 'Story',
    filter_genre_ho: 'Horror',
    filter_genre_mu: 'Music',
    filter_genre_de: 'Detective',
    filter_genre_md: 'Melodrama',
    filter_genre_fa: 'Fiction',
    filter_genre_tv: 'TV film',
    filter_genre_tr: 'Thriller',
    filter_genre_mi: 'Military',
    filter_genre_ve: 'Western',
    filter_genre_aa: 'Action & Adventure',
    filter_genre_ch: 'Children\'s',
    filter_genre_nw: 'News',
    filter_genre_rs: 'Reality show',
    filter_genre_hf: 'Sci-Fi and Fantasy',
    filter_genre_op: 'Soap opera',
    filter_genre_tc: 'Talk show',
    filter_genre_mp: 'War and Politics',
    empty_title: 'Empty',
    empty_text: 'Nothing found for your filter, please refine your filter.',
    empty_title_two: 'It\'s empty here',
    empty_text_two: 'The list is currently empty.',
    menu_main: 'Home',
    menu_movies: 'Movies',
    menu_tv: 'Series',
    menu_catalog: 'Catalog',
    menu_filter: 'Filter',
    menu_collections: 'Collections',
    menu_relises: 'Releases',
    menu_anime: 'Anime',
    menu_bookmark: 'Bookmarks',
    menu_like: 'Like',
    menu_time: 'Later',
    menu_history: 'History',
    menu_timeline: 'Schedule',
    menu_torrents: 'Torrents',
    menu_settings: 'Settings',
    menu_about: 'Information',
    menu_console: 'Console',
    menu_multmovie: 'Cartoons',
    menu_multtv: 'Animated series',
    plugins_catalog_work: 'Working plugins',
    plugins_catalog_work_descr: 'Plugins that work exactly in the lamp.',
    plugins_catalog_popular: 'Popular plugins among users',
    plugins_catalog_popular_descr: 'Installation from unknown sources may cause the application to work incorrectly.',
    plugins_online: 'View online',
    plugins_check_fail: 'Failed to test the functionality of the plugin. However, this does not mean that the plugin does not work. Reload the application to see if the plugin is loading.',
    plugins_need_reload: 'To apply the plugin, you need to restart the application',
    plugins_install: 'Install',
    plugins_install_ready: 'This plugin is already installed.',
    plugins_installed: 'Installations',
    plugins_load_from: 'Loaded from source',
    plugins_ok_for_check: 'Click (OK) to test the plugin',
    plugins_no_loaded: 'When loading the application, some plugins could not be loaded',
    time_viewed: 'Viewed',
    time_from: 'from',
    time_reset: 'Reset timecode',
    settings_clear_cache: 'Cache and data cleared',
    settings_user_links: 'Custom Link',
    settings_for_local: 'For local TorrServer',
    settings_add: 'Add',
    settings_remove: 'Delete',
    settings_manager: 'Storage Manager',
    settings_this_value: 'present value',
    settings_added: 'Added',
    settings_removed: 'Removed',
    settings_param_player_inner: 'Prisma',
    settings_param_player_outside: 'External',
    settings_param_player_inner_tvos: 'Internal',
    settings_param_yes: 'Yes',
    settings_param_no: 'No',
    settings_param_interface_size_small: 'Smaller',
    settings_param_interface_size_normal: 'Normal',
    settings_param_interface_size_bigger: 'More',
    settings_param_interface_size_fixed: 'Fixed',
    settings_param_poster_quality_low: 'Low',
    settings_param_poster_quality_average: 'Average',
    settings_param_poster_quality_high: 'High',
    settings_param_parse_directly: 'Directly',
    settings_param_parse_api: 'Through the website API',
    settings_param_background_complex: 'Complex',
    settings_param_background_simple: 'Simple',
    settings_param_background_image: 'Picture',
    settings_param_link_use_one: 'Main',
    settings_param_link_use_two: 'Additional',
    settings_param_subtitles_size_small: 'small',
    settings_param_subtitles_size_normal: 'Ordinary',
    settings_param_subtitles_size_bigger: 'Large',
    settings_param_screensaver_nature: 'Nature',
    settings_param_torrent_lang_orig: 'Original',
    settings_param_torrent_lang_ru: 'Russian',
    settings_param_player_timecode_again: 'Start over',
    settings_param_player_timecode_continue: 'Proceed',
    settings_param_player_timecode_ask: 'To ask',
    settings_param_player_scale_method: 'Calculate',
    settings_param_player_hls_app: 'Systemic',
    settings_param_player_hls_js: 'Program',
    settings_param_card_view_load: 'Upload',
    settings_param_card_view_all: 'Show all',
    settings_param_navigation_remote: 'Remote controller',
    settings_param_navigation_mouse: 'Remote control with mouse',
    settings_param_keyboard_prisma: 'Prisma',
    settings_param_keyboard_system: 'Systemic',
    helper_keyboard: 'After entering the value, press the "Back" button to save',
    helper_torrents: 'Hold down the (OK) key to bring up the context menu',
    helper_cleared: 'Success, tooltips will be shown again.',
    helper_torrents_view: 'Hold down the (OK) key to reset the timecode and display the menu',
    fav_sync_title: 'Bookmark sync',
    fav_sync_text: 'Your favorite bookmarks with you. Connect synchronization and view on any device. <br><br>To do this, register on the TG, create a profile and log in to the application.',
    fav_sync_site: 'Website',
    fav_remove_title: 'Remove from history',
    fav_remove_descr: 'Delete selected card',
    fav_clear_title: 'Clear the history',
    fav_clear_descr: 'Delete all cards from history',
    fav_clear_label_title: 'Clear labels',
    fav_clear_label_descr: 'Clear View Tags',
    fav_clear_time_title: 'Clear Timecodes',
    fav_clear_time_descr: 'Clear all timecodes',
    fav_label_cleared: 'Marks cleared',
    fav_time_cleared: 'Timecodes cleared',
    timetable_empty: 'This section will display the release dates of new episodes.',
    player_quality: 'Quality',
    player_flow: 'Flow',
    player_tracks: 'Audio tracks',
    player_disabled: 'Disabled',
    player_unknown: 'Unknown',
    player_subs: 'Subtitles',
    player_size_default_title: 'Default',
    player_size_default_descr: 'Default video size',
    player_size_cover_title: 'Expand',
    player_size_cover_descr: 'Expands video to full screen',
    player_size_fill_title: 'Fill',
    player_size_fill_descr: 'Fit video to full screen',
    player_size_s115_title: 'Zoom 115%',
    player_size_s115_descr: 'Enlarge video by 115%',
    player_size_s130_title: 'Zoom 130%',
    player_size_s130_descr: 'Enlarge video by 130%',
    player_size_v115_title: 'Vertical 115%',
    player_size_v115_descr: 'Enlarge video by 115%',
    player_size_v130_title: 'Vertical 130%',
    player_size_v130_descr: 'Enlarge video by 130%',
    player_video_size: 'Video size',
    player_playlist: 'Playlist',
    player_error_one: 'Failed to decode video',
    player_error_two: 'Video not found or corrupted',
    player_start_from: 'Continue browsing from',
    player_not_found: 'Player not found',
    player_lauch: 'Launch player',
    player_speed_default_title: 'Plain',
    player_speed_two_descr: 'Play without sound',
    player_video_speed: 'Playback speed',
    player_share_title: 'Share',
    player_share_descr: 'Play this video on another device',
    player_normalization_power_title: 'Normalization power',
    player_normalization_smooth_title: 'Normalization speed',
    player_normalization_step_none: 'Zero',
    player_normalization_step_low: 'Low',
    player_normalization_step_medium: 'Average',
    player_normalization_step_hight: 'High',
    player_normalization_type_title: 'Normalization Type',
    player_normalization_type_all: 'All',
    player_normalization_type_up: 'Only Increase',
    player_normalization_type_down: 'Only Decrease',
    title_ai_assistant: 'Assistant OpenAI',
    title_facts: 'Interesting Facts',
    ai_search_start_typing: 'Ask the OpenAI Assistant what movies you want to find. For example: "Movies about space"',
    ai_search_limit: 'Request limit exceeded. Please try again later. With a Premium subscription, limits will be increased, and you won’t have to wait!',
    ai_subscribe_title: 'Unlock More Opportunities with OpenAI',
    ai_subscribe_descr: 'Sign up for a Premium subscription and increase the number of requests. OpenAI will select the best films that it can for you.',
    dmca_title: 'Content blocked',
    dmca_descr: 'This material is not available for viewing. It has been blocked at the request of the copyright holder in accordance with copyright law.',
    player_youtube_no_played: 'Sorry, this video is not available in your region and may have been blocked or removed.',
    player_youtube_start_play: 'To start playing the video, click the "Play" button.',
    discuss_voited: "Thank you for your feedback!",
    confirm_open_player: 'Another device is requesting access to the player. Do you want to play the video?',
    broadcast_open: 'Open card on another device',
    broadcast_play: 'Choose the device to watch on',
    card_new_episode: 'New series',
    card_book_remove: 'Remove from bookmarks',
    card_book_add: 'To bookmarks',
    card_book_descr: 'Look in the menu (Bookmarks)',
    card_like_remove: 'Remove from favorites',
    card_like_add: 'Like',
    card_like_descr: 'Look at the menu (Like)',
    card_wath_remove: 'Remove from expected',
    card_wath_add: 'Watch Later',
    card_wath_descr: 'See the menu (Later)',
    card_history_remove: 'Remove from history',
    card_history_add: 'Into history',
    card_history_descr: 'Look in the menu (History)',
    keyboard_listen: 'Speak, I\'m listening...',
    keyboard_nomic: 'No microphone access',
    notice_new_quality: 'New quality available',
    notice_quality: 'Quality',
    notice_new_episode: 'New series',
    notice_none: 'You don\'t have any notifications yet, register TG at <b>@prismalk_bot</b> to follow new episodes and releases.',
    notice_in_quality: 'As',
    notice_none_account: 'You don\'t have any notifications yet, bookmark the series and wait for notifications of new episodes.',
    notice_none_system: 'You currently have no notifications. We will be sure to notify you when new notifications become available.',
    copy_link: 'Copy video link',
    copy_secuses: 'Link copied to clipboard',
    copy_error: 'Error copying link',
    account_sync_to_profile: 'All bookmarks will be moved to the profile',
    account_sync_secuses: 'All bookmarks have been successfully transferred',
    account_profiles: 'Profiles',
    account_profiles_empty: 'Failed to get list of profiles',
    account_authorized: 'Authorized',
    account_logged_in: 'You are logged in',
    account_login_failed: 'Login failed',
    account_login_wait: 'Waiting for login',
    account_profile_main: 'General',
    account_export_secuses: 'Export completed successfully',
    account_export_fail: 'Export error',
    account_import_secuses: 'Import completed successfully',
    account_import_fail: 'Import error',
    account_imported: 'imported',
    account_reload_after: 'Restart the application after 5 seconds.',
    account_create: 'Sign in to access advanced features',
    account_premium: 'Discover more features with a Premium account. Increasing limits and access to additional features of the service.',
    account_premium_more: 'Learn more about Premium',
    account_limited: 'Your limit has been reached. Upgrade to Premium for more features. Setup via Telegram <span class= "account-model__site">@prismalk_bot</span>',
    account_code_enter: 'Enter the received code',
    account_code_error: 'Perhaps you entered an incorrect or outdated code',
    account_code_wrong: 'Perhaps you entered an incorrect format',
    account_code_where: 'Go to Telegram bot <span class="account-add-device__site">@prismalk_bot</span> and enter the received code.',
    account_code_input: 'Enter code',
    settings_prisma_signin_button: 'Sign in',
    network_noconnect: 'No network connection',
    network_404: 'The requested page was not found. [404]',
    network_401: 'Authorization failed',
    network_500: 'Internal Server Error. [500]',
    network_parsererror: 'The requested JSON parsing failed.',
    network_timeout: 'Request timed out.',
    network_abort: 'The request has been aborted.',
    network_error: 'Unknown error',
    size_zero: '0 Byte',
    size_byte: 'Byte',
    size_kb: 'KB',
    size_mb: 'MB',
    size_gb: 'GB',
    size_tb: 'TB',
    size_pp: 'PB',
    speed_bit: 'bps',
    speed_kb: 'Kbps',
    speed_mb: 'Mbps',
    speed_gb: 'Gbps',
    speed_tb: 'Tbps',
    speed_pp: 'Pbps',
    month_1: 'January',
    month_2: 'February',
    month_3: 'March',
    month_4: 'April',
    month_5: 'May',
    month_6: 'June',
    month_7: 'July',
    month_8: 'August',
    month_9: 'September',
    month_10: 'October',
    month_11: 'November',
    month_12: 'December',
    day_1: 'Monday',
    day_2: 'Tuesday',
    day_3: 'Wednesday',
    day_4: 'Thursday',
    day_5: 'Friday',
    day_6: 'Saturday',
    day_7: 'Sunday',
    month_1_e: 'January',
    month_2_e: 'February',
    month_3_e: 'March',
    month_4_e: 'April',
    month_5_e: 'May',
    month_6_e: 'June',
    month_7_e: 'July',
    month_8_e: 'August',
    month_9_e: 'September',
    month_10_e: 'October',
    month_11_e: 'November',
    month_12_e: 'December',
    week_1: 'Mon',
    week_2: 'Tue',
    week_3: 'Wed',
    week_4: 'Thu',
    week_5: 'Fri',
    week_6: 'Sat',
    week_7: 'Sun',
    extensions_enable: 'Turn on',
    extensions_disable: 'Disable',
    extensions_check: 'Check status',
    extensions_install: 'Install',
    extensions_info: 'Information',
    extensions_edit: 'Edit',
    extensions_change_name: 'Change name',
    extensions_change_link: 'Change link',
    extensions_remove: 'Delete',
    extensions_set_name: 'Enter plugin name',
    extensions_set_url: 'Enter plugin url',
    extensions_ready: 'This plugin is already installed',
    extensions_no_info: 'Without information',
    extensions_no_name: 'Untitled',
    extensions_worked: 'Worker',
    extensions_no_plugin: 'Plugin not verified',
    extensions_add: 'Add Plugin',
    extensions_from_memory: 'Installed in memory',
    extensions_from_cub: 'Installed from CUB',
    extensions_from_popular: 'Popular plugins',
    extensions_from_lib: 'Plugin Library',
    extensions_from_connected: 'Connected plugins',
    settings_webos_launcher: 'Application launch',
    settings_webos_launcher_add_device: 'Install as starter app',
    settings_webos_launcher_remove_device: 'Remove from starter spplications',
    player_normalization: 'Normalization',
    change_source_on_cub: 'Change source',
    settings_param_jackett_interview_all: 'All',
    settings_param_jackett_interview_healthy: 'Available only',
    settings_parser_jackett_interview: 'Poll trackers',
    title_ongoing: 'Ongoings',
    title_pgrating: 'Age limit',
    settings_interface_card_interfice: 'Card interface',
    settings_interface_card_poster: 'Show poster',
    settings_interface_view_trailer: 'Trailer button',
    settings_interface_hide_ai: 'AI Button',
    title_card: 'Card',
    settings_param_card_interface_old: 'Old',
    settings_param_card_interface_new: 'New',
    title_seasons: 'Seasons',
    title_episodes: 'Episodes',
    title_rewiews: 'Reviews',
    settings_interface_glass: 'Glass',
    settings_interface_glass_descr: 'Show interface in glassy style',
    settings_interface_black_style: 'Black style',
    plugins_remove: 'Remove plugins',
    plugins_add_success: 'Plugin connected successfully',
    settings_reset: 'Reset',
    title_channel: 'Channel',
    input_detection_touch: 'Want to switch to touch control?',
    input_detection_mouse: 'Want to switch to mouse control?',
    input_detection_remote: 'Want to switch to remote control?',
    settings_interface_hide_outside_the_screen: 'Hide cards off screen',
    settings_interface_hide_outside_the_screen_descr: 'This will speed up UI rendering and improve performance',
    https_text: 'You are using the HTTPS protocol, in this protocol the lamp does not work correctly. For the correct operation of the lamp, use the address with the HTTP protocol',
    extensions_hpu_best: 'Popular',
    extensions_hpu_recomend: 'Recommended',
    extensions_hpu_theme: 'Themes',
    extensions_hpu_screensaver: 'Screensaver',
    extensions_hpu_video: 'Video',
    extensions_hpu_control: 'Control',
    extensions_hpu_other: 'Miscellaneous',
    extensions_hpu_: 'Other',
    title_author: 'Author',
    title_buffer: 'Buffer',
    settings_rest_screensaver_time: 'After how many minutes to start the screensaver',
    time_h: 'h.',
    time_m: 'm.',
    time_s: 's.',
    settings_param_glass_easy: 'Transparent',
    settings_param_glass_medium: 'Semitransparent',
    settings_param_glass_blacked: 'Blacked out',
    settings_interface_glass_opacity: 'Glass transparency',
    torrent_error_check_no_auth: 'The server responded to the request, but the authorization failed',
    settings_interface_card_cover: 'Show cover',
    title_upcoming_episodes: 'Upcoming episode releases',
    title_aired_episodes: 'Recently aired episodes',
    settings_rest_cache_images: 'Image cache',
    settings_rest_cache_images_descr: 'Cache posters and backgrounds to local storage',
    settings_player_rewind_title: 'Rewind',
    settings_player_rewind_descr: 'Rewind interval in seconds',
    settings_interface_card_reactions: 'Show reactions',
    title_look: 'Looking',
    title_scheduled: 'Scheduled',
    title_viewed: 'Viewed',
    title_thrown: 'Thrown',
    title_reactions: 'Reactions',
    reactions_none: 'No reactions',
    reactions_fire: 'Great',
    reactions_nice: 'Nice',
    reactions_think: 'Interesting',
    reactions_bore: 'Boring',
    reactions_shit: 'Bad',
    reactions_ready: 'You have already left a reaction',
    reactions_error: 'Server error, please try again later.',
    reactions_thanks: 'Thanks for your vote, it helps users choose the best content.',
    settings_player_launch_trailers: 'Trailer Player',
    title_continued: 'To be continued',
    title_language_short: 'Language',
    speedtest_connect: 'connection',
    speedtest_test: 'testing',
    speedtest_ready: 'ready',
    speedtest_button: 'Test Speed',
    termsofuse_t_01: 'Terms of Use',
    termsofuse_t_02: 'Prisma is a convenient tool for exploring the latest news in the film industry, including movies, TV shows, cartoons, and other information. To obtain information about movies, an open-source website, themoviedb.org, is used.',
    termsofuse_t_03: 'Content',
    termsofuse_t_04: 'Prisma utilizes the API (application programming interface) from the themoviedb.org catalog to retrieve information about movies and TV shows, as well as to view associated media files such as posters, trailers, and more.',
    termsofuse_t_05: 'The themoviedb.org API allows the Prisma application to access a database of movies and TV shows, providing the ability to search and view media file information.',
    termsofuse_t_06: 'The interaction between the Prisma application and themoviedb.org occurs through API requests that are sent from the Prisma application to the themoviedb.org servers to obtain information and media files. Themoviedb.org processes the requests and sends the requested data back to the Prisma application.',
    termsofuse_t_07: 'Thus, thanks to the use of the themoviedb.org API, the Prisma application provides users with access to an extensive database of movies and TV shows, while complying with the terms of use and restrictions set by the rights holder.',
    termsofuse_t_08: 'Extensions',
    termsofuse_t_09: 'Extensions are a powerful tool provided for the Prisma application, allowing users to enhance its capabilities, add additional functionality, and modify content according to their needs.',
    termsofuse_t_10: 'However, it should be noted that users install extensions at their own risk. All consequences arising from the use of extensions are the responsibility of the user. Users are advised to exercise caution when installing and using extensions, carefully evaluating their reliability and security.',
    termsofuse_t_11: 'Copyright Infringements',
    termsofuse_t_12: 'If you discover any copyright infringement in the Prisma application, you should contact the developers of the Prisma application. You can use the contacts provided in the Prisma application to do so. However, it is important to note that the Prisma application uses the API from the themoviedb.org catalog, which provides open access to information about movies and TV shows. This means that the information displayed in the Prisma application is publicly available and does not infringe on copyright.',
    termsofuse_t_13: 'If you believe that the Prisma application still contains content that violates your copyright, you can contact the rights holder of that content and request its removal from the themoviedb.org website. In turn, the Prisma application can remove content upon receiving a proper copyright infringement notification.',
    settings_rest_protocol_use: 'Secure connection',
    settings_rest_protocol_descr: 'Use HTTPS protocol',
    install_app_apk_text: 'We noticed that you are using MediaStationX to run Prisma on Android. We recommend that you install Prisma as an APK application. You can download the latest version of the application here:',
    tv_status_returning_series: 'Returning series',
    tv_status_planned: 'Planned',
    tv_status_in_production: 'In Production',
    tv_status_ended: 'Ended',
    tv_status_canceled: 'Canceled',
    tv_status_pilot: 'Pilot',
    tv_status_released: 'Released',
    tv_status_rumored: 'Rumored',
    tv_status_post_production: 'Post Production',
    tv_shows_name: 'TV Show',
    title_last_year: 'Last year',
    title_reset: 'Reboot',
    back_to_card: 'Return to card',
    premiere_author_recomend_1: 'Order pizza and get ready for some excitement.',
    premiere_author_recomend_2: 'The party is just getting started.',
    premiere_author_recomend_3: 'Get ready for some adrenaline.',
    premiere_author_recomend_4: 'Ready for an unforgettable evening?',
    premiere_author_recomend_5: 'I recommend watching it.',
    premiere_title: 'Premiere',
    settings_clear_cache_only: 'Cache Cleared',
    settings_rest_cache_only: 'Only Cache',
    settings_rest_cache_only_descr: 'Basic settings will be preserved',
    settings_rest_cache_all: 'Cache and Data',
    settings_rest_cache_all_descr: 'All settings and data will be cleared',
    settings_rest_cache_calculate: 'How much memory is left',
    title_left: 'Left',
    account_export_fail_500: 'Unknown error',
    account_export_fail_610: 'You have exceeded the limit for today',
    account_export_fail_200: 'Database error, please try again later',
    account_export_fail_600: 'Error, failed to upload the file',
    account_export_fail_620: 'Error, file not transmitted',
    title_parental_control: 'Parental Control',
    settings_parental_control_param_time_always: 'Always',
    settings_parental_control_param_time_once: 'Once',
    settings_parental_control_param_time_10: 'In 10 minutes',
    settings_parental_control_param_time_20: 'In 20 minutes',
    settings_parental_control_param_time_30: 'In 30 minutes',
    settings_parental_control_param_time_60: 'In 1 hour',
    settings_parental_control_param_time_120: 'In 2 hours',
    settings_parental_control_change_pin: 'Change PIN',
    settings_parental_control_demand_title: 'When to Prompt',
    settings_parental_control_demand_descr: 'After how much time to prompt for the PIN',
    settings_parental_control_enabled: 'Enabled',
    settings_parental_control_disabled: 'Disabled',
    parental_control_input_new_code: 'Enter new PIN code',
    parental_control_confirm_new_code: 'Confirm PIN code',
    parental_control_no_match_code: 'PIN code does not match the previous code',
    parental_control_input_code: 'Enter PIN code',
    parental_control_input_error: 'You entered an incorrect PIN code',
    title_worth_rewatch: 'Worth a rewatch',
    ad_disable: 'With a premium subscription, advertising will be a thing of the past - just you and your favorite content. Connect it to the Telegram bot @prismalk_bot today!',
    ad_after: 'Advertising via',
    ad: 'Advertising',
    ad_skip: 'Skip',
    ad_continue_after: 'Viewing will start in',
    settings_parser_prowlarr_link_descr: 'Provide a link to the Prowlarr server',
    settings_parser_prowlarr_key_descr: 'Located in the Prowlarr settings tab in the general category',
    settings_player_torrent_type: 'Player type for torrents',
    settings_player_torrent_type_descr: 'Which player to play torrents',
    settings_interface_style: 'Interface style',
    settings_interface_style_descr: 'Select the style of card display',
    settings_param_interface_style_standard: 'Standard',
    settings_param_interface_style_space: 'For TV devices',
    settings_interface_style_reload: 'Reload to apply new style',
    // Quality video translations
    quality_dvb: 'TV Quality',
    quality_hdtvrip: 'HD TV Rip',
    quality_hdrip: 'HD Rip',
    quality_dvdrip: 'DVD Quality',
    quality_ts: 'Cam',
    quality_iptvrip: 'TV Recording'
  };

  var langs = {};
  var keys = {};
  var lang_default = 'ru';
  Object.defineProperty(langs, 'ru', {
    get: function get() {
      return ru;
    }
  });
  Object.defineProperty(langs, 'en', {
    get: function get() {
      return en;
    }
  });
  for (var code in meta.languages) {
    keys[code] = meta.languages[code].name;
    if (!langs[code]) langs[code] = {};
    langs[code].lang_choice_title = meta.languages[code].lang_choice_title;
    langs[code].lang_choice_subtitle = meta.languages[code].lang_choice_subtitle;
  }

  /**
   * Перевести
   * @param {string} name 
   * @param {string} custom_code - ru/en/uk...
   * @returns 
   */
  function translate(name, custom_code) {
    name = name + '';
    var code = custom_code || Storage.get('language', 'ru');
    if (!langs[code]) code = lang_default;
    if (name.indexOf('#{') >= 0) {
      return name.replace(/#{([a-z_0-9-]+)}/g, function (e, s) {
        return langs[code][s] || langs[lang_default][s] || s;
      });
    } else {
      return langs[code][name] || langs[lang_default][name] || name;
    }
  }

  /**
   * Добавить переводы
   * @param {{key_name:{en:string,ru:string}}} data 
   */
  function add$1(data) {
    for (var name in data) {
      for (var _code in data[name]) {
        if (langs[_code]) {
          langs[_code][name] = data[name][_code];
        }
      }
    }
  }

  /**
   * Добавить перевод для кода
   * @param {string} code 
   * @param {{key1:string,key2:string}} data 
   */
  function AddTranslation(code, data) {
    if (!langs[code]) langs[code] = {};
    for (var name in data) {
      langs[code][name] = data[name];
    }
  }

  /**
   * Добавить коды
   * @param {{code_name:string}} new_codes 
   */
  function addCodes(new_codes) {
    for (var i in new_codes) {
      keys[i] = new_codes[i];
      langs[i] = {};
    }
  }

  /**
   * Получить список кодов
   * @returns {{ru:string,en:string}}
   */
  function codes() {
    return Arrays.clone(keys);
  }
  function selected$1(check_codes) {
    return check_codes.indexOf(Storage.get('language', 'ru')) >= 0 ? true : false;
  }
  var Lang = {
    translate: translate,
    add: add$1,
    codes: codes,
    addCodes: addCodes,
    AddTranslation: AddTranslation,
    selected: selected$1
  };

  var data = {};
  data.type = {
    title: '#{title_type}',
    items: [{
      title: '#{menu_movies}',
      selected: true,
      cat: 'movie'
    }, {
      title: '#{menu_multmovie}',
      cat: 'multmovie'
    }, {
      title: '#{menu_tv}',
      cat: 'tv'
    }, {
      title: '#{menu_multtv}',
      cat: 'multtv'
    }, {
      title: '#{menu_anime}',
      cat: 'anime'
    }]
  };
  data.rating = {
    title: '#{title_rating}',
    items: [{
      title: '#{filter_any}'
    }, {
      title: '#{filter_rating_from} 8',
      start: 8
    }, {
      title: '#{filter_rating_from} 6',
      start: 6
    }, {
      title: '#{filter_rating_from} 4',
      start: 4
    }, {
      title: '#{filter_rating_from} 2',
      start: 2
    }, {
      title: '#{filter_rating_from} 1 #{filter_rating_to} 3',
      voite: '1-3'
    }, {
      title: '#{filter_rating_from} 3 #{filter_rating_to} 6',
      voite: '3-6'
    }, {
      title: '#{filter_rating_from} 6 #{filter_rating_to} 8',
      voite: '6-8'
    }, {
      title: '#{filter_rating_from} 8 #{filter_rating_to} 9',
      voite: '8-9'
    }]
  };
  data.pgrating = {
    title: '#{title_pgrating}',
    items: [{
      title: '#{filter_any}'
    }]
  };
  data.language = {
    title: '#{title_language}',
    items: [{
      title: '#{filter_lang_ru}',
      code: 'ru'
    }, {
      title: '#{filter_lang_uk}',
      code: 'uk'
    }, {
      title: '#{filter_lang_en}',
      code: 'en'
    }, {
      title: '#{filter_lang_be}',
      code: 'be'
    }, {
      title: '#{filter_lang_zh}',
      code: 'zh|cn'
    }, {
      title: '#{filter_lang_ja}',
      code: 'ja'
    }, {
      title: '#{filter_lang_ko}',
      code: 'ko'
    }, {
      title: '#{filter_lang_af}',
      code: 'af'
    }, {
      title: '#{filter_lang_sq}',
      code: 'sq'
    }, {
      title: '#{filter_lang_ar}',
      code: 'ar'
    }, {
      title: '#{filter_lang_az}',
      code: 'az'
    }, {
      title: '#{filter_lang_hy}',
      code: 'hy'
    }, {
      title: '#{filter_lang_ba}',
      code: 'ba'
    }, {
      title: '#{filter_lang_bg}',
      code: 'bg'
    }, {
      title: '#{filter_lang_bn}',
      code: 'bn'
    }, {
      title: '#{filter_lang_bs}',
      code: 'bs'
    }, {
      title: '#{filter_lang_ca}',
      code: 'ca'
    }, {
      title: '#{filter_lang_ce}',
      code: 'ce'
    }, {
      title: '#{filter_lang_cs}',
      code: 'cs'
    }, {
      title: '#{filter_lang_da}',
      code: 'da'
    }, {
      title: '#{filter_lang_ka}',
      code: 'ka'
    }, {
      title: '#{filter_lang_de}',
      code: 'de'
    }, {
      title: '#{filter_lang_el}',
      code: 'el'
    }, {
      title: '#{filter_lang_es}',
      code: 'es'
    }, {
      title: '#{filter_lang_et}',
      code: 'et'
    }, {
      title: '#{filter_lang_fa}',
      code: 'fa'
    }, {
      title: '#{filter_lang_fi}',
      code: 'fi'
    }, {
      title: '#{filter_lang_fr}',
      code: 'fr'
    }, {
      title: '#{filter_lang_ga}',
      code: 'ga'
    }, {
      title: '#{filter_lang_gl}',
      code: 'gl'
    }, {
      title: '#{filter_lang_gn}',
      code: 'gn'
    }, {
      title: '#{filter_lang_he}',
      code: 'he'
    }, {
      title: '#{filter_lang_hi}',
      code: 'hi'
    }, {
      title: '#{filter_lang_hr}',
      code: 'hr'
    }, {
      title: '#{filter_lang_hu}',
      code: 'hu'
    }, {
      title: '#{filter_lang_id}',
      code: 'id'
    }, {
      title: '#{filter_lang_is}',
      code: 'is'
    }, {
      title: '#{filter_lang_it}',
      code: 'it'
    }, {
      title: '#{filter_lang_kk}',
      code: 'kk'
    }, {
      title: '#{filter_lang_ks}',
      code: 'ks'
    }, {
      title: '#{filter_lang_ku}',
      code: 'ku'
    }, {
      title: '#{filter_lang_ky}',
      code: 'ky'
    }, {
      title: '#{filter_lang_lt}',
      code: 'lt'
    }, {
      title: '#{filter_lang_lv}',
      code: 'lv'
    }, {
      title: '#{filter_lang_mi}',
      code: 'mi'
    }, {
      title: '#{filter_lang_mk}',
      code: 'mk'
    }, {
      title: '#{filter_lang_mn}',
      code: 'mn'
    }, {
      title: '#{filter_lang_mo}',
      code: 'mo'
    }, {
      title: '#{filter_lang_mt}',
      code: 'mt'
    }, {
      title: '#{filter_lang_no}',
      code: 'no|nb|nn'
    }, {
      title: '#{filter_lang_ne}',
      code: 'ne'
    }, {
      title: '#{filter_lang_nl}',
      code: 'nl'
    }, {
      title: '#{filter_lang_pa}',
      code: 'pa'
    }, {
      title: '#{filter_lang_pl}',
      code: 'pl'
    }, {
      title: '#{filter_lang_ps}',
      code: 'ps'
    }, {
      title: '#{filter_lang_pt}',
      code: 'pt'
    }, {
      title: '#{filter_lang_ro}',
      code: 'ro'
    }, {
      title: '#{filter_lang_si}',
      code: 'si'
    }, {
      title: '#{filter_lang_sk}',
      code: 'sk'
    }, {
      title: '#{filter_lang_sl}',
      code: 'sl'
    }, {
      title: '#{filter_lang_sm}',
      code: 'sm'
    }, {
      title: '#{filter_lang_so}',
      code: 'so'
    }, {
      title: '#{filter_lang_sr}',
      code: 'sr'
    }, {
      title: '#{filter_lang_sv}',
      code: 'sv'
    }, {
      title: '#{filter_lang_sw}',
      code: 'sw'
    }, {
      title: '#{filter_lang_ta}',
      code: 'ta'
    }, {
      title: '#{filter_lang_tg}',
      code: 'tg'
    }, {
      title: '#{filter_lang_th}',
      code: 'th'
    }, {
      title: '#{filter_lang_tk}',
      code: 'tk'
    }, {
      title: '#{filter_lang_tr}',
      code: 'tr'
    }, {
      title: '#{filter_lang_tt}',
      code: 'tt'
    }, {
      title: '#{filter_lang_ur}',
      code: 'ur'
    }, {
      title: '#{filter_lang_uz}',
      code: 'uz'
    }, {
      title: '#{filter_lang_vi}',
      code: 'vi'
    }, {
      title: '#{filter_lang_yi}',
      code: 'yi'
    }]
  };
  data.genres_movie = {
    title: '#{title_genre}',
    items: [{
      "id": 28,
      "title": "#{filter_genre_ac}",
      checkbox: true
    }, {
      "id": 12,
      "title": "#{filter_genre_ad}",
      checkbox: true
    }, {
      "id": 16,
      "title": "#{filter_genre_mv}",
      checkbox: true
    }, {
      "id": 35,
      "title": "#{filter_genre_cm}",
      checkbox: true
    }, {
      "id": 80,
      "title": "#{filter_genre_cr}",
      checkbox: true
    }, {
      "id": 99,
      "title": "#{filter_genre_dc}",
      checkbox: true
    }, {
      "id": 18,
      "title": "#{filter_genre_dr}",
      checkbox: true
    }, {
      "id": 10751,
      "title": "#{filter_genre_fm}",
      checkbox: true
    }, {
      "id": 14,
      "title": "#{filter_genre_fe}",
      checkbox: true
    }, {
      "id": 36,
      "title": "#{filter_genre_hi}",
      checkbox: true
    }, {
      "id": 27,
      "title": "#{filter_genre_ho}",
      checkbox: true
    }, {
      "id": 10402,
      "title": "#{filter_genre_mu}",
      checkbox: true
    }, {
      "id": 9648,
      "title": "#{filter_genre_de}",
      checkbox: true
    }, {
      "id": 10749,
      "title": "#{filter_genre_md}",
      checkbox: true
    }, {
      "id": 878,
      "title": "#{filter_genre_fa}",
      checkbox: true
    }, {
      "id": 10770,
      "title": "#{filter_genre_tv}",
      checkbox: true
    }, {
      "id": 53,
      "title": "#{filter_genre_tr}",
      checkbox: true
    }, {
      "id": 10752,
      "title": "#{filter_genre_mi}",
      checkbox: true
    }, {
      "id": 37,
      "title": "#{filter_genre_ve}",
      checkbox: true
    }]
  };
  data.genres_tv = {
    title: '#{title_genre}',
    items: [{
      "id": 10759,
      "title": "#{filter_genre_aa}",
      checkbox: true
    }, {
      "id": 16,
      "title": "#{filter_genre_mv}",
      checkbox: true
    }, {
      "id": 35,
      "title": "#{filter_genre_cm}",
      checkbox: true
    }, {
      "id": 80,
      "title": "#{filter_genre_cr}",
      checkbox: true
    }, {
      "id": 99,
      "title": "#{filter_genre_dc}",
      checkbox: true
    }, {
      "id": 18,
      "title": "#{filter_genre_dr}",
      checkbox: true
    }, {
      "id": 10751,
      "title": "#{filter_genre_fm}",
      checkbox: true
    }, {
      "id": 10762,
      "title": "#{filter_genre_ch}",
      checkbox: true
    }, {
      "id": 9648,
      "title": "#{filter_genre_de}",
      checkbox: true
    }, {
      "id": 10763,
      "title": "#{filter_genre_nw}",
      checkbox: true
    }, {
      "id": 10764,
      "title": "#{filter_genre_rs}",
      checkbox: true
    }, {
      "id": 10765,
      "title": "#{filter_genre_hf}",
      checkbox: true
    }, {
      "id": 10766,
      "title": "#{filter_genre_op}",
      checkbox: true
    }, {
      "id": 10767,
      "title": "#{filter_genre_tc}",
      checkbox: true
    }, {
      "id": 10768,
      "title": "#{filter_genre_mp}",
      checkbox: true
    }, {
      "id": 37,
      "title": "#{filter_genre_ve}",
      checkbox: true
    }]
  };
  data.sort = {
    title: '#{filter_sorted}',
    items: [{
      title: '#{filter_any}'
    }, {
      title: '#{title_new}',
      sort: 'now'
    }, {
      title: '#{title_now_watch}',
      sort: 'now_playing'
    }, {
      title: '#{title_in_top}',
      sort: 'top'
    }, {
      title: '#{title_ongoing}',
      sort: 'airing'
    }]
  };
  data.quality = {
    title: '#{player_quality}',
    items: [{
      title: '#{filter_any}'
    }, {
      title: '#{title_in_high_quality}',
      uhd: true
    }]
  };
  data.year = {
    title: '#{title_year}',
    items: [{
      title: '#{filter_any}',
      any: true
    }]
  };
  var i = 100,
    y = new Date().getFullYear();
  for (var a = 0; a < 5; a++) {
    data.year.items.push({
      title: y - a
    });
  }
  while (i -= 5) {
    var end = y - (99 - i);
    data.year.items.push({
      title: end + 5 + '-' + end
    });
  }
  for (var _a = 18; _a >= 0; _a -= 3) {
    data.pgrating.items.push({
      title: _a + '+',
      pg: _a
    });
  }
  for (var _a2 = 15; _a2 >= 0; _a2 -= 3) {
    data.pgrating.items.push({
      title: '#{filter_rating_from} ' + _a2 + ' #{filter_rating_to} ' + (_a2 + 3),
      pg: _a2 + '-' + (_a2 + 3)
    });
  }
  data.language.items.forEach(function (i) {
    return i.checkbox = true;
  });
  function select(where, a) {
    where.forEach(function (element) {
      element.selected = false;
    });
    a.selected = true;
  }
  function selected(where) {
    var title = [];
    where.items.forEach(function (a) {
      if (a.selected || a.checked) title.push(a.title);
    });
    where.subtitle = title.length ? title.join(', ') : Lang.translate('nochoice');
  }
  function main() {
    for (var i in data) selected(data[i]);
    var cat = data.type.items.find(function (s) {
      return s.selected;
    }).cat;
    var type = cat.indexOf('movie') >= 0 ? 'movie' : 'tv';
    var items = [{
      title: Lang.translate('search_start'),
      search: true
    }, data.type, data.rating, data['genres_' + type], data.language, data.year];
    if (Storage.field('source') == 'tmdb') items.push(data.pgrating, data.sort, data.quality);
    items.forEach(function (itm) {
      itm.title = Lang.translate(itm.title);
      if (itm.subtitle) itm.subtitle = Lang.translate(itm.subtitle);
      if (itm.items) {
        itm.items.forEach(function (inr) {
          inr.title = Lang.translate(inr.title);
        });
      }
    });
    Select.show({
      title: Lang.translate('title_filter'),
      items: items,
      onBack: function onBack() {
        Controller.toggle('content');
      },
      onSelect: function onSelect(a) {
        if (a.search) search();else submenu(a);
      }
    });
  }
  function queryForTMDB() {
    var query = [];
    var cat = data.type.items.find(function (s) {
      return s.selected;
    }).cat;
    var type = cat.indexOf('movie') >= 0 ? 'movie' : 'tv';
    var genres = [];
    var languages = [];
    data.rating.items.forEach(function (a) {
      if (a.selected && (a.voite || a.start)) {
        if (a.start) {
          query.push('vote_average.gte=' + a.start);
        } else {
          query.push('vote_average.gte=' + a.voite.split('-')[0]);
          query.push('vote_average.lte=' + a.voite.split('-')[1]);
        }
      }
    });
    data.language.items.forEach(function (a) {
      if (a.checked) languages.push(a.code);
    });
    data.year.items.forEach(function (a) {
      if (a.selected && !a.any) {
        var need = type == 'movie' ? 'primary_release_date' : 'first_air_date';
        if (a.title.indexOf('-') >= 0) {
          query.push(need + '.lte=' + a.title.split('-')[0] + '-12-31');
          query.push(need + '.gte=' + a.title.split('-')[1] + '-01-01');
        } else {
          query.push((type == 'movie' ? 'primary_release_year' : 'first_air_date_year') + '=' + a.title);
        }
      }
    });
    data['genres_' + type].items.forEach(function (a) {
      if (a.checked) genres.push(a.id);
    });
    if (cat == 'multmovie' || cat == 'multtv' && genres.indexOf(16) == -1) genres.push(16);
    if (cat == 'movie' || cat == 'tv') query.push('without_genres=16');
    if (genres.length) {
      query.push('with_genres=' + genres.join(','));
    }
    if (cat == 'anime' && languages.indexOf('ja') == -1) languages.push('ja');
    if (languages.length) {
      query.push('with_original_language=' + languages.join('|'));
    }
    return 'discover/' + type + '?' + query.join('&');
  }
  function search() {
    Controller.toggle('content');
    var query = queryForTMDB();
    var activity = {
      url: query,
      title: Lang.translate('title_filter'),
      component: 'category_full',
      source: 'tmdb',
      card_type: true,
      page: 1
    };
    var object = Activity$1.active();
    if (object.component == 'category_full' && (object.url.indexOf('discover') == 0 || object.url.indexOf('?cat=') == 0)) Activity$1.replace(activity, true);else Activity$1.push(activity);
  }
  function submenu(item) {
    Select.show({
      title: item.title,
      items: item.items,
      onBack: main,
      onSelect: function onSelect(a) {
        select(item.items, a);
        main();
      }
    });
  }
  function show$2() {
    main();
  }
  var Filter = {
    show: show$2
  };

  var html$4;
  var last;
  var scroll;
  var edit_mode;
  var sort_item;
  var sort_timer;
  var visible_timer;
  function init$k() {
    html$4 = Template.get('menu');
    scroll = new create$f({
      mask: true,
      over: true
    });
    Utils$2.time(html$4);
    if (!window.prisma_settings.torrents_use) html$4.find('[data-action="mytorrents"]').remove();
    if (window.prisma_settings.disable_features.persons) html$4.find('[data-action="myperson"]').remove();
    if (window.prisma_settings.disable_features.subscribe) html$4.find('[data-action="subscribes"]').remove();
    if (!Lang.selected(['ru', 'uk', 'be'])) {
      html$4.find('[data-action="relise"],[data-action="anime"],[data-action="feed"]').remove();
    }
    if (!window.prisma_settings.feed) html$4.find('[data-action="feed"]').remove();
    Prisma.Listener.send('menu', {
      type: 'start',
      body: html$4
    });
    updateSort();
    observe();
    controller();
    $('body').on('mouseup', function (e) {
      if ($('body').hasClass('menu--open') && DeviceInput.canClick(e.originalEvent)) {
        $('body').toggleClass('menu--open', false);
        disableEditMode();
        Controller.toggle('content');
      }
    });
    scroll.minus();
    scroll.append(html$4);
    Prisma.Listener.send('menu', {
      type: 'end'
    });
    Prisma.Listener.follow('app', function (e) {
      if (e.type == 'ready') ready();
    });
  }
  function observe() {
    if (typeof MutationObserver == 'undefined') return;
    var observer = new MutationObserver(function (mutations) {
      for (var i = 0; i < mutations.length; i++) {
        var mutation = mutations[i];
        if (mutation.type == 'childList' && !mutation.removedNodes.length) {
          var selectors = Array.from(mutation.target.querySelectorAll('.selector')).filter(function (s) {
            return !s.checked;
          });
          if (selectors.length) updateSort();
          selectors.forEach(function (s) {
            s.checked = true;
            if (!$(s).data('binded_events')) {
              $(s).on('hover:focus', function (e) {
                last = e.target;
                scroll.update($(e.target), true);
              }).on('hover:hover hover:touch', function (e) {
                last = e.target;
              });
            }
          });
        }
      }
    });
    observer.observe(html$4[0], {
      childList: true,
      subtree: true
    });
  }
  function controller() {
    Controller.add('menu', {
      toggle: function toggle() {
        Controller.collectionSet(html$4);
        Controller.collectionFocus(last, html$4, true);
        clearTimeout(visible_timer);
        $('.wrap__left').removeClass('wrap__left--hidden');
        $('body').toggleClass('menu--open', true).addClass('no--mask');
      },
      update: function update() {},
      right: function right() {
        if (edit_mode) {
          if (sort_item) {
            sort_item.removeClass('traverse');
            sort_item = false;
          } else disableEditMode();
        } else Controller.toggle('content');
      },
      up: function up() {
        if (sort_item) {
          sort_item.prev().insertAfter(sort_item);
          scroll.update(sort_item, true);
          saveSort();
        } else if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
      },
      left: function left() {
        if (edit_mode) {
          if (!sort_item) {
            sort_item = $(last);
            sort_item.addClass('traverse');
          } else {
            sort_item.removeClass('traverse');
            sort_item = false;
            var name = $(last).text().trim();
            var hide = Storage.get('menu_hide', '[]');
            if (hide.indexOf(name) == -1) {
              if ($('.menu__list:eq(0) .menu__item:not(.hidden)', html$4).length > 3) hide.push(name);
            } else hide.splice(hide.indexOf(name), 1);
            Storage.set('menu_hide', hide);
            hideItems();
          }
        }
      },
      down: function down() {
        if (sort_item) {
          sort_item.next().insertBefore(sort_item);
          scroll.update(sort_item, true);
          saveSort();
        } else if (Navigator.canmove('down')) Navigator.move('down');
      },
      gone: function gone() {
        $('body').toggleClass('menu--open', false).removeClass('no--mask');
        RemoteHelper.show({
          name: 'menu_close',
          text: Lang.translate('helper_menu_info'),
          button: 'ok',
          interval: 60 * 24 * 7 // week
        });
        visible_timer = setTimeout(function () {
          $('.wrap__left').addClass('wrap__left--hidden');
        }, 300);
      },
      back: function back() {
        Activity$1.backward();
      }
    });
  }
  function updateSort() {
    clearTimeout(sort_timer);
    sort_timer = setTimeout(function () {
      checkSort();
      bindItems();
    }, 500);
  }
  function checkSort() {
    var memory = Storage.get('menu_sort', '[]');
    var anon = getSort();
    anon.forEach(function (item) {
      if (memory.indexOf(item) == -1) memory.push(item);
    });
    Storage.set('menu_sort', memory);
    orderSort();
    hideItems();
  }
  function getSort() {
    var items = [];
    $('.menu__list:eq(0) .menu__item', html$4).each(function () {
      items.push($(this).text().trim());
    });
    return items;
  }
  function saveSort() {
    Storage.set('menu_sort', getSort());
  }
  function orderSort() {
    var items = Storage.get('menu_sort', '[]');
    if (items.length) {
      var list = $('.menu__list:eq(0)', html$4);
      items.forEach(function (item) {
        var el = $('.menu__item:contains("' + item + '")', list);
        if (el.length) el.appendTo(list);
      });
    }
  }
  function hideItems() {
    var items = Storage.get('menu_hide', '[]');
    $('.menu__item', html$4).removeClass('hidden');
    if (items.length) {
      var list = $('.menu__list:eq(0)', html$4);
      items.forEach(function (item) {
        var el = $('.menu__item:contains("' + item + '")', list);
        if (el.length) el.addClass('hidden');
      });
    }
  }
  function enableEditMode() {
    html$4.addClass('editable');
    edit_mode = true;
    scroll.update($(last), true);
  }
  function disableEditMode() {
    html$4.removeClass('editable');
    edit_mode = false;
    if (sort_item) {
      sort_item.removeClass('traverse');
      sort_item = false;
    }
    if ($(last).hasClass('hidden')) {
      var list = $('.menu__list:eq(0)', html$4);
      var items = $('.menu__item', list);
      var inx = items.index($(last));
      var nohide = items.not('.hidden');
      if (nohide.eq(inx).length) last = nohide.eq(inx)[0];else if (nohide.eq(inx - 1).length) last = nohide.eq(inx - 1)[0];else last = nohide.eq(0)[0];
      Controller.collectionFocus(last, html$4);
      scroll.update($(last), true);
    }
  }
  function bindItems() {
    var list = $('.menu__list:eq(0)', html$4);
    $('.menu__item', list).not('.binded').each(function () {
      var item = $(this);
      item.on('hover:long', function () {
        if (typeof MutationObserver !== 'undefined') enableEditMode();
      });
      item.addClass('binded');
    });
  }
  function prepared(action, name) {
    if (name.indexOf(action) >= 0) {
      var comp = Prisma.Activity.active().component;
      if (name.indexOf(comp) >= 0) Activity$1.replace();else return true;
    }
  }
  function ready() {
    html$4.find('.selector').data('binded_events', true).on('hover:enter', function (e) {
      Trailer.destroy();
      var action = $(e.target).data('action');
      $(e.target).data('type');
      if (action == 'catalog') catalog();
      if (action == 'cartoons') {
        Activity$1.push({
          url: 'movie',
          title: 'Детям',
          component: 'category',
          genres: 16,
          source: Storage.field('source'),
          page: 1
        });
      }
      if (action == 'movie' || action == 'tv' || action == 'none' || action == 'anime') {
        Activity$1.push({
          url: action,
          title: action == 'movie' ? Lang.translate('menu_movies') : action == 'anime' ? Lang.translate('menu_anime') : Lang.translate('menu_tv'),
          component: 'category',
          source: action == 'anime' ? 'tmdb' : Storage.field('source')
        });
      }
      if (prepared(action, ['main'])) {
        Activity$1.push({
          url: '',
          title: Lang.translate('title_main'),
          component: 'main',
          source: Storage.field('source')
        });
      }
      if (action == "collections") {
        Activity$1.push({
          url: "",
          title: "Подборки",
          component: "collections",
          card_type: true,
          page: 1
        });
      }
      if (prepared(action, ['myperson'])) {
        Activity$1.push({
          title: Lang.translate('title_persons'),
          component: 'myperson'
        });
      }
      if (action == 'search') Controller.toggle('search');
      if (action == 'settings') {
        ParentalControl.personal('settings', function () {
          Controller.toggle('settings');
        }, false, true);
      }
      if (action == 'about') {
        var about = Template.get('about');
        if (window.prisma_settings.white_use) {
          about.find('.about__contacts > div:eq(1)').remove();
        }
        if (Platform.is('android')) {
          about.find('.platform_android').removeClass('hide');
          about.find('.version_android').text(Platform.version('android'));
        }
        about.find('.version_app').text(Platform.version('app'));
        Modal.open({
          title: Lang.translate('title_about'),
          html: about,
          size: 'medium',
          onBack: function onBack() {
            Modal.close();
            Controller.toggle('content');
          }
        });
      }
      if (action == 'favorite') {
        ParentalControl.personal('bookmarks', function () {
          if (prepared('bookmarks', ['bookmarks'])) {
            Activity$1.push({
              url: '',
              title: Lang.translate('settings_input_links'),
              component: 'bookmarks',
              page: 1
            });
          }
        }, false, true);
      }
      if (action == 'history') {
        ParentalControl.personal('bookmarks', function () {
          if (prepared('favorite', ['favorite'])) {
            Activity$1.push({
              url: '',
              title: Lang.translate('title_history'),
              component: 'favorite',
              type: 'history',
              page: 1
            });
          }
        }, false, true);
      }
      if (action == 'subscribes') {
        Activity$1.push({
          url: '',
          title: Lang.translate('title_subscribes'),
          component: 'subscribes',
          page: 1
        });
      }
      if (prepared(action, ['timetable'])) {
        Activity$1.push({
          url: '',
          title: Lang.translate('title_timetable'),
          component: 'timetable',
          page: 1
        });
      }
      if (prepared(action, ['feed'])) {
        Activity$1.push({
          url: '',
          title: Lang.translate('menu_feed'),
          component: 'feed',
          page: 1
        });
      }
      if (prepared(action, ['mytorrents'])) {
        Activity$1.push({
          url: '',
          title: Lang.translate('title_mytorrents'),
          component: 'mytorrents',
          page: 1
        });
      }
      if (prepared(action, ['relise'])) {
        Activity$1.push({
          url: '',
          title: Lang.translate('title_relises'),
          component: 'relise',
          page: 1
        });
      }
      if (action == 'console') {
        Controller.toggle('console');
      }
      if (action == 'filter') Filter.show();
    }).on('hover:focus', function (e) {
      last = e.target;
      scroll.update($(e.target), true);
    }).on('hover:hover hover:touch', function (e) {
      last = e.target;
    });
  }
  function catalog() {
    Api.menu({
      source: Storage.field('source')
    }, function (menu) {
      Select.show({
        title: Lang.translate('title_catalog'),
        items: menu,
        onSelect: function onSelect(a) {
          var tmdb = Storage.field('source') == 'tmdb' || Storage.field('source') == 'cub';
          Activity$1.push({
            url: Storage.field('source') == 'tmdb' ? 'movie' : 'movie',
            title: a.title || Lang.translate('title_catalog'),
            component: tmdb ? 'category' : 'category_full',
            genres: a.id,
            id: a.id,
            source: Storage.field('source'),
            card_type: true,
            page: 1
          });
        },
        onBack: function onBack() {
          Controller.toggle('menu');
        }
      });
    });
  }
  function render$2() {
    return scroll.render();
  }
  var Menu = {
    render: render$2,
    init: init$k,
    ready: ready
  };

  function render$1() {
    var icon = "<svg width=\"31\" height=\"31\" viewBox=\"0 0 31 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M10.3284 2.65796C10.9444 2.42359 11.2538 1.73426 11.0195 1.11836C10.7851 0.502379 10.0959 0.192997 9.4799 0.427361C8.86391 0.661725 8.55453 1.35097 8.7889 1.96696C9.0231 2.58286 9.71243 2.89224 10.3284 2.65796ZM19.7477 27.4181C19.1317 27.6524 18.8223 28.3417 19.0566 28.9577C19.291 29.5736 19.9802 29.883 20.5962 29.6487C21.2122 29.4144 21.5216 28.725 21.2873 28.1091C21.053 27.4932 20.3637 27.1838 19.7477 27.4181ZM0.77644 8.63687C0.506595 9.23813 0.775168 9.94433 1.37643 10.2142C1.9777 10.484 2.68389 10.2154 2.95374 9.6141C3.22358 9.01284 2.95493 8.30664 2.35374 8.0368C1.75248 7.76703 1.04629 8.0356 0.77644 8.63687ZM29.2997 21.4391C29.5695 20.8378 29.3009 20.1316 28.6996 19.8618C28.0983 19.5919 27.3922 19.8606 27.1223 20.4618C26.8524 21.063 27.121 21.7692 27.7223 22.0391C28.3236 22.3089 29.0298 22.0403 29.2997 21.4391ZM28.9577 11.0193C29.5737 10.785 29.8831 10.0957 29.6487 9.47974C29.4144 8.86375 28.7251 8.55437 28.1091 8.78866C27.4932 9.02302 27.1838 9.71227 27.4181 10.3283C27.6524 10.9443 28.3418 11.2537 28.9577 11.0193ZM1.11836 19.0566C0.502379 19.291 0.192997 19.9802 0.427361 20.5962C0.661645 21.2122 1.35097 21.5216 1.96696 21.2872C2.58294 21.0528 2.89232 20.3636 2.65796 19.7476C2.42359 19.1316 1.73434 18.8223 1.11836 19.0566ZM20.4618 2.95374C21.0631 3.22358 21.7693 2.95493 22.0391 2.35374C22.309 1.75248 22.0403 1.04629 21.4391 0.776441C20.8378 0.506596 20.1317 0.775248 19.8618 1.37651C19.5919 1.9777 19.8606 2.68389 20.4618 2.95374ZM9.61418 27.1223C9.01292 26.8524 8.30672 27.1211 8.03688 27.7224C7.76703 28.3236 8.03568 29.0298 8.63695 29.2997C9.23821 29.5695 9.94441 29.3009 10.2143 28.6996C10.4841 28.0982 10.2154 27.3921 9.61418 27.1223ZM5.77605 7.46362C5.81312 7.46473 5.85019 7.46473 5.88695 7.46696L7.70912 7.57587L7.67085 5.98337L6.09204 4.40455C5.62609 3.93861 4.87049 3.93861 4.40447 4.40455C3.93845 4.87049 3.93853 5.62609 4.40447 6.09212L5.77605 7.46362ZM3.42604 13.8447H1.1933C0.53428 13.8447 0 14.3789 0 15.038C0 15.697 0.53428 16.2313 1.1933 16.2313H3.13146C3.15843 16.2058 3.1854 16.1804 3.21324 16.1558L4.57925 14.9439L3.42604 13.8447ZM25.6715 6.09212C26.1375 5.62617 26.1376 4.87057 25.6715 4.40455C25.2056 3.93845 24.45 3.93861 23.984 4.40455L22.6135 5.77502C22.6125 5.81193 22.6113 5.84892 22.6091 5.88599L22.5001 7.7092L24.0927 7.67093L25.6715 6.09212ZM15.1322 4.57925L16.2313 3.42597V1.1933C16.2313 0.53428 15.6971 0 15.038 0C14.379 0 13.8447 0.53428 13.8447 1.1933V3.13265C13.87 3.15946 13.8958 3.18571 13.9203 3.2134L15.1322 4.57925ZM4.40455 23.9839C3.93861 24.4498 3.93853 25.2054 4.40455 25.6715C4.63756 25.9046 4.94297 26.021 5.24829 26.021C5.55362 26.021 5.8591 25.9045 6.09204 25.6715L7.4625 24.301C7.46354 24.2641 7.46473 24.2271 7.46696 24.19L7.57587 22.3668L5.98329 22.4051L4.40455 23.9839ZM28.8827 13.8447H26.9446C26.9178 13.8701 26.8907 13.8954 26.8629 13.9201L25.4968 15.1321L26.6501 16.2313H28.8827C29.5417 16.2313 30.076 15.697 30.076 15.038C30.076 14.3789 29.5417 13.8447 28.8827 13.8447ZM24.2999 22.6123C24.2646 22.6113 24.2292 22.6113 24.194 22.6092L22.3668 22.5001L22.4051 24.0927L23.9839 25.6715C24.2169 25.9045 24.5223 26.021 24.8276 26.021C25.133 26.021 25.4385 25.9045 25.6714 25.6715C26.1374 25.2055 26.1373 24.4499 25.6714 23.9839L24.2999 22.6123ZM14.9439 25.4968L13.8447 26.65V28.8827C13.8447 29.5417 14.379 30.076 15.038 30.076C15.6971 30.076 16.2313 29.5417 16.2313 28.8827V26.9434C16.2061 26.9166 16.1803 26.8903 16.1558 26.8626L14.9439 25.4968Z\" fill=\"currentColor\"/>\n    <path d=\"M20.0267 24.4582L19.9186 19.9629L24.3323 20.2266C24.8317 20.2555 25.2976 19.9708 25.4976 19.5116C25.5951 19.2874 25.6215 19.0386 25.573 18.7989C25.5246 18.5593 25.4037 18.3402 25.2267 18.1715L21.9716 15.0693L25.2789 12.1347C25.4618 11.9724 25.5904 11.7579 25.6474 11.5201C25.7043 11.2823 25.6868 11.0328 25.5973 10.8053C25.5078 10.5777 25.3505 10.3832 25.1468 10.248C24.9431 10.1128 24.7028 10.0434 24.4584 10.0492L19.963 10.1573L20.2267 5.74363C20.2412 5.49956 20.1804 5.25691 20.0525 5.04851C19.9247 4.84011 19.7358 4.67602 19.5116 4.57844C19.2875 4.48086 19.0387 4.45451 18.799 4.50294C18.5594 4.55137 18.3404 4.67224 18.1716 4.84922L15.0694 8.1043L12.1348 4.79703C11.9725 4.61415 11.758 4.48554 11.5202 4.4286C11.2824 4.37165 11.0329 4.38913 10.8054 4.47865C10.5778 4.56818 10.3833 4.72543 10.2481 4.92915C10.1129 5.13286 10.0435 5.37319 10.0493 5.61762L10.1574 10.1129L5.74374 9.84922C5.49967 9.83468 5.25701 9.89547 5.04861 10.0234C4.84022 10.1512 4.67613 10.34 4.57855 10.5642C4.48097 10.7884 4.45462 11.0372 4.50304 11.2769C4.55147 11.5165 4.67235 11.7355 4.84932 11.9042L8.10441 15.0066L4.79706 17.941C4.61414 18.1033 4.4855 18.3178 4.42854 18.5557C4.37159 18.7935 4.38906 19.043 4.4786 19.2706C4.66205 19.7367 5.11821 20.0393 5.61765 20.0266L10.113 19.9186L9.84933 24.3321C9.83479 24.5762 9.89558 24.8189 10.0235 25.0273C10.1513 25.2357 10.3402 25.3998 10.5644 25.4973C10.7885 25.5949 11.0373 25.6213 11.277 25.5728C11.5166 25.5244 11.7356 25.4035 11.9044 25.2266L15.0066 21.9715L17.9412 25.2788C18.1034 25.4618 18.318 25.5905 18.5558 25.6475C18.7936 25.7045 19.0432 25.687 19.2708 25.5975C19.4983 25.508 19.6929 25.3506 19.8281 25.1469C19.9633 24.9431 20.0326 24.7027 20.0267 24.4582Z\" fill=\"currentColor\"/>\n    </svg>";
    var text = {
      ru: "\u0422\u0440\u0438 \u0433\u043E\u0434\u0430 \u043D\u0430\u0437\u0430\u0434 \u043C\u044B \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u043B\u0438 \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 Prisma, \u0447\u0442\u043E\u0431\u044B \u043F\u043E\u0434\u0430\u0440\u0438\u0442\u044C \u0432\u0430\u043C \u043C\u0438\u0440 \u043B\u044E\u0431\u0438\u043C\u044B\u0445 \u0444\u0438\u043B\u044C\u043C\u043E\u0432, \u0441\u0435\u0440\u0438\u0430\u043B\u043E\u0432 \u0438 \u043C\u0443\u043B\u044C\u0442\u0444\u0438\u043B\u044C\u043C\u043E\u0432 \u0432 \u0443\u0434\u043E\u0431\u043D\u043E\u043C \u0444\u043E\u0440\u043C\u0430\u0442\u0435. \u0411\u043B\u0430\u0433\u043E\u0434\u0430\u0440\u044F \u0432\u0430\u043C, \u043D\u0430\u0448\u0435\u043C\u0443 \u0441\u043E\u043E\u0431\u0449\u0435\u0441\u0442\u0432\u0443, \u043C\u044B \u0441\u0442\u0430\u043B\u0438 \u0431\u043E\u043B\u044C\u0448\u0435, \u043B\u0443\u0447\u0448\u0435 \u0438 \u0438\u043D\u0442\u0435\u0440\u0435\u0441\u043D\u0435\u0435! \u0412 \u0447\u0435\u0441\u0442\u044C \u043D\u0430\u0448\u0435\u0433\u043E \u0434\u043D\u044F \u0440\u043E\u0436\u0434\u0435\u043D\u0438\u044F \u043C\u044B \u043F\u043E\u0434\u0433\u043E\u0442\u043E\u0432\u0438\u043B\u0438 \u043E\u0441\u043E\u0431\u044B\u0439 \u043F\u043E\u0434\u0430\u0440\u043E\u043A: \u0441\u043A\u0438\u0434\u043A\u0438 \u043D\u0430 \u043F\u043E\u0434\u043F\u0438\u0441\u043A\u0443 CUB Premium! \u0422\u0435\u043F\u0435\u0440\u044C \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044C \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u044C \u043D\u0430\u0441\u043B\u0430\u0434\u0438\u0442\u044C\u0441\u044F \u0432\u0441\u0435\u043C\u0438 \u043F\u0440\u0435\u0438\u043C\u0443\u0449\u0435\u0441\u0442\u0432\u0430\u043C\u0438 \u043F\u0440\u0435\u043C\u0438\u0443\u043C-\u0444\u0443\u043D\u043A\u0446\u0438\u0439 \u043F\u043E \u0435\u0449\u0451 \u0431\u043E\u043B\u0435\u0435 \u0432\u044B\u0433\u043E\u0434\u043D\u043E\u0439 \u0446\u0435\u043D\u0435.\n        <br><br>\n        \u0410\u043A\u0446\u0438\u044F \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 10 \u0434\u043D\u0435\u0439 \u2014 \u0441 20 \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F \u043F\u043E 30 \u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F! \u041D\u0435 \u0443\u043F\u0443\u0441\u0442\u0438\u0442\u0435 \u0448\u0430\u043D\u0441 \u0441\u0442\u0430\u0442\u044C \u0447\u0430\u0441\u0442\u044C\u044E \u043A\u043B\u0443\u0431\u0430 CUB Premium \u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C \u043E\u0442 \u0432\u0430\u0448\u0435\u0433\u043E \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F! \u0412\u0441\u0435 \u043F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0441\u0442\u0438 \u043D\u0430 \u043D\u0430\u0448\u0435\u043C \u0441\u0430\u0439\u0442\u0435 <a href=\"https://cub.red/premium\" target=\"_blank\">cub.red/premium</a>\n        <br><br>\n        \u0421\u043F\u0430\u0441\u0438\u0431\u043E, \u0447\u0442\u043E \u0432\u044B\u0431\u0438\u0440\u0430\u0435\u0442\u0435 Prisma \u0438 \u043F\u0440\u0430\u0437\u0434\u043D\u0443\u0435\u0442\u0435 \u0432\u043C\u0435\u0441\u0442\u0435 \u0441 \u043D\u0430\u043C\u0438!",
      uk: "\u0422\u0440\u0438 \u0440\u043E\u043A\u0438 \u0442\u043E\u043C\u0443 \u043C\u0438 \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u043B\u0438 \u0434\u043E\u0434\u0430\u0442\u043E\u043A Prisma, \u0449\u043E\u0431 \u043F\u043E\u0434\u0430\u0440\u0443\u0432\u0430\u0442\u0438 \u0432\u0430\u043C \u0441\u0432\u0456\u0442 \u0443\u043B\u044E\u0431\u043B\u0435\u043D\u0438\u0445 \u0444\u0456\u043B\u044C\u043C\u0456\u0432, \u0441\u0435\u0440\u0456\u0430\u043B\u0456\u0432 \u0442\u0430 \u043C\u0443\u043B\u044C\u0442\u0444\u0456\u043B\u044C\u043C\u0456\u0432 \u0443 \u0437\u0440\u0443\u0447\u043D\u043E\u043C\u0443 \u0444\u043E\u0440\u043C\u0430\u0442\u0456. \u0417\u0430\u0432\u0434\u044F\u043A\u0438 \u0432\u0430\u043C, \u043D\u0430\u0448\u0456\u0439 \u0441\u043F\u0456\u043B\u044C\u043D\u043E\u0442\u0456, \u043C\u0438 \u0441\u0442\u0430\u043B\u0438 \u0431\u0456\u043B\u044C\u0448\u0438\u043C\u0438, \u043A\u0440\u0430\u0449\u0438\u043C\u0438 \u0442\u0430 \u0446\u0456\u043A\u0430\u0432\u0456\u0448\u0438\u043C\u0438! \u041D\u0430 \u0447\u0435\u0441\u0442\u044C \u043D\u0430\u0448\u043E\u0433\u043E \u0434\u043D\u044F \u043D\u0430\u0440\u043E\u0434\u0436\u0435\u043D\u043D\u044F \u043C\u0438 \u043F\u0456\u0434\u0433\u043E\u0442\u0443\u0432\u0430\u043B\u0438 \u043E\u0441\u043E\u0431\u043B\u0438\u0432\u0438\u0439 \u043F\u043E\u0434\u0430\u0440\u0443\u043D\u043E\u043A: \u0437\u043D\u0438\u0436\u043A\u0438 \u043D\u0430 \u043F\u0456\u0434\u043F\u0438\u0441\u043A\u0443 CUB Premium! \u0422\u0435\u043F\u0435\u0440 \u0443 \u0432\u0430\u0441 \u0454 \u043C\u043E\u0436\u043B\u0438\u0432\u0456\u0441\u0442\u044C \u043D\u0430\u0441\u043E\u043B\u043E\u0434\u0438\u0442\u0438\u0441\u044F \u0432\u0441\u0456\u043C\u0430 \u043F\u0435\u0440\u0435\u0432\u0430\u0433\u0430\u043C\u0438 \u043F\u0440\u0435\u043C\u0456\u0443\u043C-\u0444\u0443\u043D\u043A\u0446\u0456\u0439 \u0437\u0430 \u0449\u0435 \u0431\u0456\u043B\u044C\u0448 \u0432\u0438\u0433\u0456\u0434\u043D\u043E\u044E \u0446\u0456\u043D\u043E\u044E.\n        <br><br>\n        \u0410\u043A\u0446\u0456\u044F \u0434\u0456\u0454 10 \u0434\u043D\u0456\u0432 \u2014 \u0437 20 \u0432\u0435\u0440\u0435\u0441\u043D\u044F \u0434\u043E 30 \u0432\u0435\u0440\u0435\u0441\u043D\u044F! \u041D\u0435 \u0432\u0442\u0440\u0430\u0442\u044C\u0442\u0435 \u0448\u0430\u043D\u0441 \u0441\u0442\u0430\u0442\u0438 \u0447\u0430\u0441\u0442\u0438\u043D\u043E\u044E \u043A\u043B\u0443\u0431\u0443 CUB Premium \u0442\u0430 \u043E\u0442\u0440\u0438\u043C\u0430\u0442\u0438 \u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C \u0432\u0456\u0434 \u0432\u0430\u0448\u043E\u0433\u043E \u0434\u043E\u0434\u0430\u0442\u043A\u0430! \u0423\u0441\u0456 \u0434\u0435\u0442\u0430\u043B\u0456 \u043D\u0430 \u043D\u0430\u0448\u043E\u043C\u0443 \u0441\u0430\u0439\u0442\u0456 <a href=\"https://cub.red/premium\" target=\"_blank\">cub.red/premium</a>.\n        <br><br>\n        \u0414\u044F\u043A\u0443\u0454\u043C\u043E, \u0449\u043E \u043E\u0431\u0438\u0440\u0430\u0454\u0442\u0435 Prisma \u0456 \u0441\u0432\u044F\u0442\u043A\u0443\u0454\u0442\u0435 \u0440\u0430\u0437\u043E\u043C \u0437 \u043D\u0430\u043C\u0438!"
    };
    var html = $("\n        <div class=\"birthday\">\n            <div class=\"birthday__poster\">\n                <img class=\"birthday__img\" />\n            </div>\n\n            <div class=\"birthday__text\">".concat(text[Storage.get('language', 'ru')], "</div>\n        </div>"));
    var btn = $('<div class="head__action selector icon--blink"></div>');
    btn.on('hover:enter', function () {
      Modal.open({
        title: '',
        size: 'medium',
        html: html,
        mask: false,
        onBack: function onBack() {
          Modal.close();
          Controller.toggle('head');
        }
      });
      Utils$2.imgLoad(html.find('img')[0], 'https://cdn.cub.red/img/other/birthday_3_years.jpg', function () {
        html.addClass('loaded');
      }, function () {
        html.addClass('noload');
      });
    });
    btn.append(icon);
    $('.head .head__actions .open--settings').after(btn);
  }
  function start$2() {
    var date_start = '2024-09-20T10:00:00';
    var date_end = '2024-09-30T22:00:00';
    var time_start = new Date(date_start).getTime();
    var time_end = new Date(date_end).getTime();
    var time_now = new Date().getTime();
    if (time_now > time_start && time_now < time_end && Lang.selected(['ru', 'uk'])) render$1();
  }
  var Birthday = {
    start: start$2
  };

  function app() {
    var app = $('#app').empty();
    var wrap = Template.get('wrap');
    wrap.find('.wrap__left').append(Menu.render());
    wrap.find('.wrap__content').append(Activity$1.render());
    app.append(Background.render());
    app.append(Head.render());
    app.append(wrap);
    app.append(Settings.render());
    app.append(Search.render());
    Birthday.start();
  }
  var Render = {
    app: app
  };

  var html$3;
  var object;
  function init$j() {
    html$3 = Template.get('iframe');
  }
  function show$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    object = params;
    html$3.find('iframe').attr('src', params.url)[0].onload = function () {
      html$3.addClass('iframe--loaded');
    };
    $('body').append(html$3);
    toggle$1();
  }
  function toggle$1() {
    Controller.add('iframe', {
      toggle: function toggle() {},
      back: close$1
    });
    Controller.toggle('iframe');
  }
  function close$1() {
    html$3.removeClass('iframe--loaded');
    html$3.detach();
    html$3.find('iframe').attr('src', '');
    if (object.onBack) object.onBack();
  }
  function render() {
    return html$3;
  }
  var Iframe = {
    init: init$j,
    show: show$1,
    close: close$1,
    render: render
  };

  var items = {};
  var times = 0;
  var html$2;
  var scroll_tabs;
  var scroll_body;
  var last_tab;
  function init$i() {
    Keypad.listener.follow('keydown', function (e) {
      if (e.code == 38 || e.code == 29460) {
        var enable = Controller.enabled();
        if (enable.name == 'head') {
          times++;
          if (times > 10) {
            Controller.toggle('console');
          }
        } else {
          times = 0;
        }
      }
    });
    Controller.add('console', {
      toggle: function toggle() {
        build();
        Controller.toggle('console-tabs');
      },
      back: back
    });
    Controller.add('console-tabs', {
      toggle: function toggle() {
        Controller.collectionSet(scroll_tabs.render());
        Controller.collectionFocus(scroll_tabs.render().find('.console__tab[data-name="' + Utils$2.hash(last_tab) + '"]')[0], scroll_tabs.render());
      },
      down: function down() {
        Controller.toggle('console-body');
      },
      right: function right() {
        Navigator.move('right');
      },
      left: function left() {
        Navigator.move('left');
      },
      back: back
    });
    follow();
  }
  function back() {
    times = 0;
    scroll_tabs.destroy();
    scroll_body.destroy();
    html$2.remove();
    Controller.toggle('head');
  }
  function show(name) {
    scroll_body.clear();
    scroll_body.reset();
    if (items[name]) {
      items[name].forEach(function (element) {
        var item = $(element);
        item.on('hover:focus', function (e) {
          scroll_body.update($(e.target));
        });
        if (name == 'Request') {
          item.on('hover:enter', function (e) {
            var str = item.text();
            var mth = str.match(/error of (.*?) :/);
            if (mth && mth[1]) {
              Iframe.show({
                url: mth[1],
                onBack: function onBack() {
                  Controller.toggle('console-body');
                }
              });
            }
          });
        }
        scroll_body.append(item);
      });
    }
    Controller.add('console-body', {
      toggle: function toggle() {
        Controller.collectionSet(scroll_body.render());
        Controller.collectionFocus(false, scroll_body.render());
      },
      up: function up() {
        if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('console-tabs');
      },
      down: function down() {
        Navigator.move('down');
      },
      back: back
    });
    Controller.toggle('console-body');
  }
  function tab(name, lines) {
    var elem = $('<div class="console__tab selector" data-name="' + Utils$2.hash(name) + '">' + Utils$2.shortText(name, 10) + ' - <span>' + lines.length + '</span></div>');
    elem.on('hover:enter', function () {
      show(name);
      last_tab = name;
    }).on('hover:focus', function (e) {
      scroll_tabs.update($(e.target));
    });
    scroll_tabs.append(elem);
    if (!last_tab) last_tab = name;
    if (last_tab == name) show(name);
  }
  function build() {
    html$2 = Template.get('console');
    scroll_body = new create$f({
      over: true,
      mask: true
    });
    scroll_tabs = new create$f({
      horizontal: true
    });
    for (var i in items) tab(i, items[i]);
    html$2.find('.console__tabs').append(HeadBackward(Lang.translate('menu_console'))).append(scroll_tabs.render());
    html$2.find('.console__body').append(scroll_body.render());
    scroll_body.height(html$2.find('.console__tabs'));
    $('body').append(html$2);
  }
  function add(name, message) {
    if (!items[name]) items[name] = [];
    var where = items[name];
    var time = Utils$2.parseTime(Date.now()).time;
    try {
      Arrays.insert(where, 0, '<div class="console__line selector"><span class="console__time">' + time + '</span> - <span>' + message + '</span></div>');
    } catch (e) {
      Arrays.insert(where, 0, '<div class="console__line selector"><span class="console__time">' + time + '</span> - <span>Failed to print line</span></div>');
    }
    if (where.length > 50) where.pop();
  }
  function escapeHtml(text) {
    return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  }
  function decode(arr) {
    if (Arrays.isObject(arr) || Arrays.isArray(arr)) {
      try {
        arr = JSON.stringify(arr);
      } catch (e) {
        arr = '[noview]';
      }
    } else if (typeof arr === 'string' || typeof arr === 'number' || typeof arr === 'boolean') {
      arr = escapeHtml(arr + '');
    } else {
      var a = [];
      for (var i in arr) {
        a.push(i + ': ' + arr[i]);
      }
      arr = JSON.stringify(a);
    }
    arr = Utils$2.shortText(arr, 600);
    return arr;
  }
  function follow() {
    var _get_logger_function = function _get_logger_function(func, color) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      return function () {
        var msgs = [];
        var mcon = [];
        while (arguments.length) {
          var arr = [].shift.call(arguments);
          msgs.push(decode(arr));
          mcon.push(arr);
        }
        var name = msgs[0];
        if (msgs.length < 2) {
          name = 'Other';
        } else {
          var spanColor = color || Utils$2.stringToHslColor(msgs[0], 50, 65);
          prefix = prefix ? ' ' + prefix : '';
          msgs[0] = '<span style="color: ' + spanColor + '">' + msgs[0] + prefix + '</span>';
          if (mcon.length > 0) {
            mcon[0] = '[' + mcon[0] + ']';
          }
        }
        add(name, msgs.join(' '));
        func.apply(console, mcon);
      };
    };
    console.log = _get_logger_function(console.log, null);
    console.error = _get_logger_function(console.error, 'red', 'ERROR');
    console.warn = _get_logger_function(console.warn, 'yellow', 'WARNING');
    window.addEventListener("error", function (e) {
      var welcome = $('.welcome');
      if (welcome.length) {
        welcome.fadeOut(500, function () {
          Noty.show('Error: ' + (e.error || e).message + '<br><br>' + stack, {
            time: 8000
          });
        });
      }
      var stack = (e.error && e.error.stack ? e.error.stack : e.stack || '').split("\n").join('<br>');
      var message = typeof e.error == 'string' ? e.error : (e.error || e).message;
      add('Script', message + '<br><br>' + stack);
      if (!(stack.indexOf('resetTopStyle') >= 0 || stack.indexOf('Blocked a frame') >= 0)) Noty.show('Error: ' + message + '<br><br>' + stack, {
        time: 8000
      });
    });
  }
  var Console = {
    init: init$i
  };

  function create$1() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var html = Template.get('files', params.movie);
    html.addClass('layer--width');
    if (params.movie.id) {
      html.find('.selector').on('hover:enter', function () {
        if (Activity$1.all().length > 1) {
          Activity$1.back();
        } else {
          Activity$1.push({
            url: params.movie.url,
            component: 'full',
            id: params.movie.id,
            method: params.movie.name ? 'tv' : 'movie',
            card: params.movie,
            source: params.movie.source
          });
        }
      });
    } else {
      html.find('.selector').removeClass('selector');
    }
    this.render = function () {
      return html;
    };
    this.append = function (add) {
      html.find('.files__body').append(add);
    };
    this.destroy = function () {
      html.remove();
      html = null;
    };
    this.clear = function () {
      html.find('.files__body').empty();
    };
  }

  function create() {
    var html;
    this.create = function () {
      html = Template.get('info');
    };
    this.update = function (data) {
      var nofavorite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var create = ((data.release_date || data.first_air_date || '0000') + '').slice(0, 4);
      var vote = parseFloat((data.vote_average || 0) + '').toFixed(1);
      html.find('.info__title').text(data.title);
      html.find('.info__title-original').text((create == '0000' ? '' : create + ' - ') + (data.original_title || ''));
      html.find('.info__vote span').text(vote);
      html.find('.info__vote').toggleClass('hide', !(vote > 0));
      html.find('.info__icon').removeClass('active');
      if (!nofavorite) {
        var status = Favorite.check(data);
        $('.icon--book', html).toggleClass('active', status.book);
        $('.icon--like', html).toggleClass('active', status.like);
        $('.icon--wath', html).toggleClass('active', status.wath);
      }
      html.find('.info__right').toggleClass('hide', nofavorite);
    };
    this.render = function () {
      return html;
    };
    this.empty = function () {
      this.update({
        title: Lang.translate('more'),
        original_title: Lang.translate('more_results'),
        vote_average: 0
      }, true);
    };
    this.destroy = function () {
      html.remove();
      html = null;
    };
  }

  var VideoQuality = {
    get: function get() {
      return '';
    },
    add: function add() {
      return false;
    }
  };

  /*
  let tizen = {
      ApplicationControlData: ()=>{},
      ApplicationControl: ()=>{},
      application:{
          launchAppControl: ()=>{}
      }
  }
  */

  /**
   * Запуск
   */
  function init$h() {
    if (typeof tizen !== 'undefined') {
      setInterval(lauchPick, 1000 * 60 * 10);
      lauchPick();
      deepLink();
      window.addEventListener('appcontrol', deepLink);
      try {
        console.log('Tizen', 'current id', tizen.application.getCurrentApplication().appInfo.id);
      } catch (e) {}
    }
  }

  /**
   * Установить данные
   * @param {{sections:[{title:string,position:integer,tiles:[{cardToTile}]}]}} data 
   */
  function setPick(data) {
    var service_id = tizen.application.getCurrentApplication().appInfo.id.split('.')[0] + '.service';
    var controll_data = new tizen.ApplicationControlData('caller', ['ForegroundApp', JSON.stringify(data)]);
    var controll_app = new tizen.ApplicationControl('http://tizen.org/appcontrol/operation/pick', null, 'image/*', null, [controll_data]);
    tizen.application.launchAppControl(controll_app, service_id, function () {
      console.log('Tizen', 'service', 'launch success');
    }, function (error) {
      console.log('Tizen', 'service', 'error:', JSON.stringify(error));
    });
  }

  /**
   * Карточку в данные
   * @param {{title:string, name:string, poster_path:string, release_date:string}} card - карточка
   * @param {string} subtitle 
   * @returns {{title:string, subtitle:string, image_ratio:string, image_url:string, action_data:string, is_playable:boolean}}
   */
  function cardToTile(card, subtitle) {
    var relise = ((card.release_date || card.first_air_date || '0000') + '').slice(0, 4);
    var elem = {
      title: card.title || card.name,
      subtitle: subtitle || relise,
      image_ratio: '1by1',
      image_url: card.poster ? card.poster : card.img ? card.img : 'http://imagetmdb.com/t/p/w300/' + card.poster_path,
      action_data: JSON.stringify(card),
      is_playable: false
    };
    return elem;
  }

  /**
   * Строим данные
   */
  function lauchPick() {
    var data = {
      sections: []
    };
    console.log('Tizen', 'start pick');
    var status = new status$2(3);
    status.onComplite = function (result) {
      if (result.popular) data.sections.push(result.popular);
      if (result.continues) data.sections.push(result.continues);
      if (result.notice) data.sections.push(result.notice);
      console.log('Tizen', 'set sections', data.sections.length);
      if (data.sections.length) setPick(data);
    };
    Account.notice(function (notices) {
      var new_notices = notices.filter(function (n) {
        return !n.viewed;
      }).slice(0, 3);
      if (new_notices.length) {
        var section = {
          title: Lang.translate('title_notice'),
          tiles: [],
          position: 0
        };
        new_notices.forEach(function (noty) {
          var info = JSON.parse(noty.data);
          section.tiles.push(cardToTile(info.card, info.type == 'new_episode' ? Lang.translate('notice_new_episode') : Lang.translate('notice_in_quality')));
        });
        status.append('notice', section);
      } else status.error();
    });
    TMDB.get('movie/popular', {}, function (result) {
      if (result.results.length) {
        var section = {
          title: Lang.translate('title_popular_movie'),
          position: 2,
          tiles: result.results.slice(0, 10).map(function (c) {
            return cardToTile(c);
          })
        };
        status.append('popular', section);
      } else status.error();
    }, status.error.bind(status));
    var continues = Favorite.continues('tv');
    if (continues.length) {
      var section = {
        title: Lang.translate('title_continue'),
        position: 1,
        tiles: continues.slice(0, 7).map(function (c) {
          return cardToTile(c);
        })
      };
      status.append('continues', section);
    } else status.error();
  }

  /**
   * Перехват запроса на открытие карточки
   */
  function deepLink() {
    var requestedAppControl = tizen.application.getCurrentApplication().getRequestedAppControl();
    if (requestedAppControl) {
      var appControlData = requestedAppControl.appControl.data;
      for (var i = 0; i < appControlData.length; i++) {
        if (appControlData[i].key == 'PAYLOAD') {
          var action_data = JSON.parse(appControlData[i].value[0]).values;
          var json = JSON.parse(action_data);
          window.start_deep_link = {
            url: json.url,
            component: 'full',
            id: json.id,
            method: json.name ? 'tv' : 'movie',
            card: json,
            source: json.source || 'tmdb'
          };
          if (window.appready) {
            Activity$1.push(window.start_deep_link);
          }
          console.log('Tizen', 'open deep link', window.start_deep_link);
        }
      }
    }
  }
  var Tizen = {
    init: init$h
  };

  function _0x29f5(n,e){var t=_0x426e();return(_0x29f5=function(n,e){return t[n-=363]})(n,e)}function NewsCardInfo(){for(var g,u,m=_0x29f5,i={IyEIj:m(690)+m(581)+m(440)+"1",lQkXs:function(n,e){return n===e},TGivj:m(607)+"e",mWxFP:m(599),feNjl:m(637),iYiGp:m(757)+m(803),nSegZ:m(1019)+m(708)+"ad",KWqDz:m(529),wmzuL:m(1019)+m(640)+m(543)+m(768)+m(969)+m(425)+m(638)+m(905)+"n",BeRCG:function(n,e){return n||e},XuGup:m(1014),gOlUN:m(1019)+m(1070)+m(1029),vpxpf:m(1019)+m(605)+m(627),FwxBF:m(669)+"t",ZHOnm:m(367)+m(1047)+m(408)+m(653),spglI:function(n,e){return e<n},RBwmn:function(n,e){return n(e)},rtAaK:function(n,e){return n+e},goNoz:m(1019)+m(640)+"ta",PAoxl:m(617)+m(405)+m(594)+m(841)+m(658)+m(496),rBSCF:m(1019)+m(1070)+m(997)+m(765),EbBxT:function(n,e){return e<n},KVdlP:m(709)+m(549),NQotd:m(631)+"de",EdlwS:m(382),ROrls:m(1019)+m(455)+m(421),oNMbY:m(934)+m(614)+m(987)+m(738)+m(823),vWcaQ:m(867),hVibw:function(n,e){return n+e},HJcLd:m(950),HjwOY:m(1019)+m(1046)+m(1058)+m(665),RhvuQ:m(934)+m(614)+m(940)+m(957)+m(843)+'">',WIuSN:function(n,e){return n*e},iuUYT:m(711),VkTOa:function(n,e,t){return n(e,t)},vrPqh:m(585),kmwRE:m(684),rslji:m(465)+m(633)+m(945)+m(910)+m(524)+m(555),CxrWW:m(790),CsUwn:m(769)+m(804),lnHAR:m(756),uJKoS:function(n,e){return n<e},qIzPK:function(n,e){return n(e)},kkNZq:m(829),aRXiu:m(885),DoSto:m(907),yIXIt:m(793),UBEDA:m(875),wHNfR:m(1019)+m(441)+"go",ZCCDg:m(495),vjWid:m(395),hFfbV:m(409)+m(1082)+m(1077),nhbwH:function(n,e){return n!==e},xHnjL:m(502),hWHTx:function(n){return n()}},n=i[m(947)][m(978)]("|"),e=0;;){switch(n[e++]){case"0":this[m(419)]=function(n){for(var e=m,t=p[e(453)][e(978)]("|"),i=0;;){switch(t[i++]){case"0":g[e(949)](p[e(736)])[e(792)](p[e(424)]);continue;case"1":this[e(610)](n);continue;case"2":g[e(949)](p[e(574)])[e(701)]();continue;case"3":var c=p[e(1083)](r,p[e(644)]);continue;case"4":g[e(949)](p[e(942)])[e(792)](n[e(770)]);continue;case"5":Background[e(637)](Api[e(815)](n[e(654)+e(413)],c));continue;case"6":g[e(949)](p[e(943)])[e(792)](n[e(739)]||Lang[e(1081)](p[e(475)]));continue}break}};continue;case"1":continue;case"2":this[m(610)]=function(n){for(var e=m,t=p[e(933)][e(978)]("|"),i=0;;){switch(t[i++]){case"0":if(o[c])return this[e(784)](o[c]);continue;case"1":u=p[e(710)](setTimeout,function(){var t=e;a[t(982)](),a[t(381)](5e3),a[t(422)](c,function(n){var e=t;o[c]=n,r[e(784)](n)})},300);continue;case"2":var c=TMDB$1[e(932)](p[e(392)](p[e(777)](p[e(1057)](p[e(547)](p[e(639)](p[e(375)](n[e(687)]?"tv":p[e(814)],"/"),n.id),p[e(821)]),TMDB$1[e(664)]()),p[e(812)]),Storage[e(611)](p[e(732)])));continue;case"3":p[e(591)](clearTimeout,u);continue;case"4":var r=this;continue}break}};continue;case"3":var o={};continue;case"4":this[m(701)]=function(){};continue;case"5":continue;case"6":var p={NoXXP:function(n,e){return i[m(371)](n,e)},mXtwv:i[m(466)],gzrlS:i[m(984)],XHAtP:i[m(964)],mKnCG:i[m(971)],fspgW:i[m(953)],llYQu:i[m(994)],vGIpX:i[m(800)],hkruz:function(n,e){return i[m(810)](n,e)},cGIkJ:i[m(893)],EfHhs:i[m(492)],hRDJY:i[m(437)],juevg:i[m(1015)],NvuGk:i[m(447)],EgSFi:function(n,e){return i[m(550)](n,e)},pGsKZ:function(n,e){return i[m(625)](n,e)},jsbEI:function(n,e){return i[m(577)](n,e)},XQxSE:i[m(694)],rQDcF:i[m(420)],VTCKA:i[m(831)],KBLjS:function(n,e){return i[m(515)](n,e)},CJLJu:i[m(989)],VVVtO:function(n,e){return i[m(550)](n,e)},fXmQH:i[m(805)],oWeNX:function(n,e){return i[m(550)](n,e)},luyXN:i[m(937)],vMGGv:i[m(911)],KDWnd:function(n,e){return i[m(577)](n,e)},lPRej:function(n,e){return i[m(577)](n,e)},iZFgp:i[m(826)],XpxaE:i[m(681)],YFzDU:function(n,e){return i[m(491)](n,e)},qDwGU:i[m(869)],awZEX:function(n,e){return i[m(515)](n,e)},naMgR:i[m(956)],jaOVR:function(n,e){return i[m(577)](n,e)},dqWhu:i[m(600)],ErvRu:function(n,e){return i[m(469)](n,e)},OjtOM:i[m(1085)],DgTfm:function(n,e,t){return i[m(986)](n,e,t)},otFzl:function(n,e){return i[m(491)](n,e)},gDrgx:function(n,e){return i[m(577)](n,e)},sunqm:function(n,e){return i[m(491)](n,e)},EOKMC:i[m(883)],myqZV:i[m(480)],DIlYI:i[m(833)],JYPTW:i[m(894)],bSLAh:function(n,e){return i[m(625)](n,e)},KaUEj:i[m(1017)],BMFsn:i[m(724)],hgEAQ:function(n,e){return i[m(696)](n,e)},gmnnM:function(n,e){return i[m(416)](n,e)},CJWaz:i[m(443)],EpdWu:i[m(486)],Kedyg:i[m(951)],dMqet:i[m(575)],tiQum:i[m(621)],voJPd:i[m(811)],vgmTK:i[m(541)],jUajw:i[m(844)],mbHRb:i[m(477)],zxjZT:function(n,e){return i[m(676)](n,e)},OUBKi:i[m(474)],esOYL:function(n){return i[m(782)](n)},scQws:function(n){return i[m(782)](n)}};continue;case"7":this[m(917)]=function(){var d=m,h={UQjRC:p[d(1079)],JdRFL:p[d(1013)],hmqZJ:p[d(732)],DDQzq:function(n,e){return p[d(1075)](n,e)},QmlJX:function(n,e){return p[d(564)](n,e)},Uzowd:function(n,e){return p[d(601)](n,e)},ccCta:p[d(816)],mhyyU:p[d(697)],Gfbqy:p[d(644)],cgtWA:p[d(595)],rUrMf:p[d(758)],XgzPH:p[d(622)],axKfi:p[d(572)],iSDRC:p[d(1059)],WyYqD:p[d(569)],jyyKZ:p[d(878)],YrjNa:p[d(942)],ChKka:function(n,e){return p[d(444)](n,e)},YnXUs:p[d(606)],EVwSR:function(n){return p[d(936)](n)}},e=p[d(591)](_asyncToGenerator,p[d(383)](_regeneratorRuntime)[d(891)](function n(t){var i,c,r,u,o,a,s,f,l=d,v={doJYu:h[l(846)],ddtoX:h[l(373)],vqOcs:h[l(385)],yZvNZ:function(n,e){return h[l(372)](n,e)},yroEn:function(n,e){return h[l(553)](n,e)},qGzkc:function(n,e){return h[l(918)](n,e)},RmxHA:h[l(428)],XgLri:h[l(473)],KVxAF:h[l(852)],YPWGu:function(n,e){return h[l(918)](n,e)},CQhIK:h[l(368)],voZZT:h[l(849)],yTzbh:h[l(528)],hmmzz:h[l(1008)],pdLXn:h[l(743)],gYkBi:h[l(493)],hmSgN:h[l(393)],NdKXR:h[l(534)],XZQvR:function(n,e){return h[l(727)](n,e)},wLCuO:h[l(903)]};return h[l(698)](_regeneratorRuntime)[l(671)](function(n){for(var e=l;;)switch(n[e(914)]=n[e(616)]){case 0:if(Storage[e(760)](v[e(660)])){n[e(616)]=2;break}return n[e(467)](v[e(391)]);case 2:i=Storage[e(611)](v[e(518)],"ru"),c=[i,"en"],["en","ru"][e(378)](i)||c[e(884)]("ru"),r=!1,u=0,o=c;case 7:if(v[e(963)](u,o[e(1074)]))return a=o[u],n[e(914)]=9,n[e(616)]=12,Api[e(872)+e(834)](t,a);n[e(616)]=46;break;case 12:if(!((s=n[e(407)])&&s[e(423)]&&v[e(774)](s[e(423)][e(1074)],0))){n[e(616)]=36;break}s=v[e(895)](_createForOfIteratorHelper,s[e(423)]),n[e(914)]=15,s.s();case 17:if((f=s.n())[e(542)])n[e(616)]=28;else{if((f=f[e(386)])[e(1042)][e(1024)](v[e(1071)])||f[e(1042)][e(1024)](v[e(484)]))return f=Api[e(815)](f[e(1042)],v[e(635)]),f=v[e(764)]($,v[e(983)])[e(679)](v[e(781)],f)[e(868)](v[e(819)]),g[e(949)](v[e(511)])[e(701)]()[e(623)](f),r=!0,logoLang=a,n[e(467)](v[e(876)],28);n[e(616)]=26}break;case 26:n[e(616)]=17;break;case 28:n[e(616)]=33;break;case 30:n[e(914)]=30,n.t0=n[v[e(762)]](15),s.e(n.t0);case 33:return n[e(914)]=33,s.f(),n[e(559)](33);case 36:n[e(616)]=41;break;case 38:n[e(914)]=38,n.t1=n[v[e(762)]](9),console[e(612)](v[e(952)],n.t1);case 41:if(r)return n[e(467)](v[e(876)],46);n[e(616)]=43;break;case 43:u++,n[e(616)]=7;break;case 46:r?g[e(949)](v[e(472)])[e(1011)](v[e(397)](i,c[0])):(g[e(949)](v[e(511)])[e(701)](),g[e(949)](v[e(472)])[e(672)]());case 47:case v[e(874)]:return n[e(786)]()}},n,null,[[9,38],[15,30,33,36]])}));return function(n){return e[d(446)](this,arguments)}}();continue;case"8":this[m(435)]=function(){var t=m,i={GklNL:function(n,e){return p[_0x29f5(772)](n,e)},DvIwz:p[t(935)]};g=Template[t(611)](p[t(1023)]),Storage[t(817)][t(418)](p[t(813)],function(n){var e=t;i[e(517)](n[e(687)],i[e(487)])&&(r=n[e(386)])})};continue;case"9":this[m(784)]=function(n){for(var e,t,i,c=m,r=p[c(662)][c(978)]("|"),u=0;;){switch(r[u++]){case"0":p[c(1035)](v[c(1074)],0)&&l[c(884)](v[c(1065)](", "));continue;case"1":var o=p[c(415)](parseFloat,p[c(392)](n[c(478)+"ge"]||0,""))[c(608)](1);continue;case"2":var a=null;continue;case"3":var s=Api[c(683)][c(560)][c(835)](n);continue;case"4":this[c(917)](n);continue;case"5":a&&a[c(809)]&&p[c(1035)](a[c(809)][c(384)],0)&&Timeline$1[c(822)]&&(e=Timeline$1[c(822)](a[c(809)]," ")[0],p[c(415)]($,g)[c(949)](p[c(899)])[c(623)](p[c(714)])[c(949)](p[c(632)])[c(623)](e));continue;case"6":g[c(949)](p[c(736)])[c(701)]()[c(623)](l[c(1065)](", "));continue;case"7":p[c(573)](n[c(693)+c(746)],0)||n[c(1009)+c(539)]?(e=Storage[c(611)](p[c(759)],"{}")[Utils$2[c(590)](n[c(779)+c(561)]||n[c(687)])])&&(t=Utils$2[c(590)]([e[c(909)],p[c(1035)](e[c(909)],10)?":":"",e[c(488)],n[c(779)+c(561)]||n[c(687)]][c(1065)]("")),t=Timeline$1[c(809)](t),p[c(399)](t[c(384)],0))&&(a={ep:{episode_number:e[c(488)],season_number:e[c(909)],name:p[c(392)](p[c(392)](Lang[c(1081)](p[c(580)])," "),e[c(488)])},view:t}):(t=Utils$2[c(590)](n[c(779)+c(561)]||n[c(687)]),i=Timeline$1[c(809)](t),p[c(564)](i[c(384)],0)&&(a={ep:{episode_number:null,name:n[c(770)]||n[c(779)+c(561)]||n[c(687)]},view:i}));continue;case"8":g[c(949)](p[c(899)])[c(1018)](f[c(1065)](p[c(924)]));continue;case"9":p[c(399)](o,0)&&g[c(949)](p[c(880)])[c(1018)](p[c(777)](p[c(535)](p[c(523)],o),p[c(1028)]));continue;case"10":p[c(620)](n[c(1069)+"te"]||n[c(1009)+c(539)]||p[c(1036)],"")[c(508)](0,4);continue;case"11":var f=[];continue;case"12":n[c(380)]&&p[c(589)](n[c(380)][c(1074)],0)&&f[c(884)](n[c(380)][c(468)](function(n){var e=c;return Utils$2[e(634)+e(1067)+"r"](n[e(687)])})[c(1065)](p[c(924)]));continue;case"13":var l=[];continue;case"14":s&&g[c(949)](p[c(366)])[c(1018)](p[c(547)](p[c(620)](p[c(521)],s),p[c(1028)]));continue;case"15":n[c(403)]&&f[c(884)](Utils$2[c(545)+c(828)](p[c(962)](n[c(403)],60),!0));continue;case"16":var v=Api[c(683)][c(560)][c(704)+c(563)](n);continue}break}};continue;case"10":var a=new create$e;continue;case"11":this[m(938)]=function(){g[m(901)](),o={},g=null};continue;case"12":var r=Storage[m(760)](i[m(466)]);continue;case"13":this[m(808)]=function(){return g};continue}break}}function NewsCards(u){for(var o,a,s,h=_0x29f5,i={RbvZQ:h(741)+h(988)+h(879)+h(538)+h(916)+h(763)+h(603)+h(1060)+h(666)+h(948)+h(520),znZtz:function(n,e){return n(e)},uLeiz:h(934)+h(614)+h(593)+h(438)+h(396)+h(1062)+h(934)+h(993)+h(807)+h(450)+h(462),LsgiQ:h(607)+"e",SGPUj:function(n,e){return n==e},sbcYz:h(861)+h(862),TZVkQ:h(809),WdLgi:function(n,e){return n==e},lhdJb:h(925)+h(862),oWHkH:h(853),bHaMe:h(663)+h(464)+h(1016),iGtqM:function(n,e){return n===e},XJfdZ:h(500)+h(877),kqcFB:function(n,e){return n(e)},MncUx:function(n,e){return n(e)},XMWjx:function(n,e,t){return n(e,t)},vopXj:h(637),eHMRh:h(840),XVOHD:h(560),Qddkp:h(675)+h(689),IIKuM:function(n,e){return n+e},GsEpa:h(934)+h(745)+h(628)+h(955)+h(744)+h(588)+h(364),sVQOI:h(1068)+h(992),hagmg:h(630)+"v>",IpRNP:h(449),jRLbe:h(888)+"r",OVQBj:h(707)+h(586)+h(505),CktDL:function(n,e){return e<n},PRSuc:h(785)+h(908),svhhz:h(980)+h(1005),fCNNi:function(n,e){return n(e)},ykhqG:function(n,e){return n===e},EzagR:function(n,e){return n===e},ElUZd:function(n,e){return n===e},zjMoL:function(n,e,t){return n(e,t)},mqgOm:h(395),BBrQx:function(n,e,t){return n(e,t)},iPHEj:h(512)+h(1061)+h(825)+h(854),ukUHm:h(642),HqcUm:h(886),BYEkI:h(406),dbyAW:h(612),IcdlS:h(866),tSCMd:h(439)+h(526),nwMdm:h(1064),CmTmX:h(530),AbPDd:h(470),Uomly:h(960)+h(921),rGVDq:h(695),UjeNj:h(715),MWMgd:function(n,e){return n(e)},gIsXu:h(794),iCqBv:function(n,e,t){return n(e,t)},ttzkd:h(519),AvCAP:h(410)+h(1001)+h(944),Xjdjs:h(870),izGzi:h(1049)+h(400)+h(481)+h(1007),poadh:h(578)+h(974)+h(1055),lixhR:h(412)+h(548),MMuMV:function(n,e){return e<=n},iuzGY:function(n,e){return n-e},nvxvh:function(n,e){return n!==e},dihAu:h(1049)+h(645)+h(557)+h(920),pxVaz:h(931)+h(778),kWugF:function(n,e){return n!==e},Dcvfl:function(n,e){return n&&e},stSJs:h(944),ZHqcg:h(1049)+h(890)+h(776),GyjFp:h(847)+"2",epzyU:h(716)+h(941),srGOc:function(n,e){return n(e)},aQyNH:h(647),PYQGc:h(1022),hXOLH:h(414),mHNXS:h(1014),jghCr:h(483),leFfg:h(771),akEtI:h(892)+h(432)+h(750)+h(926),dazDA:h(711),TMgDq:function(n,e){return n<e},vOgyX:h(733),TewiS:h(490),tUwrV:h(791),vzrVY:h(848),PafOW:h(626),EDPLe:h(882),dgsrQ:h(363)+h(692)+h(865)+h(1034),UJiEJ:function(n,e){return n(e)},gorFa:function(n,e){return n(e)},ztPRO:function(n,e){return n!==e},ZddrA:h(663)+h(729)},n=i[h(448)][h(978)]("|"),e=0;;){switch(n[e++]){case"0":var f=i[h(436)]($,i[h(721)]);continue;case"1":var l=[];continue;case"2":this[h(667)]=function(){var e=h,t={vhzxB:b[e(970)],fUzfT:b[e(427)]},i=this;Controller[e(754)](b[e(597)],{link:this,toggle:function(){var n=e;if(i[n(851)][n(967)]())return!1;l[n(1074)]&&l[m][n(1011)]()},update:function(){},left:function(){var n=e;Navigator[n(567)](b[n(451)])?Navigator[n(977)](b[n(451)]):Controller[n(1011)](b[n(713)])},right:function(){var n=e;Navigator[n(977)](t[n(649)])},up:function(){var n=e;Navigator[n(567)]("up")?Navigator[n(977)]("up"):Controller[n(1011)](t[n(1030)])},down:function(){var n=e;Navigator[n(567)](b[n(1076)])&&Navigator[n(977)](b[n(1076)])},back:this[e(961)]}),Controller[e(1011)](b[e(597)])};continue;case"3":var v=Storage[h(760)](i[h(742)]);continue;case"4":this[h(623)]=function(n){for(var t=h,e=b[t(975)][t(978)]("|"),i=0;;){switch(e[i++]){case"0":n[t(820)]=!0;continue;case"1":c[t(798)]=function(){var n=t;b[n(845)](clearTimeout,d),r[n(377)+"er"]()};continue;case"2":c[t(802)]=this[t(961)][t(965)](this);continue;case"3":c[t(435)]();continue;case"4":var c=new create$l(n,{url:n[t(871)],card_small:!0,cardClass:n[t(859)],genres:u[t(380)],object:u,card_wide:!0,nomore:n[t(726)]});continue;case"5":l[t(884)](c);continue;case"6":c[t(752)]=function(){r[t(377)+"er"]()};continue;case"7":c[t(1e3)]=function(n){var e=t;s[e(419)](n),r[e(980)](n)};continue;case"8":c[t(897)+"e"]=s[t(701)][t(965)](s);continue;case"9":this[t(489)]&&(c[t(489)]=this[t(489)][t(965)](this));continue;case"10":c[t(582)]=this[t(848)][t(965)](this);continue;case"11":if(n[t(820)])return;continue;case"12":c[t(806)]=function(){m=l[t(1004)](c)};continue;case"13":c[t(747)]=this.up[t(965)](this);continue;case"14":var r=this;continue;case"15":k[t(623)](c[t(808)]());continue;case"16":c[t(461)]=function(n){var e=t;s[e(419)](n),r[e(980)](n)};continue}break}};continue;case"5":this[h(377)+"er"]=function(){for(var t=h,n=b[t(429)][t(978)]("|"),e=0;;){switch(n[e++]){case"0":b[t(592)](typeof Trailer,b[t(379)])&&Trailer[t(430)+t(929)]&&Trailer[t(430)+t(929)]();continue;case"1":j[t(624)+"s"](b[t(827)])[t(701)]();continue;case"2":b[t(959)](clearTimeout,d);continue;case"3":b[t(618)](c[t(1074)],0)&&c[t(734)](function(){var e=t;try{this[e(642)](),this[e(426)+"e"]=0,this[e(793)]="",this[e(610)]()}catch(n){console[e(612)](b[e(985)],n)}});continue;case"4":b[t(674)](C,g)&&b[t(930)](setTimeout,function(){var n=t;T[n(868)](i[n(587)])},100);continue;case"5":var i={PsmpR:b[t(827)]};continue;case"6":var c=j[t(949)](b[t(389)]);continue;case"7":b[t(856)](clearTimeout,y);continue;case"8":console[t(751)](b[t(896)]);continue}break}};continue;case"6":var g=null;continue;case"7":var d=null;continue;case"8":this[h(701)]=function(){for(var n,e=h,t=b[e(824)][e(978)]("|"),i=0;;){switch(t[i++]){case"0":this[e(667)]=c[e(667)];continue;case"1":var c=new Empty;continue;case"2":this[e(851)][e(691)](!1);continue;case"3":continue;case"4":f[e(623)](c[e(808)](n));continue;case"5":b[e(995)](u[e(840)],b[e(923)])&&(n=b[e(459)]($,b[e(609)](b[e(609)](b[e(972)],Lang[e(1081)](b[e(501)])),b[e(596)])))[e(949)](b[e(1066)]).on(b[e(912)],function(){var n=e;Storage[n(558)](b[n(369)],b[n(923)]),Activity$1[n(604)]({source:b[n(923)]})});continue;case"6":this[e(851)][e(1011)]();continue}break}};continue;case"9":continue;case"10":this[h(818)+"r"]=function(f){var l=h,v={rOBln:b[l(1037)],Udfyn:b[l(839)],UVxZM:b[l(968)],cOjWe:b[l(720)],wbzwy:b[l(827)],TERia:function(n,e){return b[l(556)](n,e)},KFhUa:function(n,e){return b[l(887)](n,e)}},d=this;b[l(761)](f,g)||Trailer[l(611)](f)[l(544)](function(n){var r=l,u={ymqkW:b[r(839)],FVEJJ:function(n,e,t){return b[r(753)](n,e,t)}};if(n&&b[r(643)](f,g))for(var e,t=b[r(677)][r(978)]("|"),i=0;;){switch(t[i++]){case"0":s.on(b[r(657)],function(){var n=r;v[n(1041)](s[0][n(426)+"e"],v[n(795)](s[0][n(981)],.5))&&(d[n(377)+"er"](),d[n(445)+n(678)](f))});continue;case"1":var c=b[r(434)](typeof n,b[r(991)])?n:n[r(871)];continue;case"2":j[r(868)](b[r(827)]);continue;case"3":j[r(623)](s);continue;case"4":s.on(b[r(858)],function(){var n=r;d[n(377)+"er"](),d[n(445)+n(678)](f)});continue;case"5":s.on(b[r(958)],function(){var n=r;T[n(624)+"s"](v[n(565)]),s[0][n(775)]=!0,s[0][n(533)]=0});continue;case"6":o?(s[r(679)](b[r(1044)],b[r(906)]),b[r(850)](typeof window[r(748)],b[r(379)])?((e=document[r(863)+r(718)](b[r(1012)]))[r(793)]=b[r(725)],document[r(733)][r(1031)+"d"](e),e[r(898)]=function(){u[r(703)](a,s[0],c)}):b[r(571)](a,s[0],c)):(e=b[r(740)]($,b[r(1002)],{src:c,type:b[r(1006)]}),s[r(623)](e));continue;case"7":var o=b[r(536)](b[r(730)](_typeof,n),b[r(498)])&&n[r(615)];continue;case"8":s[0][r(533)]=0;continue;case"9":j[r(701)]();continue;case"10":T[r(624)+"s"](b[r(827)]);continue;case"11":b[r(531)](b[r(959)](_typeof,n),b[r(498)])&&n[r(860)+r(801)];continue;case"12":var a=function(n,e){var t,i=r,c={REOgW:v[i(404)],nQrIv:v[i(457)]};window[i(748)]&&window[i(748)][i(787)+"d"]()?((t=new window[i(748)])[i(735)](e),t[i(719)+"a"](n),t.on(window[i(748)][i(442)][i(954)+i(537)],function(){var t=i;n[t(705)]()[c[t(927)]](function(n){var e=t;return console[e(751)](c[e(789)],n[e(755)])})})):n[i(1073)+"e"](v[i(598)])&&(n[i(793)]=e,n[i(922)+i(1084)](v[i(641)],function(){var t=i;n[t(705)]()[u[t(990)]](function(n){var e=t;return console[e(751)](c[e(789)],n[e(755)])})}))};continue;case"13":var s=b[r(930)]($,b[r(494)],{autoplay:!0,loop:!1,muted:!1,playsinline:!0,"webkit-playsinline":!0,class:b[r(1021)]});continue;case"14":s[0][r(775)]=!0;continue;case"15":s.on(b[r(506)],function(){var n=r;d[n(377)+"er"](),d[n(445)+n(678)](f)});continue}break}else d[r(445)+r(678)](f)})[b[l(839)]](function(){var n=l;d[n(445)+n(678)](f)})};continue;case"11":var m=0;continue;case"12":var p=null;continue;case"13":continue;case"14":var w=i[h(388)](Storage[h(760)](i[h(476)]),i[h(507)])||i[h(1053)](Storage[h(760)](i[h(629)]),i[h(799)]);continue;case"15":var c=new create$e;continue;case"16":var k=new create$f({mask:!0,over:!0,scroll_by_item:!0});continue;case"17":var T=f[h(949)](i[h(516)]);continue;case"18":this[h(980)]=function(t){for(var i=h,n=b[i(737)][i(978)]("|"),e=0;;){switch(n[e++]){case"0":this[i(377)+"er"]();continue;case"1":p=t.id;continue;case"2":if(b[i(471)](p,t.id))return;continue;case"3":Storage[i(760)](b[i(946)])&&t.id&&(y=b[i(562)](setTimeout,function(){var e=i;r[e(837)](t,g)&&r[e(797)](t.id,p)&&(d=r[e(390)](setTimeout,function(){var n=e;r[n(1072)](t,g)&&r[n(1033)](t.id,p)&&c[n(818)+"r"](t)},800))},200));continue;case"4":g=t;continue;case"5":var c=this;continue;case"6":this[i(445)+i(678)](t);continue;case"7":b[i(646)](clearTimeout,d);continue;case"8":var r={YKfys:function(n,e){return b[i(1025)](n,e)},MAkVi:function(n,e){return b[i(850)](n,e)},AlmFy:function(n,e){return b[i(482)](n,e)},PLAPv:function(n,e){return b[i(836)](n,e)},apjto:function(n,e,t){return b[i(740)](n,e,t)}};continue;case"9":b[i(959)](clearTimeout,y);continue}break}};continue;case"19":this[h(652)]=function(n){for(var t=h,e=b[t(783)][t(978)]("|"),i=0;;){switch(e[i++]){case"0":f[t(623)](s[t(808)]());continue;case"1":s=new NewsCardInfo;continue;case"2":this[t(851)][t(691)](!1);continue;case"3":k[t(1027)](s[t(808)]());continue;case"4":f[t(623)](k[t(808)]());continue;case"5":s[t(435)]();continue;case"6":o=n;continue;case"7":var c={BxZHZ:function(n,e){return b[t(514)](n,e)}};continue;case"8":var r=this;continue;case"9":this[t(851)][t(1011)]();continue;case"10":z&&(Layer[t(419)](f),Layer[t(913)](k[t(808)](!0)),k[t(504)]=this[t(648)][t(965)](this),k[t(656)]=function(n){var e=t;Controller[e(767)](r)||r[e(667)](),c[e(1048)](n,0)?r[e(848)]():c[e(1048)](m,0)&&r.up()});continue;case"11":n[t(508)](0,w?n[t(1074)]:2)[t(401)](this[t(623)][t(965)](this));continue}break}};continue;case"20":this[h(435)]=function(){var t=h,i=this;Storage[t(817)][t(418)](b[t(686)],function(n){var e=t;(b[e(531)](n[e(687)],b[e(568)])||b[e(531)](n[e(687)],b[e(928)]))&&(b[e(1056)](n[e(687)],b[e(928)])&&(v=n[e(386)],g)&&i[e(445)+e(678)](g),!Storage[e(760)](b[e(568)])&&b[e(536)](n[e(687)],b[e(568)])&&(b[e(842)](clearTimeout,d),i[e(377)+"er"]()),b[e(1056)](n[e(687)],b[e(568)]))&&(n[e(386)]?g&&(b[e(459)](clearTimeout,d),d=b[e(571)](setTimeout,function(){i[e(818)+"r"](g)},1e3)):(b[e(842)](clearTimeout,d),i[e(377)+"er"]()))})};continue;case"21":var y=null;continue;case"22":var b={TDaMH:function(n,e){return i[h(796)](n,e)},cpNLA:i[h(773)],qPRfE:i[h(742)],ZUDFY:function(n,e){return i[h(796)](n,e)},mujYP:function(n,e){return i[h(796)](n,e)},auTXp:function(n,e){return i[h(460)](n,e)},raplw:function(n,e){return i[h(973)](n,e)},sKYyv:function(n,e,t){return i[h(976)](n,e,t)},dhGfM:i[h(731)],WHFMF:i[h(650)],vjowr:i[h(579)],HhLLH:i[h(456)],EJnLN:function(n,e){return i[h(1053)](n,e)},DxiWD:function(n,e){return i[h(673)](n,e)},UCDtf:i[h(576)],ZuJyC:i[h(417)],YHDxe:i[h(1054)],WBBpT:i[h(570)],deGzn:i[h(832)],ckvmj:i[h(881)],zbTEu:function(n,e){return i[h(1039)](n,e)},zcUrA:i[h(1063)],UeTsG:function(n,e){return i[h(796)](n,e)},iVzJB:i[h(966)],SnhFt:function(n,e,t){return i[h(976)](n,e,t)},PtUgQ:function(n,e){return i[h(749)](n,e)},VRrWg:function(n,e){return i[h(889)](n,e)},Reboy:function(n,e){return i[h(998)](n,e)},zZeXZ:function(n,e){return i[h(889)](n,e)},NtTxo:function(n,e){return i[h(864)](n,e)},vEfqG:function(n,e,t){return i[h(659)](n,e,t)},jhNVj:function(n,e){return i[h(460)](n,e)},Mqgug:i[h(915)],pLwlW:function(n,e,t){return i[h(546)](n,e,t)},lBQZJ:function(n,e){return i[h(864)](n,e)},TwTcv:i[h(525)],jPydJ:i[h(717)],ZtKFN:function(n,e){return i[h(796)](n,e)},FwzDZ:i[h(522)],lINZc:i[h(1045)],jTBMr:i[h(374)],kLjCD:i[h(939)],ntXAg:i[h(904)],LKgDC:i[h(370)],kVEAO:i[h(685)],laUug:i[h(688)],pHtDy:i[h(454)],ZGXpG:i[h(700)],HVWPM:i[h(497)],UTWLV:function(n,e){return i[h(788)](n,e)},GHElC:i[h(619)],yRwto:function(n,e,t){return i[h(902)](n,e,t)},XXocF:i[h(1051)],PNlTJ:i[h(651)],TnMZN:i[h(398)],nJERN:i[h(1010)],oJfod:i[h(900)],esWeC:i[h(503)],mSRIW:function(n,e){return i[h(857)](n,e)},Prmlq:function(n,e){return i[h(996)](n,e)},GXxqi:function(n,e){return i[h(613)](n,e)},mkdhC:i[h(1052)],qKmtD:i[h(706)],cohfL:function(n,e){return i[h(376)](n,e)},JJaIa:function(n,e){return i[h(1039)](n,e)},BcLta:function(n,e){return i[h(387)](n,e)},Wkmca:i[h(728)],TQNBB:function(n,e){return i[h(973)](n,e)},NLGbr:i[h(513)],CoxRF:i[h(365)],amDpU:i[h(873)],oBiwk:function(n,e){return i[h(510)](n,e)},ykJQA:i[h(1020)],uuARC:i[h(1086)],zailb:i[h(1080)],CBSuP:i[h(682)],FyovQ:i[h(566)],gCKhj:i[h(584)],NaOJU:function(n,e){return i[h(436)](n,e)},XcWgm:i[h(979)],PtFgU:i[h(394)],zbIHy:function(n,e){return i[h(996)](n,e)},gzjqP:function(n,e){return i[h(527)](n,e)},eGgur:i[h(499)],VfuZe:i[h(1032)],JnmCH:i[h(1043)],BDwne:i[h(661)],USjkB:i[h(554)],eAWzB:i[h(411)],ioRWp:i[h(668)],hkAMs:function(n,e){return i[h(1078)](n,e)},UmCCW:function(n,e){return i[h(583)](n,e)},AnulM:function(n,e){return i[h(479)](n,e)}};continue;case"23":this[h(642)]=function(){};continue;case"24":this[h(648)]=function(){var t=h,i=this;this[t(616)]&&!this[t(452)]&&l[t(1074)]&&(this[t(452)]=!0,this[t(616)](function(n){var e=t;i[e(452)]=!1,n[e(401)](i[e(623)][e(965)](i)),Layer[e(913)](l[b[e(609)](m,1)][e(808)](!0))},function(){i[t(452)]=!1}))};continue;case"25":this[h(808)]=function(){return f};continue;case"26":var j=f[h(949)](i[h(1026)]);continue;case"27":this[h(938)]=function(){for(var n=h,e=b[n(602)][n(978)]("|"),t=0;;){switch(e[t++]){case"0":b[n(646)](clearTimeout,y);continue;case"1":s&&s[n(938)]();continue;case"2":k[n(938)]();continue;case"3":f[n(901)]();continue;case"4":Arrays[n(938)](l);continue;case"5":c=null;continue;case"6":l=null;continue;case"7":g=null;continue;case"8":o=null;continue;case"9":b[n(1040)](clearTimeout,d);continue;case"10":b[n(680)](clearTimeout,a);continue;case"11":b[n(670)](typeof Trailer,b[n(379)])&&Trailer[n(938)]&&Trailer[n(938)]();continue;case"12":p=null;continue;case"13":c[n(982)]();continue;case"14":this[n(377)+"er"]();continue}break}};continue;case"28":this[h(848)]=function(){for(var n=h,e=b[n(402)][n(978)]("|"),t=0;;){switch(e[t++]){case"0":l[m][n(1011)]();continue;case"1":k[n(419)](l[m][n(808)]());continue;case"2":w||o[n(508)](0,b[n(609)](m,2))[n(401)](this[n(623)][n(965)](this));continue;case"3":m=Math[n(702)](m,b[n(838)](l[n(1074)],1));continue;case"4":m++;continue}break}};continue;case"29":this[h(1003)]=function(){var n=h;this[n(851)][n(691)](!0),this[n(851)][n(655)+"sh"]=!0};continue;case"30":this[h(961)]=function(){var n=h;this[n(377)+"er"](),Activity$1[n(458)]()};continue;case"31":this.up=function(){var n=h;m--,b[n(699)](m,0)?(m=0,Controller[n(1011)](b[n(427)])):(l[m][n(1011)](),k[n(419)](l[m][n(808)]()))};continue;case"32":var z=i[h(857)](object$2[h(463)+"l"],166);continue;case"33":this[h(786)]=function(){};continue;case"34":var C="";continue;case"35":this[h(884)]=function(){};continue;case"36":this[h(445)+h(678)]=function(n){for(var c=h,e=b[c(919)][c(978)]("|"),t=0;;){switch(e[t++]){case"0":b[c(433)](clearTimeout,a);continue;case"1":if(b[c(850)](u,C))return void T[c(868)](b[c(827)]);continue;case"2":var r={XawQi:b[c(827)]};continue;case"3":var i=b[c(766)];continue;case"4":b[c(1056)](v,b[c(509)])?i=b[c(712)]:b[c(643)](v,b[c(855)])?i=b[c(766)]:b[c(482)](v,b[c(485)])&&(i=b[c(1038)]);continue;case"5":var u=Api[c(815)](n[c(654)+c(413)],i);continue;case"6":if(n&&n[c(654)+c(413)])continue;return;case"7":a=b[c(740)](setTimeout,function(){for(var e=c,n=b[e(532)][e(978)]("|"),t=0;;){switch(n[t++]){case"0":T[e(624)+"s"](b[e(827)]);continue;case"1":T[0][e(540)]=function(){var n=e;T[n(624)+"s"](r[n(636)])};continue;case"2":b[e(562)](setTimeout,function(){var n=e;T[0][n(793)]=C},300);continue;case"3":var i={AYqdb:b[e(827)]};continue;case"4":T[0][e(898)]=function(){var n=e;T[n(868)](i[n(780)])};continue;case"5":C=u;continue}break}},300);continue}break}};continue;case"37":continue}break}}function _0x426e(){var n=["rQDcF","video/mp4","2|6|3|4|5|","ukUHm","ent","attachMedi","esWeC","uLeiz","1024560NxEpXk","1219596bbClfB","lnHAR","pHtDy","nomore","ChKka","stSJs","t__trailer","UTWLV","vopXj","JYPTW","head","each","loadSource","fspgW","zcUrA","ating-valu","overview","vEfqG","22|15|16|1","LsgiQ","iSDRC","imple-butt",'="empty__f',"seasons","onUp","Hls","fCNNi","12|9|7|16|","log","onEnter","pLwlW","add","message","return","0|2|4|6|3|","dMqet","CJLJu","field","GXxqi","gYkBi","24|35|19|2","YPWGu","ails","ykJQA","own","ards-info_","card_inter","title","original","NoXXP","XJfdZ","yroEn","muted","ищен","KDWnd","3|1|4|8","original_t","AYqdb","voZZT","hWHTx","ckvmj","draw","8|5|7|9|2|","stop","isSupporte","MWMgd","REOgW","language","menu","text","src","object","KFhUa","iGtqM","PLAPv","onBlur","oWHkH","wmzuL","trailer","onBack","5|1","fice_logo","NQotd","onToggle","rt__traile","render","view","BeRCG","wHNfR","DIlYI","XHAtP","EOKMC","img","CJWaz","listener","loadTraile","yTzbh","ready","myqZV","details",'e">',"HhLLH","3|14|8|2|1","oNMbY","lINZc","ime",".png","1077VPVzAo","rBSCF","jRLbe","rslji","gos","parsePG","NtTxo","AlmFy","zbIHy","Mqgug","source","timeline-d","auTXp","tion-value","vjWid","NaOJU","UQjRC","3|0|4|1|5|","down","rUrMf","Reboy","activity","Gfbqy","mouse","5|5|0|4","CBSuP","TQNBB","MMuMV","jTBMr","cardClass","kinopoisk_","card_views","_type","createElem","ElUZd","1|3|6|5|8|","loadeddata","</div>","addClass","HJcLd","ended","url","getMovieLo","epzyU","wLCuO","movie-logo","pdLXn","iler","mbHRb","7|9|14|17|","vMGGv","OVQBj","content","vrPqh","push",".svg","string","Prmlq","hover:ente","ykhqG","Трейлер оч","mark","14|11|0|4|","XuGup","CxrWW","qGzkc","NLGbr","onFocusMor","onload","XQxSE","poadh","remove","iCqBv","YnXUs","tSCMd","restrictio","LKgDC","<img>","0|4|1|6|3","season","tings,rele","ROrls","deGzn","visible","prev","mqgOm","|7|3|20|8|","loadLogo","Uzowd","amDpU","идео:","ls/hls.js","addEventLi","vjowr","luyXN","navigation","1|8|6|15|5","nQrIv","qPRfE","ests","yRwto","5|2|7|0|6|","api","OjtOM","<div class","mXtwv","esOYL","EdlwS","destroy","IcdlS","ds-info__a","0|1|7","EfHhs","hRDJY","video","content_ra","iVzJB","IyEIj","9|23|33|25","find","0000","DoSto","hmSgN","nSegZ","MANIFEST_P",'v class="s',"HjwOY","ge-restric","kLjCD","jhNVj","./vender/h","back","ErvRu","yZvNZ","feNjl","bind","svhhz","canRefresh","oJfod","_rating,.n","USjkB","iYiGp","UCDtf","MncUx","n/vnd.appl","XcWgm","XMWjx","move","split","akEtI","background","duration","clear","CQhIK","mWxFP","mkdhC","VkTOa","ds-info__r","|0|11|32|3","KVdlP","ymqkW","FwzDZ","rce_on_cub",'="full-sta',"KWqDz","EJnLN","iuzGY","meline-det","EzagR","131246yBgHuW","onFocus","__trailer-","ZGXpG","refresh","indexOf","_trailer","HVWPM","едения:","axKfi","first_air_","izGzi","toggle","laUug","BMFsn","w300","FwxBF","und","CsUwn","html",".news-card","aQyNH","PNlTJ","w200","gzrlS","endsWith","VRrWg","ZddrA","minus","XpxaE","tle","fUzfT","appendChil","TewiS","MAkVi","7|12","EgSFi","qDwGU","nJERN","gCKhj","CktDL","hkAMs","TERia","file_path","tUwrV","ntXAg","BYEkI","s-info__ag","|16|3|0|14","BxZHZ","[Trailer] ","4948ChMdlj","ttzkd","dihAu","WdLgi","hagmg","e.mpegurl","ZUDFY","otFzl","e-restrict","vgmTK","|5|36|4|30","1|11|13|6|",'ckground">',"PRSuc","allow","join","WBBpT","FirstLette","change_sou","release_da","s-info__ti","RmxHA","YKfys","canPlayTyp","length","hgEAQ","BDwne","типа:","UJiEJ","KaUEj","hXOLH","translate","рузки лого","hkruz","stener","iuUYT","PYQGc","9|0|10|14|",'r">',"GyjFp","naMgR","10|1|13|11","cgtWA","WHFMF","nwMdm","lQkXs","DDQzq","JdRFL","dbyAW","sunqm","kWugF","clearTrail","includes","kVEAO","genres","timeout"," • ","scQws","percent","hmqZJ","value","Dcvfl","SGPUj","Wkmca","apjto","ddtoX","jsbEI","jyyKZ","dazDA","catch","-start__ba","XZQvR","Xjdjs","VVVtO","Ошибка авт","forEach","PtFgU","runtime","rOBln",'s="news-ca',"loaded","sent","|9|12|15|2","Ошибка заг","full-start","EDPLe","loadedmeta","ath","w780","pGsKZ","qIzPK","sVQOI","follow","update","PAoxl","ting","silent","logos","llYQu","ews-cards-","currentTim","eGgur","ccCta","qKmtD","cancelRequ","3355569aZKDUO","3|10|13|2|","oBiwk","ZtKFN","create","znZtz","vpxpf",'lass="full',"x-webkit-a","2|7|13|4|1","s-info__lo","Events","kkNZq","zxjZT","loadStatic","apply","ZHOnm","RbvZQ",".selector",'r"></div><',"VfuZe","next_wait","mKnCG","Uomly","s-info__ra","Qddkp","Udfyn","backward","raplw","kqcFB","onHover","/div>","app_digita","t__backgro","&append_to","TGivj","abrupt","map","WIuSN","script","UeTsG","NdKXR","mhyyU","xHnjL","juevg","sbcYz","hFfbV","vote_avera","ztPRO","kmwRE","овоспроизв","zZeXZ","w500","XgLri","FyovQ","aRXiu","DvIwz","episode","onMore","left","hVibw","gOlUN","WyYqD","XXocF","break","span>","UjeNj","GHElC","vOgyX","poster_tra","ZuJyC","end","lixhR","onEnd","0|2|9","TnMZN","TZVkQ","slice","uuARC","srGOc","hmmzz","12|10|9|7|","ZHqcg","zbTEu","EbBxT","bHaMe","GklNL","vqOcs","<video>","|27","dqWhu","HqcUm","iZFgp","ase_dates&","iPHEj","irplay","TMgDq","XgzPH","---","undefined","TDaMH","CoxRF","volume","YrjNa","lPRej","mujYP","ARSED","34|13|26|6","date","onerror","ZCCDg","done","ta,.news-c","then","secondsToT","BBrQx","jaOVR","data","ched_last","spglI","515552WliMda","914688nBdrcs","QmlJX","PafOW","language=","mSRIW"," очистке в","set","finish","tmdb","itle","SnhFt","ries","oWeNX","wbzwy","jghCr","canmove","cpNLA","jUajw","IpRNP","sKYyv","voJPd","KBLjS","vGIpX","yIXIt","GsEpa","rtAaK","applicatio","XVOHD","fXmQH","|12|8|0|9|","onDown","gorFa","leFfg","movie","3|11|0|4|1","PsmpR","on selecto","awZEX","hash","bSLAh","cohfL",'ds"><img c',"rds-info__","Kedyg","YHDxe","eAWzB","UVxZM","news_cards","RhvuQ","gmnnM","ioRWp","1|12|18|10","replace","s-info__de","OUBKi","poster_siz","toFixed","DxiWD","load","get","error","nvxvh",'="news-car',"hls","next","<span clas","JJaIa","gIsXu","YFzDU","UBEDA","tiQum","append","removeClas","RBwmn","right","scription",'ooter"><di',"lhdJb","</div></di","full_episo","VTCKA","_response=","capitalize","KVxAF","XawQi","change","info__age-","gDrgx","s-info__me","cOjWe","pause","lBQZJ","cGIkJ","Ошибка при","PtUgQ","w1280","loadNext","vhzxB","eHMRh","AvCAP","build","|7|6|8|5|4","backdrop_p","need_refre","onWheel","jPydJ",'etails"></',"zjMoL","doJYu","vzrVY","NvuGk",".full-star","key","ion","|28|31|2|2","start","dgsrQ","full_notex","AnulM","wrap","show","IIKuM","BcLta","3|5|1|4|0|","nhbwH","TwTcv","Background","attr","UmCCW","vWcaQ","mHNXS","sources","?api_key=","CmTmX","dhGfM","name","AbPDd","2|6","6|1|5|10|3","loader","11|13|4|2|","number_of_","goNoz","<source>","uJKoS","EpdWu","EVwSR","gzjqP","rGVDq","empty","min","FVEJJ","parseCount","play","pxVaz","7|8|6|1|5|","s-info__he","online_wat","DgTfm","4|3|2|0|1","zailb","JnmCH"];return(_0x426e=function(){return n})()}!function(){for(var n=_0x29f5,e=_0x426e();;)try{if(274406==+parseInt(n(999))+-parseInt(n(551))/2+parseInt(n(830))/3*(parseInt(n(1050))/4)+-parseInt(n(722))/5+-parseInt(n(723))/6+parseInt(n(431))/7+-parseInt(n(552))/8)break;e.push(e.shift())}catch(n){e.push(e.shift())}}();

  function component(object) {
    var scroll = new create$f({
      mask: true,
      over: true,
      scroll_by_item: true,
      end_ratio: 1.5
    });
    var items = [];
    var html = document.createElement('div');
    var active = 0;
    this.create = function () {};
    this.empty = function () {
      var button;
      if (object.source == 'tmdb') {
        button = $('<div class="empty__footer"><div class="simple-button selector">' + Lang.translate('change_source_on_cub') + '</div></div>');
        button.find('.selector').on('hover:enter', function () {
          Storage.set('source', 'cub');
          Activity$1.replace({
            source: 'cub'
          });
        });
      }
      var empty = new Empty();
      if (button) empty.append(button);
      empty.addInfoButton();
      html.appendChild(empty.render(true));
      this.start = empty.start;
      this.activity.loader(false);
      this.activity.toggle();
    };
    this.loadNext = function () {
      var _this = this;
      if (this.next && !this.next_wait && items.length) {
        this.next_wait = true;
        this.next(function (new_data) {
          _this.next_wait = false;
          if (!items.length) return;
          new_data.forEach(_this.append.bind(_this));
          Layer.visible(items[active + 1].render(true));
        }, function () {
          _this.next_wait = false;
        });
      }
    };
    this.build = function (data) {
      var _this2 = this;
      scroll.minus();
      scroll.onWheel = function (step) {
        if (!Controller.own(_this2)) _this2.start();
        if (step > 0) _this2.down();else if (active > 0) _this2.up();
      };
      scroll.onEnd = this.loadNext.bind(this);
      if (this.onLinesBuild) this.onLinesBuild(data);
      data.forEach(this.append.bind(this));
      html.appendChild(scroll.render(true));
      Layer.update(html);
      this.activity.loader(false);
      this.activity.toggle();
      Layer.visible(html);
    };
    this.append = function (element) {
      if (element.ready) return;
      element.ready = true;
      var item = new create$l(element, {
        url: element.url,
        genres: object.genres,
        object: object,
        card_big: element.big,
        card_wide: element.wide,
        card_small: element.small,
        card_broad: element.broad,
        card_collection: element.collection,
        card_continue: element["continue"],
        card_category: element.category,
        card_events: element.card_events,
        cardClass: element.cardClass,
        nomore: element.nomore,
        type: element.line_type || 'cards'
      });
      item.create();
      this.push(item, element);
    };
    this.back = function () {
      Activity$1.backward();
    };
    this.push = function (item, element) {
      item.onDown = this.down.bind(this);
      item.onUp = this.up.bind(this);
      item.onBack = this.back.bind(this);
      if (this.onMore) item.onMore = this.onMore.bind(this);
      items.push(item);
      if (this.onAppend) this.onAppend(item, element);
      scroll.append(item.render(true));
    };
    this.down = function () {
      active++;
      active = Math.min(active, items.length - 1);
      scroll.update(items[active].render(true));
      items[active].toggle();
    };
    this.up = function () {
      active--;
      if (active < 0) {
        active = 0;
        Controller.toggle('head');
      } else {
        items[active].toggle();
        scroll.update(items[active].render(true));
      }
    };
    this.start = function () {
      var _this3 = this;
      Controller.add('content', {
        link: this,
        toggle: function toggle() {
          if (_this3.activity.canRefresh()) return false;
          if (items.length) items[active].toggle();
        },
        update: function update() {},
        left: function left() {
          if (Navigator.canmove('left')) Navigator.move('left');else Controller.toggle('menu');
        },
        right: function right() {
          Navigator.move('right');
        },
        up: function up() {
          if (Navigator.canmove('up')) Navigator.move('up');else Controller.toggle('head');
        },
        down: function down() {
          if (Navigator.canmove('down')) Navigator.move('down');
        },
        back: this.back
      });
      Controller.toggle('content');
    };
    this.refresh = function () {
      this.activity.needRefresh();
    };
    this.pause = function () {};
    this.stop = function () {};
    this.render = function (js) {
      return js ? html : $(html);
    };
    this.destroy = function () {
      Arrays.destroy(items);
      scroll.destroy();
      html.remove();
      items = [];
      if (this.onDestroy) this.onDestroy();
    };
  }

  /**
   * Главный компонент для отображения контента
   * Выбирает между стандартным и новостным видом карточек
   * @param {object} object 
   * @returns {object}
   */
  function InteractionMain(object) {
    // Проверяем нужно ли использовать новый интерфейс
    var useNewsCards = function useNewsCards() {
      // Если указан прямой параметр force_standard, используем стандартный стиль
      if (object.force_standard) {
        return false;
      }

      // Проверка на компоненты, которые всегда должны использовать стандартный стиль
      if (object.component === 'favorite' || object.component === 'bookmarks') {
        return false;
      }

      // Проверка на явно указанный стиль компонента (для совместимости)
      if (object.card_style === 'standard') {
        return false;
      }

      // Если родитель компонента favorite, тоже используем стандартный стиль
      if (object.from_component === 'favorite' || object.from_favorite) {
        return false;
      }

      // Проверяем платформу - космический стиль доступен только для ТВ
      var isTV = Platform.screen('tv');
      if (!isTV) {
        return false; // Для не-ТВ всегда используем стандартный стиль
      }

      // Проверяем настройки пользователя
      var interfaceStyle = Storage.field('interface_style');
      // Космический интерфейс возможен только с новыми карточками
      if (interfaceStyle === 'space') {
        return true;
      }

      // Если выбран стандартный стиль, используем стандартный компонент
      if (interfaceStyle === 'standard') {
        return false;
      }

      // Проверяем условия по умолчанию для автоматического определения
      var isTmdbOrCub = object.source === 'tmdb' || object.source === 'cub';
      var isWideScreen = window.innerWidth >= 767;
      var isNewVersion = object$2.app_digital >= 153;
      return isTmdbOrCub && isWideScreen && isNewVersion;
    };

    // Выбираем компонент в зависимости от настроек
    if (useNewsCards()) {
      return new NewsCards(object);
    } else {
      return new component(object);
    }
  }

  function open$1(callSelected, callCancel) {
    var html = Template.get('lang_choice', {});
    var scroll = new create$f({
      mask: true,
      over: true
    });
    var codes = Lang.codes();
    function selector(code) {
      var item = $('<div class="selector lang__selector-item" data-code="' + code + '">' + codes[code] + '</div>');
      item.on('hover:enter', function (e) {
        if (callSelected) callSelected(code);
        html.fadeOut(300, function () {
          scroll.destroy();
          html.remove();
          scroll = null;
          html = null;
        });
      }).on('hover:focus', function (e) {
        scroll.update($(e.target), true);
        $('.lang__selector-item', html).removeClass('last-focus');
        $(e.target).addClass('last-focus');
        html.find('.lang__title').text(Lang.translate('lang_choice_title', code));
        html.find('.lang__subtitle').text(Lang.translate('lang_choice_subtitle', code));
      });
      scroll.append(item);
    }
    for (var code in codes) selector(code);
    html.find('.lang__selector').append(scroll.render());
    $('body').append(html);
    Controller.add('language', {
      toggle: function toggle() {
        var focus = html.find('[data-code="' + Storage.get('language', 'ru') + '"]');
        Controller.collectionSet(scroll.render());
        Controller.collectionFocus(focus[0], scroll.render());
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      },
      back: function back() {
        if (callCancel) {
          scroll.destroy();
          html.remove();
          scroll = null;
          html = null;
          callCancel();
        }
      }
    });
    Controller.toggle('language');
  }
  var LangChoice = {
    open: open$1
  };

  function init$g() {
    if (!Platform.is('webos')) return;
    var field = $("<div class=\"settings-folder selector\" data-component=\"webos_launcher\">\n        <div class=\"settings-folder__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 32 32\" xml:space=\"preserve\">\n                <g transform=\"matrix(1.06,0,0,1.06,-0.9600000000000009,-0.9600000000000009)\">\n                    <path d=\"m26.59 31h-21.18c-2.431 0-4.41-1.979-4.41-4.41v-21.18c0-2.431 1.979-4.41 4.41-4.41h21.18c2.431 0 4.41 1.979 4.41 4.41v21.18c0 2.431-1.979 4.41-4.41 4.41zm-21.18-28c-1.329 0-2.41 1.081-2.41 2.41v21.18c0 1.329 1.081 2.41 2.41 2.41h21.18c1.329 0 2.41-1.081 2.41-2.41v-21.18c0-1.329-1.081-2.41-2.41-2.41z\" fill=\"#fff\"></path>\n                    <path d=\"m21.129 24h-10.258c-1.583 0-2.871-1.288-2.871-2.871v-6.167c0-.925.449-1.798 1.202-2.336l5.129-3.664c.998-.712 2.339-.712 3.337 0l5.129 3.665c.754.537 1.203 1.41 1.203 2.335v6.167c0 1.583-1.288 2.871-2.871 2.871zm-5.635-13.41-5.129 3.664c-.229.163-.365.428-.365.708v6.167c0 .48.391.871.871.871h10.259c.479 0 .87-.391.87-.871v-6.167c0-.281-.136-.545-.364-.708l-5.129-3.665c-.303-.215-.71-.215-1.013.001z\" fill=\"#fff\"></path>\n                </g>\n            </svg>\n        </div>\n        <div class=\"settings-folder__name\">".concat(Lang.translate('settings_webos_launcher'), "</div>\n    </div>"));
    Settings.main().render().find('[data-component="more"]').after(field);
    Settings.main().update();
    Prisma.Template.add('settings_webos_launcher', "<div>\n        <div class=\"settings-param selector\" data-name=\"add\" data-static=\"true\">\n            <div class=\"settings-param__name\">#{settings_webos_launcher_add_device}</div>\n        </div>\n        <div class=\"settings-param selector\" data-name=\"remove\" data-static=\"true\">\n            <div class=\"settings-param__name\">#{settings_webos_launcher_remove_device}</div>\n        </div>\n    </div>");
    Settings.listener.follow('open', function (e) {
      var appid = webOS.fetchAppId();
      console.log('WebOS', 'current appid:', appid);
      if (appid.length == 0) appid = window.prisma_settings.iptv ? 'icva' : 'com.prisma.tv';
      if (e.name == 'webos_launcher') {
        e.body.find('[data-name="add"]').unbind('hover:enter').on('hover:enter', function () {
          webOS.service.request("luna://com.webos.service.eim", {
            method: "addDevice",
            parameters: {
              "appId": appid,
              "pigImage": "/pigImage.jpg",
              "type": "MVPD_IP",
              "showPopup": true,
              "label": "Prisma",
              "description": "Prisma app for LG webOS"
            },
            onSuccess: function onSuccess(res) {
              Noty$1.show(Lang.translate('settings_added'));
            },
            onFailure: function onFailure(res) {
              Noty$1.show(Lang.translate('title_error') + ': ' + res.errorText);
            }
          });
        });
        e.body.find('[data-name="remove"]').unbind('hover:enter').on('hover:enter', function () {
          webOS.service.request("luna://com.webos.service.eim", {
            method: "deleteDevice",
            parameters: {
              "appId": appid,
              "showPopup": true
            },
            onSuccess: function onSuccess(res) {
              Noty$1.show(Lang.translate('settings_added'));
            },
            onFailure: function onFailure(res) {
              Noty$1.show(Lang.translate('title_error') + ': ' + res.errorText);
            }
          });
        });
      }
    });
  }
  var WebOSLauncher = {
    init: init$g
  };

  function open(callSelected) {
    var html = Template.get('lang_choice', {});
    var scroll = new create$f({
      mask: true,
      over: true
    });
    function btn(name, select) {
      var item = $('<div class="selector lang__selector-item">' + name + '</div>');
      item.on('hover:enter', function (e) {
        if (select) select();
      }).on('hover:focus', function (e) {
        scroll.update($(e.target), true);
      }).on('click', function (e) {
        if (select && DeviceInput.canClick(e.originalEvent)) select();
      });
      scroll.append(item);
    }
    function destroy() {
      html.fadeOut(300, function () {
        scroll.destroy();
        html.remove();
        scroll = null;
        html = null;
      });
      Controller.add('developer', {
        toggle: function toggle() {}
      });
    }
    function close() {
      destroy();
      callSelected();
    }
    var btns = [{
      name: Lang.translate('title_continue_two'),
      select: close
    }, {
      name: Lang.translate('settings_reset'),
      select: function select() {
        localStorage.clear();
        window.location.reload();
        destroy();
      }
    }];
    btns.forEach(function (item) {
      btn(item.name, item.select);
    });
    html.find('.lang__selector').append(scroll.render());
    $('body').append(html);
    Controller.add('developer', {
      toggle: function toggle() {
        Controller.collectionSet(scroll.render());
        Controller.collectionFocus(false, scroll.render());
      },
      up: function up() {
        Navigator.move('up');
      },
      down: function down() {
        Navigator.move('down');
      }
    });
    Controller.toggle('developer');
  }
  var Developer = {
    open: open
  };

  var CardClass = /*#__PURE__*/function () {
    function CardClass(params) {
      _classCallCheck(this, CardClass);
      this.params = params;
    }
    return _createClass(CardClass, [{
      key: "create",
      value: function create() {
        this.build();
        this.image();
      }
    }, {
      key: "build",
      value: function build() {
        var _this = this;
        this.card = Template.js('card');
        this.img = this.card.querySelector('.card__img') || {};
        this.card.querySelector('.card__title').innerText = this.params.title;
        this.card.querySelector('.card__age').innerText = this.params.subtitle;
        this.box = document.createElement('div');
        this.box.classList.add('card__textbox');
        this.box.innerText = this.params.text;
        this.card.querySelector('.card__view').appendChild(this.box);
        this.card.addEventListener('hover:enter', function () {
          var tpl = Template.get('prisma_premium');
          tpl.find('.prisma-premium__title').text(Lang.translate('title_notice'));
          tpl.find('.prisma-premium__descr').eq(0).empty().text(Lang.translate('ad_notice_' + _this.params.type));
          Modal.open({
            title: '',
            size: 'medium',
            mask: true,
            html: tpl,
            onBack: function onBack() {
              Modal.close();
              Controller.toggle('content');
            }
          });
        });
        this.card.addEventListener('visible', this.visible.bind(this));
      }
    }, {
      key: "image",
      value: function image() {
        var _this2 = this;
        this.img.onload = function () {
          _this2.card.classList.add('card--loaded');
        };
        this.img.onerror = function () {
          TMDB$1.broken();
          console.log('Img', 'noload', _this2.img.src);
          _this2.img.src = './img/img_broken.svg';
        };
      }
    }, {
      key: "visible",
      value: function visible() {
        if (this.params.poster) this.img.src = Api.img(this.params.poster);else if (this.params.img) this.img.src = this.params.img;else this.img.src = './img/img_broken.svg';
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.img.onerror = function () {};
        this.img.onload = function () {};
        this.img.src = '';
        this.card.remove();
        this.card = null;
        this.img = null;
      }
    }, {
      key: "render",
      value: function render(js) {
        return js ? this.card : $(this.card);
      }
    }]);
  }();

  var Watched = /*#__PURE__*/function () {
    function Watched() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      _classCallCheck(this, Watched);
      var n = Math.floor(Math.random() * 5) + 1;
      Arrays.extend(params, {
        title: params.card.title || params.card.name,
        subtitle: Lang.translate('title_notice'),
        poster: params.card.poster_path,
        text: Lang.translate('ad_notice_' + params.type + '_text_' + n)
      });
      this.card = new CardClass(params);
      this.card.create();
    }
    return _createClass(Watched, [{
      key: "destroy",
      value: function destroy() {
        this.card.destroy();
      }
    }, {
      key: "render",
      value: function render(js) {
        return this.card.render(js);
      }
    }]);
  }();

  var network$1;
  function init$f() {
    network$1 = new create$e();
    Socket.listener.follow('message', function (e) {
      if (e.method == 'premiere') update(e.data);
    });
  }
  function update(data) {
    var id = data.type + '/' + data.id;
    console.log('Premiere', 'load:', data, 'exist:', Boolean(Notice$1.classes.prisma.notices.find(function (n) {
      return n.id == id;
    })));
    if (Notice$1.classes.prisma.notices.find(function (n) {
      return n.id == id;
    })) return;
    var codes = Arrays.getKeys(Lang.codes());
    network$1.silent(TMDB$1.api(id + '?append_to_response=translations,credits&language=' + Storage.get('language', 'ru') + '&api_key=' + TMDB$1.key()), function (movie) {
      network$1.silent(TMDB$1.api(id + '/images?include_image_language=' + codes.join(',') + '&language=' + Storage.get('language', 'ru') + '&api_key=' + TMDB$1.key()), function (images) {
        var card = Arrays.clone(movie);
        console.log('Premiere', 'card loaded', card);
        delete card.translations;
        delete card.credits;
        delete card.credits;
        delete card.spoken_languages;
        delete card.production_companies;
        delete card.production_countries;
        var notice = {
          id: id,
          from: 'cub',
          title: {},
          text: {},
          time: Date.now(),
          poster: {},
          card: card
        };
        movie.translations.translations.filter(function (t) {
          return codes.indexOf(t.iso_639_1) >= 0;
        }).forEach(function (t) {
          notice.title[t.iso_639_1] = Lang.translate('premiere_title') + ': ' + (t.data.title || t.data.name || movie.title || movie.name);
          notice.text[t.iso_639_1] = (t.data.overview || movie.overview || '').slice(0, 130) + '...';
        });
        images.posters.forEach(function (i) {
          notice.poster[i.iso_639_1] = i.file_path;
        });
        if (movie.credits && movie.credits.cast) {
          var casts = movie.credits.cast.filter(function (c) {
            return c.known_for_department.toLowerCase() == 'acting';
          });
          if (casts.length) {
            notice.author = {};
            codes.forEach(function (c) {
              notice.author[c] = {
                name: casts[0].name || casts[0].character,
                img: casts[0].profile_path,
                text: Lang.translate('premiere_author_recomend_' + (Math.floor(Math.random() * 5) + 1))
              };
            });
          }
        }
        Notice$1.pushNotice('prisma', notice, function () {
          console.log('Premiere', 'card added');
        }, function (er) {
          console.log('Premiere', 'card added error:', er);
        });
      });
    });
  }
  var Premiere = {
    init: init$f
  };

  var BotClass = /*#__PURE__*/function () {
    function BotClass(params) {
      _classCallCheck(this, BotClass);
      this.params = params;
      this.build();
      this.image();
    }
    return _createClass(BotClass, [{
      key: "build",
      value: function build() {
        var _this = this;
        this.card = Template.js('ad_bot');
        this.img = this.card.querySelector('.ad-bot__img') || {};
        this.card.querySelector('.ad-bot__title').innerText = this.params.title;
        this.card.querySelector('.ad-bot__text').innerText = this.params.text;
        this.card.querySelector('.ad-bot__more').innerText = Lang.translate('full_detail');
        this.card.querySelector('.ad-bot__info').innerText = Lang.translate('ad_disable');
        this.card.addEventListener('hover:enter', function () {
          var tpl = Template.get('prisma_premium');
          tpl.find('.prisma-premium__title').text(Lang.translate('title_notice'));
          tpl.find('.prisma-premium__descr').eq(0).empty().text(Lang.translate('ad_notice_' + _this.params.type));
          Modal.open({
            title: '',
            size: 'medium',
            mask: true,
            html: tpl,
            onBack: function onBack() {
              Modal.close();
              Controller.toggle('content');
            }
          });
        });
        this.visible();
      }
    }, {
      key: "image",
      value: function image() {
        var _this2 = this;
        this.img.onload = function () {
          _this2.card.classList.add('img--loaded');
        };
        this.img.onerror = function () {
          TMDB$1.broken();
          console.log('Img', 'noload', _this2.img.src);
          _this2.img.src = './img/img_broken.svg';
        };
      }
    }, {
      key: "visible",
      value: function visible() {
        if (this.params.poster) this.img.src = Api.img(this.params.poster);else if (this.params.img) this.img.src = this.params.img;else this.img.src = './img/img_broken.svg';
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.img.onerror = function () {};
        this.img.onload = function () {};
        this.img.src = '';
        this.card.remove();
        this.card = null;
        this.img = null;
      }
    }, {
      key: "render",
      value: function render(js) {
        return js ? this.card : $(this.card);
      }
    }]);
  }();

  function init$e() {
    if (Account.logged() && Lang.selected(['ru', 'uk', 'be', 'bg']) && window.prisma_settings.account_use) {
      var user = Storage.get('account_user', '{}');
      if (user.premium && !Account.hasPremium()) setTimeout(push, 5000);
    }
  }
  function push() {
    var id = 'extend_premium';
    if (Notice$1.classes.prisma.notices.find(function (n) {
      return n.id == id;
    })) return;
    var notice = {
      id: id,
      from: 'cub',
      title: {
        ru: 'Продлите Premium прямо сейчас!',
        uk: 'Продовжіть Premium прямо зараз!',
        be: 'Працягнеце Premium прама зараз!',
        bg: 'Подновете Premium точно сега!'
      },
      text: {
        ru: 'Ваша подписка на Premium истекла! Не упустите шанс продлить доступ к эксклюзивному контенту и дополнительным функциям. Обновите премиум-статус сейчас и наслаждайтесь всеми преимуществами без ограничений!',
        uk: 'Ваша передплата на Premium закінчилася! Не пропустіть шанс продовжити доступ до ексклюзивного контенту та додаткових функцій. Оновіть преміум-статус зараз та насолоджуйтесь усіма перевагами без обмежень!',
        be: 'Ваша падпіска на Premium скончылася! Не выпусціце шанец падоўжыць доступ да эксклюзіўнага кантэнту і дадатковым функцый. Абнавіце прэміум-статус зараз і атрымлівайце асалоду ад усімі перавагамі без абмежаванняў!',
        bg: 'Вашият абонамент за Premium е изтекъл! Не пропускайте шанса си да подновите достъпа си до ексклузивно съдържание и допълнителни функции. Надстройте до премиум статус сега и се насладете на всички предимства на без ограничения!'
      },
      time: Date.now(),
      icon: 'https://' + object$2.cub_domain + '/img/icons/premium_two.svg'
    };
    Notice$1.pushNotice('prisma', notice, function () {}, function (er) {});
  }
  var Extend = {
    init: init$e
  };

  function init$d() {
    Lang.add({
      ad_notice_tv_text_1: {
        ru: 'Будьте в курсе новых серий - получайте уведомления о переводах на свой смартфон!',
        uk: 'Будьте в курсі нових серій - отримуйте сповіщення про переклади на свій смартфон!',
        be: 'Будзьце ў курсе новых серый - атрымлівайце апавяшчэння аб перакладах на свой смартфон!',
        bg: 'Бъдете в час с новите серии - получавайте уведомление за преводите на своят смартфон!'
      },
      ad_notice_tv_text_2: {
        ru: 'Никогда не пропускайте новую серию - получайте уведомления о переводах на свой смартфон!',
        uk: 'Ніколи не пропускайте нову серію - отримуйте сповіщення про переклади на свій смартфон!',
        be: 'Ніколі не прапускайце новую серыю - атрымлівайце апавяшчэння аб перакладах на свой смартфон!',
        bg: 'Бъдете в час с новите серии - получавайте уведомление за преводите на своят смартфон!'
      },
      ad_notice_tv_text_3: {
        ru: 'Оставайтесь в центре событий - получайте уведомления о переводах новых серий на свой смартфон!',
        uk: 'Залишайтесь у центрі подій - отримуйте повідомлення про переведення нових серій на свій смартфон!',
        be: 'Заставайцеся ў цэнтры падзей - атрымлівайце апавяшчэння аб перакладах новых серый на свой смартфон!',
        bg: 'Бъдете в центъра на събитията - получавайте уведомление за преводите на новите серии на своят смартфон!'
      },
      ad_notice_tv_text_4: {
        ru: 'Будьте первыми, кто узнает о переводах новых серий - получайте уведомления на свой смартфон!',
        uk: 'Будьте першими, хто дізнається про переклади нових серій – отримуйте повідомлення на свій смартфон!',
        be: 'Будзьце першымі, хто даведаецца аб перакладах новых серый - атрымлівайце апавяшчэння на свой смартфон!',
        bg: 'Бъдете първи, за да узнаете за превода на нови серии - получавайте уведомление на своят смартфон!'
      },
      ad_notice_tv_text_5: {
        ru: 'Не пропустите ни одной новой серии - получайте уведомления о переводах на свой смартфон и смотрите сериалы в любимом переводе!',
        uk: 'Не пропустіть жодної нової серії – отримуйте повідомлення про переклади на свій смартфон та дивіться серіали у улюбленому перекладі!',
        be: 'Не прапусціце ніводнай новай серыі - атрымлівайце апавяшчэнні аб перакладах на свой смартфон і глядзіце серыялы ў любімым перакладзе!',
        bg: 'Не пропускайте нито една серия - получавайте уведомление за преводите на своят смартфон и гледайте сериалите с желаният превод!'
      },
      ad_notice_tv: {
        ru: 'Получение уведомлений о переводе сериала на свой смартфон - это удобный способ всегда оставаться в курсе и не пропустить ни одной серии. Вы больше не будете терять время на поиски новых серий и следить за релизами вручную. Просто подпишитесь на перевод и получайте уведомления о выходе новых серий на свой смартфон. Это сэкономит вам время и сделает просмотр сериалов еще более комфортным.',
        uk: 'Отримання повідомлень про переведення серіалу на свій смартфон – це зручний спосіб завжди залишатися в курсі та не пропустити жодної серії. Ви більше не будете гаяти час на пошуки нових серій і стежити за релізами вручну. Просто підпишіться на переклад та отримуйте повідомлення про вихід нових серій на свій смартфон. Це заощадить вам час і зробить перегляд серіалів ще комфортнішим.',
        be: 'Атрыманне апавяшчэнняў аб пераводзе серыяла на свой смартфон - гэта зручны спосаб заўсёды заставацца ў курсе і не прапусціць ніводнай серыі. Вы больш не будзеце марнаваць час на пошукі новых серый і сачыць за рэлізамі ўручную. Проста падпішыцеся на пераклад і атрымлівайце апавяшчэнні аб выхадзе новых серый на свой смартфон. Гэта зэканоміць вам час і зробіць прагляд серыялаў яшчэ камфортнейшым.',
        bg: 'Получавайте уведомление за преведени сериали на своят смартфон - това е удобен начин винаги да си в час и да не пропуснеш нито една серия. Повече няма да губите време в търсене на нови излъчени серии. Това ще спести времето ви и ще направи прегледа на сериали още по-комфортно'
      },
      ad_bot_tv_title: {
        ru: 'Уведомления на вашем смартфоне',
        uk: 'Сповіщення на вашому смартфоні',
        be: 'Апавешчанні на вашым смартфоне',
        bg: 'Известия на вашия смартфон'
      },
      ad_bot_tv_text: {
        ru: 'Будьте в курсе самых ожидаемых моментов! Теперь вы можете получать мгновенные уведомления о выходе новых серий и фильмов прямо на свой смартфон.',
        uk: 'Будьте в курсі найочікуваніших моментів! Тепер ви можете отримувати миттєві сповіщення про виход нових серіалів і фільмів прямо на свій смартфон.',
        be: 'Будзьце ў курсе самых чаканых момантаў! Цяпер вы можаце атрымліваць хуткія апавешчанні аб выходзе новых сэрыяў і фільмаў проста на свой смартфон.',
        bg: 'Бъдете в течение на най-очакваните моменти! Сега можете да получавате мигновени известия за излизането на нови серии и филми директно на вашия смартфон.'
      }
    });
    Prisma.Listener.follow('line', function (event) {
      if (event.type == 'create' && event.data.ad && !Account.hasPremium() && window.prisma_settings.account_use && Lang.selected(['ru', 'uk', 'be', 'bg']) && !Personal.confirm()) {
        var item;
        if (event.data.ad == 'bot') {
          item = new BotClass({
            card: event.data.results[0],
            type: event.data.type,
            title: Lang.translate('ad_bot_tv_title'),
            text: Lang.translate('ad_bot_tv_text'),
            poster: event.data.results[0].poster_path
          });
        } else {
          item = new Watched({
            card: event.data.results[0],
            type: event.data.type
          });
        }
        item.render(true).on('hover:focus', function (e) {
          event.scroll.update(e.target);
        });
        event.items.push(item);
        event.scroll.append(item.render(true));
      }
    });
    Premiere.init();
    Extend.init();
    Preroll.init();
  }
  var AdManager = {
    init: init$d
  };

  function init$c() {
    if (Platform.screen('mobile')) {
      var bar = Template.get('navigation_bar', {});
      bar.find('.navigation-bar__item').on('click', function () {
        var action = $(this).data('action');
        if (action == 'back') Controller.back();else if (action == 'main') {
          Activity$1.push({
            url: '',
            title: Lang.translate('title_main'),
            component: 'main',
            source: Storage.field('source')
          });
        } else if (action == 'movie' || action == 'tv' || action == 'anime') {
          Activity$1.push({
            url: action,
            title: action == 'movie' ? Lang.translate('menu_movies') : action == 'anime' ? Lang.translate('menu_anime') : Lang.translate('menu_tv'),
            component: 'category',
            source: action == 'anime' ? 'cub' : Storage.field('source')
          });
        } else if (action == 'search') {
          Prisma.Search.open();
        } else if (action == 'settings') {
          Controller.toggle('settings');
        }
      });
      $('body').append(bar);
    }
  }
  var NavigationBar = {
    init: init$c
  };

  function Endless(onRender) {
    var _this = this;
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var wrap = document.createElement('div');
    var position = params.position || 0;
    wrap.addClass('endless');
    wrap.addEventListener('mousewheel', function (e) {
      _this.move(e.wheelDelta / 120 > 0 ? -1 : 1);
    });
    var touch;
    var touchStart = function touchStart(e) {
      var point = e.touches[0] || e.changedTouches[0];
      touch = {
        position: position,
        from: point.clientY,
        to: 0
      };
      window.addEventListener('touchend', _touchEnd);
      window.addEventListener('touchmove', touchMove);
    };
    var touchMove = function touchMove(e) {
      var point = e.touches[0] || e.changedTouches[0];
      if (touch) {
        var to = Math.round((point.clientY - touch.from) / (window.innerHeight * 0.1));
        if (touch.to !== to) {
          var move = touch.position - to;
          _touchEnd();
          _this.to(move);
        }
      }
    };
    var _touchEnd = function touchEnd(e) {
      window.removeEventListener('touchend', _touchEnd);
      window.removeEventListener('touchmove', touchMove);
      touch = false;
    };
    wrap.addEventListener('touchstart', touchStart);
    this.move = function (dir) {
      var dif = position - (position + dir);
      position += dir;
      this.draw(dif);
    };
    this.to = function (to) {
      var dif = position - to;
      position = to;
      this.draw(dif);
    };
    this.draw = function (dif) {
      var render = onRender(position);
      if (render) {
        wrap.removeClass('endless-up endless-down');
        wrap.style.animation = 'none';
        wrap.offsetHeight;
        wrap.style.animation = null;
        wrap.empty().append(render);
        wrap.addClass(dif == -1 ? 'endless-down' : 'endless-up');
      }
    };
    this.render = function () {
      return wrap;
    };
    this.destroy = function () {
      wrap.remove();
    };
    this.draw(0);
  }

  function hide() {
    Settings.listener.follow('open', function (e) {
      if (e.name == 'main') {
        e.body.find(['player', 'account', 'parser', 'server', 'plugins'].map(function (a) {
          return '[data-component="' + a + '"]';
        }).join(', ')).addClass('hide');
      } else {
        e.body.find(['start_page', 'card_quality', 'card_episodes', 'proxy_tmdb_auto', 'proxy_tmdb', 'tmdb_proxy_api', 'tmdb_proxy_image', 'card_interfice_type', 'source'].map(function (a) {
          return '[data-name="' + a + '"]';
        }).join(', ')).addClass('hide');
      }
    });
    var head = $('.head');
    var menu = $('.menu');
    $('.open--broadcast, .open--search,.open--notice,.open--premium', head).remove();
    $(['catalog', 'feed', 'filter', 'relise', 'anime', 'favorite', 'subscribes', 'timetable', 'mytorrents', 'console', 'about'].map(function (a) {
      return '[data-action="' + a + '"]';
    }).join(', '), menu).remove();
    Arrays.remove(TMDB.genres.movie, TMDB.genres.movie.find(function (g) {
      return g.id == 99;
    }));
    var genres_id = [99, 10764, 10766, 10767, 10768, 10763];
    genres_id.forEach(function (id) {
      Arrays.remove(TMDB.genres.tv, TMDB.genres.tv.find(function (g) {
        return g.id == id;
      }));
    });
    Prisma.Listener.follow('full', function (e) {
      if (e.type == 'complite') {
        e.object.activity.render().find('.full-start-new__buttons, .full-start__icons, .full-start__footer').remove();
      }
    });
  }
  function init$b() {
    if (window.prisma_settings.demo) {
      Prisma.Listener.follow('app', function (e) {
        if (e.type == 'ready') hide();
      });
    }
  }
  var Demo = {
    init: init$b
  };

  var html$1;
  var tout;
  var xmlHTTP;
  var controll;
  var active = {};
  var graph = [];
  function init$a() {
    Settings.listener.follow('open', function (e) {
      if (e.name == 'server') {
        var btn = $("<div class=\"settings-param selector\" data-type=\"button\">\n                <div class=\"settings-param__name\">".concat(Lang.translate('speedtest_button'), "</div>\n            </div>"));
        btn.on('hover:enter', function () {
          if (Torserver.ip()) {
            var params = {
              url: Torserver.url() + '/download/300'
            };
            if (Storage.field('torrserver_auth')) {
              params.login = Storage.get('torrserver_login');
              params.password = Storage.value('torrserver_password');
            }
            start$1(params);
          }
        });
        $('[data-name="torrserver_url_two"]', e.body).after(btn);
      }
    });
  }
  function start$1(params) {
    if (html$1) html$1.remove();
    active = params;
    controll = Controller.enabled().name;
    html$1 = Template.js('speedtest');
    html$1.append(HeadBackward('', true));
    document.body.append(html$1);
    var textpath = Array.from(html$1.querySelectorAll('textpath'));
    textpath.forEach(function (element) {
      element.html(element.getAttribute('data-text'));
    });
    html$1.find('#speedtest_num-text').html('Mbps');
    toggle();
    if (active.url) testUrl(active.url);
  }
  function speed2deg(v) {
    v = parseFloat(v);
    return v >= 1000 ? 200 : v < 20 ? v * 4 : v < 30 ? (v - 20) * 2 + 80 : v < 60 ? (v - 30) / 1.5 + 100 : v < 100 ? (v - 60) / 2 + 120 : v < 200 ? (v - 100) / 5 + 140 : v < 500 ? (v - 200) / 15 + 160 : (v - 500) / 25 + 180;
  }
  function hslToRgb(hue, sat, light) {
    hue = hue % 360, hue += hue < 0 ? hue += 360 : 0, sat /= 100, light /= 100;
    function f(n) {
      var k = (n + hue / 30) % 12;
      var a = sat * Math.min(light, 1 - light);
      return parseInt((light - a * Math.max(-1, Math.min(k - 3, 9 - k, 1))) * 255);
    }
    return "#" + ((1 << 24) + (f(0) << 16) + (f(8) << 8) + f(4)).toString(16).slice(1);
  }
  function setSpeed(v) {
    v = parseFloat(v);
    html$1.find('#speedtest_num').innerHTML = v < 1 ? v.toFixed(3) : v < 10 ? v.toFixed(2) : v < 100 ? v.toFixed(1) : Math.round(v);
    var r = speed2deg(v);
    var b = html$1.find('#speedtest_progress');
    var l = 1256.8;
    b.style['stroke-dasharray'] = l * r / 360 + ',' + l;
    b.style.stroke = hslToRgb(330 + r, 80, 45);
    html$1.find('#speedtest_graph').setAttribute('points', graph.map(function (pt) {
      return pt.join(',');
    }).join(' '));
  }
  function normalizeUrl(base, link) {
    if (link[0] === '/') return base.replace(/^(https?:\/\/[^\/]+).*$/i, '$1') + link;
    if (/^https?:?\/\//i.test(link)) return link;
    base = base.replace(/\/[^\/]*(\?.*)?$/, '') + '/';
    return base + link;
  }
  function testUrl(url) {
    if (!/\.m3u8?(\?.*)?$/i.test(url)) return testSpeed(url);
    var errorFn = function errorFn(e) {
      html$1.find('#speedtest_status').html(Lang.translate('network_error'));
    };
    xmlHTTP = new XMLHttpRequest();
    $.ajax({
      url: url,
      cache: false,
      dataType: 'text',
      xhr: function xhr() {
        return xmlHTTP;
      },
      success: function success(data) {
        if (data.substr(0, 7) !== '#EXTM3U') return errorFn();
        var i = 0,
          links = [],
          bandwidth = 0,
          setLink = false,
          m,
          l = data.split(/\r?\n/);
        data = null;
        for (; links.length < 100 && i < l.length; i++) {
          if (!!(m = l[i].match(/^#EXTINF:\s*(-?\d+(\.\d*)?)\s*,.*$/))) {
            setLink = true;
          } else if (!!(m = l[i].match(/^#EXT-X-STREAM-INF:(.+,)?\s*BANDWIDTH=(\d+)\s*(,.+)?$/))) {
            if (bandwidth < parseInt(m[2])) {
              bandwidth = parseInt(m[2]);
              setLink = true;
            } else setLink = false;
          } else if (setLink && !!(m = l[i].match(/^[^#].+$/i))) {
            links.push(normalizeUrl(xmlHTTP.responseURL, m[0].trim()));
            setLink = false;
          }
        }
        if (links.length === 0) return errorFn();
        if (bandwidth > 0) return testUrl(links.pop());
        testSpeed(links[0]);
      },
      error: errorFn
    });
  }
  function testSpeed(url) {
    var context = this;
    var status = html$1.find('#speedtest_status');
    var time;
    status.innerHTML = Lang.translate('speedtest_connect');
    graph = [[-250, -250]];
    var speed = 0,
      speedMbps = 0;
    setSpeed(0);
    xmlHTTP = new XMLHttpRequest();
    xmlHTTP.open('GET', Utils$2.addUrlComponent(url, 'vr=' + new Date() * 1), true);
    if (active.login && active.password) xmlHTTP.setRequestHeader("Authorization", "Basic " + Base64.encode(active.login + ":" + active.password));
    xmlHTTP.responseType = 'arraybuffer';
    xmlHTTP.onprogress = function (e) {
      if (!time || time === true) return;
      var load = e.timeStamp - time;
      speed = Math.ceil(e.loaded * 8000 / load); // Бит в секунду

      speedMbps = speed / 1000 / 1000;
      var x = Math.max(Math.min(load, 1e4) * 500 / 1e4, Math.min(e.loaded, 3e8) * 500 / 3e8) - 250,
        y = -(speed2deg(speedMbps) / 4 + 250);
      graph.push([x.toFixed(1), y.toFixed(1)]);
      setSpeed(speedMbps);
      if (load >= 1e4 || e.loaded > 3e8) xmlHTTP.abort();
    };
    xmlHTTP.onreadystatechange = function (e) {
      if (xmlHTTP.readyState === 2) {
        time = e.timeStamp;
        status.innerHTML = Lang.translate('speedtest_test');
        tout = setTimeout(function () {
          xmlHTTP.abort();
        }, 15e3);
      }
    };
    var endTest = function endTest(e) {
      clearTimeout(tout);
      setSpeed(speedMbps);
      status.innerHTML = Lang.translate('speedtest_ready');
      time = false;
      if (typeof active.onEnd === 'function') active.onEnd.apply(context, [speedMbps, xmlHTTP]);
    };
    xmlHTTP.onload = endTest;
    xmlHTTP.onabort = endTest;
    xmlHTTP.onerror = endTest;
    xmlHTTP.send();
  }
  function toggle() {
    Controller.add('speedtest', {
      toggle: function toggle() {
        Controller.clear();
      },
      back: close
    });
    Controller.toggle('speedtest');
  }
  function close() {
    if (xmlHTTP) xmlHTTP.abort();
    clearTimeout(tout);
    html$1.remove();
    html$1 = false;
    xmlHTTP = false;
    if (active.onBack) active.onBack();else Controller.toggle(controll);
    active = {};
  }
  var Speedtest = {
    init: init$a,
    close: close,
    start: start$1
  };

  function init$9() {
    if (!window.prisma_settings.iptv) return;
    var components = ['tmdb', 'plugins'];
    var titles = ['card_interfice_type'];
    var params = ['light_version', 'card_interfice_type', 'card_interfice_reactions', 'player_timecode', 'pages_save_total', 'device_name', 'playlist_next', 'background_type', 'card_views_type', 'hide_outside_the_screen', 'card_interfice_cover', 'card_interfice_poster', 'start_page', 'source', 'card_quality', 'card_episodes', 'player'];
    Prisma.Lang.add({
      about_text: {
        ru: 'Наслаждайтесь любимыми телепередачами, фильмами и спортивными событиями на вашем устройстве с нашим приложением для просмотра IPTV каналов. Наше приложение просто в использовании и позволяет настроить список избранных каналов для быстрого доступа к любимым программам. Просматривайте телевизор в любое время и в любом месте, не пропуская ни одного важного момента благодаря нашему надежному и удобному IPTV приложению.',
        uk: 'Насолоджуйтесь улюбленими телепередачами, фільмами та спортивними подіями на вашому пристрої з нашим програмою для перегляду IPTV каналів. Наша програма просто у використанні та дозволяє налаштувати список вибраних каналів для швидкого доступу до улюблених програм. Переглядайте телевізор у будь-який час та в будь-якому місці, не пропускаючи жодного важливого моменту завдяки нашому надійному та зручному IPTV додатку.',
        be: 'Атрымлівайце асалоду ад любімымі тэлеперадачамі, фільмамі і спартыўнымі падзеямі на вашым прыладзе з нашым дадаткам для прагляду IPTV каналаў. Наша дадатак проста ў выкарыстанні і дазваляе наладзіць спіс абраных каналаў для хуткага доступу да любімых праграм. Праглядайце тэлевізар у любы час і ў любым месцы, не прапускаючы ніводнага важнага моманту дзякуючы нашаму надзейнаму і зручнаму IPTV з дадаткам.',
        en: 'Enjoy your favorite TV shows, movies and sports on your device with our IPTV channel viewer app. Our application is easy to use and allows you to set up your favorite channel list for quick access to your favorite programs. Watch TV anytime, anywhere without missing a single important moment thanks to our reliable and convenient IPTV application.',
        pt: 'Aproveite seus programas de TV, filmes e esportes favoritos em seu dispositivo com nosso aplicativo visualizador de canais IPTV. Nosso aplicativo é fácil de usar e permite que você configure sua lista de canais favoritos para acesso rápido aos seus programas favoritos. Assista TV a qualquer hora, em qualquer lugar, sem perder um único momento importante, graças ao nosso aplicativo IPTV confiável e conveniente.',
        zh: '使用我们的 IPTV 频道查看器应用程序在您的设备上欣赏您最喜爱的电视节目、电影和体育节目。 我们的应用程序易于使用，并允许您设置您最喜爱的频道列表，以便快速访问您最喜爱的节目。 借助我们可靠且方便的 IPTV 应用程序，随时随地观看电视，不会错过任何一个重要时刻。'
      },
      empty_title_two: {
        ru: 'Произошла ошибка',
        uk: 'Виникла помилка',
        be: 'Адбылася памылка',
        en: 'An error has occurred',
        pt: 'Оcorreu um erro',
        zh: '发生了错误'
      },
      empty_text_two: {
        ru: 'К сожалению, приложение не загружается. Рекомендуем попробовать перезагрузить его.',
        uk: 'На жаль, програма не завантажується. Рекомендуємо спробувати перезавантажити його.',
        be: 'Нажаль, прыкладанне не загружаецца. Рэкамендуем паспрабаваць перазагрузіць яго.',
        en: 'Unfortunately, the application does not load. We recommend that you try rebooting it.',
        pt: 'Infelizmente, o aplicativo não carrega. Recomendamos que você tente reiniciá-lo.',
        zh: '不幸的是，该应用程序未加载。 我们建议您尝试重新启动它。'
      }
    });
    window.iptvClearSettingsFunction = function (e) {
      titles.forEach(function (t) {
        var param = $('[data-name="' + t + '"]', e.body).prev();
        if (param.length && param.hasClass('settings-param-title')) param.remove();
      });
      $(components.map(function (c) {
        return '[data-component="' + c + '"]';
      }).join(','), e.body).remove();
      $(params.map(function (c) {
        return '[data-name="' + c + '"]';
      }).join(','), e.body).remove();
    };
    window.iptvClearFunction = function () {
      $('.menu .menu__list:eq(0)').empty();
      $('.head .open--notice, .head .open--search, .head .open--feed, .head .open--premium').addClass('hide');
      window.iptvClearFunction = function () {};
    };
    window.iptvClearFunction();
    Prisma.Settings.listener.follow('open', window.iptvClearSettingsFunction);
  }
  var Iptv = {
    init: init$9
  };

  var noHoverStyle = document.createElement("style");
  noHoverStyle.innerHTML = "* { pointer-events: none !important; }";
  var isKeyboardMode = false;
  function init$8() {
    document.addEventListener("keydown", function (event) {
      var tagName = '';
      try {
        tagName = event.target.tagName.toLowerCase();
      } catch (e) {}
      if (!isKeyboardMode && !(tagName == "input" || tagName == "textarea")) {
        console.log('HoverSwitcher', 'Keyboard moved, disabling pointer events');
        isKeyboardMode = true;
        document.head.appendChild(noHoverStyle);
      }
    });
    document.addEventListener("mousemove", function () {
      if (isKeyboardMode) {
        console.log('HoverSwitcher', 'Mouse moved, enabling pointer events');
        isKeyboardMode = false;
        document.head.removeChild(noHoverStyle);
      }
    });
  }
  var HoverSwitcher = {
    init: init$8
  };

  var network = new create$e();
  function init$7() {
    setInterval(function () {
      task();
    }, 1000 * 60 * 15);
  }
  function redirect(to) {
    if (object$2.cub_domain == to) return;
    Storage.set('cub_domain', to, true);
    console.log('Mirrors', 'redirect to', to);
  }
  function find(protocol, callback) {
    var status = new status$2(object$2.cub_mirrors.length);
    status.onComplite = function (data) {
      var keys = Object.keys(data);
      if (keys.length == 0) return callback([]);
      var keys_true = keys.filter(function (key) {
        return data[key] == true;
      });
      if (keys_true.length == 0) {
        console.log('Mirrors', protocol + ' all offline');
        return callback([]);
      }
      console.log('Mirrors', protocol + ' online', keys_true);
      callback(keys_true);
    };
    object$2.cub_mirrors.forEach(function (mirror) {
      check$1(protocol, mirror, function (result) {
        if (result) {
          console.log('Mirrors', protocol + mirror, 'is online');
          status.append(mirror, result);
        } else {
          console.log('Mirrors', protocol + mirror, 'is offline');
          status.error();
        }
      });
      // network.silent(protocol + mirror + '/api/checker', (str)=>{
      //     if(str == 'ok'){
      //         console.log('Mirrors', protocol + mirror, 'is online')

      //         status.append(mirror, true)
      //     }
      //     else{
      //         console.log('Mirrors', protocol + mirror, 'is offline')

      //         status.error()
      //     }
      // }, (e)=>{
      //     console.log('Mirrors', protocol + mirror, 'is offline')

      //     status.error()
      // }, false, {
      //     dataType: 'text',
      //     timeout: 1000 * 8
      // })
    });
  }
  function check$1(protocol, mirror, call) {
    network.silent(protocol + mirror + '/api/checker', function (str) {
      if (str == 'ok') call(true);else call(false);
    }, function (e) {
      call(false);
    }, false, {
      dataType: 'text',
      timeout: 1000 * 8
    });
  }
  function task(call) {
    var protocols = ['https://', 'http://'];
    var status = new status$2(protocols.length);
    status.onComplite = function (data) {
      var https = data['https://'];
      var http = data['http://'];
      if (Storage.field('protocol') == 'https' && !https.length) {
        Storage.set('protocol', 'http', true);
        if (http.length) redirect(http[0]);
      } else if (Storage.field('protocol') == 'https' && https.length) redirect(https[0]);else if (Storage.field('protocol') == 'http' && http.length) redirect(http[0]);
      if (call) call();
    };
    check$1(Utils$2.protocol(), object$2.cub_domain, function (result) {
      if (result) {
        if (call) call();
      } else {
        protocols.forEach(function (protocol) {
          find(protocol, function (mirrors) {
            status.append(protocol, mirrors);
          });
        });
      }
    });
  }
  var Mirrors = {
    init: init$7,
    task: task
  };

  var errors = 0;
  function init$6() {
    listen();
  }
  function listen() {
    Prisma.Listener.follow('request_error', function (e) {
      if (e.error.status == 0 && e.params.url.indexOf(object$2.cub_domain) >= 0 && Storage.field('protocol') == 'https') {
        errors++;
        if (errors > 5) {
          errors = 0;
          Storage.set('protocol', 'http');
        }
      }
    });
  }
  var HTTPS = {
    init: init$6
  };

  function Task$1(data) {
    this.data = data;
    this.work = 0;
    this.need = data.length;
    this.check = function () {
      if (this.work >= this.need) this.onComplite();
    };
    this.next = function () {
      var _this = this;
      this.onProgress(this.data[this.work], function () {
        _this.work++;
        if (_this.work < _this.need) _this.next();else _this.check();
      });
    };
    this.start = function () {
      if (this.need) this.next();else this.check();
    };
  }

  var queue_calls = [];
  var secondary_calls = [];
  function queue(call) {
    queue_calls.push(call);
  }
  function secondary(call) {
    secondary_calls.push(call);
  }
  function start() {
    var task = new Task$1(queue_calls);
    task.onProgress = function (call, next) {
      var called = false;
      var launch = function launch() {
        if (!called) next();
        called = true;
      };
      var timer = setTimeout(launch, 16000);
      call(function () {
        clearTimeout(timer);
        launch();
      });
    };
    task.onComplite = function () {
      var progress = new Progress();
      progress.append(secondary_calls);
      progress.start(function () {});
    };
    task.start();
  }
  var Task = {
    queue: queue,
    secondary: secondary,
    start: start
  };

  var torrent_net = new create$e();
  function init$5() {
    Storage.listener.follow('change', function (e) {
      if (e.name == 'torrserver_url') check(e.name);
      if (e.name == 'torrserver_url_two') check(e.name);
      if (e.name == 'torrserver_use_link') check(e.value == 'one' ? 'torrserver_url' : 'torrserver_url_two');
    });
    Settings.listener.follow('open', function (e) {
      if (e.name == 'server') {
        var name = Storage.field('torrserver_use') == 'one' ? 'torrserver_url' : 'torrserver_url_two';
        check(name);
        if (!Account.hasPremium() && Lang.selected(['ru', 'be', 'uk'])) {
          var ad = $("\n                    <div class=\"ad-cloud\">\n                    <img class=\"ad-cloud__qr\" style=\"opacity: 0; border: 0.5em solidrgb(114, 114, 114); border-radius: 0.3em;\">\n                        <div class=\"ad-cloud__text\">\n                            \u0421\u0441\u044B\u043B\u043A\u0430 Torrserver \u0432 \u0430\u0440\u0435\u043D\u0434\u0443.\n                        </div>\n                        <div class=\"ad-cloud__label\"><a href=\"https://t.me/tsarea_rentbot?start=prsm1\" target=\"_blank\">\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043A \u0431\u043E\u0442\u0443</a></div>\n                    </div>\n                ");
          var im = ad.find('img');
          Utils$2.imgLoad(im[0], 'https://i.ibb.co/8DLfXkdB/qr-code-5.png', function () {
            im.css('opacity', 1);
          });
          $('[data-name="torrserver_url"]', e.body).after(ad);
        }
      } else torrent_net.clear();
    });
  }
  function check(name) {
    if (Platform.is('android') && !Storage.field('internal_torrclient')) return;
    var item = $('[data-name="' + name + '"]').find('.settings-param__status').removeClass('active error wait').addClass('wait');
    var url = Storage.get(name);
    if (url) {
      torrent_net.timeout(10000);
      var head = {
        dataType: 'text'
      };
      var auth = Storage.field('torrserver_auth');
      if (auth) {
        head.headers = {
          Authorization: "Basic " + Base64.encode(Storage.get('torrserver_login') + ':' + Storage.value('torrserver_password'))
        };
      }
      torrent_net["native"](Utils$2.checkEmptyUrl(Storage.get(name)), function () {
        item.removeClass('wait').addClass('active');
      }, function (a, c) {
        if (a.status == 401) {
          item.removeClass('wait').addClass('active');
          Noty$1.show(Lang.translate('torrent_error_check_no_auth') + ' - ' + url, {
            time: 5000
          });
        } else {
          item.removeClass('wait').addClass('error');
          Noty$1.show(torrent_net.errorDecode(a, c) + ' - ' + url, {
            time: 5000
          });
        }
      }, false, head);
    }
  }
  var OtherTorserver = {
    init: init$5
  };

  function init$4() {
    Favorite.listener.follow('add,added', function (e) {
      if (e.where == 'history' && e.card.id) {
        $.get(Utils$2.protocol() + 'tmdb.' + object$2.api_domain + '/watch?id=' + e.card.id + '&cat=' + (e.card.original_name ? 'tv' : 'movie'));
      }
    });
  }
  var OtherWatched = {
    init: init$4
  };

  function init$3() {
    Settings.listener.follow('open', function (e) {
      if (e.name == 'more' && window.location.protocol == 'https:') {
        $('[data-name="protocol"]', e.body).remove();
      }
      if (e.name == 'interface' && window.prisma_settings.lang_use) {
        $('.settings-param:eq(0)', e.body).on('hover:enter', function () {
          LangChoice.open(function (code) {
            Modal.open({
              title: '',
              html: $('<div class="about"><div class="selector">' + Lang.translate('settings_interface_lang_reload') + '</div></div>'),
              onBack: function onBack() {
                window.location.reload();
              },
              onSelect: function onSelect() {
                window.location.reload();
              }
            });
            Storage.set('language', code, true);
            Storage.set('tmdb_lang', code, true);
          }, function () {
            Controller.toggle('settings_component');
          });
        }).find('.settings-param__value').text(Lang.translate(Lang.codes()[Storage.get('language', 'ru')]));
      }
      if (e.name == 'main' && Platform.is('apple_tv')) {
        var append = e.body.find('.appletv-setting');
        if (!append.length) {
          append = $("<div class=\"settings-folder selector settings-folder--wide appletv-setting\">\n                    <div class=\"settings-folder__icon\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"512\" height=\"512\" x=\"0\" y=\"0\" viewBox=\"0 0 512 512\" style=\"enable-background:new 0 0 512 512\" xml:space=\"preserve\"><path d=\"M407 0H105C47.103 0 0 47.103 0 105v302c0 57.897 47.103 105 105 105h302c57.897 0 105-47.103 105-105V105C512 47.103 464.897 0 407 0zM163.393 193.211c9.844-12.975 23.53-13.038 23.53-13.038s2.035 12.199-7.744 23.95c-10.442 12.548-22.312 10.494-22.312 10.494s-2.228-9.868 6.526-21.406zm21.581 136.569c-8.754 0-15.559-5.899-24.783-5.899-9.399 0-18.727 6.119-24.801 6.119C117.987 330 96 292.326 96 262.043c0-29.795 18.611-45.425 36.066-45.425 11.348 0 20.154 6.544 26.053 6.544 5.065 0 14.464-6.961 26.698-6.961 21.06 0 29.344 14.985 29.344 14.985s-16.204 8.284-16.204 28.386c0 22.677 20.185 30.492 20.185 30.492s-14.109 39.716-33.168 39.716zM296.2 327.4c-5.2 1.6-10.668 2.4-16.4 2.4-17.8 0-27.2-9.8-27.2-25.8v-60.2h-13.8v-20.6h13.8v-34h26.8v34h22v20.6h-22V295c0 7.25 4.1 10.2 10 10.2 5.6 0 13-3.131 14.6-3.8l5.4 21.2c-3.6 1.6-8 3.2-13.2 4.8zm84.398.6h-29l-38.6-104.8h27.6l26.6 83 26.8-83h25.2l-38.6 104.8z\" fill=\"#fff\"></path></svg>\n                    </div>\n                    <div class=\"settings-folder__name\">".concat(Lang.translate('menu_settings'), "</div>\n                </div>"));
          e.body.find('.scroll__body > div').append(append);
        }
        append.unbind('hover:enter').on('hover:enter', function () {
          window.open('prisma://showadvancedmenu'); // Поддержка Luxo 
        });
      }
    });
  }
  var OtherSettings = {
    init: init$3
  };

  function init$2() {
    var video_libs = ['hls/hls.js', 'dash/dash.js'];
    video_libs = video_libs.map(function (lib) {
      return window.location.protocol == 'file:' ? object$2.github_prisma + 'vender/' + lib : './vender/' + lib;
    });
    Utils$2.putScript(video_libs, function () {});
    if (window.youtube_lazy_load) Utils$2.putScript([Utils$2.protocol() + 'youtube.com/iframe_api'], function () {});

    // Utils.putScript([Utils.protocol() + Manifest.api_domain + '/online.js'],()=>{})  В пизду такой квест
  }
  var OtherLibs = {
    init: init$2
  };

  function init$1() {
    /** Быстрый доступ к закладкам через кнопки */
    var color_keys = {
      '406': 'history',
      '405': 'wath',
      '404': 'like',
      '403': 'book'
    };
    Keypad.listener.follow('keydown', function (e) {
      if (!Player.opened()) {
        if (color_keys[e.code]) {
          var type = color_keys[e.code];
          Activity$1.push({
            url: '',
            title: type == 'book' ? Lang.translate('title_book') : type == 'like' ? Lang.translate('title_like') : type == 'history' ? Lang.translate('title_history') : Lang.translate('title_wath'),
            component: 'favorite',
            type: type,
            page: 1
          });
        }
      }
    });
  }
  var OtherRemoteFavorites = {
    init: init$1
  };

  function init() {
    /** Обновление состояния карточек каждые 5 минут */

    var last_card_update = Date.now();
    var lets_card_update = function lets_card_update() {
      if (last_card_update < Date.now() - 1000 * 60 * 5) {
        last_card_update = Date.now();
        Activity$1.renderLayers(true).forEach(function (layer) {
          var cards = Array.from(layer.querySelectorAll('.card'));
          cards.forEach(function (card) {
            Utils$2.trigger(card, 'update');
          });
        });
      }
    };
    setInterval(function () {
      if (!Player.opened()) lets_card_update();
    }, 1000 * 60);
    Player.listener.follow('destroy', function () {
      setTimeout(lets_card_update, 1000);
    });
    Prisma.Listener.follow('activity', function (e) {
      if (e.type == 'archive' && e.object.activity) {
        var cards = Array.from(e.object.activity.render(true).querySelectorAll('.card.focus'));
        cards.forEach(function (card) {
          Utils$2.trigger(card, 'update');
        });
      }
    });
  }
  var OtherCards = {
    init: init
  };

  /**
   * Настройки приложения
   */
  if (typeof window.prisma_settings == 'undefined') {
    window.prisma_settings = {};
  }
  Arrays.extend(window.prisma_settings, {
    socket_use: true,
    socket_url: undefined,
    socket_methods: true,
    account_use: true,
    account_sync: true,
    plugins_use: true,
    plugins_store: false,
    torrents_use: true,
    white_use: false,
    disable_features: {
      dmca: false,
      reactions: false,
      discuss: false,
      ai: false,
      install_proxy: false,
      subscribe: false,
      blacklist: true,
      persons: false,
      ads: false
    },
    lang_use: true,
    read_only: false,
    dcma: false,
    push_state: true,
    iptv: false,
    feed: true
  });
  if (window.localStorage.getItem('remove_white_and_demo')) {
    window.prisma_settings.demo = false;
    window.prisma_settings.white_use = false;
  }
  if (window.prisma_settings.iptv) {
    window.prisma_settings.socket_use = false;
    window.prisma_settings.plugins_store = false;
    window.prisma_settings.account_sync = false;
    window.prisma_settings.torrents_use = false;
  }

  /**
   * Делаем классы доступными в глобальной области видимости
   */
  function initClass() {
    window.Prisma = {
      Listener: start$8(),
      Lang: Lang,
      Subscribe: start$8,
      Storage: Storage,
      Platform: Platform,
      Utils: Utils$2,
      Params: Params,
      Menu: Menu,
      Head: Head,
      Notice: Notice$1,
      NoticeClass: NoticeClass,
      NoticeClassPrisma: NoticePrisma,
      Background: Background,
      Favorite: Favorite,
      Select: Select,
      Controller: Controller,
      Activity: Activity$1,
      Keypad: Keypad,
      Template: Template,
      Component: Component,
      Reguest: create$e,
      Filter: create$5,
      Files: create$1,
      Explorer: Explorer,
      Scroll: create$f,
      Empty: Empty,
      Arrays: Arrays,
      Noty: Noty$1,
      Player: Player,
      PlayerVideo: PlayerVideo,
      PlayerInfo: PlayerInfo,
      PlayerPanel: PlayerPanel,
      PlayerIPTV: PlayerIPTV,
      PlayerPlaylist: PlayerPlaylist,
      Timeline: Timeline$1,
      Modal: Modal,
      Api: Api,
      Settings: Settings,
      SettingsApi: SettingsApi,
      Android: Android,
      Card: Card,
      Info: create,
      Account: Account,
      Socket: Socket,
      Input: Input,
      Screensaver: Screensaver$2,
      Recomends: Recomends,
      VideoQuality: VideoQuality,
      TimeTable: TimeTable,
      Broadcast: Broadcast,
      Helper: Helper,
      InteractionMain: InteractionMain,
      InteractionCategory: component$i,
      InteractionLine: create$l,
      Status: status$2,
      Plugins: Plugins,
      Extensions: Extensions,
      Tizen: Tizen,
      Layer: Layer,
      Console: Console,
      Iframe: Iframe,
      Parser: Parser,
      Manifest: object$2,
      TMDB: TMDB$1,
      Base64: Base64,
      Loading: Loading,
      YouTube: YouTube,
      WebOSLauncher: WebOSLauncher,
      Event: Event,
      Search: Search,
      DeviceInput: DeviceInput,
      Worker: AppWorker,
      DB: IndexedDB,
      NavigationBar: NavigationBar,
      Endless: Endless,
      Color: Color,
      Cache: Cache,
      Torrent: Torrent,
      Torserver: Torserver,
      Speedtest: Speedtest,
      Processing: Processing,
      ParentalControl: ParentalControl,
      VPN: VPN,
      Bell: Bell,
      Trailer: Trailer,
      RemoteHelper: RemoteHelper,
      StorageMenager: StorageMenager
    };
  }

  /**
   * Подготовка приложения к запуску
   */
  function prepareApp() {
    if (window.prepared_app) return;
    LoadingProgress.init();
    $('body').append(Noty$1.render());
    DeviceInput.init();
    Platform.init();
    Params.init();
    Controller.observe();
    Console.init();
    Keypad.init();
    Layer.init();
    HoverSwitcher.init();

    /* Передаем фокус в контроллер */
    Navigator.follow('focus', function (event) {
      Controller.focus(event.elem);
    });

    /* Выход в начальном скрине */
    Keypad.listener.follow('keydown', function (e) {
      if (window.appready || Controller.enabled().name == 'modal' || Platform.is('browser') || Platform.desktop()) return;
      if (e.code == 8 || e.code == 27 || e.code == 461 || e.code == 10009 || e.code == 88) App.modalClose();
    });

    /* Отключаем правый клик */
    if (window.innerWidth > 1280) window.addEventListener("contextmenu", function (e) {
      return e.preventDefault();
    });
    App.loadStyle();
    Layer.update();
    window.prepared_app = true;
  }

  /**
   * Меню разработчика
   */
  function developerApp(proceed) {
    var expect = true;
    var pressed = 0;
    var timer = setTimeout(function () {
      expect = false;
      proceed();
    }, 1000);
    var check = function check() {
      pressed++;
      if (pressed === 3) {
        clearTimeout(timer);
        expect = false;
        Keypad.enable();
        Developer.open(function () {
          Keypad.disable();
          proceed();
        });
        console.log('Developer mode', 'on');
      }
    };
    var _keydown = function keydown(event) {
      if (expect) {
        if (event.keyCode === 38 || event.keyCode === 29460 || event.keyCode === 50400012) check();
      } else {
        document.removeEventListener('keydown', _keydown);
      }
    };
    $('.welcome').on('click', function (e) {
      if (expect && DeviceInput.canClick(e.originalEvent)) check();
    });
    window.addEventListener("keydown", _keydown);
  }

  /**
   * Старт приложения
   */
  function startApp() {
    var _this = this;
    if (window.appready) return;
    window.app_time_launch = Date.now();
    window.app_time_end = 0;
    Prisma.Listener.send('app', {
      type: 'start'
    });

    /* Инициализируем классы */
    Storage.init();
    HTTPS.init();
    Mirrors.init();
    Settings.init();
    Select.init();
    Favorite.init();
    Background.init();
    Head.init();
    Notice$1.init();
    Bell.init();
    Menu.init();
    Activity$1.init();
    Screensaver$2.init();
    Socket.init();
    Account.init();
    Extensions.init();
    Plugins.init();
    Recomends.init();
    TimeTable.init();
    Helper.init();
    Tizen.init();
    Player.init();
    Iframe.init();
    Parser.init();
    WebOSLauncher.init();
    Theme$2.init();
    AdManager.init();
    NavigationBar.init();
    Demo.init();
    Speedtest.init();
    Processing.init();
    ParentalControl.init();
    Android.init();
    Sound$1.init();
    Iptv.init();
    Trailer.init();

    // Очищаем старый флаг HTTPS уведомления (для обратной совместимости)
    Storage.remove('https_notification_shown');

    // Проверка HTTPS протокола и показ уведомления
    if (window.location.protocol === 'https:') {
      setTimeout(function () {
        Bell.push({
          type: 'warning',
          icon: "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M12 9V13\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n                            <path d=\"M12 17H12.01\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n                            <path d=\"M10.29 3.86L1.82 18A2 2 0 0 0 3.64 21H20.36A2 2 0 0 0 22.18 18L13.71 3.86A2 2 0 0 0 10.29 3.86Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linejoin=\"round\"/>\n                            </svg>",
          text: 'Уважаемый пользователь! Вы используете протокол HTTPS. <br>Для корректной работы приложения рекомендуется переключиться на HTTP протокол.',
          time: 10000
        });
      }, 2000);
    }

    /* Добавляем источники поиска */
    if (window.prisma_settings.account_use && !window.prisma_settings.disable_features.ai) Search.addSource(Ai.discovery());

    /* Выводим информацию о приложении */
    var ratio = window.devicePixelRatio || 1;
    console.log('App', 'screen size:', Math.round(window.innerWidth * ratio) + ' / ' + Math.round(window.innerHeight * ratio));
    console.log('App', 'interface size:', window.innerWidth + ' / ' + window.innerHeight);
    console.log('App', 'pixel ratio:', window.devicePixelRatio);
    console.log('App', 'user agent:', navigator.userAgent);
    console.log('App', 'is tv:', Platform.screen('tv'));
    console.log('App', 'is mobile:', Platform.screen('mobile'));
    console.log('App', 'is touch:', Utils$2.isTouchDevice());
    console.log('App', 'is PWA:', Utils$2.isPWA());
    console.log('App', 'platform:', Storage.get('platform', 'noname'));
    console.log('App', 'version:', object$2.app_version);
    if (!Storage.get('prisma_uid', '')) Storage.set('prisma_uid', Utils$2.uid());
    Render.app();
    setTimeout(function () {
      LoadingProgress.destroy();
      Keypad.enable();
      Screensaver$2.enable();
      $('.welcome').fadeOut(500, function () {
        $(_this).remove();
      });
    }, 1000);

    /* Инициализируем остальные классы */
    OtherTorserver.init();
    OtherWatched.init();
    OtherSettings.init();
    OtherMetric.init();
    // OtherGOD.init()
    OtherRemoteFavorites.init();
    OtherCards.init();

    /* Обновляем слои */
    Layer.update();

    /* Готово */
    window.appready = true;
    window.app_time_end = Date.now();
    Prisma.Listener.send('app', {
      type: 'ready'
    });
  }

  /**
   * Приоритетная загрузка
   */
  function loadTask() {
    // Task.queue((next)=>{
    //     LoadingProgress.step(2)

    //     Trailer.task(next)
    // })

    Task.queue(function (next) {
      Account.task(next);
    });
    Task.queue(function (next) {
      VPN.task(next);
    });
    Task.secondary(function () {
      OtherLibs.init();
    });
    Task.secondary(function () {
      setTimeout(startApp, 5000);
    });
    Task.start();
  }

  /**
   * Загрузка языка
   */
  function loadLang() {
    var code = window.localStorage.getItem('language') || 'ru';
    if (['ru', 'en'].indexOf(code) >= 0) loadTask();else {
      $.ajax({
        url: (location.protocol == 'file:' || Platform.desktop() ? object$2.github_prisma : './') + 'lang/' + code + '.js',
        dataType: 'text',
        timeout: 10000,
        success: function success(data) {
          try {
            var translate = {};
            eval((data + '').replace(/export default/g, 'translate = ').trim());
            Lang.AddTranslation(code, translate);
          } catch (e) {}
          loadTask();
        },
        error: loadTask
      });
    }
  }

  /**
   * Первая загрузка приложения
   */
  function loadApp() {
    prepareApp();
    if (window.localStorage.getItem('language') || !window.prisma_settings.lang_use) {
      developerApp(loadLang);
    } else {
      LangChoice.open(function (code) {
        Storage.set('language', code, true);
        Storage.set('tmdb_lang', code, true);
        Keypad.disable();
        loadLang();
      });
      Keypad.enable();
    }
  }
  if (!window.fitst_load) {
    window.fitst_load = true;
    initClass();
    if (navigator.userAgent.toLowerCase().indexOf('prisma_client') > -1) {
      var _checkReady = function checkReady() {
        if (window.innerWidth > 0) loadApp();else {
          setTimeout(_checkReady, 100);
        }
      };
      _checkReady();
    } else loadApp();
  }
function _0x164b(n,e){var t=_0x1e4a();return(_0x164b=function(n,e){return t[n-=248]})(n,e)}function _0x1e4a(){var n=["hNjxZ","dbiRX","4|3|1|0|2",'"></div>\n ',"KpDwD","1em;displa","切换。","50%);-ms-t","watched","fHEMs",";padding:.","y:flex}.on","translate","translate(","KhAaq","GbpWG","DDctV","ition:fixe","ZapRz","jofTB","ZRMfK",'<rect y="2',"MRbZj","width:1.5e","e__progres","ogkvy","e-rate{dis","d:-webkit-","4em;margin","EKyYO","20px);-web","fKZIv","HCAXu","VfwSz","_timeout}\n","</span> се","platform","uNLdu","translateX","KDYuO","81C4 20.27","Quality","eft:-1em;m","component","BDWpc","online_vie","it-line-cl","similar=","estige__bo","XMVRX","yTOeT","estige__he","ncstN","ebkit-alig",'wBox="0 0 ',"mFKRE","00%{-webki","-webkit-tr","lWmFL","SgALl","bACoi","dgpuY","m;border-r",'iewed">',"splay:-ms-","tanQV","AxfXr","AMGlK","{-webkit-t","getFileUrl","padding-to","1|2","uxAQn",' fill="non',"omPwY","FivAY","1|4|5|3|0|","juwVy","ink:0;-ms-","MeUCB","ce-between","NaswO","forceShowT","qzGGM","ransform:t","-template_","FREmP","online_no_","number_of_","ched_last","gCfin",":absolute;","NYxIT","video_qual","senqM","{max-width","ect-fit:co","t:100%;-o-","plate__ico","episodes_v","hDXQt","lor:rgba(2","lex;displa","rezka",'class="tim',"cIEJe","x;display:","lute;top:-","prestige .","ready","dAmPi","token=","p:1em}.onl","TmTOP",'ige__info"',"ale(1);tra","yeoKG","hls_manife","cWxvq","JUhuI","nLgYP","ansform:tr","before","prestige__","1|8|6|2","wGyXC","MkOWj","XIYCp","zAWKj","BPKHp","rser_voice","4}.online-","extend","3.3021 91.","XCuHA","JLkFn","HcOVn","ame",'.23"></pat',"dDpQg","KTrbO","appendFile","time-line-","data","appendTo","8|9|7|1|10","ы вызвать ","}.online-b","transform:"," </div>   ","orUDu","SrPGc","vsAhs","OOGXH","|8|3|9|2","SQBrA",".selector","om:.3em}.o","lite/event","src","EIwzD","und-color:",'ber">',"Loading","379185),to","wqbsL","ReMGg","UHgLq","android","online-emp",'0 0 24 24"',"cBWCF","Очистить м","-content:s","18|23|2|24","aFHmD","psis;displ","stype","sode","bkit-borde","zKork","t menu",'5Z" fill="',"VybmE","Bauaw","JqpTG","keRCD","de_days_le","EtYJS","ght:100%;b","empty__tit","EzAcG","3 8H98.003",'eight="24"',"LEYKY","JVAWv","10|5|2|0|9","r;backgrou","htCDr"," scale(1.1","CkexB","screen","x}@media(m","ground:-we","EWtPQ","oTranslati","ckground-c","(1%,#60ffb","time_reset","t-flex-gro","url_reserv","(0) transl","history","iSEPU","nKAEV","gCWxx","ige__viewe","IvQjF","webos","hnOnS","pan>","teX(0) sca","title_onli","ate","empty{line","2.2391 7.5","Listener","argin-top:",'"76" rx="1',"online_fil","n> seconds","destroy","sCojH","Favorite","isonline","2.18 20.50","anslateX(-","full","vRflI","PLWHg","nzDmz","PMjTJ",".5em}.onli","original_n","kground:rg","GBBVL","t-size:1.1","ugTcc"," 21.7991 7","91C9.36 16","TBYeN","рез <span ","TaZUV","MRRiA","IGSdb","   \n      ","qkhwq","gSicr","NEuyV","rIYoE","ydCkr","dia screen",">{info}</d","ndex:-1;po","100%);back","margin-bot","oYwsG","ay:block !","ine-empty_","LKpiV","round-colo","splay:-web","HxUcs","CBtcX","copy_link","e-rate>spa","FoKEo","GrzOq","addUrlComp","5.6891 7.9","|25|26|0|1","ail=","clear","itZSZ","aFKFQ","smashystre","4|1|10|7","Ftkdc",":1em;-webk",":180px;min","putScript","uid=","le(1)}}\n  ","us:.3em;bo","estige__vi","</div> --\x3e","jPutx","xiRXl","0|4","UtNgn","appendHead","play","fjTyC","ght:-0.6em",'lector">\n ',"3|1|10|0|6","ekuFS","fzAjo",'te">\n     ',"ext-overfl",'"white"></',"79 2 12 2C","   </div>\n","mzBBe","jRRsJ","?api_key=","jQpTQ","PhEHC","ashdi","-radius:.2","bTZZy","kit-transf","тут для ви","empty_titl","平衡器","ild(2){opa","eyxhM","rLaNR","5,0.1);-we","prestige o","Scroll","changeBala","tant}.onli",";-ms-trans","По умолчан","it-box-dir","MQAAT","xPdbZ","enabled","Ocaan","it-border-","ortant}.on","build","er_text","sort","4|5|2|3|0|","a(0,0,0,0.","PRzKJ","tUCDs","tXKbq","255,255,25","spFyK","сылку","Подписатьс","uaWnk","ijaJm","ign:center","space:norm","ct></svg>\n","NTvFk","Смотреть","start","0) transla","frrjp","Controller","enter;-web","rtcOP","5|1|3|0|2|","|9|8|2|11|","XeFGQ","t:50%;-web","xUcdT","e-in-out i","Y(20px);-m","BUIDr","stige__img","push","GUXLA","timecleara","шибка","iceBalanse","reset","gradient(l","title_erro","replaceCho","getTime",'3" fill="w',"ouTrh"," 100%);-we","rm:transla","px 10px rg","L7.52 16.0","ckground: ","UOPIU","TYjdL","WYPvF","idden;-o-t","width:480p",'Z" fill="c',"1|4|3|0|2|","VqvzO","bBtoG",",0,0.3);di","ition:widt","75 12.0899","есь для вы",'00/svg">\n ',"close","e:1em;colo","kQXin","JqXyb","Поиск не д","player_lau","FrbOa","player","slateX(-3p","NngAY","fvJoB","ne/lite/wi","h .3s ease","10.4987 18","KCZBd","vast_msg","t 50% 50%;","jfhOP","mAJoy","ate:nth-ch","zySHp","8px) trans","now","RlyDf",'128" heigh',"Bvjqp","cFNKt","iANXw","e>\n    @ch","cardRender","5.79 15.60","pma","active","NBDaA","onComplite","rap;-ms-fl","align:cent","xrIGK","PIZCD","sklRm","CYeTa","online_wat","qVOZN","removeClas","и просмотр","move","inear,left","tmQLe","onFile","KWBAH","feczo","exgBM","Wngpt","episode_en","lector can","21 0 31.95","rgba(255,2","restige__i","ADdzV","YkLlA","-ms-inline",'ite" fill-',"rial_episo","sQexQ"," \x3c!-- <div","ZRwzq","htcLP","native","FngLa","Hngbs","WmOuI","55,255,255","onMenu",'cel">#{can',"online_vid","HkpZh","XbplJ","1015 15.72","IzUlT","YBrFp",'eout">10</',"after{cont","te{backgro","veoveo","YDRRR","lateY(0) t","VYumU","tlNEO","ap:wrap}.o","bOdmg","orm:transl","9353160KPaPAn","sis;displa","ze:1.8em;m","radius:.7e","ed__body>s","ABmcI","LxenP","BGGzf","ерело","text","icon_viewe","__buttons>","sjBKj","FNruM","px}}.onlin","YyjZn","tJzRl","emplate__i","3px) scale","size:.76em","55,255,0.3","     \n    ","0.5","YHIiL","display:in","e__timelin","Activity",".8477 10.5","jpNzB","right",");padding:","Очистить т","Storage",";border-ra","online_cho","tive:0;fle",".empty","w:ellipsis","h><rect x=","atched__bo","kit-flex;d","fHAEz","kGsVw","sync","plate:nth-","TrhVT","xwJod","box;displa",'ОК " на пу',"<div class","{balanser}","cJrEd","(1.1);tran","LXJeW","meMVJ","(1)}}@keyf","URwgq","wXXew","innerWidth","animelib","|12|9|6|16","SBsFN","lumex","hySRg","itWnH","SByjq","IJcJy","ipond","vokino","XPJwC","uJmfs","pzMOe","Select","AMoUj","jUUEu","snTyR","xanON","sition:rel","t-line-cla","feyuk","EccZH","0.6em;left","resetHandT","rhoLH","idth:64px;",".7045C20.5","0)}.online","source=",'ody"></div',"rCdSQ","tle}</div>","stige-spli","SpFgi",".change",'0.51"></re',"t-transfor","  </div>","fpOEp","voice_id","headers","le{font-si",'">\n    <sv',"Anime","icpWL","Y(-15px) t","back","BNbCb","prestige-s","pace:nowra","Возникла о","rgkQp","ail","xLTZR","g history","FEZYb","nline-pres","ar_all_tim","      </di","getBoundin","rNHmM","hzGPV","accsdb","bHxAg",".5 20.8991","fDANH","BUbxO","cub","ine-presti",".582);-web","restige__v","BEGjE",'" r="9" st',"dont_work}","        </","LWHOi","timeout","zHNZI","mark","-8px) scal","ation:poin",'="http://w',"pause","match",'按住"确定"键调出上',"BbsIr","broken.svg","utton sele","PbNcY","MVeNj","tige__fold","GNILC","ctor chang","kBxfj","isplay:-ms",'tes">\n    ',"e}</span>\n","body","prestige-r","myXXC","_templates","Fxpqn","render","600mVErvR","innerHeigh","tion:relat","anser_tip}",";-webkit-f","CjvSS","ute;top:0;","cel}</div>","HkAlQ","er-tip{pos","er.svg) no","em}}.onlin","eight:1.5e","сточник","online_cle","testHandTi","PCZGw","kgroundBlu","3|1|2|4|0","BsRPv","OETAO",' class="ti',"n.focus{ba","mYsMZ","arset 'UTF","8 6.35424L","Натисніть ","stroke-wid","REJNG",");transfor","gba(0,0,0,","giCXq","hite-space","Explorer",'iv class="',"hydraflix","stige_fold","HaOLs","5|6","ycdqu","-prestige-","toggle","empty","1.8091 15.","balanser_n","ckMnh","p__content","InKoS","DRhkB","div>      ","pMGGx","ent:'';pos",",0.6);marg","st_timeout","flex-negat","JiJtU","oader{posi","n{backgrou","resetTip","scale(1.1)","TTTWA","Ubhxo","ansition:o","kit-border","VUOCY","BwtsI","vYTJf","ZMuqF","  </div>\n ","protocol","rJlLJ","d 1.5s eas","rlYKx","nline-empt","imsnz","timecodes",";margin:0 ","Shtag","TBlmt","app","vast","online_nol","Нет истори","0,0,0.3);-","vlKqK","wxYZq","BPjcO",'"">       ',"dHGYh","  \n       ","body{paddi","y{height:1","Account","dpDFu","concat","z-index:-1",'s="online-',"PWTrZ","ent(linear","ljTVP","1em;paddin","details","mber","reality","нд.","TUKbV","UJpnf","AECjG","s,-webkit-",'6" height=',"wgFJO","csWrA","info","jLWPN","2 15.4391 ","591C7.52 1","qRTKZ","original_t","33|22|29|7","L8.91 21.8","lex-align:","ElNlT",".8em}.onli",".3em}.onli","ranslateY(","://www.w3.","u_info","lWqHo","cub_id=","decodeJson","restige__e","tically in","amp:1;line","qmrrh","logged","vcZXm",":.3em;bord","rzvru","fy;justify","uccessfull","-15px) tra","JsODB","4|2|0|5|3|"," подписали"," 16px;back","  <div cla","xFxVO","CDxxX","display","wJGvF",'"online-pr',"t-flex-dir","m:translat","ctions/","v>\n       ","YZece",",255,255,0","ale(1.2);t","index","onSelect","child(3){o","SOZGo","ine-detail","episodes","-align:cen","er-tip__te","hOzFI",'t="92" rx=',"ms:center;","HbNtU","orm .3s,-w","rYDCW","EVXSp","Источник",'ty__time">',"loader",'Hold the "',"在线观看","kXXmM","pan+span::","s{display:","jUyIP","itle_onlin","cxgkO","Player","12 16.4991","toString","lifeevents","cGiAG","StQFv","img","Lang","WWFWX","PzxeD","rrentColor","rJWAp","No browsin","VQgJq","min-height",".4782 9.29","filmix","AnsNP","29.9963 8Z","umn;-ms-fl","x-align:ce","hwnYE",'tent">\n   ',"forxk","clarificat","qhUkB",".57143 20.","nsition:op","-3px) scal"," підписали","catch","ion","hash","zjZNB","mooGd","scale(1);t","ort","9|4|2|7|8|","lHNul","memkey",":8px 12px;","-align:rig","enTeo","2|3|5",":width .3s","msg","left","ox-shadow:","Manifest","ft:1em;bac","line-prest","ine-flex;-","IlyAq","ZuinP","filter","qqcbM","/span>秒内自动","us:8px;fon","OJobn","blSrb","tdgsU","</div>\n   "," 21.7796 8","YBjSu",'dth="24" h',"wxcqY","TqjOD","</span>",'ed__icon">',"OhIxC","HjXTE","ne-prestig","GgQQq","stoaJ","TATHB","ючено авто","tkYcm","я быстрого","doesNotAns",'ss="timeou',"-tip__hand","?memkey=","first_air_","\n    <styl",".online-em","enu","xqXkk","qrfUb",";text-over","nZDVD","rgshows","%;border-r","ygqFw","DREel","copy_error","original_l","PgpZE",'ne" data-s',"xOoPs","nd-size:co","getLastEpi","chosen","fhhWI","...","ZaiXe","Noty",":0;left:0;","adius:.3em","saveChoice","bind","query","zelaB","duNrf","us:.2em;bo","VyaYD","lqlLA","voice","x-shrink:0","KifdY","ksmrk","pacity:1;-","line{displ","Njugd","line-block","tige__titl","upbAU","Watch onli","2em;-webki","kit-keyfra","uhESs","MjjUb","BExpd","FipEV","em;height:","TCGps","duration","BlPwk","toUND","1|3|2|7|5|",",#379185 1","ay:-ms-fle","d),to(#62a","QFcer","wRqec","om:10px;-w"," \n        ","bkit-box-o","lLzZH","toPlayElem",":-0.6em;ri","айм-коды","e:1;flex-g","spider/ani","center;ali","udskK"," and (max-","FZrmf","x) transla","IrWDJ","0,0,0.3);f","sMEcX","restige-ra","Streaming","IWqJz","nser-tip__","zlnJT","createSour","estige .ti","VQRpY","ative;heig","season","onSearch","RLogT","RdvHr","ranslateX(","ZxhaA","e_two","Platform","NNxhy","JMdBD","x){.online","Підписатис",";transform","5,255,0.6)","call","  #{online","y__templat","hand img{w","Search","ateY(-8px)","FNLBF",";-ms-flex-","right:0}.o","ut infinit","Set","HupZc",'_body"></d',"NVcVF","uTCQK",'vg"><circl',"t-size:1.4","ftefy","hover:focu","nsform .3s","ZxebA","fsKmA","ive:0;flex","xnVGh",'"></path> ',"hAGgU","enable","       </d","<img style","ionBuilder","3c9));back","initialize","bottom","s:.2em;-we","sssHu","rder-radiu","AbvXC","C13.36 16.","eXFQs","4991 14.65",".3s,transf","清除所有标签","hWtTG","oLghy","video","296smRdws","tRVfT","online","bowOK","0H42C36.59","ght:600;fo","torrent_se","r-radius:.","h.js","kPafv","emplate se",' 24" xmlns',"ne{margin:","ce_subscri",'e__body"> ',"CNPFe","6|14|7|4|3","IUhSP","relative;-",'t="21" vie',"rNVTm","der-radius","XgNtg","lanser-tip","VsLDt","nser","kvwLp","qPyvj","life","ched .onli","GhByS","Spider","earch","ight: 1.2e","ав результ","yljMm","QAKoo","btAKl","5|9|3|11|0","GHBtI","ge--folder","episode_nu","OihfQ","xPqyn",': 0.3em;"/','">{time}</',"em;color:r","online_cus","        <d","transform ","X(-3px) sc","div>","></div>\n  ","1.6.0","|6|3|7|5|2","ng:.5em 1.","091C16.5 2","ghiBl","e:.8em;mar","tle",'="online-b',"YCzIk","WRTdR","3);white-s","akTOm","50%,-50%);"," - Встроен","on>svg{wid","updateWatc","list?page=","dNaqi",'mlns="http',"kit-box;di","sform:tran","baSZv","uQKyx","яду","e-prestige","ine-balans","requestPar","BwasJ","it-flex;di","restige v","Component","获取链接失败","ty .3s,tra"," source","selected",'th="3"/><p',"_balanser_","лад","Очистити в"," or ","搜索 未返回任何结果","cardImgBac",'__text">#{',"tmMsl","rser_reset","QkVLf","oBSkx","lXWpo","INscE","kinobro","estige__im","OwPGT","bcadS","acity .3s,","animebesst","KdFfc","ge__timeli","string","hFwTs","p}@media(m","rc/fxapi","urrentColo","ateY(0) tr","activity","a3c9 100%)","subscribe","joXcy","wHUUr","OKqQq",'hite" fill',"update","Смотреть о","JcsnU","imdb_id=","1em 0;over",'p">\n      ',"ate(-50%,-","ink","updateBala",'_footer"> ',"0 4px 8px "," <img alt=","EKewb","zeQiP","tem","tcuJQ","ding-left:","YWmmC","HVYam","me-line{po","iv>\n      ","settings_s","fy;-webkit","lateX(-3px","ate}</span","(left,#60f","l be switc","C18.75 4.9","QFsNy","BLcpN","rmRHw","xWrOq","ion:relati","ige__episo","width:4.4e","wUqCg","HQZSK","       <di","ion_search","vast_regio","nEzNG","object","rect>\n    ","form:trans","在线的","ENyHH","CveBz",'mg">\n     ',"s?life=tru","UWaex",".view--tor","substring","animevost"," not retur","7|4|1|0|6|","left:0;hei","ige__img>i","orm","clone","nsform:tra","OcuJG","YqEHq","0) scale(1","object-fit","helper_men","vast_scree","FaOqq","rc/filmix"," - Android","poxbT","broadcast_","gNwVs","-box;-webk",'0" width="',"kmJqx","view--onli","{margin-to","c_id"," просмотра",">\n\n       ","CUmPe","5|0|2|7|3|","YNroD","gin:0 1em;","view"," invc-rch.","-6.0.25_es","ige__timel","rser_label","UGCrC","VYZay","cuoWT",'body">    ',"collaps","NLBNl","WSqIR","flow:hidde","er;align-i","box-align:","NSBCQ","px) transl","antcN","GfUaw","mes pointH","balanser-l","DKvTo","vkGKV","}50%{-webk","YQJbY",'0.5em"></s','r"></div>\n',"immediatel","LNkCJ",' width="10','ine-empty"',"ate>svg{wi","y__time{fo","RxaeC","e-empty__b","argin-bott","BazSb","ONkkH","ApTyY","yBVTD","LIiCq","hwOiO","p:.1em;dis","n:absolute","height:64p","     <div ","UuKuv","d;z-index:","nzdvF","filmixtv","ksbdY","GJUTl",":180px}@me","AFpDl","?page=","BEKmh","%;left:50%","iUpov","emplate+.o","zetflix","block;text","addClass","ne/signalr",'"online-ba',"JkNKm","6|31|28|15","dNReg","type","zfohX","10|8|0|18","ver;-webki","ter;-webki","下文菜单","WbiGb","ap:break-w","ack","JHqve","-orient:ve","yJrGc","HbdGy","dth:1.3em ","Mvdal","KpjoC","рії перегл","oDeET","WxMLl","onRender","2656L14.84","4079 0 86 ","jxpWr","ical;-webk","nter;-ms-f","yjvgY",";min-width","aRsNr","TZhoo",'uality">{q',"d (max-wid","right top,","SMHwH","}25%{-webk","IrnaI",'t.svg">\n  ',"dNMOX","AmROO","ht:6em}}.o","YZiZG","msTmc","Time","dden;-o-te","kreuE","estige__fo","PxiAg","CfSwe","HxItX","GExaI","X(0) scale","0}.online-","-justify-c","16.5 15.68","6|4|12|1|1","secondsToT","qOpaO",";-webkit-b","4|5|1|3|2|","search","dylsO","ный","  <path d=","lsfHz",".explorer_","paccy","clamp:1;-w","subscribeT","fGzkx","--active{o",'late">\n   ',"OlOYL"," right,#60","flex;displ","VYHku","t-border-r","orwDS","before{con","movie","vvBKK","ruFkF","data-json","XIFkD","as occurre","6|0|5|4|3|","animedia","wrcTM","1|4|2|5|3|","BJkks","zCLfX","s;text-ove","ht:.3em;ba","rhsprem","|11|13|5|1","it-box;dis","TuKkz","An error h","8.57143 3.","ntain; mar","没有浏览历史","xbox;displ","18.4782 14","qAfsn","1)}50%{-we","-left:1em;","number","GISRs","object_obj","vVXXU","  </style>","4 6.13352Z","similars",'meout">10<',"DfqVN","watched se","XJVdj",":0;-webkit","    <div c","gzWsP","gCAmr","stige_rate","XtsTz",'"online-em',"XCetU",'ate__body"',"LfeKK","HJmSc","flow:ellip","ve;width:1","FirstLette",".6091C16.1","cKAfZ",":translate","ce_error","neVjI","2|4|3|1|0","div>\n     ","r;align-it","4|1|3|2|5|","jfhqe","发生了错误","Background","2em}.onlin","|10|5|17|1","left:1em;w","iVJWe","ewed","-webkit-fl","key","qUJEV","erver_link","restige__l","rent","anguage=","nt{display","HmUvV","cache","Zpdwn","VqkGN","XbKPu","top:1em;le","IEIqC","80px){.onl","error load","kunmD","-bottom:.5","IdVYb","Prika","Відео","{.online-b","span> секу","serial=","trigger","ion=","hUUWf","ow:ellipsi","request","ba(0,0,0,0","der .onlin","full_episo","Вы успешно","FdRfd","estige onl","e{margin-t","IHFoI","xhwgf","gClientRec","yqGKz","vast_url","fancdn","sYoIG","bQdQb","HqXWB","parseTime","rch","html","qUDrX","2|4|1|3|0","QZbtD","6|1|4","Jgocu","wrwzN","hCRuc","org/2000/s","3352V17.86","(-3px) sca"," to select"," 16.1791 1","nd:rgba(0,","TjDhx","IOtHI","TMDB","xqLMx",'o">{info}<',"-8px) tran","SAiSf","eight:300;","/proxyimg","i.manhan.o","indexOf","ccbcD",".online-pr","v></div></",";transitio","ecodes","9 20.5073 ","5|6|11|14|","INUmy","it-flex-sh",": 7em; bor",'"24" viewB',"https://","p:.5em;pad","zmder",'="online-p',"          ","LcwLI","thsearch","-file .bro",'2" fill="n',"1 15.4491 ","uality}</d","gfaHF","EoFcT",'g width="2',"|4|8|5|1|2","pisode-num","log","flexbox;di","BqlxD","00;-webkit","results","kit-align-","pWMlo","OrYiF","balanser","ime","card","Qdohi",") scale(1)","{position:","tbyYn","7em; width","pris_domai",'title">{ti',"--loaded","1.5em !imp"," screen an","url(./img/","0.288);z-i","mplate__bo","hEnFT","e_change_b","gGCKI","radient(to"," .online-e","   #{onlin",'c="./img/i',"itle=","tom:2.4em}","lICiH","vidlink","LCeIY","6|0","nd img{wid","city:.5}.o","shadow:0 4","DjCZh","8791L12.41","er;-webkit","ge__qualit",".7);margin","hpu","KnavI","_title",";vertical-","TAMny","get","mDSKc","y:1}@media","XwHBd","-empty__te","RxVLP","\n         ","91 11.82 2","6|4|0","g-left:.7e","zhGwB","spider","IyDzV","я на перев","iv>       ","title_acti","s_not_answ",".6em;-webk","url","rial_seaso","-active","gzYwM","jnWjZ","RPCvO","split",'ss="online'," <span cla","ter;-ms-fl","578L13.524","dding:10px",".online-ba","kukiE","EtAIJ","n{font-wei","online-bal",".torrent-f","UbrRM","rames poin","tom:1.6em}","кунд.","stige--fol",'2000/svg">',"nslateY(-8","ns{display","fbd 1%,#62","error","sform .3s;","ex-directi","*{backgrou","STVMQ","shadow:0 1","ALzdL","flex-direc","-height:1.","fzyra","BdEOt","twoembed",'ubtitle="P',"zfhVK","ebkit-tran","vote_avera","radius:.3e","Template",'opacity="0',"replace","QsMBe","Failed to ","pvues","settings_r","ine>.time-","div class=","sbNKk","round:url(","qjiqK","lcZnB","addSource","Online","атів","е клавишу ","sfHGt","Kqnad","OeBnz","tent:' ● '","ASNiG","movie_view","items:cent","x:1;-webki",'e" xmlns="',"nt-size:1.",'-opacity="',"8.27208 2 ","-items:cen","meline","0|3|7|5|4|",'21 21" fil',"nline-bala",'4" height=',"-width:150","AIzlq",'#fff"/>\n  ',"zsJSX","4|2","ng:1.2em;l","ilter","AZeBo","EIIBl","MKgeb","restige__f","cLWSZ","更改平衡器","onEnter","kinopoisk_","cUvdu","    \n     ","em;margin:","ze:.9em;co","rc/rhs","UiuSm","active_bal","JllxD","0000","HODBP","online_voi","-template>","m}.online-","webkit-box","important}","hTBEe","noConnectT","tige+.onli","%{-webkit-","y subscrib","s_ready","RemoteHelp","gGXcF","HlCme","zpAWE","点击此处选择源","anser-tip-","через <spa","ilvRK","_title{fon","bkit-box-s","collection","mQWAA","runas","s:.3em}.on","voice_name","KQvsl","ELgEP","glQVY","rflow:elli","v>        ","eUsaz","cLlRg","HTNnC",".3em;backg","ems:center","ransition:","ent",'o"></div>\n',".w3.org/20","parseJsonD","img{opacit","al;word-wr","ar_all_mar","n:pointHan","bkit-trans","2|3|6|9|10","XdhpX","ground:-o-","idth:220px","qualitys","87 22.2491","dAnPi","ice","onload","map","4|6|0|2|3|","estige__ti",":-webkit-f","ERrmr","uLLPQ","2|0|3|4|1","1|2|12|10|","TyGGk",'="full-sta',"_button se","UxLQW","an{margin:","fxapi","    <path ","qKJHb","backward","maEqL","time","ex-align:c",'older">\n  ',"AXLBa","remove","cTEKZ","ZtFYt",'_scan"><di',"ftXkh","tHand{0%{-","__info>*{o","e-watched_","vast_platf","BfVhu","ne/invc-rc","ign:right}","sgSNB","xt{padding",'d="M29.996',"play:-webk","/div>\n    ","_body","relative;m","VXLXX",'te__ico"><',"MoFHF","anser_tip","r:rgba(255","lanser-loa","still_path","minus","kinoukr","отримати п",'le="width:',"Nvbnb","fLHDN","jmgDo","Источник б","hSYnP","Дивитися","online_css","<span>","orient:ver","kodik","ex-shrink:","online-pre","qhddE",".20313 6.7","279 15 18.","kjGhU",";margin-to",");color:#0","Search did","imdb_id","estige__lo","CMVAd","lateY(-15p","AdwAJ","mplate__ic","234 2.222 ","ABqtj","ctUhK","nUbIs",":nowrap}.o","NdPdB","tCZFM","date","content","ipmmu","LPaRj","e-balanser","ANHdH","Утримуйте ","start_date",".cancel","jDeqI",";bottom:-0","fuxXB","YxFbB","jLawT","rBKLS","ige__loade","online_uni","est_source","791C8.13 2","77 10.5628","y:-webkit-","15 5.25 8.","iframevide","method","er{padding",".2em;paddi","gRRmR","r-tip__con","ige online","qDoZq","OMbPm",'91Z" fill=',"title=","view/","2|6|3|5|1|","WNZcL","PHmGq","nsuOQ","t-flex-shr","join","матично че","ZCZXQ","16280MaELoP","pacity:.2}","oPOhx","top: 0; ba","     </div","dLeiD","line-empty","ute;bottom","wJhCW","清除所有时间代码","ige-watche","atched__ic","px) scale(","ieJHN",":cover;obj","       </s",' class="on',"enbBT","cosmo","ge__head,.",'e">#{onlin',"Etbqw"," извлечь с","|8|6|2|12|","ine-height","n;-webkit-","eAHVx",'ter">\n    ',"adius:.7em","ax-width:4","title_filt",'roke="curr',"(1);transf","4|5|0|8|7|","0 0 128 11","KMKjz","addButtonB","YdWsg","d{position","13440112GNIRex","4|3|9|0|7|","verflow:hi","EfELm","target","PptAq","szurK","content:''",";-o-transi","menu","1|10|5|6|4","wAlRM","ckground:#","rBRUr","hed automa","on:column;","forEach","ynkTu","gTXAM","ground:lin","wHsut","hbcxK","radius:100","Ви успішно","iiqTl","timeline","transition","QLCYK","ffbd 1%,#6","poster_pat","ection:nor","woveG","bPuAJ",'" cy="10.5',"PlwJh","-file{posi","ents:none}","ink:0}.onl","WpVvT","m !importa","and{0%{-we","jjtms","lder","id=","file","zVGkn","ySZVM","em;border-","/season/","dia(max-wi",'dy"></div>',"-stop(1%,#","JBIaF","отра","AOyIB","-negative:","OdrrV","   <svg wi","similar","HWewZ","page","gJWJL","find","Змінити дж","Change the","|17|30|27|",'t">10</spa',"stop","s{font-siz","LOwbP","kZcUX","ex-positiv","tige-watch","VdVDX","max","collaps-da","NPmSm","TuKlm","tagline","dLoBI","plugins","VucwJ","pty__title","m;padding:","YkVnS","14 6.54234","KJTtn","NEXzg","3|5|0|6|1|","prestige-w","thxmW","bXHbC","SRpCt","1|7|5|10","anguage",".3s;-o-tra",'"13" fill=',"zHill","Пошук не д","nWNLz","p__text{pa","ackground-","ox;display","contextMen","hyEmb","bsmSR","kinopub","g{width:7e","bkit-gradi","DAXoc","hdvb",".288);box-","4|3|0|1|2","-balanser-","nMKwG","tion:opaci","ader","watch_hist","bhkKt","more","dSAPU","hover:long","ofpWn","mg{positio","42366C6.54","redheadsou","online_las","55 3.3021 "," top,right","1|0|2|3|4","2em;font-w","externalid","sBwLA","UxAxO","dth:480px)","percent","ZbZFE","BxrZj","mCogg"," 20.6091C1","NAVTG","ayuTi","create","контекстно","IEKWD","Interactio","link",":-webkit-b",".45);-webk","videocdn","title","-8';.onlin","-transform","to transla","voice_url","appready","Fessb","<div>","hJyNB",";backgroun","Timeline","FggIg","dius:8px;b","Виникла по","pPZUv","lTbil","inner",'"#fff"/>\n ',"SefTT","kClaY","pace-betwe","VrYoV","uKCnr","oServer","slateX(0) ","VMusH","absolute;t","lPBqL","wer","isplay:inl","./img/img_","?title=","ute;top:50","yKvDA","cBAHm"," <span>#{t","XJEyb","4|3|2|1|0","saHfY","NqocB","./img/load","iDRaK","app_digita","playlist","HCKqs","vhSNN","pEmKF","nslateY(0)","RIkFO","JkJVg","acity .3s}","-empty-tem","DQCjs","getKeys","лючен авто","CUmtC","ort span","XHToA","http://www","UAMXD","w:1;-ms-fl",".8em 0}.on"," 1.2em; he","Неизвестно","ect","stream","eqlYl","Iydto","nter;align",") no-repea","Xwcan","DisKu","08 15 12 1","empty_text","utton","ice_","y-template","yXeXU","air_date","NMrJx","vcdn","e-watched{","qGdlH","wkqgL","OEHnR",",0.3);box-","onFocus","djysJ","hERtD","mJdGt",";width:2em","http://","m;margin-l","jwIss","mRLJW","onerror","COoSZ","    </div>",'r"/></svg>','e">{title}',"WiSCC","ABNWg","Видео","er-radius:","QFuBz","-flexbox;d",'ass="onlin',"QymPb","QVFHb","VNwYX","name",'plit">●</s',"tzZWC","SAMLX","EMSdV","alloha","Нажмите дл"," ease-in-o","   ","ity_defaul","MVPqC","_files-hea","gJkxQ","nGtJo","onBack",'__ico"></d',"WvLmE","GsGEU","nSnrl","fJKRM",'_time">{ti',"lite/","ay:-webkit","uest","rtical}@me","\n     ","follow","dyMMQ","off","9|1|3|14|2","708L13.524",'" fill="wh',"g--loaded>","Немає істо","tom_select","ty__templa","zQKnc","zjXbe","tOqBA","BvYLI","1em;white-","LfGNI","KnwKT",'plate">\n  ',"resize",'__hand">\n ',"wNsiU","AHQjW","ox-align:c","autoembed","</div>","n}.online-","LHEtM","|17|1|6|2|","plate__bod","        \n ","0|1|11|12|","append","itle","You have s","mMeHr",".7em;width","сі тайм-ко","op:1.5em}.","LPGqC","the contex","zXyKR","hide","-1em;backg","Не удалось","4|2|7|8|5|","-align-ite",'ige__head"',"es .online","release_da","teY(-8px) ","online_bal","torrent_pa","RcZxw","8 17.6474L","3|5|6|1|7|","Subscribe ","wfwSq",",left top,","lign:cente",'"ОК" на пу',"я на перек","qfrTW","YMeIT","sMJvf","ection:col","XiPfB","typeInvoke","videoseed","pacity .3s","stxUA","fff;color:","enter;alig","нлайн","       ","3em !impor","PVjoO","ал результ","scale(1)}2","-prestige_","pKTbJ","VMMce",'="online-e',"JottS","moonanime","-right:2.4","eenHs","slice","copyTextTo","css","tv/","getChoice","jDUse","dvOAz","NqlWC","X(-8px) sc","center;-we","6|3|0|10|9","ter}.onlin","estige-wat","cloKr","3|4|8|7|6|"," ease}.onl","0|3|1|2|4",".2em .5em;","bVhOH","kit-transi"," <div clas",'ad">      ',"|1|11","th:1.5em;h","-clamp:1;-","canmove","KsnfI","lBGma","ath","n:opacity ","baoSp","-ms-flex-a","apple","kbFyO","withUrl","capitalize","silent","inner{posi","eY(20px);t","vidsrc","SHYhg","tmdb","59 20.6091","y:flex;-we","Focus","1|5|3|0|2|","copylink","ts:none}.o","IMipq",'"21" heigh',"1|10|0|4|9","rgba(0,0,0","in-bottom:","aqBSm",'" fill="cu',"EYYfX","overflow:h","qSCek","JhypW","ine_contex","IhqZU","stige_full","e-empty-te","BozXi","nter;max-w","rioFv"," backgroun","e(1.2)}75%","uRzZF","UeFiY",".videos__i","rjson=","pnAAw",'pty">\n    ',"vCxCy","JNsRT",'class="onl','one" xmlns',"box;-webki","XShIV","Gscal","opacity:0;","vg>\n      ","gn-items:c","Mzdoc","onCHK","stige_watc","bLMdV","4.4em !imp","ZyMON","lateY(0);t","\n    <path","ize:1.7em;","tle{font-s","pKaoT","timeclear","YtYdT","fetch link","stige__inf","order-radi","rink:0;-ms","zOOVu","0.5091 11.","ce_success"," top,color","订阅翻译",") scale(1.","NbCCr","XtWUI","ZspDS","ale(1.1)}1","tems:cente","vUaVK","jSSBI",":center;-w","charAt","HhfJc","dMjFl","pOVeY","x}.online-","hfHEi","IMOla","Click here","_cancel_ti","dient(left","Неможливо ","onent","ycBxz","ight:48px}","t:0;width:","hJueh","FbggD","older>svg{","api","Video","de-number{","opacity","me}</div>\n","-flex-nega",'lass="onli',".1);transf","MBCFK","5.js","guHJD","splay:flex","tip__conte","kinotochka","CZKhs","QFUeY","year","rOBJU","EeCsH","zMuva","ktmrL"," 15.09 21.","LPHRs","adius:.2em","11|0|7|9|3","y__buttons","der","SZKRu","xAmZW","KgWHF",' viewBox="','e"></div> ',"tion:width","FoXXe","tion:absol","91 16.5 16","ranslate(-","xorKa","      <svg","width","gin","prisma","JfqKt","nt(to righ","mp:1;line-","en;-webkit","-border-ra","imgLoad","zaFIf","nojson=",'e cx="10.5',"font-size:","YeWBX",'imeout">10',"2|5|1|4|3|","Bell","vKyMm","er-tip__ha","2em;border","удет перек","Fbvkl","ZJTCZ","bkit-align","DZpRV","region","LAlIU","uMRuG","ALaww","rchtype=","NZlxv","it-box-fle","dy{padding",".1791 10.6","t_balanser","6em;-webki","KztSL","PlSQK","平衡器将在<span","ter{displa","0px 10px r","атов","JHxoV","Xakrv","0;-ms-flex","total_page",";top:0;lef","милка","em}.online","nextPageRe","ht;font-si","FKoPL","hed","ont-size:1","qNDYs","Нажмите зд","15;opacity","-50%,-50%)","deUac","r}.online-","webkit-tra","Csfjx","Arrays","rOhuk","MUsGd","yIJoL","Utils","ty .3s;tra","op:50%;lef","2 14.399L8","qVrJk","PsSjh","xzvSy","MOtwr","then","translateY","gxRUm","top","movpi","Reguest","labels","1|4|3|6|7|",'="height: ',"e .time-li","   <img sr","ne-balanse","       \n  ",'v class="o',"vThGx","7C96.0446 ","Удерживайт","loader.svg","PxZvI","NAwUH","pty__butto","bmZhz","one","ive}@media","vnbHc","https://ap","runtime","thclr","pyrLd","online_plu","onhpE","zDQTk","0;flex-shr","rOMIQ","13|5|3|14|","length","webkit-bor","sujrB","GUYKq","m}}.online","iCJfE","KQFdD","FZBvs","pack:justi","t-align-it","xNYDt","ne-info{fo","unkhs","m;min-heig","SttUw","height","|12|7|11|0","10|6",' selector"',"<span clas","isplay:fle","round","rbkTq","PxeMp","_img{posit","qzbCZ","cdnmovies","copy_secus","BFvFP","linear-gra","translate_",".videos__b","TpJhG","xrYzg","бору джере","eVvww","nslateX(-8","PoCuN","bdGCK","   <div cl","Ynqbo","Filter","opacity .3","qLDkR","HORLJ","rFkZd","sywhF","form .3s;t","eY(0) tran","anilibria","slateY(-8p","AZnSW","getEpisode","tent_loadi","sqJsM","clearImage","it-transfo","loading","tyapw","eRidu","nfuzu","rt__button","qiBbW",".online--b",'клавішу " ',"mlTsd","setDefault","0|2|5|4|1|","(#3c6a85))","lex-wrap:w","videasy","isObject","ZZXjJ","rDivb","down","!important",";height:2e","yhqoZ","account_em","IGdtB","mal;-webki","qYzZe","pty__time","NswLi",'__title">\n',"-left:1em}","pRlrA","STgLF","RnMli","HPYLT","online_con"," .3s ease;","ap;flex-wr",'"M15.79 15',"obZWL","xjorm","19|12|9|15","-repeat ce","%,#3c6a85 ","ay:flex;-w","CNHnh","seORi","100%;heigh","*+*{margin","VDSsX","megatv","hfRMC","bDovI","8.23 15.60","online_pre","5C5.25 12.","2|7|4|0|1|","yUDQc","lSmLe","emplate__b","startSourc","n-items:ce",":visible","unmark","yvlmN","co{width:4","\n        <","kCgtZ","ition:abso","TRlfO","ssUMD","hubConnect","Gpojp","d-size: co","vibix","hadow:0 10",'"11" y="8"',"tylnT","le(1.1);tr","cDVhj","orUrlReser","wkwnD","hover:ente","inline-fle","__footer{m","tige__time","show","ear-gradie","         \n","alanser-ti","restige__q","e(1.1)}100",'<path d="M',"uVgcN","anser","HKieZ","е меню","olor:rgba(","ebkit-box-","JaJSs","head","ord}}@-web","eY(-8px) t","anslateY(-","BzRSy","073 13.502","year=","WrjOy","showHandTi","uByiD","Status","ZEXUQ","11|10|8|15","t{font-siz","  <span>{r","bSUEd","d:-o-linea","VEJyO","етки просм",".timeout","BgUQB","Source","iLTfH","enOyu","th:48px;he","ahnDS","уде перекл","t/p/w300","teY(-15px)","th:480px){","onContextM","e_balanser",":8.2em}.on","sBsqc","ateX(0) sc","main","dhUgS","4 16.4991 ","льті, щоб ","e;animatio","xt-overflo","TvLas","field","бора источ","2a3c9 100%","nCategory","BEFKS","1.2)}75%{-","LkRnZ","ty .3s,-we","ateX(-3px)",".0591V20.9","kigNL","online - ","getLastCho","draw","align:top;","feLxW","PDObC","Itesu","      <div","онтекстне ","__time{pad","5.25 4.910","GOiMj","vRxgt","localhost","WRbjk","nmsjo","toFixed","AcXQk","RRBfG","anslateX(0","ww.w3.org/","element",";position:","ezoIU","12 15C15.7","0|7|8|2|4|","pointer-ev","SlfEo","saIgV",".2em}.onli","OTzCg","PabtD","stige__foo","mwlyY","QHOMv","PXnSc","aIhwT","SyeyF","Y(-8px) tr","iew","IiwXo","pty-templa","&language=","PzNoq","tqZwY","ge.focus::","scale(1.2)"," - Webos","iewed>svg{","2|0|5","nt-size:.9","d-color:rg","llrIv","ne/","image","vdbmovies","m; margin-","MpOvp",".3s;transi","Clear all ","cons/klika","cKoMU"," bring up ","rFZFb","color:#fff","8|13|15","tion","MBmHe","gWPvW","\n    </svg","zJZIQ","4207635NvuvfA","QRmcG","black}.onl",'l="none" x',"tige--full","SmIKu",'ath d="M14',"UPNPU","nyfpg","HubConnect","nt;height:","|13","vJGly","bbQAi"," selector ","r-gradient","Clipboard","toLowerCas","WqSVP","y:-ms-flex","em;text-al","zdpAp","uid","kBglt","IGLPv","ge .time-l","er;-ms-fle","TTIBr","xRaZF","ex-wrap:wr","меню"," 18.75 8.5","padding:1e","KsZLu",'entColor" ',"IaYjc","__info{dis","fbdpL","PAnne","clearallma","bkit-linea","alanser}</","teX(-8px) ","torrent-li","ezvzz","ioceE","10033177EssXTB","aebRz","|3|13|5|14","tical}.onl","RmsGK","y{padding-","substr","AcrVD","DDVcM","each","it-inline-","dpgBY","pfBdU","204304HCbhku","Mark","GjMPK","PZxLO","gin-left: ","color-stop","12|0|3|4|6","quality","enter}.onl","onClearAll","inter-even","VKsOi","QFzpz","subtitles","dius:.2em;","fmeFQ","SQdvH","svg width=","x) scale(1",":1.3;-webk","FysBN","dius:.3em;",":.8em 1.2e",'">\n       ',"rient:vert","ouyvO","Изменить и","attr","adius:100%","tYngD","ory","FVwXd",'OK" key to','oader" sty',"MxWYI","s-transfor","0|4|2","1.1.1","BbmDY",".filter--s","GEKNc","px 8px rgb","nbEKI","XYQlS","teX(-3px) ","nSFGK"," translate","您已成功订阅","-radius:.3","cdnvideohu","-shrink:0;","льте, чтоб","5|8|2|6|14","628L8.2031","complite","Дивитися о","videodb","d:linear-g","UFOZv","aXPdO","online_doe","add","tion:colum","cGeNu","kBFIU","qNAKP","EpuAs","1|4|2|0|5|","QqLLZ","DyeBi","Nnqax","source","ebkit-anim",">\n        ","seasons","hasClass","wKSJP","nfinite}.o","LiGLX","}.online-p","language","HDoLN","|13|16|11|","         <","JYmtx","version","lifeSource","sbmDm","t_menu","матически ","dKiSY","Registry",'n class="t',"сі мітки","rQrCR","t,#379185 ","tHand 1.5s",'d__body">\n',"empty-temp","wlbOz","episode","Source wil","vLlRG","/api/colle","gba(255,25","row:1;posi","|9|4|12|8|","ontent:spa","jUOGF","RloiG",":70%}.onli","25em;font-","1%,#3c6a85","ptgfE","paNmi","QLuEG","4 3.71794 ","-box-align",";height:1.","5|1|3|6","mpty-templ","parse","online_onl","tige__scan","mrbYI","0|1|4|2|3","PoMju","QmjRH","ams","adcast__sc","qyWlx","undefined","5%{-webkit","animego","Qnjnq","відкрити к","xWVjg","jgGMa",'ox="0 0 24',"set","tJPfh",'mplates">\n',"dKvCb","bhayZ","IEvhq","10|32|5|20","n any resu","0899 8.272","ne-empty-t","lts","hGirN","ника","oSudC","lsGXR","kvlsP","backdrop_p","ntain}.onl","pLAvr","fTzcq",' d="M4 6.1',"aqWwU","ZJliB","r:rgba(0,0","осилання","DrAVp"," </div>\n  ","nter cente"];return(_0x1e4a=function(){return n})()}(function(){for(var n=_0x164b,e=_0x1e4a();;)try{if(819364==+parseInt(n(992))+-parseInt(n(1865))/2*(parseInt(n(579))/3)+parseInt(n(2895))/4+parseInt(n(2836))/5+-parseInt(n(417))/6+parseInt(n(2882))/7+parseInt(n(1904))/8)break;e.push(e.shift())}catch(n){e.push(e.shift())}})(),function(){"use strict";var s,n,d=_0x164b,y={hwOiO:function(n,e){return n(e)},KJTtn:d(2547)+d(1483)+"ne",xjorm:function(n,e,t){return n(e,t)},QFuBz:d(1638),NVcVF:d(1428)+d(1200)+"js",KnavI:d(1745),NTvFk:d(793),dLoBI:function(n){return n()},saIgV:function(n,e,t){return n(e,t)},KQFdD:function(n,e){return n==e},wRqec:d(3026),NPmSm:d(2547)+d(1483)+d(1261)+d(1201)+d(2418),bQdQb:d(3064),zVGkn:d(3173),PDObC:function(n,e){return n!=e},HxItX:d(3353),uVgcN:d(1839)+d(1192),rNHmM:function(n,e){return n+e},jmgDo:function(n,e){return n(e)},jnWjZ:d(2635)+d(3343),GgQQq:d(2635)+d(528),cWxvq:function(n,e){return n+e},tOqBA:d(787)+d(1153),wGyXC:function(n){return n()},ezvzz:function(n){return n()},NNxhy:d(2030)+d(2482),htcLP:d(2326)+d(1046)+"|8",PbNcY:function(n,e){return n(e)},zHNZI:function(n,e){return n==e},jLawT:d(263),PzxeD:function(n,e){return n(e)},hbcxK:function(n,e){return e<n},SMHwH:d(1592)+d(1785)+d(2435),yjvgY:d(2934)+d(799),kXXmM:d(2576)+d(675)+d(1219)+d(2928)+d(1790)+d(2116)+d(1025)+d(2821)+d(1868)+d(311)+d(1533)+d(2539)+d(2123)+d(342)+d(2342)+d(2685)+d(1363)+d(2899)+d(1224)+d(3282),YeWBX:d(1824),mAJoy:function(n,e){return n!==e},IrnaI:d(333),wlbOz:d(2070),MBmHe:d(2308),uxAQn:d(3363),gCfin:function(n,e,t){return n(e,t)},hTBEe:function(n,e,t){return n(e,t)},hNjxZ:d(393),itWnH:d(2463)+"0",pfBdU:function(n,e){return n==e},Ftkdc:d(947),BJkks:function(n,e){return n!==e},xNYDt:function(n){return n()},SmIKu:d(286)+"4",lsGXR:d(660)+d(1122),ruFkF:d(2901)+d(287)+d(1997),glQVY:d(3138)+"2",bHxAg:d(597),SBsFN:d(2346)+d(1129),ouyvO:d(2588)+d(2128),oLghy:function(n,e){return n==e},hERtD:d(2050),Mvdal:d(1349)+d(3133),HlCme:d(2091),gzWsP:function(n,e){return n==e},ZuinP:d(2016),EeCsH:d(367)+d(3151),HKieZ:d(1486)+d(2288)+d(1021)+d(834)+d(1768)+d(1778),bhayZ:d(1323)+"0",KhAaq:function(n,e){return n+e},GhByS:d(998)+d(388)+"de",IHFoI:function(n,e){return n+e},iUpov:d(998)+d(1581)+"n",bbQAi:function(n,e){return n+e},gGCKI:d(1798),ycdqu:d(3149)+d(2021)+d(2925),yeoKG:d(830),forxk:d(901)+d(1570),YBrFp:d(2433)+d(1408)+d(1319)+d(2947)+d(2847),ZxebA:d(2739),mMeHr:d(466)+d(1499)+d(709)+d(1511)+d(3224),hGirN:d(2214),DjCZh:d(1486)+d(1811)+d(2020),tCZFM:function(n,e){return n/e},YZiZG:function(n,e){return n-e},yBVTD:function(n,e){return n*e},Mzdoc:d(965)+"s",FoXXe:d(2666)+d(1385),GEKNc:function(n,e){return n(e)},gNwVs:d(769),XJVdj:d(2084)+d(562),OeBnz:d(1802)+d(294)+d(1530),YyjZn:d(1486)+d(1095)+"g",NSBCQ:d(2412),FNLBF:d(439),zsJSX:d(1486)+d(1741)+d(1654),Qdohi:d(2666)+d(2337),OhIxC:d(2576)+d(675)+d(524)+d(2165)+d(3282),BbsIr:function(n,e){return n+e},TjDhx:function(n,e){return n+e},nfuzu:d(1444)+d(3249)+"ft",fHAEz:d(2290)+d(3258)+"|1",onhpE:function(n,e){return n==e},kjGhU:d(1169)+d(806),mrbYI:d(866),qRTKZ:d(3107)+"w",DRhkB:d(1486)+d(3356)+d(1411),EtYJS:function(n,e){return n+e},qGdlH:d(466)+d(1499)+d(546)+d(3125),zdpAp:d(427)+"d",Xakrv:d(1264)+d(2977)+d(697)+d(3001)+d(3040)+d(1969)+d(3236)+d(3342)+d(2193)+"1",BEFKS:d(2694)+"r",thxmW:function(n,e){return n+e},stoaJ:d(3274),BxrZj:function(n,e){return n(e)},UbrRM:function(n,e){return n<e},VYHku:function(n,e){return n*e},zfhVK:d(2117),QqLLZ:function(n,e){return e<n},jRRsJ:function(n,e){return n&&e},RmsGK:d(543),yTOeT:d(2317),DKvTo:d(3020),paNmi:function(n,e){return e<n},CveBz:function(n,e){return n!==e},BwasJ:d(2666)+d(2362)+d(2500),YCzIk:d(3291)+"e",xAmZW:d(1179)+d(705),wxcqY:d(2025),ZRwzq:d(1992)+d(1663),mDSKc:d(847)+d(1986),RLogT:d(302)+"r",PgpZE:d(2955)+d(1578)+"er",SAMLX:d(847)+d(2542)+"ns",BbmDY:d(847)+d(2639),WWFWX:d(2955)+d(1578)+d(262),enOyu:d(467),IlyAq:d(1898)+d(1730)+d(2298),lXWpo:d(1831),rFZFb:function(n,e){return n(e)},NMrJx:function(n,e){return n(e)},PsSjh:d(2731),ZMuqF:function(n,e){return n==e},EWtPQ:d(1857)+d(3360),mzBBe:d(510),yljMm:function(n,e,t){return n(e,t)},VNwYX:function(n,e){return n(e)},dAmPi:d(2240)+d(1783),Prika:d(2790)+d(3014),AMGlK:d(1592)+d(1015),pMGGx:function(n,e){return n(e)},cuoWT:function(n,e){return n||e},kbFyO:function(n,e){return n(e)},djysJ:d(2934)+d(1024),QFcer:d(2231),TuKkz:d(2653)+d(1358)+d(1008)+d(2217)+d(1268),toUND:d(721)+"1",nzDmz:d(2347),ApTyY:d(2458),WqSVP:d(426),HPYLT:d(1329)+d(2175)+"d",HqXWB:d(2879)+"st",IWqJz:d(1597)+d(1665),WRTdR:d(2647)+d(2610)+"ng",tzZWC:d(2934)+d(2110),FngLa:d(2240)+d(2706),uTCQK:function(n,e,t){return n(e,t)},qOpaO:d(3218),Nnqax:d(817),sqJsM:d(2966),VMusH:d(2244)+d(2931),BzRSy:d(879),cKoMU:function(n,e,t){return n(e,t)},kunmD:d(1196)+d(1464),AXLBa:d(1947),rioFv:function(n,e){return n+e},JqpTG:d(1436),Bauaw:d(1673)+d(1947),xLTZR:function(n,e){return n+e},URwgq:d(2035)+"s?",rYDCW:d(1118),XJEyb:function(n){return n()},GHBtI:d(2234)+d(3367)+"|9",uLLPQ:d(1680)+d(2706),QLCYK:d(1905)+d(1746)+d(1491)+d(2830),zaFIf:d(1855),Hngbs:d(696)+d(1543),ZtFYt:d(2718),OcuJG:d(1682),hOzFI:d(504),mFKRE:d(3109),fJKRM:d(858)+d(1418),cTEKZ:d(2477),COoSZ:d(707),nSnrl:d(787)+d(1438),uNLdu:function(n,e){return n+e},SByjq:function(n,e){return e<=n},cBAHm:d(2624)+"3",ALaww:d(2321)+"4",EKewb:function(n){return n()},TUKbV:function(n,e){return e<n},zlnJT:function(n){return n()},TrhVT:d(766)+d(844),akTOm:d(3220)+d(1163)+"e",LPaRj:function(n,e){return n(e)},CkexB:d(1740)+d(3207)+"|5",StQFv:d(1346),lsfHz:d(253)+"ию",MxWYI:function(n,e){return n(e)},CYeTa:d(358),ksbdY:function(n,e){return n(e)},bPuAJ:d(2061),bSUEd:d(1102),RnMli:function(n,e){return n!==e},qzbCZ:d(1084),PoCuN:d(3155)+d(2173)+"t",ayuTi:function(n,e){return n(e)},zAWKj:d(800)+d(2556)+d(2220)+d(2574),qjiqK:d(2666)+d(615)+"er",KQvsl:d(975)+d(2530)+d(1527)+d(1494)+d(1013)+d(1036)+">",hFwTs:d(1486)+d(1310)+d(1946),uMRuG:function(n,e){return n===e},OTzCg:d(1482),tqZwY:function(n,e){return n+e},tJzRl:d(451)+d(2129),VQgJq:function(n,e){return n||e},jQpTQ:d(2529)+d(2814),GNILC:d(453),FREmP:d(1030)+d(1888)+d(3348),DisKu:function(n,e,t){return n(e,t)},mooGd:d(933),ipond:d(1655)+d(3186),cLlRg:function(n,e){return n==e},ycBxz:function(n,e){return n===e},KCZBd:function(n,e){return n===e},BNbCb:d(2241)+d(1089),ieJHN:d(2241)+d(3192),XIFkD:function(n,e){return n==e},LNkCJ:function(n,e){return e<=n},NLBNl:function(n,e){return n+e},KifdY:function(n,e){return n(e)},HCKqs:function(n,e){return n==e},OMbPm:d(1370),YBjSu:function(n,e){return n+e},lLzZH:function(n,e){return n+e},nyfpg:function(n,e){return n+e},VsLDt:function(n,e){return n+e},orwDS:d(2279),Kqnad:d(1952),iLTfH:d(3377),UeFiY:d(2807),sMJvf:d(2975),KztSL:d(2668)+d(2724)+d(477)+d(2884),FggIg:d(3280),pyrLd:d(331)+"ch",fKZIv:d(2812),ZspDS:d(3230),tUCDs:d(1183),KDYuO:d(2584)+"es",cDVhj:d(1684)+d(1398),FZBvs:d(2286)+d(1510)+"|7",qkhwq:d(1136)+d(1415)+"s",lICiH:d(857),sbNKk:d(1684)+d(2379),wNsiU:d(1684)+d(1005)+"be",LPGqC:d(593)+d(533)+d(1489),EtAIJ:d(2241)+d(1203)+d(1559),IyDzV:d(3336),fjTyC:d(400)+"eo",zHill:d(1058)+d(1326),BUbxO:d(2450),omPwY:d(3270),IhqZU:d(593)+d(1727)+"ks",jpNzB:d(1577)+"on",zjZNB:d(2241)+d(1203)+d(2399)+d(1051),RxaeC:d(2023),GExaI:d(318)+d(617),WmOuI:d(2127),Xwcan:d(3385)+d(939),VYZay:function(n,e){return n(e)},tlNEO:d(2712),AMoUj:d(446),UtNgn:d(1895)+"er",kreuE:d(264)+"1",IMipq:d(2631),duNrf:d(809),pKaoT:d(1913),UPNPU:d(1596)+d(1700)+d(1582),msTmc:d(1914)+d(2573)+d(3216),JUhuI:function(n,e){return n-e},nsuOQ:function(n,e){return n<e},ioceE:d(2208),OihfQ:function(n,e){return n(e)},UWaex:d(2674),ZyMON:function(n,e){return n===e},xUcdT:d(573),ekuFS:d(1630)+d(1840),kClaY:function(n,e){return n==e},qfrTW:function(n,e){return n(e)},PoMju:d(2547)+d(1483)+d(337)+d(1502),enbBT:function(n,e){return n!==e},ASNiG:function(n){return n()},vRxgt:d(2765),fuxXB:d(994),JYmtx:d(1962),aFHmD:function(n,e){return n(e)},YdWsg:d(1462),zCLfX:function(n,e){return n!==e},IJcJy:function(n,e){return n(e)},yJrGc:d(2185),bXHbC:d(2085),LOwbP:function(n,e){return n+e},FysBN:function(n,e){return n+e},lSmLe:function(n,e){return n+e},XiPfB:d(1400),DfqVN:d(3284)+"ne",EYYfX:d(1352)+d(1548),ABqtj:d(466)+d(1052)+d(2701)+d(1120)+d(1382)+d(2415)+d(2533)+d(1850)+d(785)+d(2978)+d(1632)+d(1262)+d(1015)+d(2209)+d(1500)+d(2532)+d(1542)+d(2825)+d(1301)+d(1500)+d(824)+d(2978)+d(1632)+d(1262)+d(1015)+d(1087)+d(2240)+d(582)+d(824)+d(974)+d(1135)+d(513),hyEmb:d(2296)+d(675)+d(248)+d(532)+d(2840)+d(2575)+d(2968)+d(466)+d(1499)+d(383)+d(1162)+d(1500)+d(1126)+d(666)+d(2700)+d(1500)+d(2772)+d(1881)+d(813)+d(1838)+d(1225)+d(1500)+d(534)+d(1714)+d(1675)+d(1500)+d(2296)+d(675)+d(3185)+d(1207)+d(1500)+d(668)+d(2978)+d(1632)+d(729)+d(3113)+d(2297)+d(1500)+d(1675)+d(1500)+d(2296)+d(675)+d(3185)+d(1529)+d(507)+d(1500)+d(1500)+d(1568)+d(1152)+d(2535)+d(532)+d(2697)+d(1037)+d(628)+d(1500)+d(1568)+d(974)+d(1576)+d(2534)+d(1500)+d(1382)+d(2415)+d(834)+d(442)+d(2440)+d(1500)+d(438)+d(1500)+d(724)+d(1587)+d(2268)+d(1124)+d(1500)+d(2700)+d(1500)+d(2772)+d(1881)+d(813)+d(3176)+d(3324)+d(1576)+d(1500)+d(3317)+d(1500)+d(466)+d(1499)+d(2702)+d(1295)+d(1506)+d(1576)+d(2219)+d(1500)+d(1869)+d(2968)+d(1500)+d(3211)+d(438)+d(1500)+d(550)+d(1043),IMOla:d(1568)+d(1500)+d(2978)+d(1632)+d(1387)+d(2349)+d(1500)+d(1500)+d(2772)+d(1881)+d(1871)+d(2641)+d(1500)+d(1500)+d(1500)+d(948)+d(1081)+d(549)+d(1568)+d(1500)+d(1500)+d(3060)+d(1500)+d(1500)+d(1040)+d(613)+d(3231)+d(753)+d(1568)+d(1500)+d(1500)+d(1541)+d(2743)+d(3096)+d(1500)+d(1500)+d(1500)+d(824)+d(1500)+d(1500)+d(1152)+d(2535)+d(652)+d(2434)+d(2918)+d(1500)+d(1500)+d(1244)+d(2352)+d(3330)+d(1749)+d(380)+d(399)+d(586)+d(1568)+d(1500)+d(1500)+d(2596)+d(2160)+d(1233)+d(563)+d(568)+d(1885)+d(1537)+d(2877)+d(1401)+d(1500)+d(1500)+d(1869)+d(2968)+d(1500)+d(1500)+d(724)+d(1587)+d(1566)+d(3036)+d(1500)+d(1500)+d(1500)+d(724)+d(1587)+d(2105)+d(2207)+d(1500)+d(1500)+d(1500)+d(724)+d(1587)+d(2105)+d(3160)+d(3065)+d(1500)+d(1500)+d(1500)+d(2596)+d(2160)+d(2338)+d(1535)+d(1954)+d(1568)+(d(1500)+d(1500)+d(3374)+d(1500)+d(1500)+d(1500)+d(724)+d(1587)+d(2105)+d(2207)+d(1500)+d(1500)+d(1500)+d(724)+d(1587)+d(2105)+d(3160)+d(3065)+d(1500)+d(1500)+d(1500)+d(2596)+d(2160)+d(2338)+d(1535)+d(1954)+d(1568)+d(1500)+d(1500)+d(3374)+d(1500)+d(1500)+d(1500)+d(724)+d(1587)+d(2105)+d(2207)+d(1500)+d(1500)+d(1500)+d(724)+d(1587)+d(2105)+d(3160)+d(3065)+d(1500)+d(1500)+d(1500)+d(2596)+d(2160)+d(2338)+d(1535)+d(1954)+d(1568)+d(1500)+d(1500)+d(3374)+d(1500)+d(1500)+d(1500)+d(824)+d(1500)+d(1500)+d(1869)+d(2968)+d(1500)+d(1500)+d(1500)),XCuHA:d(2678)+d(1632)+d(729)+d(1447)+d(544)+d(1032)+d(2575)+d(2968)+d(466)+d(1499)+d(1669)+d(1759)+d(2447)+d(2439)+d(1899)+d(1504)+d(2353)+d(557)+d(2785)+d(1603)+d(3083)+d(1188)+d(350)+d(746)+d(2e3)+d(3372)+d(1157)+d(1753)+d(1775)+d(3254)+d(2537)+d(3195)+d(1287)+d(996)+d(381)+d(2031)+d(781)+d(2195)+d(387)+d(1625)+d(3200)+d(455)+d(2688)+d(1228)+d(688)+d(3290)+d(305)+d(1114)+d(1651)+d(511)+d(277)+d(1500)+d(647)+d(1500)+d(1382)+d(2415)+d(834)+d(1006)+d(1568)+d(2772)+d(1881)+d(813)+d(2236)+d(2968)+d(1152)+d(2535)+d(532)+d(887)+d(2153)+d(824)+d(1500)+d(724)+d(1587)+d(2268)+d(2184)+d(2413)+d(1500)+d(2978)+d(1777)+d(1500)+d(1040)+d(613)+d(1802)+d(2797)+d(1892)+d(1500)+d(1040)+d(613)+d(1802)+d(2374)+d(1478)+d(1777)+d(1500)+d(1500)+d(3060)+d(1500)+d(1500)+d(534)+d(733)+d(1500)+(d(1500)+d(2151)),GISRs:d(1568)+d(1500)+d(1244)+d(2352)+d(1229)+d(2968)+d(1500)+d(1040)+d(613)+d(1185)+d(1764)+d(1487)+d(1401)+d(1500)+d(1500)+d(908)+d(1500)+d(1040)+d(613)+d(3231)+d(2199)+d(571)+d(1500)+d(1500)+d(1382)+d(2415)+d(3043)+d(1002)+d(3366)+d(1500)+d(1500)+d(2978)+d(1632)+d(1387)+d(2806)+d(1781)+d(1777)+d(1500)+d(1500)+d(2772)+d(1881)+d(1871)+d(3147)+d(959)+d(1135)+d(1500)+d(1500)+d(647)+d(1500)+d(1500)+d(1152)+d(2535)+d(652)+d(2130)+d(2918)+d(1500)+d(1500)+d(2596)+d(2160)+d(2338)+d(1815)+d(1722)+d(1500)+d(1500)+d(1500)+d(466)+d(2271)+d(3015)+d(1389)+d(1044)+d(1500)+d(1500)+d(534)+d(733)+d(1500)+d(1500)+d(2296)+d(675)+d(2993)+d(1335)+d(1500)+d(1500)+d(1152)+d(2535)+d(652)+d(2130)+d(2179)+d(1135)+d(1500)+d(1500)+d(1382)+d(2415)+d(3043)+d(2671)+d(505)+d(2968)+d(1500)+d(1500)+d(824)+d(1500)+(d(1500)+d(3374)+d(1500)+d(1500)+d(2151)+d(1568)+d(1500)+d(2263)),icpWL:d(908)+d(466)+d(1499)+d(924)+d(3370)+d(1961)+d(827)+d(3255)+d(2439)+d(3232)+d(3135)+d(1649)+d(2112)+d(1723)+d(325)+d(1500)+d(2704)+d(2789)+d(1805)+d(323)+d(2867)+d(1142)+d(403)+d(3373)+d(1652)+d(2775)+d(1844)+d(2667)+d(3042)+d(2126)+d(3244)+d(1661)+d(1500)+d(1327)+d(2650)+d(1395)+d(693)+d(1318)+d(2444)+d(2763)+d(1048)+d(622)+d(1735)+d(2430)+d(1553)+d(2043)+d(3297)+d(1569)+d(2378)+d(2318)+d(698)+d(1841)+d(3287)+d(3310)+d(540)+d(310)+d(694)+d(3341)+d(1505)+d(2665)+d(3311)+d(2481)+d(2749)+d(764)+d(984)+d(986)+d(1472)+d(356)+d(1854)+d(2071)+d(1880)+d(2358)+d(2726)+d(1139)+d(2968)+d(2151)+d(1568)+d(2172),aXPdO:d(390)+d(1881)+d(813)+d(1851)+d(619)+d(1379)+d(3366)+d(1152)+d(2535)+d(532)+d(1976)+d(831)+d(2678)+d(2912)+d(2325)+d(1011)+d(3116)+d(1656)+d(2839)+d(1063)+d(704)+d(1468)+d(962)+d(2459)+d(1937)+d(548)+d(1896)+d(2870)+d(606)+d(1080)+d(2842)+d(444)+d(2948)+d(2517)+d(1804)+d(1286)+d(1842)+d(317)+d(1106)+d(2152)+d(1568)+d(3374)+d(1500)+d(2772)+d(1881)+d(813)+d(1875)+d(2992)+d(1500)+d(1500)+d(824)+d(1500)+d(1500)+d(3357),OwPGT:d(2949),TpJhG:d(367)+"ch",QFsNy:d(2292),jwIss:d(2033),MUsGd:d(2620)+d(2128),RRBfG:d(1165)+d(1417),bcadS:function(n,e){return n+e},xFxVO:d(1372)+d(2118),gRRmR:d(991),KdFfc:d(1045),TYjdL:d(1116)+d(2262),WNZcL:d(2170)+d(840)+d(1193),HWewZ:d(1023),hnOnS:d(1573),OEHnR:function(n,e,t){return n(e,t)},IvQjF:d(519),KTrbO:d(915)+"me",pWMlo:d(889)+"ne",fsKmA:d(2950)+d(2262),ZxhaA:d(756),ZEXUQ:d(2156),IaYjc:d(2410),bDovI:d(1433),myXXC:d(661)+d(370)+"а",CUmtC:d(775)+d(530),LxenP:d(2197)+d(1282)+d(1068),uQKyx:d(1364),yqGKz:d(2233)+d(1887)+d(271),RcZxw:d(2401)+d(1789)+d(3058),bLMdV:d(1628)+d(2373),xanON:d(1076),xiRXl:d(752),QZbtD:d(2733),hzGPV:d(3386),iANXw:d(2538)+d(1640)+d(2249)+d(2946)+d(3208)+d(2047)+d(2708),zySHp:d(1829)+d(2621)+d(465)+d(2750)+d(3030)+d(2773)+d(2866),XeFGQ:d(755)+d(2927)+d(2827)+d(2229)+d(3243),fhhWI:d(560)+d(1271),cloKr:d(279),tyapw:d(1796),maEqL:d(925),XtsTz:d(1159),FdRfd:d(272)+d(1575)+"од",bACoi:d(944)+d(2250)+d(1082),dHGYh:d(2245)+d(2057)+d(2831),ZJliB:d(2381),sklRm:d(1445)+d(722)+"сь",iVJWe:d(1927)+d(792)+"ся",SQdvH:d(2223)+d(718)+d(1693)+"ed",HODBP:d(2942),nWNLz:d(526)+d(298),AZnSW:d(2067)+d(2495),cLWSZ:d(1361)+d(1348)+"d",Gscal:d(1405),pOVeY:d(3234)+d(2730)+d(1957),sgSNB:d(1083)+d(2988),antcN:d(2824)+d(2528),rLaNR:d(988),hySRg:d(448)+d(913),sCojH:d(1083)+d(2226)+"ди",LHEtM:d(2824)+d(654),QkVLf:d(1874),TuKlm:d(2921)+d(592),VucwJ:d(1967)+d(425),BPjcO:d(1968)+d(1078),kQXin:d(1671),ghiBl:d(330)+d(2266)+d(2489),mlTsd:d(2002)+d(1026)+d(1639),eUsaz:d(1809)+d(1168)+d(3041)+d(3044),DAXoc:d(1085),vsAhs:d(1794)+d(2468)+d(2108)+d(2984)+d(1701)+d(2987)+d(2462)+d(3097)+d(1601),PWTrZ:d(1794)+d(2738)+d(838)+d(1863)+d(3313)+d(3166)+d(406)+d(1435)+d(683),AxfXr:d(2996)+d(1141)+d(1918)+d(710)+d(1588)+d(842)+d(1970)+d(3292)+".",VrYoV:d(2486)+d(600)+d(1377)+d(819)+d(3068),QVFHb:d(2503)+d(324)+d(2755)+d(3046),nbEKI:d(605)+d(3384)+d(2591)+"ла",nzdvF:d(2398)+d(1471)+d(1078),tmQLe:d(1699),kigNL:d(1797),ygqFw:d(846)+d(354)+d(603)+d(2055)+d(1069)+d(1525)+d(1010)+d(2558)+d(1013)+d(715)+d(2157)+d(1718)+d(3332)+d(3057)+d(321)+d(3333)+d(1064)+d(3333)+d(457)+d(570)+d(2159)+d(2577)+d(2395)+d(3185)+d(669)+d(1664)+d(1889)+d(2914)+d(2479)+d(1648)+d(3271)+d(2114)+d(1975)+d(914)+d(3e3)+d(581)+d(2545)+d(1532)+d(1296)+d(2741)+d(1486)+d(3110)+d(2480)+d(2917)+d(2561)+d(2268)+d(2581)+d(1147)+d(1393)+d(2483)+d(1861)+d(3140)+d(633)+d(969)+d(2945)+d(777)+d(2744)+d(813)+d(1171)+d(2027)+d(1242)+d(2494)+d(2405)+d(2659)+d(3159)+d(1178)+d(1879)+d(3158)+d(1269)+d(1340)+d(870)+d(450)+d(2916)+d(2357)+d(3119)+d(641)+d(2258)+d(1912)+d(2019)+d(2515)+d(790)+d(2104)+d(1486)+d(1095)+d(2196)+d(1725)+d(1564)+d(1532)+d(1296)+d(2741)+d(1486)+d(1095)+d(2011)+d(2570)+d(1304)+d(532)+d(566)+d(1847)+d(3350)+d(1493)+(d(2376)+d(2414)+d(452)+d(880)+d(2974)+d(1669)+d(2408)+d(1149)+d(1943)+d(2846)+d(2364)+d(260)+d(813)+d(3278)+d(1903)+d(3153)+d(1425)+d(812)+d(3306)+d(1442)+d(2052)+d(259)+d(1926)+d(854)+d(2923)+d(3072)+d(3006)+d(436)+d(2974)+d(546)+d(2813)+d(3085)+d(1943)+d(2846)+d(1531)+d(260)+d(813)+d(1148)+d(2411)+d(1911)+d(2787)+d(2080)+d(2516)+d(289)+d(3383)+d(416)+d(1121)+d(3069)+d(3146)+d(2445)+d(1057)+d(3210)+d(3075)+d(2505)+d(2063)+d(2816)+d(1442)+d(545)+d(642)+d(2943)+d(1951)+d(1623)+d(1987)+d(2293)+d(674)+d(2974)+d(1416)+d(635)+d(2443)+d(2086)+d(1255)+d(2144)+d(2633)+d(2146)+d(3104)+d(3289)+d(2232)+d(1634)+d(2094)+d(589)+d(2654)+d(3061)+d(3259)+d(862)+d(3051)+d(544)+d(1884)+d(1802)+d(2797)+d(2487)+d(1843)+d(464)+d(1843)+d(1338)+d(903)+d(1365)+d(2656)+d(2710)+d(2565)+d(1137))+(d(1317)+d(3002)+d(3142)+d(954)+d(2565)+d(717)+d(3235)+d(2074)+d(2454)+d(3012)+d(2390)+d(3115)+d(2673)+d(1290)+d(699)+d(916)+d(2359)+d(2903)+d(544)+d(1101)+d(1004)+d(2115)+d(813)+d(1202)+d(1631)+d(884)+d(3329)+d(1688)+d(1486)+d(930)+d(1134)+d(494)+d(932)+d(1356)+d(3268)+d(2709)+d(269)+d(3390)+d(3241)+d(999)+d(2467)+d(3381)+d(1676)+d(1119)+d(1211)+d(2215)+d(3170)+d(3204)+d(2313)+d(2443)+d(585)+d(1170)+d(3251)+d(2005)+d(2829)+d(1322)+d(2375)+d(876)+d(982)+d(980)+d(1729)+d(322)+d(338)+d(1912)+d(2441)+d(2648)+d(1930)+d(807)+d(2291)+d(544)+d(2861)+d(741)+d(759)+d(1259)+d(804)+d(2498)+d(1677)+d(3163)+d(397)+d(631)+d(2328)+d(702)+d(834)+d(2531)+d(2568)+d(2815)+d(1038)+d(2999)+d(946)+d(1807)+d(1497)+d(1131)+d(2794)+d(834)+d(3086)+d(1972)+d(327)+d(1784)+d(735)+d(1556))+(d(1430)+d(2856)+d(1772)+d(1486)+d(1741)+d(2369)+d(2368)+d(2332)+d(315)+d(3371)+d(1440)+d(1355)+d(1713)+d(3238)+d(2186)+d(1187)+d(3108)+d(711)+d(2300)+d(1687)+d(1276)+d(2188)+d(3323)+d(918)+d(316)+d(943)+d(2268)+d(1703)+d(963)+d(590)+d(1069)+d(2774)+d(1131)+d(1407)+d(1069)+d(2872)+d(1776)+d(1359)+d(1776)+d(1073)+d(3126)+d(1513)+d(2420)+d(1322)+d(2212)+d(284)+d(1517)+d(1647)+d(2862)+d(783)+d(2122)+d(1653)+d(2287)+d(1069)+d(1767)+d(1906)+d(1308)+d(2752)+d(454)+d(851)+d(1392)+d(418)+d(1843)+d(2354)+d(495)+d(2453)+d(1331)+d(2710)+d(1799)+d(2885)+d(544)+d(1555)+d(2887)+d(1409)+d(611)+d(1820)+d(532)+d(3018)+d(1939)+d(2443)+d(1872)+d(869)+d(955)+d(532)+d(3018)+d(1503)+d(3024)+d(1751)+d(1316)+d(3170)+d(1802)+d(508)+d(2725)+d(1050)+d(1198)+d(1412)+d(1801)+d(2492)+d(1959)+d(2554))+(d(1941)+d(544)+d(2810)+d(407)+d(630)+d(2680)+d(3169)+d(498)+d(912)+d(3365)+d(1833)+d(1579)+d(259)+d(420)+d(3124)+d(1893)+d(2063)+d(3089)+d(301)+d(372)+d(2032)+d(2380)+d(1955)+d(3226)+d(2625)+d(2063)+d(3089)+d(2586)+d(2400)+d(902)+d(2655)+d(3326)+d(1732)+d(2586)+d(2400)+d(902)+d(2655)+d(3326)+d(1923)+d(2699)+d(2452)+d(2990)+d(3007)+d(307)+d(1704)+d(2687)+d(309)+d(1442)+d(2015)+d(1612)+d(2488)+d(609)+d(1534)+d(3325)+d(2905)+d(2323)+d(532)+d(1691)+d(834)+d(1448)+d(2227)+d(1802)+d(1602)+d(1443)+d(1069)+d(2696)+d(3289)+d(701)+d(834)+d(2135)+d(2868)+d(1686)+d(1993)+d(1876)+d(1059)+d(2299)+d(591)+d(1686)+d(1993)+d(456)+d(2480)+d(1369)+d(3132)+d(1241)+d(1776)+d(1359)+d(1776)+d(1073)+d(3126)+d(1513)+d(2420)+d(583)+d(2626)+d(361)+d(2865)+d(2649)+d(414)+d(532)+d(1976)+d(421))+(d(758)+d(1342)+d(1644)+d(1560)+d(2768)+d(441)+d(886)+d(655)+d(3304)+d(834)+d(3088)+d(1776)+d(2892)+d(464)+d(1843)+d(2695)+d(3168)+d(386)+d(2159)+d(2083)+d(814)+d(1687)+d(743)+d(1270)+d(2566)+d(1719)+d(954)+d(362)+d(1212)+d(2387)+d(2507)+d(574)+d(1230)+d(1279)+d(2632)+d(3013)+d(2264)+d(251)+d(834)+d(3337)+d(1595)+d(997)+d(1650)+d(679)+d(1571)+d(1686)+d(3286)+d(1615)+d(3193)+d(3252)+d(517)+d(419)+d(1234)+d(3219)+d(652)+d(1231)+d(1650)+d(2034)+d(1481)+d(3327)+d(1600)+d(847)+d(2542)+d(1605)+d(2051)+d(2006)+d(1742)+d(3164)+d(2855)+d(464)+d(3073)+d(1871)+d(428)+d(2660)+d(2642)+d(847)+d(2542)+d(636)+d(1473)+d(922)+d(2501)+d(1848)+d(1047)+d(890)+d(1340)+d(2432)+d(450)+d(2909)+d(3327)+d(1544)+d(847)+d(2542)+d(601)+d(1916)+d(2260)+d(2838)+d(3330)+d(576)+d(1540)+d(3015))+(d(345)+d(3387)+d(1550)+d(652)+d(949)+d(2237)+d(2105)+d(461)+d(739)+d(1866)+d(847)+d(2806)+d(408)+d(3223)+d(382)+d(437)+d(447)+d(3067)+d(1843)+d(464)+d(1843)+d(1338)+d(903)+d(1365)+d(2656)+d(2710)+d(362)+d(1554)+d(2235)+d(747)+d(2307)+d(2248)+d(1402)+d(1719)+d(1322)+d(2375)+d(3355)+d(982)+d(1708)+d(1871)+d(1685)+d(1610)+d(1473)+d(662)+d(2558)+d(1013)+d(715)+d(2157)+d(702)+d(3043)+d(434)+d(2677)+d(896)+d(3090)+d(2274)+d(2496)+d(2105)+d(2218)+d(670)+d(2225)+d(3005)+d(3043)+d(1257)+d(652)+d(2130)+d(1191)+d(3174)+d(1070)+d(588)+d(3079)+d(1246)+d(2504)+d(1381)+d(2056)+d(1397)+d(292)+d(2930)+d(731)+d(2314)+d(3146)+d(703)+d(3092)+d(2295)+d(2019)+d(2761)+d(1729)+d(2604)+d(1720)+d(2599)+d(687)+d(1041)+d(1999)+d(790)+d(1098)+d(1041)+d(2823)+d(2019)+d(1077)+d(966)+d(1488))+(d(2305)+d(987)+d(749)+d(1621)+d(1608)+d(2791)+d(1940)+d(1592)+d(1015)+d(1334)+d(883)+d(2508)+d(1174)+d(2101)+d(252)+d(1158)+d(2366)+d(3146)+d(703)+d(503)+d(2017)+d(2421)+d(1419)+d(2051)+d(2006)+d(1742)+d(3164)+d(2855)+d(464)+d(2319)+d(909)+d(2919)+d(1289)+d(254)+d(1934)+d(2637)+d(730)+d(2254)+d(782)+d(1609)+d(1919)+d(1614)+d(2957)+d(1890)+d(1213)+d(2285)+d(2471)+d(1653)+d(1589)+d(1758)+d(2261)+d(2673)+d(2340)+d(1733)+d(1292)+d(1251)+d(1953)+d(2038)+d(1434)+d(2701)+d(625)+d(3157)+d(3351)+d(1659)+d(431)+d(1827)+d(843)+d(1525)+d(1779)+d(1234)+d(907)+d(2967)+d(556)+d(2991)+d(2171)+d(956)+d(2751)+d(1728)+d(650)+d(291)+d(2972)+d(1657)+d(927)+d(950)+d(501)+d(1243)+d(3264)+d(1894)+d(1427)+d(1070)+d(2466)+d(1549)+d(2736)+d(2404)+d(3209)+d(2701)+d(2004)+d(1591)+d(723)+d(3265))+(d(2012)+d(677)+d(2247)+d(1297)+d(2900)+d(3269)+d(904)+d(977)+d(3265)+d(2876)+d(2851)+d(1140)+d(1606)+d(1109)+d(2063)+d(2728)+d(2851)+d(1140)+d(1606)+d(1109)+d(2063)+d(2952)+d(1539)+d(1337)+d(1932)+d(2756)+d(1808)+d(1515)+d(2455)+d(2066)+d(2375)+d(820)+d(3308)+d(2856)+d(275)+d(1322)+d(810)+d(1125)+d(2327)+d(2139)+d(1551)+d(2936)+d(265)+d(1055)+d(525)+d(1104)+d(1894)+d(1427)+d(1070)+d(744)+d(1774)+d(803)+d(2460)+d(2204)+d(276)+d(1726)+d(1273)+d(2713)+d(891)+d(1218)+d(1944)+d(1729)+d(1158)+d(411)+d(937)+d(1177)+d(608)+d(731)+d(2605)+d(2078)+d(2267)+d(3027)+d(2056)+d(1397)+d(2803)+d(3298)+d(435)+d(469)+d(1065)+d(2607)+d(920)+d(2939)+d(638)+d(1222)+d(2613)+d(308)+d(2740)+d(2941)+d(2284)+d(736)+d(3146)+d(703)+d(719)+d(2593)+d(1877)+d(2759)+d(2508)+d(1174)+d(1604)+d(1215))+(d(2762)+d(3261)+d(608)+d(731)+d(2714)+d(937)+d(791)+d(2703)+d(1692)+d(3210)+d(2523)+d(3273)+d(2746)+d(3177)+d(1174)+d(2101)+d(2941)+d(1315)+d(472)+d(1599)+d(1766)+d(2508)+d(1174)+d(2101)+d(2941)+d(1315)+d(1897)+d(416)+d(1107)+d(2784)+d(1524)+d(1299)+d(2613)+d(308)+d(2239)+d(3100)+d(1470)+d(2690)+d(3183)+d(2715)+d(347)+d(1138)+d(2382)+d(1368)+d(1729)+d(1158)+d(1813)+d(920)+d(2878)+d(2811)+d(945)+d(1397)+d(521)+d(937)+d(555)+d(2343)+d(3130)+d(3146)+d(703)+d(1479)+d(334)+d(2913)+d(2416)+d(416)+d(952)+d(2941)+d(1042)+d(2386)+d(3118)+d(512)+d(731)+d(2605)+d(2078)+d(798)+d(3146)+d(703)+d(281)+d(3283)+d(3354)+d(1374)+d(2189)),feLxW:d(466)+d(1748)+d(2618)+d(2850)+d(1190)+d(860)+d(1619)+d(1074),WxMLl:d(518)+d(1509)+d(1658)+d(1495)+d(3033)+d(1003)+d(557)+d(2785)+d(1603)+d(2367)+d(3054)+d(1469)+d(3102)+d(1989)+d(825)+d(789)+d(1590)+d(2243)+d(1366)+d(502)+d(2717)+d(1490)+d(339)+d(778)+d(2194)+d(604)+d(1362)+d(2028)+d(1816)+d(3011)+d(1375)+d(2330)+d(773)+d(971)+d(2834)+d(1194)+d(2089)+d(761)+d(572)+d(2151),wkqgL:d(3299),vKyMm:function(n,e){return n(e)},YkVnS:d(779),OOGXH:d(1248),QLuEG:d(1752),LEYKY:d(3165),qKJHb:d(1357),VKsOi:d(409),IOtHI:d(479),lPBqL:d(2951),OlOYL:d(1208),sYoIG:d(1979)+"sh",qiBbW:d(2014),hSYnP:d(1258),PxZvI:d(1800),VqvzO:d(3380),BPKHp:d(1788),JVAWv:d(2422),XCetU:d(2662),HupZc:d(1845)+"o",FoKEo:d(2583),XShIV:d(2606),obZWL:d(1350),YxFbB:d(3028),vUaVK:d(1167),XHToA:d(1099),tRVfT:d(2029)+"nd",VybmE:d(2169),uhESs:d(476),zXyKR:d(2273),ELgEP:d(2010),mCogg:d(1094),qUJEV:d(2686),deUac:d(2820),PHmGq:d(1454),AFpDl:d(2944)+"b",uRzZF:d(485),oYwsG:d(1182),JottS:d(1105),NqocB:d(1678),cGeNu:d(2134),exgBM:d(2053),OdrrV:d(1883),STVMQ:d(614),yhqoZ:d(2627),LfGNI:d(2315),ERrmr:d(2526),jUOGF:d(1546),zmder:d(1618),CMVAd:d(2213),zelaB:d(3347)+"am",zjXbe:d(853),ogkvy:d(357),fTzcq:d(2257),lWqHo:d(682),PZxLO:d(2547)+d(1483)+d(2818),xzvSy:d(2145),ctUhK:d(1496),lcZnB:d(2547)+d(1483)+d(1771)+d(1e3)},B={api:y[d(1834)],localhost:y[d(2898)],apn:""},u=(Prisma[d(449)][d(1562)](y[d(2705)],"")||(n=Prisma[d(2514)][d(2858)](8)[d(2853)+"e"](),Prisma[d(449)][d(3034)](y[d(2705)],n)),y[d(1990)][d(1626)](y[d(2520)],"")[d(1626)](y[d(1818)],""));function r(n,e){for(var t=d,i=y[t(1558)][t(1586)]("|"),r=0;;){switch(i[r++]){case"0":window[t(2683)+t(794)]&&window[t(2683)+t(794)][u]&&window[t(2683)+t(794)][u][t(1971)]();continue;case"1":window[t(2683)+t(794)][u][t(280)]()[t(2522)](function(){var n=t;window[n(1459)][u][n(2986)](window[n(2683)+n(794)][u],function(){o[n(2113)](e)})})[y[t(278)]](function(n){var e=t;Prisma[e(868)][e(2698)](n[e(765)]())});continue;case"2":var o={UAMXD:function(n){return y[t(1983)](n)}};continue;case"3":window[t(2683)+t(794)]||(window[t(2683)+t(794)]={});continue;case"4":window[t(2683)+t(794)][u]=(new signalR[t(2845)+t(976)])[t(2310)](n.ws)[t(261)]();continue}break}}function l(n,e){var t=d,i={kvwLp:function(n,e,t){return y[_0x164b(2793)](n,e,t)}};y[t(2563)](typeof signalR,y[t(906)])?Prisma[t(2514)][t(3352)]([y[t(1980)]],function(){},!1,function(){i[t(1018)](r,n,e)},!0):y[t(2652)](r,n,e)}function C(n){for(var e,t=d,i=y[t(1456)][t(1586)]("|"),r=0;;){switch(i[r++]){case"0":y[t(2563)](n[t(1484)](y[t(1949)]),-1)&&y[t(2770)]("","")&&(n=Prisma[t(2514)][t(3340)+t(2402)](n,y[t(1949)]));continue;case"1":y[t(2563)](n[t(1484)](y[t(1313)]),-1)&&(e=Prisma[t(449)][t(1562)](y[t(2705)],""))&&(n=Prisma[t(2514)][t(3340)+t(2402)](n,y[t(536)](y[t(1313)],y[t(1793)](encodeURIComponent,e))));continue;case"2":return n;case"3":y[t(2563)](n[t(1484)](y[t(1584)]),-1)&&(e=Prisma[t(449)][t(1562)](y[t(835)]))&&(n=Prisma[t(2514)][t(3340)+t(2402)](n,y[t(3180)](y[t(1584)],y[t(1240)](encodeURIComponent,e))));continue;case"4":n=y[t(3180)](n,"");continue}break}}window[d(1459)]&&window[d(1459)][u]||Prisma[d(2514)][d(3352)]([y[d(1636)]],function(){var e=d,t=y[e(2652)](setInterval,function(){var n=e;window[n(1459)]&&window[n(1459)][u]&&window[n(1459)][u][n(2256)]&&(y[n(1240)](clearInterval,t),window[n(1459)][u][n(2256)](y[n(1990)],function(){}))},50)},!1,function(){var n=d;console[n(1512)](y[n(2158)],y[n(960)])},!0);var e=Prisma[d(2527)];function f(I){var A,f,H,r,m,t,p,x=d,g={ksmrk:function(n,e){return y[_0x164b(1206)](n,e)},QFzpz:y[x(2202)],HQZSK:function(n,e){return y[x(2309)](n,e)},qDoZq:y[x(2141)],senqM:y[x(905)],kBglt:y[x(1360)],dAnPi:y[x(900)],EVXSp:y[x(3062)],AnsNP:function(n,e){return y[x(772)](n,e)},hfRMC:y[x(3302)],dyMMQ:y[x(1237)],rCdSQ:y[x(2854)],ilvRK:y[x(2646)],IrWDJ:y[x(2461)],LKpiV:y[x(1457)],zhGwB:y[x(926)],JkJVg:y[x(1054)],EIwzD:y[x(2166)],eqlYl:y[x(394)],fHEMs:function(n,e,t){return y[x(961)](n,e,t)},vcZXm:y[x(1321)],eRidu:y[x(2758)],AdwAJ:y[x(278)],Bvjqp:function(n,e){return y[x(646)](n,e)},juwVy:y[x(2965)],JcsnU:function(n){return y[x(1983)](n)},MoFHF:function(n,e,t){return y[x(2652)](n,e,t)},BazSb:y[x(2611)],RdvHr:y[x(2079)],spFyK:y[x(2716)],RIkFO:function(n,e){return y[x(553)](n,e)},Fessb:y[x(1836)],kBFIU:y[x(3172)],WRbjk:function(n,e,t){return y[x(2826)](n,e,t)},jUyIP:y[x(1429)],AcXQk:function(n,e){return y[x(536)](n,e)},iDRaK:y[x(1760)],nmsjo:function(n,e){return y[x(2341)](n,e)},WbiGb:y[x(3247)],QRmcG:y[x(3246)],saHfY:function(n,e){return y[x(536)](n,e)},pzMOe:function(n,e){return y[x(529)](n,e)},aIhwT:y[x(473)],CUmPe:y[x(750)],qyWlx:function(n){return y[x(2090)](n)},GBBVL:y[x(1031)],ugTcc:y[x(1744)],eAHVx:y[x(1931)],PzNoq:y[x(2457)],BGGzf:function(n,e){return y[x(2133)](n,e)},JMdBD:y[x(395)],LfeKK:y[x(3112)],aqBSm:function(n,e){return y[x(2849)](n,e)},IGLPv:y[x(1763)],dpDFu:y[x(1175)],MBCFK:y[x(745)],SHYhg:y[x(3117)],DyeBi:y[x(2183)],pLAvr:function(n,e){return y[x(3250)](n,e)},QmjRH:y[x(1762)],ENyHH:y[x(835)],tYngD:function(n,e){return y[x(2341)](n,e)},dgpuY:y[x(2150)],WiSCC:y[x(2182)],PxeMp:function(n,e){return y[x(3099)](n,e)},XbKPu:function(n,e){return y[x(482)](n,e)},FaOqq:y[x(941)],BwtsI:y[x(906)],rlYKx:y[x(2088)],XtWUI:y[x(2476)],vhSNN:function(n,e){return y[x(2309)](n,e)},GjMPK:function(n){return y[x(1127)](n)},ckMnh:function(n,e){return y[x(684)](n,e)},VMMce:function(n){return y[x(928)](n)},wXXew:y[x(462)],BEGjE:function(n,e){return y[x(1994)](n,e)},fpOEp:y[x(1056)],nUbIs:function(n,e){return y[x(1793)](n,e)},nEzNG:function(n,e){return y[x(1598)](n,e)},TCGps:function(n,e){return y[x(1826)](n,e)},YtYdT:y[x(3262)],ZZXjJ:function(n,e){return y[x(2828)](n,e)},STgLF:y[x(768)],wkwnD:function(n,e){return y[x(990)](n,e)},yvlmN:y[x(1328)],LXJeW:function(n,e){return y[x(2929)](n,e)},PlwJh:y[x(366)],hJyNB:function(n,e){return y[x(1249)](n,e)},cUvdu:function(n,e){return y[x(2341)](n,e)},wKSJP:y[x(1936)],BEKmh:y[x(3045)],vvBKK:y[x(2727)],vRflI:function(n,e){return y[x(2645)](n,e)},UHgLq:y[x(2582)],rDivb:function(n,e){return y[x(990)](n,e)},GsGEU:y[x(2594)],PabtD:function(n,e){return y[x(2045)](n,e)},GJUTl:y[x(3190)],baoSp:y[x(832)],dNMOX:y[x(2360)],UxLQW:y[x(1635)],BqlxD:function(n,e){return y[x(2041)](n,e)},qNAKP:y[x(1710)],PRzKJ:y[x(1103)],aRsNr:function(n,e){return y[x(2475)](n,e)},PAnne:function(n,e){return y[x(1449)](n,e)},xPdbZ:function(n,e){return y[x(2645)](n,e)},kBxfj:y[x(2795)],qhUkB:function(n,e){return y[x(1793)](n,e)},AOyIB:function(n,e){return y[x(2809)](n,e)},NAwUH:y[x(433)],vThGx:function(n,e){return y[x(1206)](n,e)},SpFgi:function(n,e){return y[x(1206)](n,e)},CjvSS:function(n,e){return y[x(776)](n,e)},NswLi:y[x(3378)],tdgsU:y[x(567)],REJNG:y[x(3148)],bOdmg:function(n,e,t){return y[x(2125)](n,e,t)},VfwSz:y[x(797)],Qnjnq:y[x(1256)],feczo:y[x(484)],PCZGw:function(n,e){return y[x(1716)](n,e)},IEKWD:function(n,e){return y[x(2403)](n,e)},PptAq:function(n,e){return y[x(340)](n,e)},MpOvp:y[x(523)],kGsVw:function(n,e,t){return y[x(1027)](n,e,t)},wUqCg:y[x(1878)],Jgocu:function(n,e){return y[x(1347)](n,e)},SQBrA:function(n,e){return y[x(2809)](n,e)},rNVTm:function(n,e){return y[x(1227)](n,e)},YkLlA:function(n,e){return y[x(1209)](n,e)},SRpCt:function(n,e){return y[x(2563)](n,e)},lqlLA:y[x(2886)],NEuyV:function(n,e){return y[x(881)](n,e)},ElNlT:function(n,e){return y[x(2098)](n,e)},nGtJo:y[x(1853)],gzYwM:function(n,e){return y[x(826)](n,e)},ftefy:function(n,e){return y[x(910)](n,e)},fzAjo:function(n,e){return y[x(2844)](n,e)},orUDu:function(n,e){return y[x(1016)](n,e)},EKyYO:y[x(1341)],xorKa:y[x(1642)],GrzOq:y[x(2734)],tbyYn:y[x(2345)],jLWPN:y[x(2253)],INscE:function(n,e){return y[x(1238)](n,e)},wrcTM:y[x(1538)],YqEHq:y[x(3178)],fLHDN:y[x(2484)],HjXTE:y[x(2065)],rbkTq:function(n,e){return y[x(1474)](n,e)},qAfsn:y[x(2550)],rgkQp:y[x(3093)],MkOWj:y[x(2385)],xhwgf:y[x(267)],oPOhx:y[x(3101)],XMVRX:y[x(2691)],ssUMD:y[x(2564)],zJZIQ:y[x(3318)],zpAWE:y[x(1545)],qLDkR:y[x(1633)],gJWJL:function(n,e){return y[x(1353)](n,e)},sujrB:y[x(2210)],MQAAT:y[x(2228)],KsnfI:y[x(1594)],FKoPL:y[x(1574)],vJGly:y[x(3364)],IEvhq:y[x(2001)],AmROO:y[x(542)],vlKqK:y[x(3136)],HTNnC:y[x(2336)],wqbsL:y[x(445)],wxYZq:y[x(796)],RlyDf:y[x(1232)],FrbOa:y[x(1314)],eenHs:y[x(2933)],wJGvF:y[x(396)],itZSZ:y[x(859)],jDeqI:y[x(1563)],upbAU:y[x(2124)],WrjOy:y[x(2167)],TZhoo:function(n,e){return y[x(1205)](n,e)},DQCjs:y[x(413)],HxUcs:y[x(490)],BlPwk:y[x(3361)],LIiCq:y[x(1309)],AECjG:function(n,e){return y[x(776)](n,e)},TmTOP:y[x(2324)],xrYzg:y[x(875)],fvJoB:y[x(2370)],XdhpX:function(n,e){return y[x(2809)](n,e)},DZpRV:y[x(2843)],eyxhM:y[x(1306)],XPJwC:function(n,e){return y[x(1598)](n,e)},rOMIQ:function(n,e){return y[x(536)](n,e)},yKvDA:function(n,e){return y[x(1305)](n,e)},GfUaw:function(n,e){return y[x(3181)](n,e)},HkpZh:function(n,e){return y[x(1598)](n,e)},iCJfE:function(n,e){return y[x(3181)](n,e)},sBsqc:function(n,e){return y[x(1822)](n,e)},PIZCD:function(n,e){return y[x(1860)](n,e)},TAMny:y[x(2881)],seORi:function(n,e){return y[x(1034)](n,e)},xqXkk:function(n,e){return y[x(1826)](n,e)},LcwLI:y[x(1291)],JNsRT:y[x(1164)],aqWwU:function(n,e){return y[x(2365)](n,e)},feyuk:y[x(290)],EMSdV:function(n){return y[x(2090)](n)},sssHu:function(n,e){return y[x(536)](n,e)},SOZGo:function(n,e,t){return y[x(1027)](n,e,t)},YNroD:function(n,e,t){return y[x(2125)](n,e,t)}},b=new e,N=new Prisma[x(249)]({mask:!0,over:!0}),o=new Prisma[x(612)](I),w=new Prisma[x(2598)](I),S={},J=[],i=0,P=0,k={},c={season:Prisma[x(770)][x(3074)](y[x(1256)]),voice:Prisma[x(770)][x(3074)](y[x(1878)]),source:Prisma[x(770)][x(3074)](y[x(3368)])},F={season:[],voice:[]};function _(n){var e=x,t=n[e(1520)],n=n[e(2164)][e(1586)](" ")[0];return g[e(882)](t,n)[e(2853)+"e"]()}function a(n){var e=x,t=Prisma[e(2514)][e(795)](I[e(1343)][e(3150)+e(2969)]?I[e(1343)][e(3305)+e(3199)]:I[e(1343)][e(696)+e(2222)]),i=Prisma[e(449)][e(1562)](y[e(2202)],"{}");i[t]=n,Prisma[e(449)][e(3034)](y[e(2202)],i)}function v(){var n=x,e=Prisma[n(2514)][n(795)](I[n(1343)][n(3150)+n(2969)]?I[n(1343)][n(3305)+n(3199)]:I[n(1343)][n(696)+n(2222)]),t=Prisma[n(449)][n(1562)](g[n(2907)],"{}");delete t[e],Prisma[n(449)][n(3034)](g[n(2907)],t)}y[x(2073)](s,void 0)&&(b[x(552)](1e4),b[x(2312)](y[x(2251)](C,y[x(3021)]),function(n){s=n},function(){s=[]})),this[x(978)]=function(){for(var u=x,n=g[u(2859)][u(1586)]("|"),e=0;;){switch(n[e++]){case"0":if(I[u(1520)])for(var t=g[u(1736)][u(1586)]("|"),i=0;;){switch(t[i++]){case"0":S[I[u(1520)]]={name:I[u(1520)]};continue;case"1":return b[g[u(751)]](g[u(780)](C,I[u(1580)][u(1626)](g[u(2663)],g[u(2191)])),this[u(3016)][u(872)](this),function(){var n=u;o[n(578)]()[n(1966)](l[n(1466)])[n(1761)](),f[n(621)]()},!1,{dataType:g[u(506)]});case"2":S={};continue;case"3":k=[];continue;case"4":o[u(578)]()[u(1966)](g[u(1852)])[u(1761)]();continue;case"5":H=I[u(1520)];continue}break}continue;case"1":N[u(1787)](o[u(578)]()[u(1966)](g[u(1702)]));continue;case"2":Prisma[u(283)][u(973)](g[u(921)]);continue;case"3":o[u(3203)+"s"](N[u(578)]());continue;case"4":N[u(573)]()[u(1260)](g[u(3331)]);continue;case"5":w[u(578)]()[u(1966)](g[u(1852)])[u(3206)](w[u(578)]()[u(1966)](g[u(1572)]));continue;case"6":N[u(573)]()[u(2221)](Prisma[u(1624)][u(1562)](g[u(2103)]));continue;case"7":w[u(578)]()[u(1966)](g[u(3222)])[u(426)](Prisma[u(770)][u(3074)](g[u(2120)]));continue;case"8":g[u(3071)](setTimeout,function(){var n=u;Prisma[n(449)][n(1562)](l[n(3049)],!1)||I[n(1520)]||f[n(2720)+"p"]()},2e3);continue;case"9":this[u(2614)](!0);continue;case"10":this[u(2614)](!1);continue;case"11":w[u(2178)]=function(){f[u(280)]()};continue;case"12":var f=this;continue;case"13":w[u(578)]()[u(1966)](g[u(714)]).on(g[u(2616)],function(){g[u(1151)](clearInterval,m)});continue;case"14":w[u(1901)+u(1274)]&&w[u(1901)+u(1274)]();continue;case"15":w[u(934)]=function(n){var e=u;l[e(649)](a,n),Prisma[e(443)][e(1626)]({search:n,clarification:!0,similar:!0})};continue;case"16":w[u(738)]=function(n,e,t){var i=u;if(l[i(296)](n,l[i(352)]))if(e[i(300)])l[i(429)](v),f[i(303)+i(1737)]({season:0,voice:0,voice_url:"",voice_name:""}),l[i(1910)](setTimeout,function(){var n=i;Prisma[n(489)][n(326)](),Prisma[n(443)][n(1626)]({clarification:0,similar:0})},10);else if(l[i(1791)](e[i(3239)],l[i(784)])){var r=k[t[i(737)]];f[i(250)+i(1017)](r),l[i(2543)](setTimeout,function(){var n=i;Prisma[n(489)][n(326)](),f[n(300)](),f[n(1324)]()})}else for(var o=l[i(1821)][i(1586)]("|"),c=0;;){switch(o[c++]){case"0":f[i(300)]();continue;case"1":s[e[i(3239)]]=t[i(737)];continue;case"2":l[i(1910)](setTimeout,Prisma[i(489)][i(326)],10);continue;case"3":var a=F[e[i(3239)]][t[i(737)]][i(1580)];continue;case"4":f[i(1441)](a);continue;case"5":var s=f[i(2280)]();continue;case"6":l[i(296)](e[i(3239)],l[i(2265)])&&(s[i(1709)]=F[i(879)][t[i(737)]][i(2054)],s[i(2058)]=a);continue;case"7":f[i(871)](s);continue}break}else l[i(1922)](n,l[i(2203)])&&(Prisma[i(489)][i(326)](),I[i(1039)+i(2198)]=e[i(2966)],f[i(250)+i(1017)](e[i(2966)]))};continue;case"17":o[u(3362)](w[u(578)]());continue;case"18":this[u(2035)+"s"]()[u(2522)](function(){return f[u(929)+"ce"]()})[u(2522)](function(n){var t=u;s[t(1966)](function(n){var e=t;return l[e(1922)](H[e(2276)](0,n[e(2557)]),n)})||w[t(578)]()[t(1966)](g[t(1852)])[t(1260)](g[t(3156)]),f[t(1324)]()})[g[u(1814)]](function(n){var e=u;f[e(1690)+e(2077)](n)});continue;case"19":var l={rJlLJ:function(n,e){return g[u(1151)](n,e)},GUXLA:function(n,e){return g[u(351)](n,e)},cFNKt:g[u(3139)],sjBKj:function(n){return g[u(1117)](n)},szurK:function(n,e,t){return g[u(1782)](n,e,t)},Nvbnb:function(n,e){return g[u(351)](n,e)},hwnYE:g[u(1235)],bmZhz:function(n,e){return g[u(780)](n,e)},NdPdB:g[u(936)],PVjoO:g[u(270)],gTXAM:function(n,e){return g[u(2102)](n,e)},BvYLI:g[u(2060)],kvlsP:g[u(2959)],wrwzN:g[u(1572)]};continue}break}},this[x(1459)]=function(n,e){var t=x,i={vLlRG:function(n){return g[_0x164b(1117)](n)}},r=this;g[t(2779)](l,n,function(){var n=t;e?i[n(2997)](e):r[n(1966)]()})},this[x(2035)+"s"]=function(){var a={gCAmr:function(n){return y[_0x164b(3187)](n)},rmRHw:function(n){return y[_0x164b(2880)](n)}};return new Promise(function(i,n){var r=_0x164b;if(I[r(1343)][r(1810)]&&I[r(1343)][r(1673)+"id"])g[r(3025)](i);else for(var e=g[r(760)][r(1586)]("|"),t=0;;){switch(e[t++]){case"0":o[r(295)](g[r(2782)](g[r(2095)],I[r(1343)].id));continue;case"1":b[r(552)](1e4);continue;case"2":o[r(295)](g[r(2780)](g[r(1272)],I[r(1343)][r(2164)]?1:0));continue;case"3":I[r(1343)][r(1673)+"id"]&&o[r(295)](g[r(2780)](g[r(2837)],I[r(1343)][r(1673)+"id"]||""));continue;case"4":b[r(2312)](g[r(1151)](C,c),function(n){var e,t=r;for(e in n)I[t(1343)][e]=n[e];a[t(1384)](i)},function(){a[r(1145)](i)});continue;case"5":var o=[];continue;case"6":var c=g[r(2092)](g[r(488)](B[r(2778)],g[r(2801)]),o[r(1862)]("&"));continue;case"7":I[r(1343)][r(1810)]&&o[r(295)](g[r(488)](g[r(1195)],I[r(1343)][r(1810)]||""));continue}break}})},this[x(1123)+x(1017)]=function(n){var e=x,t=Prisma[e(449)][e(1421)](y[e(941)],3e3,{});t[I[e(1343)].id]=n,Prisma[e(449)][e(3034)](y[e(941)],t)},this[x(250)+x(1017)]=function(n){for(var e=x,t=g[e(3307)][e(1586)]("|"),i=0;;){switch(t[i++]){case"0":this[e(871)](o,n);continue;case"1":var r=this[e(2280)]();continue;case"2":Prisma[e(449)][e(3034)](g[e(2120)],n);continue;case"3":var o=this[e(2280)](n);continue;case"4":this[e(1123)+e(1017)](n);continue;case"5":Prisma[e(449)][e(3034)](g[e(3309)],H);continue;case"6":this[e(300)]();continue;case"7":H=n;continue;case"8":f=S[H][e(1580)];continue;case"9":this[e(1324)]();continue;case"10":r[e(1709)]&&(o[e(1709)]=r[e(1709)]);continue}break}},this[x(1071)+x(3023)]=function(n){for(var e=x,t=g[e(1891)][e(1586)]("|"),i=0;;){switch(t[i++]){case"0":I[e(1343)][e(1810)]&&o[e(295)](g[e(2092)](g[e(1195)],I[e(1343)][e(1810)]||""));continue;case"1":o[e(295)](g[e(2782)](g[e(2808)],g[e(424)](encodeURIComponent,I[e(787)+e(794)]?I[e(1324)]:I[e(1343)][e(2054)]||I[e(1343)][e(2164)])));continue;case"2":o[e(295)](g[e(2780)](g[e(942)],g[e(1151)](encodeURIComponent,I[e(1343)][e(696)+e(2222)]||I[e(1343)][e(3305)+e(3199)])));continue;case"3":var r=I[e(1343)][e(2966)]||g[e(1390)];continue;case"4":var o=[];continue;case"5":o[e(295)](g[e(2329)](g[e(2860)],g[e(488)](I[e(1343)][e(2238)+"te"]||I[e(1343)][e(845)+e(1823)]||g[e(672)],"")[e(2276)](0,4)));continue;case"6":o[e(295)](g[e(2329)](g[e(2417)],r));continue;case"7":I[e(1343)][e(1673)+"id"]&&o[e(295)](g[e(2092)](g[e(2837)],I[e(1343)][e(1673)+"id"]||""));continue;case"8":o[e(295)](g[e(2782)](g[e(2316)],!!I[e(1962)]));continue;case"9":o[e(295)](g[e(2092)](g[e(2095)],I[e(1343)].id));continue;case"10":o[e(295)](g[e(2782)](g[e(2964)],I[e(1343)][e(858)+e(1998)]||""));continue;case"11":o[e(295)](g[e(3052)](g[e(3022)],window[e(1459)][u]?window[e(1459)][u][e(1266)]:""));continue;case"12":o[e(295)](g[e(2329)](g[e(1272)],I[e(1343)][e(2164)]?1:0));continue;case"13":Prisma[e(449)][e(1562)](g[e(1160)],"")&&o[e(295)](g[e(2924)](g[e(3123)],Prisma[e(2514)][e(795)](Prisma[e(449)][e(1562)](g[e(1160)],""))));continue;case"14":o[e(295)](g[e(2782)](g[e(2154)],I[e(787)+e(794)]?1:0));continue;case"15":return g[e(2580)](g[e(2780)](n,g[e(1424)](n[e(1484)]("?"),0)?"&":"?"),o[e(1862)]("&"))}break}},this[x(2766)+x(299)+"r"]=function(){var n=x,e=Prisma[n(449)][n(1421)](g[n(1181)],3e3,{});return e[I[n(1343)].id]?e[I[n(1343)].id]:Prisma[n(449)][n(1562)](g[n(2120)],k[n(2557)]?k[0]:"")},this[x(2672)+"e"]=function(a){var s=x,u={SyeyF:function(n,e){return g[_0x164b(1151)](n,e)},BFvFP:function(n,e){return g[_0x164b(351)](n,e)},gSicr:g[s(644)],WSqIR:g[s(651)],dMjFl:g[s(1181)],bowOK:g[s(2120)],CNHnh:function(n){return g[s(3025)](n)}};return new Promise(function(n,e){var i=s,r={dylsO:function(n,e){return u[_0x164b(2802)](n,e)},zOOVu:function(n,e){return u[_0x164b(2585)](n,e)},MRRiA:u[i(3319)]};if(a[i(1920)](function(n){var e=i,t=r[e(1325)](_,n);S[t]={url:n[e(1580)],name:n[e(2164)],show:!!r[e(2377)](typeof n[e(2698)],r[e(3315)])||n[e(2698)]}}),(k=Prisma[i(2510)][i(2107)](S))[i(2557)])for(var t=u[i(1210)][i(1586)]("|"),o=0;;){switch(t[o++]){case"0":var c=Prisma[i(449)][i(1421)](u[i(2393)],3e3,{});continue;case"1":f=S[H][i(1580)];continue;case"2":H=c[I[i(1343)].id]?c[I[i(1343)].id]:Prisma[i(449)][i(1562)](u[i(995)],k[0]);continue;case"3":u[i(2802)](n,a);continue;case"4":S[H][i(2698)]||I[i(1039)+i(2198)]||(H=k[0]);continue;case"5":S[H]||(H=k[0]);continue}break}else u[i(2657)](e)})},this[x(2981)]=function(){var o=x,d={oBSkx:y[o(392)],IzUlT:function(n,e){return y[o(564)](n,e)},LiGLX:function(n,e){return y[o(553)](n,e)},OJobn:y[o(906)],Itesu:y[o(1836)],LWHOi:function(n,e){return y[o(772)](n,e)},CBtcX:function(n,e){return y[o(1925)](n,e)},rFkZd:y[o(1298)],BfVhu:function(n,e,t){return y[o(2793)](n,e,t)},XIYCp:function(n,e,t){return y[o(2652)](n,e,t)},TvLas:function(n,e,t){return y[o(2793)](n,e,t)},cxgkO:function(n,e){return y[o(772)](n,e)}},h=this;return new Promise(function(e,u){for(var f=o,n=g[f(2384)][f(1586)]("|"),t=0;;){switch(n[t++]){case"0":var l=function(n,t){var i=f,r={FivAY:function(n,e){return m[_0x164b(3242)](n,e)}};if(n[i(538)])return m[i(2798)](u,n);var o=h[i(2766)+i(299)+"r"]();v||(n[i(994)][i(817)](function(n){var e=i;return t?n[e(2698)]:n[e(2698)]&&r[e(3137)](n[e(2164)][e(2853)+"e"](),o)})[i(2557)]?(v=!0,m[i(2131)](e,n[i(994)][i(817)](function(n){return n[i(2698)]}))):t&&m[i(1747)](u))};continue;case"1":var m={zKork:function(n,e){return g[f(351)](n,e)},mwlyY:function(n,e){return g[f(780)](n,e)},yXeXU:function(n,e){return g[f(2099)](n,e)},TyGGk:function(n){return g[f(2897)](n)},vCxCy:function(n,e){return g[f(624)](n,e)},NaswO:function(n){return g[f(2270)](n)},PlSQK:function(n,e,t){return g[f(2779)](n,e,t)}};continue;case"2":var i=function c(n){var a=f,s={zMuva:d[a(1091)],keRCD:function(n,e){return d[a(404)](n,e)},ZRMfK:function(n,e){return d[a(2973)](n,e)},qSCek:d[a(821)],jfhOP:d[a(2771)],hAGgU:function(n,e){return d[a(551)](n,e)},INUmy:function(n,e){return d[a(3335)](n,e)},cKAfZ:d[a(2602)],GUYKq:function(n,e,t){return d[a(1770)](n,e,t)},qVOZN:function(n,e,t){return d[a(3189)](n,e,t)},kmJqx:function(n,e,t){return d[a(2753)](n,e,t)}};b[a(552)](3e3),b[a(2312)](d[a(762)](C,r),function(n){for(var i=a,e=s[i(2428)][i(1586)]("|"),t=0;;){switch(e[t++]){case"0":k=[];continue;case"1":var r={aebRz:function(n,e){return s[i(3248)](n,e)},MeUCB:function(n,e){return s[i(3082)](n,e)},HcOVn:s[i(2333)],YQJbY:function(n,e){return s[i(3082)](n,e)}};continue;case"2":var o=h[i(2766)+i(299)+"r"]();continue;case"3":w[i(3034)](s[i(343)],k[i(1739)](function(n){var e=i;return{title:S[n][e(2164)],source:n,selected:r[e(1223)](n,H),ghost:!S[n][e(2698)]}}));continue;case"4":S={};continue;case"5":s[i(972)](l,n);continue;case"6":k=Prisma[i(2510)][i(2107)](S);continue;case"7":w[i(864)](s[i(343)],[S[H]?S[H][i(2164)]:H]);continue;case"8":s[i(1492)](P,15)||n[i(3171)]?(w[i(578)]()[i(1966)](s[i(1396)])[i(1761)](),s[i(2560)](l,n,!0)):p=!v&&S[o]&&S[o][i(2698)]?(s[i(2560)](l,n,!0),s[i(368)](setTimeout,c,1e3)):s[i(1189)](setTimeout,c,1e3);continue;case"9":n[i(994)][i(1920)](function(n){var e=i,t=r[e(2883)](_,n);S[t]={url:n[e(1580)],name:n[e(2164)],show:!!r[e(3141)](typeof n[e(2698)],r[e(3198)])||n[e(2698)]}});continue;case"10":P++;continue}break}},function(){var n=a;P++,m[n(2350)](P,15)?m[n(3143)](u):p=m[n(2485)](setTimeout,c,1e3)})};continue;case"3":var v=!1;continue;case"4":g[f(2270)](i);continue;case"5":var r=h[f(1071)+f(3023)](g[f(2092)](g[f(2580)](B[f(2778)],g[f(474)]),h[f(802)]||""));continue}break}})},this[x(929)+"ce"]=function(){var e=x,o={NEXzg:function(n,e){return y[_0x164b(564)](n,e)},enTeo:y[e(1291)],YDRRR:y[e(757)],MjjUb:y[e(278)]},c=this;return new Promise(function(t,i){var r=e,n=c[r(1071)+r(3023)](g[r(547)](B[r(2778)],g[r(514)]));b[r(552)](15e3),b[r(2312)](g[r(1819)](C,n),function(n){var e=r;if(n[e(538)])return o[e(1991)](i,n);(n[e(1020)]?(c[e(802)]=n[e(802)],n[e(2054)]&&(I[e(1343)][e(2164)]&&(I[e(1343)][e(2164)]=n[e(2054)]),I[e(1343)][e(2054)])&&(I[e(1343)][e(2054)]=n[e(2054)]),w[e(578)]()[e(1966)](o[e(805)])[e(2221)](o[e(410)]),c[e(2981)]()[e(2522)](c[e(2672)+"e"])):c[e(2672)+"e"](n))[e(2522)](t)[o[e(893)]](i)},i)})},this[x(2046)]=function(){return this[x(578)]()},this[x(1324)]=function(){var n=x;this[n(817)]({source:k},this[n(2280)]()),this[n(1966)]()},this[x(1966)]=function(){var n=x;this[n(1441)](this[n(1071)+n(3023)](f))},this[x(1441)]=function(n){var e=x;i++,g[e(1155)](i,10)?(b[g[e(751)]](g[e(2099)](C,n),this[e(3016)][e(872)](this),this[e(841)+e(2082)][e(872)](this),!1,{dataType:g[e(506)]}),g[e(897)](clearTimeout,t),t=g[e(1782)](setTimeout,function(){i=0},4e3)):this[e(621)]()},this[x(1724)+x(3285)]=function(n,e){var s=x;try{var t=g[s(2062)]($,g[s(2092)](g[s(1674)](g[s(2971)],n),g[s(1254)])),u=[];return t[s(1966)](e)[s(2891)](function(){for(var n=s,e=g[n(2372)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":var i=c[n(2922)]("s");continue;case"1":o&&(a[n(426)]=o);continue;case"2":var r=c[n(2922)]("e");continue;case"3":var o=c[n(426)]();continue;case"4":var c=g[n(2629)]($,this);continue;case"5":u[n(295)](a);continue;case"6":var a=JSON[n(3016)](c[n(2922)](g[n(2644)]));continue;case"7":i&&(a[n(933)]=g[n(424)](parseInt,i));continue;case"8":!I[n(1343)][n(2164)]&&(o[n(559)](/\d+p/i)&&(a[n(2902)]||(a[n(2902)]={},a[n(2902)][o]=a[n(1580)]),o=I[n(1343)][n(2054)]),g[n(2693)](o,g[n(2676)]))&&(o=I[n(1343)][n(2054)]);continue;case"9":r&&(a[n(2995)]=g[n(470)](parseInt,r));continue;case"10":a[n(358)]=c[n(2970)](g[n(1938)]);continue}break}}),u}catch(n){return[]}},this[x(3131)]=function(t,i){var n,r=x,o={tkYcm:y[r(2461)],qNDYs:function(n,e,t){return y[r(2793)](n,e,t)}},c=this;y[r(344)](Prisma[r(449)][r(2754)](y[r(1300)]),y[r(2994)])&&t[r(2119)]&&Prisma[r(940)].is(y[r(2832)])?((n=Prisma[r(2510)][r(1173)](t))[r(1846)]=y[r(3134)],n[r(1580)]=t[r(2119)],y[r(3152)](i,n,{})):y[r(2563)](t[r(1846)],y[r(3134)])?y[r(1689)](i,t,{}):(Prisma[r(3225)][r(280)](function(){var n=r;Prisma[n(3225)][n(1971)](),Prisma[n(283)][n(620)](o[n(839)]),b[n(3344)]()}),b[y[r(3062)]](y[r(1240)](C,t[r(1580)]),function(n){var e=r;n[e(1459)]?c[e(1459)](n,function(){var n=e;Prisma[n(3225)][n(1971)](),c[n(3131)](t,i)}):(Prisma[e(3225)][e(1971)](),o[e(2502)](i,n,n))},function(){var n=r;Prisma[n(3225)][n(1971)](),o[n(2502)](i,!1,{})}))},this[x(911)+x(1721)]=function(n){var e=x;return{title:n[e(2054)],url:n[e(1580)],quality:n[e(1734)],timeline:n[e(1929)],subtitles:n[e(2908)],callback:n[e(554)]}},this[x(2692)+"ve"]=function(n){var e,t=x;n[t(1580)]&&g[t(2102)](typeof n[t(1580)],g[t(1344)])&&g[t(3300)](n[t(1580)][t(1484)](g[t(3229)]),-1)&&(e=n[t(1580)][t(1586)](g[t(3229)]),n[t(1580)]=e[0],n[t(3272)+"e"]=e[1])},this[x(2623)+x(3103)]=function(n){var e=x;if(Prisma[e(2510)][e(2107)](n[e(2902)])[e(2557)])for(var t in n[e(2902)])g[e(2630)](g[e(470)](parseInt,t),Prisma[e(449)][e(2754)](g[e(2181)]))&&(n[e(1580)]=n[e(2902)][t],this[e(2692)+"ve"](n)),g[e(3300)](n[e(2902)][t][e(1484)](g[e(3229)]),-1)&&(n[e(2902)][t]=n[e(2902)][t][e(1586)](g[e(3229)])[0])},this[x(727)]=function(h){var c=x,p={xPqyn:y[c(481)],AbvXC:function(n,e){return y[c(2563)](n,e)},UFOZv:function(n,e){return y[c(2894)](n,e)},FEZYb:y[c(3349)],AZeBo:function(n,e){return y[c(1353)](n,e)},Ocaan:y[c(1300)],jofTB:y[c(2994)],ZaiXe:function(n){return y[c(2567)](n)},JsODB:y[c(2841)],TaZUV:y[c(3048)],GbpWG:y[c(1345)],QymPb:y[c(1558)],uKCnr:function(n,e){return y[c(1925)](n,e)},LPHRs:y[c(1712)]},b=this;this[c(2767)](h,{onEnter:function(v,n){var d=c;b[d(3131)](v,function(r,n){var o=d,c={gWPvW:p[o(1035)],eXFQs:function(n,e){return p[o(983)](n,e)},DDctV:function(n,e){return p[o(2953)](n,e)},EzAcG:p[o(531)],ftXkh:function(n,e){return p[o(1666)](n,e)},qUDrX:p[o(258)],WYPvF:p[o(3081)],nSFGK:function(n){return p[o(867)](n)},AHQjW:p[o(720)],KgWHF:p[o(3314)]};if(r&&r[o(1580)])for(var e=p[o(3077)][o(1586)]("|"),t=0;;){switch(e[t++]){case"0":var i=b[o(911)+o(1721)](v);continue;case"1":b[o(2623)+o(3103)](i);continue;case"2":if(r[o(659)]&&r[o(659)][o(1580)])for(var a=p[o(2161)][o(1586)]("|"),s=0;;){switch(a[s++]){case"0":i[o(341)]=r[o(659)][o(808)];continue;case"1":i[o(1180)+"n"]=r[o(659)][o(3263)];continue;case"2":i[o(1453)]=r[o(659)][o(1580)];continue;case"3":i[o(1154)+"n"]=r[o(659)][o(2473)];continue;case"4":i[o(1769)+o(1172)]=r[o(659)][o(3098)];continue}break}continue;case"3":i[o(1580)]=r[o(1580)];continue;case"4":i[o(516)]=n[o(516)]||r[o(516)];continue;case"5":p[o(2076)](m[o(2557)],1)&&(i[o(2097)]=m);continue;case"6":i[o(2902)]=n[o(2902)]||v[o(1734)];continue;case"7":v[o(933)]?h[o(1920)](function(s){for(var e=o,n=c[e(2833)][e(1586)]("|"),t=0;;){switch(n[t++]){case"0":m[e(295)](u);continue;case"1":c[e(985)](s,v)?u[e(1580)]=r[e(1580)]:c[e(3078)](s[e(1846)],c[e(3253)])?c[e(1765)](Prisma[e(449)][e(2754)](c[e(1461)]),c[e(314)])?(u[e(1580)]=s[e(2119)],delete u[e(2902)]):u[e(1580)]=function(o){var c=e,a={fbdpL:i[c(1519)],lHNul:i[c(1536)],udskK:function(n){return i[c(3066)](n)}};b[c(3131)](s,function(n,e){var t=c;if(n[t(1580)])for(var i=a[t(2873)][t(1586)]("|"),r=0;;){switch(i[r++]){case"0":b[t(2692)+"ve"](u);continue;case"1":u[t(2902)]=e[t(2902)]||s[t(1734)];continue;case"2":b[t(2623)+t(3103)](u);continue;case"3":u[t(2908)]=n[t(2908)];continue;case"4":s[t(554)]();continue;case"5":u[t(1580)]=n[t(1580)];continue}break}else u[t(1580)]="",Prisma[t(868)][t(2698)](Prisma[t(770)][t(3074)](a[t(801)]));a[t(917)](o)},function(){var n=c;u[n(1580)]="",i[n(2985)](o)})}:u[e(1580)]=s[e(1580)];continue;case"2":var i={dKiSY:function(n){return c[e(2940)](n)},OrYiF:c[e(2211)],hEnFT:c[e(2438)],KpDwD:function(n){return c[e(2940)](n)}};continue;case"3":b[e(2623)+e(3103)](u);continue;case"4":b[e(2692)+"ve"](u);continue;case"5":var u=b[e(911)+e(1721)](s);continue}break}}):m[o(295)](i);continue;case"8":i[o(2908)]=r[o(2908)];continue;case"9":i[o(3179)+o(632)]=n[o(3179)+o(632)]||r[o(3179)+o(632)];continue;case"10":if(i[o(1580)])for(var u=p[o(2431)][o(1586)]("|"),f=0;;){switch(u[f++]){case"0":v[o(554)]();continue;case"1":var l=i;continue;case"2":b[o(1123)+o(1017)](H);continue;case"3":Prisma[o(763)][o(2097)](m);continue;case"4":l[o(3296)]=!0;continue;case"5":Prisma[o(763)][o(3363)](i);continue}break}else Prisma[o(868)][o(2698)](Prisma[o(770)][o(3074)](p[o(3314)]));continue;case"11":b[o(2692)+"ve"](i);continue;case"12":var m=[];continue}break}else Prisma[o(868)][o(2698)](Prisma[o(770)][o(3074)](p[o(3314)]))},!0)},onContextMenu:function(t,n,e,i){var r=c,o={pPZUv:function(n,e){return g[_0x164b(2796)](n,e)}};b[r(3131)](t,function(n){var e=r;o[e(2068)](i,{file:n[e(1580)],quality:t[e(1734)]})},!0)}}),this[c(817)]({season:F[c(933)][c(1739)](function(n){return n[c(2054)]}),voice:F[c(879)][c(1739)](function(n){return n[c(2054)]})},this[c(2280)]())},this[x(3016)]=function(n){for(var t=x,e=y[t(539)][t(1586)]("|"),i=0;;){switch(e[i++]){case"0":try{var r=this[t(1724)+t(3285)](n,y[t(478)]),o=this[t(1724)+t(3285)](n,y[t(2920)]);if(y[t(2894)](r[t(2557)],1)&&y[t(990)](r[0][t(1846)],y[t(2142)])&&!r[0][t(1962)])F[t(933)]=r[t(1739)](function(n){var e=t;return{title:n[e(426)],url:n[e(1580)]}}),this[t(303)+t(1737)]({season:0}),this[t(1441)](r[0][t(1580)]);else{this[t(1108)][t(754)](!1);var c=r[t(817)](function(n){var e=t;return P[e(2426)](n[e(1846)],P[e(2748)])||P[e(2426)](n[e(1846)],P[e(1508)])}),a=r[t(817)](function(n){return n[t(1962)]});if(c[t(2557)])if(o[t(2557)])for(var s=y[t(1280)][t(1586)]("|"),u=0;;){switch(s[u++]){case"0":var f=this[t(2280)](H)[t(2058)];continue;case"1":var l=o[t(1966)](function(n){return n[t(358)]});continue;case"2":v&&!v[t(358)]?(this[t(303)+t(1737)]({voice:o[t(1484)](v),voice_name:v[t(426)]}),this[t(1441)](v[t(1580)])):m&&!m[t(358)]?(this[t(303)+t(1737)]({voice:o[t(1484)](m),voice_name:m[t(426)]}),this[t(1441)](m[t(1580)])):(l&&this[t(303)+t(1737)]({voice:o[t(1484)](l),voice_name:l[t(426)]}),this[t(727)](c));continue;case"3":var m=o[t(1966)](function(n){var e=t;return P[e(3114)](n[e(426)],d)});continue;case"4":var v=o[t(1966)](function(n){var e=t;return P[e(3114)](n[e(1580)],f)});continue;case"5":var d=this[t(2280)](H)[t(1709)];continue;case"6":F[t(879)]=o[t(1739)](function(n){var e=t;return{title:n[e(426)],url:n[e(1580)]}});continue}break}else this[t(303)+t(1737)]({voice:0,voice_url:"",voice_name:""}),this[t(727)](c);else if(r[t(2557)])if(a[t(2557)])this[t(1376)](a),this[t(1108)][t(754)](!1);else for(var h=y[t(1697)][t(1586)]("|"),p=0;;){switch(h[p++]){case"0":this[t(1441)](b[t(1580)]);continue;case"1":b=b||F[t(933)][0];continue;case"2":var b=F[t(933)][g];continue;case"3":var g=this[t(2280)](H)[t(933)];continue;case"4":F[t(933)]=r[t(1739)](function(n){var e=t;return{title:n[e(426)],url:n[e(1580)]}});continue}break}else this[t(841)+t(2082)](w)}}catch(n){this[t(841)+t(2082)](n)}continue;case"1":var w=Prisma[t(2510)][t(708)](n,{});continue;case"2":Prisma[t(2510)][t(2628)](n)&&n[t(1459)]&&(w=n);continue;case"3":var P={rOBJU:function(n,e){return y[t(2563)](n,e)},dhUgS:y[t(3134)],EoFcT:y[t(3349)],ncstN:function(n,e){return y[t(1383)](n,e)}};continue;case"4":if(w[t(1459)])return this[t(1459)](w);continue}break}},this[x(1376)]=function(n){for(var f=x,e=y[f(816)][f(1586)]("|"),t=0;;){switch(e[t++]){case"0":n[f(1920)](function(e){for(var n,t=f,i=g[t(1250)][t(1586)]("|"),r=0;;){switch(i[r++]){case"0":e[t(1757)]=e[t(1757)]||"";continue;case"1":e[t(691)]=c[t(1862)](g[t(2306)]);continue;case"2":e[t(691)]="";continue;case"3":var o=e[t(2054)]||e[t(426)];continue;case"4":e[t(2054)]=e[t(426)];continue;case"5":e[t(680)]&&c[t(295)](e[t(680)]);continue;case"6":N[t(2221)](u);continue;case"7":var c=[];continue;case"8":var a=g[t(2092)](e[t(1830)]||e[t(2425)]||I[t(1343)][t(2238)+"te"]||I[t(1343)][t(845)+t(1823)]||"","")[t(2276)](0,4);continue;case"9":var s={pvues:function(n,e){return g[t(1819)](n,e)}};continue;case"10":u.on(g[t(2616)],function(){var n=t;l[n(300)](),l[n(1441)](e[n(1580)])}).on(g[t(1302)],function(n){var e=t;A=n[e(1908)],N[e(1115)](s[e(1629)]($,n[e(1908)]),!0)});continue;case"11":var u=Prisma[t(1624)][t(1562)](g[t(1750)],e);continue;case"12":e[t(769)]&&(n=g[t(1514)]($,g[t(2960)]),u[t(1966)](g[t(266)])[t(621)]()[t(2221)](n),g[t(3300)](e[t(769)],void 0)&&(g[t(1293)](e[t(769)][t(2391)](0),"/")&&(e[t(769)]=g[t(2874)](B[t(2778)],e[t(769)][t(1166)](1))),g[t(256)](e[t(769)][t(1484)](g[t(569)]),-1))&&(e[t(769)]=g[t(788)](C,e[t(769)])),Prisma[t(2514)][t(2456)](n,e[t(769)]));continue;case"13":a&&c[t(295)](a);continue;case"14":e[t(2054)]=o;continue}break}});continue;case"1":this[f(817)]({season:F[f(933)][f(1739)](function(n){return n[f(2054)]}),voice:F[f(879)][f(1739)](function(n){return n[f(2054)]})},this[f(2280)]());continue;case"2":Prisma[f(283)][f(973)](y[f(2461)]);continue;case"3":N[f(3344)]();continue;case"4":var l=this;continue}break}},this[x(2280)]=function(n){var e=x,n=Prisma[e(449)][e(1421)](g[e(1958)](g[e(2541)],g[e(882)](n,H)),3e3,{})[I[e(1343)].id]||{};return Prisma[e(2510)][e(3194)](n,{season:0,voice:0,voice_name:"",voice_id:0,episodes_view:{},movie_view:""}),n},this[x(871)]=function(n,e){var t=x,i=Prisma[t(449)][t(1421)](g[t(1958)](g[t(2541)],g[t(2536)](e,H)),3e3,{});i[I[t(1343)].id]=n,Prisma[t(449)][t(3034)](g[t(2874)](g[t(2541)],g[t(509)](e,H)),i),this[t(1123)+t(1017)](g[t(584)](e,H))},this[x(303)+x(1737)]=function(n,e){var t=x,i=this[t(2280)](e);Prisma[t(2510)][t(3194)](i,n,!0),this[t(871)](i,e)},this[x(2612)+"s"]=function(){var t=x;J[t(1920)](function(n){var e=t;n[e(2149)]=function(){},n[e(1738)]=function(){},n[e(3221)]=""}),J=[]},this[x(300)]=function(){for(var n=x,e=g[n(2640)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":N[n(300)]();continue;case"1":A=!1;continue;case"2":N[n(3344)]();continue;case"3":b[n(3344)]();continue;case"4":g[n(1151)](clearInterval,m);continue;case"5":N[n(573)]()[n(2221)](Prisma[n(1624)][n(1562)](g[n(2103)]));continue;case"6":this[n(2612)+"s"]();continue;case"7":N[n(578)]()[n(1966)](g[n(823)])[n(1761)]();continue}break}},this[x(2614)]=function(n){var e=x;n?this[e(1108)][e(754)](!0):(this[e(1108)][e(754)](!1),this[e(1108)][e(620)]())},this[x(817)]=function(l,n){for(var m=x,e=g[m(607)][m(1586)]("|"),t=0;;){switch(e[t++]){case"0":l[m(2966)]=k[m(1739)](function(n){var e=m;return S[n][e(2164)]});continue;case"1":w[m(3034)](g[m(3139)],v);continue;case"2":g[m(415)](i,g[m(1235)],Prisma[m(770)][m(3074)](g[m(2120)]));continue;case"3":var v=[];continue;case"4":l[m(933)]&&l[m(933)][m(2557)]&&g[m(2779)](i,g[m(3095)],Prisma[m(770)][m(3074)](g[m(3029)]));continue;case"5":var d={llrIv:g[m(376)],nKAEV:function(n,e){return g[m(595)](n,e)},fGzkx:function(n,e){return g[m(2048)](n,e)},ZbZFE:g[m(1235)],lWmFL:function(n,e){return g[m(1909)](n,e)},sbmDm:function(n,e){return g[m(2102)](n,e)}};continue;case"6":this[m(871)](n);continue;case"7":this[m(1079)](l);continue;case"8":v[m(295)]({title:Prisma[m(770)][m(3074)](g[m(2822)]),reset:!0});continue;case"9":var h=this;continue;case"10":w[m(3034)](g[m(2060)],k[m(1739)](function(n){var e=m;return{title:S[n][e(2164)],source:n,selected:d[e(2982)](n,H),ghost:!S[n][e(2698)]}}));continue;case"11":var i=function(i,n){for(var r=m,e=d[r(2817)][r(1586)]("|"),t=0;;){switch(e[t++]){case"0":var o={kPafv:function(n,e){return d[r(3276)](n,e)},xOoPs:function(n,e){return d[r(1333)](n,e)},ANHdH:d[r(2040)]};continue;case"1":u[r(1920)](function(n,e){var t=r;s[t(295)]({title:n,selected:o[t(1001)](a,e),index:e,source:o[t(861)](i,o[t(1828)])?k[e]:void 0})});continue;case"2":v[r(295)]({title:n,subtitle:f,items:s,stype:i});continue;case"3":var c=h[r(2280)]();continue;case"4":var a=c[i];continue;case"5":var s=[];continue;case"6":f=d[r(3120)](i,d[r(2040)])?S[H][r(2164)]:u[a];continue;case"7":var u=l[i];continue;case"8":var f="";continue}break}};continue;case"12":l[m(879)]&&l[m(879)][m(2557)]&&g[m(459)](i,g[m(270)],Prisma[m(770)][m(3074)](g[m(1150)]));continue}break}},this[x(1079)]=function(n){var e,t=x,i=this[t(2280)](),r=[];for(e in i)n[e]&&n[e][t(2557)]&&(g[t(1465)](e,g[t(270)])?r[t(295)](g[t(3217)](g[t(547)](c[e],": "),n[e][i[e]])):g[t(3300)](e,g[t(1235)])&&n[t(933)]&&g[t(1012)](n[t(933)][t(2557)],1)&&r[t(295)](g[t(2782)](g[t(385)](c[t(933)],": "),n[e][i[e]])));w[t(864)](g[t(3139)],r),w[t(864)](g[t(2060)],[S[H][t(2164)]])},this[x(2609)+"s"]=function(n,t){var i=x,r=[];if(g[i(1996)]([g[i(878)],g[i(1390)]][i(1484)](I[i(1343)][i(2966)]||g[i(1390)]),-1))return g[i(3320)](t,r);g[i(700)](typeof I[i(1343)].id,g[i(2177)])&&I[i(1343)][i(2164)]?(n=g[i(2092)](g[i(1583)](g[i(964)](g[i(2580)](g[i(547)](g[i(3369)](g[i(3212)](g[i(3091)],I[i(1343)].id),g[i(2446)]),n),g[i(3339)]),Prisma[i(1476)][i(1413)]()),g[i(1526)]),Prisma[i(449)][i(1562)](g[i(692)],"ru")),n=Prisma[i(1476)][i(2409)](n),b[i(552)](g[i(1093)](1e3,10)),b[g[i(751)]](n,function(n){var e=i;r=n[e(742)]||[],g[e(2796)](t,r)},function(n,e){g[i(2796)](t,r)})):g[i(2062)](t,r)},this[x(3070)]=function(n){var e=x,t=Prisma[e(2514)][e(795)](I[e(1343)][e(3150)+e(2969)]?I[e(1343)][e(3305)+e(3199)]:I[e(1343)][e(696)+e(2222)]),i=Prisma[e(449)][e(1421)](y[e(2427)],5e3,{});if(!n)return i[t];i[t]||(i[t]={}),Prisma[e(2510)][e(3194)](i[t],n,!0),Prisma[e(449)][e(3034)](y[e(2427)],i),this[e(1060)+e(2500)]()},this[x(1060)+x(2500)]=function(){var t=x,n=this[t(3070)](),i=N[t(573)]()[t(1966)](y[t(2707)])[t(621)]();if(n)for(var e=y[t(3038)][t(1586)]("|"),r=0;;){switch(e[r++]){case"0":o[t(1920)](function(n){var e=t;i[e(2221)](g[e(964)](g[e(2874)](g[e(1351)],n),g[e(1176)]))});continue;case"1":n[t(1709)]&&o[t(295)](n[t(1709)]);continue;case"2":n[t(2995)]&&o[t(295)](y[t(3180)](y[t(3076)](Prisma[t(770)][t(3074)](y[t(1022)])," "),n[t(2995)]));continue;case"3":n[t(933)]&&o[t(295)](y[t(3180)](y[t(1449)](Prisma[t(770)][t(3074)](y[t(1256)])," "),n[t(933)]));continue;case"4":var o=[];continue;case"5":n[t(623)+t(3199)]&&o[t(295)](n[t(623)+t(3199)]);continue}break}else i[t(2221)](y[t(2849)](y[t(3180)](y[t(1538)],Prisma[t(770)][t(3074)](y[t(618)])),y[t(3178)]))},this[x(2767)]=function(K){for(var t=x,n=y[t(786)][t(1586)]("|"),e=0;;){switch(n[e++]){case"0":this[t(2609)+"s"](K[0][t(933)],function(P){for(var x=t,n=h[x(1404)][x(1586)]("|"),e=0;;){switch(n[e++]){case"0":T&&h[x(2180)](P[x(2557)],K[x(2557)])&&!L[x(1376)]&&P[x(2276)](K[x(2557)])[x(1920)](function(e){for(var t=x,n=h[t(989)][t(1586)]("|"),i=0;;){switch(n[i++]){case"0":var r=[];continue;case"1":var o=K[0]?K[0][t(933)]:1;continue;case"2":e[t(1786)]?(u[t(2149)]=function(){var n=t;u[n(3221)]=l[n(2478)]},u[t(1738)]=function(){var n=t;m[n(1260)](l[n(375)]),a[n(1761)](),m[n(2221)](l[n(2246)](l[n(2246)](l[n(320)],l[n(2246)]("0",e[n(1033)+n(681)])[n(2276)](-2)),l[n(2601)]))},u[t(3221)]=Prisma[t(1476)][t(2819)](h[t(1935)](h[t(430)],e[t(1786)])),J[t(295)](u)):(a[t(1761)](),m[t(2221)](h[t(2419)](h[t(2419)](h[t(491)],h[t(2419)]("0",e[t(1033)+t(681)])[t(2276)](-2)),h[t(3037)])));continue;case"3":var c=new Date(h[t(2419)](e[t(2132)],"")[t(1626)](/-/g,"/"));continue;case"4":var a=v[t(1966)](h[t(2546)]);continue;case"5":var s=Math[t(2578)](h[t(1507)](h[t(2383)](c[t(304)](),f),h[t(2269)](h[t(2269)](h[t(2269)](24,60),60),1e3)));continue;case"6":v.on(h[t(3167)],function(n){var e=t;A=n[e(1908)],N[e(1115)](k[e(1029)]($,n[e(1908)]),!0)});continue;case"7":e[t(1622)+"ge"]&&r[t(295)](Prisma[t(1624)][t(1562)](h[t(1668)],{rate:h[t(1950)](parseFloat,h[t(1935)](e[t(1622)+"ge"],""))[t(2781)](1)},!0));continue;case"8":var u=v[t(1966)](h[t(1204)])[0];continue;case"9":e[t(2132)]&&r[t(295)](Prisma[t(2514)][t(1458)](e[t(2132)])[t(3299)]);continue;case"10":var f=Date[t(348)]();continue;case"11":var l={NZlxv:h[t(422)],KWBAH:h[t(1803)],wfwSq:function(n,e){return h[t(3228)](n,e)},bBtoG:h[t(491)],HORLJ:h[t(3037)]};continue;case"12":var m=v[t(1966)](h[t(2524)]);continue;case"13":N[t(2221)](v);continue;case"14":v[t(2278)](h[t(610)],h[t(656)]);continue;case"15":v[t(1966)](h[t(3301)])[t(2221)](Prisma[t(2064)][t(578)](Prisma[t(2064)][t(1199)](Prisma[t(2514)][t(795)]([o,e[t(1033)+t(681)],I[t(1343)][t(696)+t(2222)]][t(1862)]("")))));continue;case"16":var v=Prisma[t(1624)][t(1562)](h[t(2792)],{time:Prisma[t(2514)][t(1320)+t(1521)](h[t(2269)]((e||I[t(1343)])[t(2548)],60),!0),info:r[t(2557)]?r[t(1739)](function(n){var e=t;return k[e(1924)](k[e(1924)](k[e(1311)],n),k[e(1288)])})[t(1862)](h[t(565)]):"",title:e[t(2164)],quality:h[t(3312)](s,0)?d:""});continue;case"17":var d=h[t(2429)](h[t(2889)](Prisma[t(770)][t(3074)](h[t(645)]),": "),s);continue}break}});continue;case"1":Prisma[x(283)][x(973)](h[x(2282)]);continue;case"2":K[x(1920)](function(r,e){for(var o=x,n=k[o(1245)][o(1586)]("|"),t=0;;){switch(n[t++]){case"0":r[o(2675)]=function(){var n=o;_=Prisma[n(449)][n(1421)](k[n(1873)],5e3,[]),k[n(1825)](_[n(1484)](l),-1)&&(Prisma[n(2510)][n(1761)](_,l),Prisma[n(449)][n(3034)](k[n(1873)],_),Prisma[n(449)][n(1761)](k[n(1873)],l),f[n(1966)](k[n(1184)])[n(1761)]())};continue;case"1":f.on(k[o(2036)],function(){var n=o;I[n(1343)].id&&Prisma[n(3295)][n(2956)](i[n(3379)],I[n(1343)],100),L[n(1672)]&&L[n(1672)](r,f,p)}).on(k[o(3346)],function(n){var e=o;A=n[e(1908)],L[e(2140)]&&L[e(2140)](r,f,p),N[e(1115)](i[e(1267)]($,n[e(1908)]),!0)});continue;case"2":Prisma[o(2064)][o(680)]&&f[o(1966)](k[o(2643)])[o(3184)](Prisma[o(2064)][o(680)](r[o(1929)]," "));continue;case"3":L[o(1285)]&&L[o(1285)](r,f,p);continue;case"4":r[o(426)]&&!g&&(r[o(2054)]=r[o(426)]);continue;case"5":c[o(2557)]&&(r[o(691)]=c[o(1739)](function(n){var e=o;return k[e(3358)](k[e(3358)](k[e(1311)],n),k[e(1288)])})[o(1862)](k[o(3031)]));continue;case"6":var i={rhoLH:k[o(273)],LCeIY:k[o(2603)],IUhSP:function(n,e){return k[o(497)](n,e)},SZKRu:function(n,e){return k[o(497)](n,e)},FVwXd:k[o(1977)],rOhuk:function(n,e){return k[o(1907)](n,e)},SefTT:k[o(970)],PhEHC:k[o(2396)],zfohX:function(n,e){return k[o(1029)](n,e)}};continue;case"7":var c=[];continue;case"8":g?(r[o(2054)]=g[o(2164)],k[o(2571)](r[o(691)][o(2557)],30)&&g[o(1622)+"ge"]&&c[o(295)](Prisma[o(1624)][o(1562)](k[o(877)],{rate:k[o(1019)](parseFloat,k[o(497)](g[o(1622)+"ge"],""))[o(2781)](1)},!0)),g[o(2132)]&&B&&c[o(295)](Prisma[o(2514)][o(1458)](g[o(2132)])[o(3299)])):I[o(1343)][o(2238)+"te"]&&B&&c[o(295)](Prisma[o(2514)][o(1458)](I[o(1343)][o(2238)+"te"])[o(3299)]);continue;case"9":r[o(933)]&&(r[o(2587)+o(379)+"d"]=z[o(863)+o(3240)](K),r[o(2587)+o(879)]=r[o(1709)]);continue;case"10":!T&&I[o(1343)][o(1982)]&&k[o(2018)](r[o(691)][o(2557)],30)&&c[o(295)](I[o(1343)][o(1982)]);continue;case"11":Prisma[o(2510)][o(3194)](r,{voice_name:a,info:k[o(1780)](a[o(2557)],60)?k[o(1133)](a[o(2888)](0,60),k[o(3201)]):a,quality:"",time:Prisma[o(2514)][o(1320)+o(1521)](k[o(2863)]((g||I[o(1343)])[o(2548)],60),!0)});continue;case"12":r[o(1929)]=Prisma[o(2064)][o(1199)](w);continue;case"13":var a=C[o(1709)]||!!F[o(879)][0]&&F[o(879)][0][o(2054)]||r[o(1709)]||(T?k[o(312)]:r[o(426)])||k[o(312)];continue;case"14":z[o(2007)+"u"]({html:f,element:r,onFile:function(n){var e=o;L[e(2742)+e(848)]&&L[e(2742)+e(848)](r,f,p,n)},onClearAllMark:function(){var e=o;K[e(1920)](function(n){n[e(2675)]()})},onClearAllTime:function(){var e=o;K[e(1920)](function(n){n[e(2371)]()})}});continue;case"15":var s=C[o(3161)+o(2804)][r[o(933)]];continue;case"16":r[o(2902)]&&(r[o(1734)]=r[o(2902)],r[o(2902)]=Prisma[o(2510)][o(2107)](r[o(2902)])[0]);continue;case"17":var u=f[o(1966)](k[o(487)]);continue;case"18":T?k[o(1236)](typeof s,k[o(293)])&&k[o(2339)](s,h)&&(q=f):k[o(2890)](C[o(1646)],l)&&(q=f);continue;case"19":r[o(2371)]=function(){var n=o;r[n(1929)][n(2039)]=0,r[n(1929)][n(1757)]=0,r[n(1929)][n(898)]=0,Prisma[n(2064)][n(1115)](r[n(1929)])};continue;case"20":var f=Prisma[o(1624)][o(1562)](k[o(3004)],r);continue;case"21":N[o(2221)](f);continue;case"22":var l=Prisma[o(2514)][o(795)](r[o(933)]?[r[o(933)],k[o(774)](r[o(933)],10)?":":"",r[o(2995)],I[o(1343)][o(696)+o(2222)],r[o(1709)]][o(1862)](""):k[o(1907)](I[o(1343)][o(696)+o(2222)],r[o(1709)]));continue;case"23":if(k[o(268)](T,!g))b[o(2221)](k[o(885)](k[o(2206)](k[o(1977)],k[o(1924)]("0",r[o(2995)]||k[o(1627)](e,1))[o(2276)](-2)),k[o(970)])),u[o(1761)]();else if(!T&&k[o(2910)]([k[o(1617)],k[o(1283)]][o(1484)](I[o(1343)][o(2966)]||k[o(1283)]),-1))u[o(1761)]();else for(var m=k[o(3047)][o(1586)]("|"),v=0;;){switch(m[v++]){case"0":var d=f[o(1966)](k[o(3316)])[0];continue;case"1":d[o(2149)]=function(){var n=o;d[n(3221)]=i[n(500)]};continue;case"2":d[o(3221)]=Prisma[o(1476)][o(2819)](k[o(1907)](k[o(2597)],g?g[o(1786)]:I[o(1343)][o(3050)+o(2304)]));continue;case"3":J[o(295)](d);continue;case"4":d[o(1738)]=function(){var n=o;b[n(1260)](i[n(1547)]),u[n(1761)](),T&&b[n(2221)](i[n(1009)](i[n(2436)](i[n(2926)],i[n(2436)]("0",r[n(2995)]||i[n(2511)](e,1))[n(2276)](-2)),i[n(2072)]))};continue}break}continue;case"24":f[o(1966)](k[o(2643)])[o(2221)](Prisma[o(2064)][o(578)](r[o(1929)]));continue;case"25":k[o(3321)](_[o(1484)](l),-1)&&(y=f)[o(1966)](k[o(2303)])[o(2221)](k[o(1133)](k[o(2206)](k[o(363)],Prisma[o(1624)][o(1562)](k[o(1423)],{},!0)),k[o(970)]));continue;case"26":r[o(554)]=function(){for(var n=o,e=k[n(1014)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":T?C[n(3161)+n(2804)][r[n(933)]]=h:C[n(1646)]=l;continue;case"1":C=z[n(2280)]();continue;case"2":var i=C[n(1709)]||r[n(1709)]||r[n(2054)];continue;case"3":k[n(1780)](i[n(2557)],30)&&(i=k[n(1133)](i[n(2276)](0,30),k[n(3201)]));continue;case"4":k[n(2890)](_[n(1484)](l),-1)&&(_[n(295)](l),Prisma[n(449)][n(3034)](k[n(1873)],_),k[n(2890)](f[n(1966)](k[n(1184)])[n(2557)],0))&&f[n(1966)](k[n(2303)])[n(2221)](k[n(2206)](k[n(3233)](k[n(363)],Prisma[n(1624)][n(1562)](k[n(1423)],{},!0)),k[n(970)]));continue;case"5":z[n(3070)]({balanser:H,balanser_name:Prisma[n(2514)][n(2311)+n(1394)+"r"](S[H]?S[H][n(2164)][n(1586)](" ")[0]:H),voice_id:C[n(515)],voice_name:i,episode:r[n(2995)],season:r[n(933)]});continue;case"6":z[n(871)](C);continue;case"7":_=Prisma[n(449)][n(1421)](k[n(1873)],5e3,[]);continue}break}};continue;case"27":I[o(1520)]&&b[o(2231)]();continue;case"28":var h=r[o(2995)]||k[o(1924)](e,1);continue;case"29":var p={hash_timeline:w,hash_behold:l};continue;case"30":var b=f[o(1966)](k[o(2303)]);continue;case"31":var g=!(!T||!P[o(2557)]||L[o(1376)])&&P[o(1966)](function(n){var e=o;return k[e(1870)](n[e(1033)+e(681)],r[e(2995)])});continue;case"32":r[o(691)]&&c[o(295)](r[o(691)]);continue;case"33":var w=Prisma[o(2514)][o(795)](r[o(933)]?[r[o(933)],k[o(774)](r[o(933)],10)?":":"",r[o(2995)],I[o(1343)][o(696)+o(2222)]][o(1862)](""):I[o(1343)][o(696)+o(2222)]);continue}break}});continue;case"3":var k={dLeiD:function(n,e){return h[x(734)](n,e)},jPutx:function(n,e){return h[x(2679)](n,e)},PxiAg:h[x(712)],jxpWr:h[x(412)],XgNtg:h[x(837)],VXLXX:function(n,e){return h[x(2180)](n,e)},HVYam:function(n,e){return h[x(2429)](n,e)},dDpQg:h[x(2592)],DDVcM:function(n,e){return h[x(734)](n,e)},wJhCW:h[x(2252)],poxbT:h[x(1275)],lBGma:h[x(2524)],KnwKT:function(n,e){return h[x(2679)](n,e)},cBWCF:function(n,e){return h[x(2451)](n,e)},xrIGK:h[x(2509)],VqkGN:h[x(2026)],xnVGh:h[x(3037)],ipmmu:function(n,e){return h[x(2869)](n,e)},UuKuv:h[x(3382)],sBwLA:h[x(643)],aFKFQ:h[x(3167)],pRlrA:h[x(3301)],xWVjg:h[x(565)],uaWnk:h[x(422)],sywhF:h[x(1803)],EccZH:function(n,e){return h[x(856)](n,e)},VdVDX:h[x(491)],EfELm:function(n,e){return h[x(1935)](n,e)},hfHEi:h[x(919)],btAKl:function(n,e){return h[x(577)](n,e)},SttUw:function(n,e){return h[x(1088)](n,e)},VyaYD:h[x(1668)],qPyvj:function(n,e){return h[x(1950)](n,e)},nMKwG:function(n,e){return h[x(1088)](n,e)},TTIBr:function(n,e){return h[x(653)](n,e)},UOPIU:h[x(2069)],uJmfs:h[x(2546)],ONkkH:function(n,e){return h[x(2869)](n,e)},BUIDr:h[x(1144)],BozXi:function(n,e){return h[x(734)](n,e)},RloiG:h[x(2792)],rJWAp:function(n,e){return h[x(689)](n,e)},tXKbq:function(n,e){return h[x(1330)](n,e)},Njugd:function(n,e){return h[x(856)](n,e)},wHsut:function(n,e){return h[x(3228)](n,e)},QsMBe:function(n,e){return h[x(856)](n,e)},fmeFQ:function(n,e){return h[x(598)](n,e)},BdEOt:h[x(1278)],oDeET:h[x(3094)],oSudC:h[x(690)],IGSdb:h[x(1204)],Ynqbo:h[x(430)],rIYoE:function(n,e){return h[x(1585)](n,e)}};continue;case"4":var _=Prisma[x(449)][x(1421)](h[x(2252)],5e3,[]);continue;case"5":var y=!1;continue;case"6":var B=h[x(3312)](window[x(475)],480);continue;case"7":var C=z[x(2280)]();continue;case"8":var T=!!I[x(1343)][x(2164)];continue;case"9":q?A=q[0]:y&&(A=y[0]);continue;case"10":var q=!1;continue}break}});continue;case"1":var h={hWtTG:y[t(405)],woveG:function(n,e){return y[t(1449)](n,e)},FNruM:y[t(967)],guHJD:function(n,e){return y[t(3180)](n,e)},jUUEu:y[t(2224)],dKvCb:y[t(3045)],vnbHc:y[t(1552)],gfaHF:function(n,e){return y[t(1822)](n,e)},NbCCr:function(n,e){return y[t(1305)](n,e)},pKTbJ:function(n,e){return y[t(1238)](n,e)},cIEJe:y[t(2360)],MKgeb:y[t(2442)],ySZVM:function(n,e){return y[t(2935)](n,e)},UGCrC:y[t(1186)],ABmcI:y[t(1380)],qhddE:y[t(1643)],ReMGg:function(n,e){return y[t(3076)](n,e)},gxRUm:y[t(432)],giCXq:y[t(1214)],Shtag:y[t(953)],PLWHg:y[t(1662)],SlfEo:y[t(1523)],MVeNj:y[t(832)],TBYeN:function(n,e){return y[t(1925)](n,e)},ktmrL:function(n,e){return y[t(561)](n,e)},AcrVD:function(n,e){return y[t(1474)](n,e)},vYTJf:y[t(2617)],jfhqe:y[t(458)],WvLmE:function(n,e){return y[t(1925)](n,e)},dvOAz:y[t(2461)],YZece:function(n,e){return y[t(2552)](n,e)},kCgtZ:function(n,e){return y[t(3076)](n,e)},qmrrh:y[t(1538)],VYumU:y[t(3178)],TATHB:y[t(1806)],eVvww:y[t(3019)],YMeIT:y[t(695)],JHqve:y[t(627)],JfqKt:function(n,e){return y[t(3250)](n,e)},Csfjx:y[t(2136)],ofpWn:y[t(2857)],KsZLu:function(n,e){return y[t(344)](n,e)},bTZZy:y[t(2491)],VUOCY:y[t(2758)],DREel:function(n,e){return y[t(1994)](n,e)},FZrmf:y[t(836)],Fxpqn:function(n,e){return y[t(2041)](n,e)},tmMsl:function(n,e){return y[t(1598)](n,e)},imsnz:function(n,e){return y[t(1339)](n,e)},lTbil:y[t(1620)],BLcpN:y[t(906)],wgFJO:function(n,e){return y[t(2963)](n,e)},paccy:function(n,e){return y[t(3376)](n,e)},BsRPv:function(n,e){return y[t(1383)](n,e)},HbdGy:y[t(2886)],HCAXu:y[t(3112)],csWrA:y[t(1220)],RPCvO:function(n,e){return y[t(344)](n,e)}};continue;case"2":var L=y[t(3009)](arguments[t(2557)],1)&&y[t(1161)](arguments[1],void 0)?arguments[1]:{};continue;case"3":var z=this;continue;case"4":this[t(1060)+t(2500)]();continue;case"5":N[t(3344)]();continue;case"6":I[t(1520)]||N[t(2221)](Prisma[t(1624)][t(1562)](y[t(1072)],{}));continue;case"7":if(K[t(2557)])continue;return this[t(621)]()}break}},this[x(2007)+"u"]=function(l){var t=x,e={hUUWf:y[t(1053)],mYsMZ:y[t(2437)],OETAO:function(n,e){return y[t(1238)](n,e)},wAlRM:function(n,e){return y[t(1339)](n,e)}};l[t(1460)].on(y[t(828)],function(){var i=t,r={htCDr:g[i(1792)],nZDVD:g[i(833)],YHIiL:function(n,e){return g[i(2579)](n,e)},baSZv:g[i(1367)],FipEV:g[i(527)],dNReg:g[i(3188)],tcuJQ:g[i(1450)],JqXyb:g[i(1867)],NYxIT:g[i(3111)],RxVLP:g[i(2682)],qrfUb:g[i(2616)],sMEcX:g[i(2835)],CfSwe:g[i(1698)],rzvru:g[i(2600)],dNaqi:function(n,e){return g[i(1965)](n,e)},ADdzV:g[i(644)],unkhs:g[i(2559)],HaOLs:g[i(255)],yIJoL:g[i(2302)],dbiRX:g[i(2499)],Iydto:g[i(2848)],JaJSs:function(n,e){return g[i(2092)](n,e)},fzyra:g[i(3039)],VEJyO:g[i(1303)],gCWxx:g[i(663)],BExpd:g[i(1717)],Gpojp:g[i(3227)],cGiAG:g[i(664)],pEmKF:g[i(349)]};l[i(374)](function(a){for(var s=i,n=r[s(3260)][s(1586)]("|"),e=0;;){switch(n[e++]){case"0":Prisma[s(940)].is(r[s(852)])&&t[s(295)]({title:r[s(440)](Prisma[s(770)][s(3074)](r[s(1066)]),r[s(895)]),player:r[s(852)]});continue;case"1":Prisma[s(940)].is(r[s(1265)])&&t[s(295)]({title:r[s(440)](Prisma[s(770)][s(3074)](r[s(1066)]),r[s(1130)]),player:r[s(1265)]});continue;case"2":var u={iiqTl:r[s(329)],zeQiP:r[s(3154)],gJkxQ:r[s(1567)],kZcUX:r[s(850)],jgGMa:r[s(923)],LAlIU:r[s(1312)],pnAAw:r[s(716)]};continue;case"3":Prisma[s(671)][s(713)]()&&l[s(2786)]&&r[s(1062)](typeof l[s(2786)][s(933)],r[s(384)])&&l[s(2786)][s(2587)+s(879)]&&t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(2569)]),subscribe:!0});continue;case"4":var t=[];continue;case"5":t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(616)]),timeclearall:!0});continue;case"6":window[s(3017)+s(2335)+s(2983)]&&window[s(3017)+s(2335)+s(2983)][s(295)](t,a,l);continue;case"7":var f=Prisma[s(283)][s(257)]()[s(2164)];continue;case"8":t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(2513)]),mark:!0});continue;case"9":a&&t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(3063)]),copylink:!0});continue;case"10":t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(2121)]),separator:!0});continue;case"11":t[s(295)]({title:r[s(2711)](Prisma[s(770)][s(3074)](r[s(1066)]),r[s(1616)]),player:r[s(2729)]});continue;case"12":t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(3277)]),timeclear:!0});continue;case"13":t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(894)]),clearallmark:!0});continue;case"14":Prisma[s(489)][s(2698)]({title:Prisma[s(770)][s(3074)](r[s(2684)]),items:t,onBack:function(){var n=s;Prisma[n(283)][n(620)](f)},onSelect:function(n){for(var i=s,e=u[i(2176)][i(1586)]("|"),t=0;;){switch(e[t++]){case"0":n[i(2675)]&&l[i(2786)][i(2675)]();continue;case"1":n[i(333)]&&(Prisma[i(763)][i(1707)](n[i(333)]),l[i(1460)][i(1437)](u[i(1974)]));continue;case"2":if(n[i(2322)])if(a[i(2902)]){var r,o=[];for(r in a[i(2902)])o[i(295)]({title:r,file:a[i(2902)][r]});Prisma[i(489)][i(2698)]({title:Prisma[i(770)][i(3074)](u[i(3032)]),items:o,onBack:function(){var n=i;Prisma[n(283)][n(620)](f)},onSelect:function(n){var e=i,t={JllxD:c[e(2721)]};Prisma[e(2514)][e(2277)+e(2852)](n[e(1948)],function(){var n=e;Prisma[n(2464)][n(295)]({text:Prisma[n(770)][n(3074)](c[n(2938)])})},function(){var n=e;Prisma[n(2464)][n(295)]({text:Prisma[n(770)][n(3074)](t[n(1681)])})})}})}else Prisma[i(2514)][i(2277)+i(2852)](a[i(1948)],function(){var n=i;Prisma[n(2464)][n(295)]({text:Prisma[n(770)][n(3074)](u[n(1928)])})},function(){var n=i;Prisma[n(2464)][n(295)]({text:Prisma[n(770)][n(3074)](c[n(2721)])})});continue;case"3":n[i(554)]&&l[i(2786)][i(554)]();continue;case"4":n[i(297)+"ll"]&&l[i(2904)+i(1307)]();continue;case"5":Prisma[i(283)][i(620)](f);continue;case"6":var c={XYQlS:u[i(1928)],uByiD:u[i(2474)],SrPGc:u[i(2348)]};continue;case"7":n[i(1110)]&&Prisma[i(671)][i(1332)+i(3267)+"on"]({card:I[i(1343)],season:l[i(2786)][i(933)],episode:l[i(2786)][i(2587)+i(379)+"d"],voice:l[i(2786)][i(2587)+i(879)]},function(){var n=i;Prisma[n(868)][n(2698)](Prisma[n(770)][n(3074)](c[n(3213)]))},function(){var n=i;Prisma[n(868)][n(2698)](Prisma[n(770)][n(3074)](u[n(1128)]))});continue;case"8":window[i(3017)+i(2335)+i(2983)]&&window[i(3017)+i(2335)+i(2983)][i(738)](n,l);continue;case"9":n[i(2875)+"rk"]&&l[i(2904)+i(2896)]();continue;case"10":n[i(2371)]&&l[i(2786)][i(2371)]();continue}break}}});continue;case"15":t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(767)]),unmark:!0});continue;case"16":t[s(295)]({title:Prisma[s(770)][s(3074)](r[s(2100)]),separator:!0});continue}break}})}).on(y[t(2360)],function(){var n=t;Prisma[n(1695)+"er"]&&Prisma[n(1695)+"er"][n(2698)]({name:e[n(1439)],text:Prisma[n(770)][n(3074)](e[n(602)]),button:"ok",interval:e[n(599)](e[n(1915)](60,24),7)})})},this[x(621)]=function(){for(var n=x,e=g[n(332)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":i[n(1966)](g[n(2275)])[n(426)](Prisma[n(770)][n(3074)](g[n(728)]));continue;case"1":var i=Prisma[n(1624)][n(1562)](g[n(3345)],{});continue;case"2":N[n(3344)]();continue;case"3":i[n(1966)](g[n(1832)])[n(426)](Prisma[n(770)][n(3074)](g[n(888)]));continue;case"4":i[n(1966)](g[n(2719)])[n(1761)]();continue;case"5":N[n(2221)](i);continue;case"6":this[n(2614)](!1);continue}break}},this[x(1690)+x(2077)]=function(n){for(var e=x,t=y[e(391)][e(1586)]("|"),i=0;;){switch(t[i++]){case"0":r[e(1966)](y[e(1563)])[e(426)](Prisma[e(770)][e(3074)](y[e(935)]));continue;case"1":N[e(3344)]();continue;case"2":this[e(2614)](!1);continue;case"3":var r=Prisma[e(1624)][e(1562)](y[e(859)],{});continue;case"4":N[e(2221)](r);continue;case"5":r[e(1966)](y[e(2167)])[e(1761)]();continue;case"6":r[e(1966)](y[e(2933)])[e(426)](n&&n[e(538)]?n[e(808)]:Prisma[e(770)][e(3074)](y[e(771)])[e(1626)](y[e(2735)],H[H][e(2164)]));continue}break}},this[x(841)+x(2082)]=function(n){for(var c=x,e=y[c(815)][c(1586)]("|"),t=0;;){switch(e[t++]){case"0":this[c(300)]();continue;case"1":this[c(2614)](!1);continue;case"2":var a=n&&n[c(538)]?10:5;continue;case"3":f[c(1966)](y[c(1092)]).on(y[c(2758)],function(){s[c(3322)](clearInterval,m)});continue;case"4":var s={ydCkr:function(n,e){return y[c(2828)](n,e)},joXcy:function(n,e){return y[c(2133)](n,e)},NqlWC:y[c(1291)],cJrEd:y[c(2758)],MOtwr:y[c(2519)],HJmSc:function(n,e){return y[c(646)](n,e)},sfHGt:y[c(3266)],Zpdwn:function(n,e){return y[c(561)](n,e)}};continue;case"5":var u=this;continue;case"6":f[c(1966)](y[c(3375)]).on(y[c(2758)],function(){var n=c;s[n(1111)](clearInterval,m),w[n(578)]()[n(1966)](s[n(2283)])[n(1437)](s[n(468)])});continue;case"7":n&&n[c(538)]&&f[c(1966)](y[c(1563)])[c(1460)](n[c(808)]);continue;case"8":var f=Prisma[c(1624)][c(1562)](y[c(859)],{balanser:H});continue;case"9":N[c(3344)]();continue;case"10":N[c(2221)](f);continue;case"11":m=y[c(1027)](setInterval,function(){var n=c;if(a--,f[n(1966)](s[n(2521)])[n(426)](a),s[n(1391)](a,0))for(var e=s[n(1641)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":H=r;continue;case"1":r=r||o[0];continue;case"2":s[n(1111)](clearInterval,m);continue;case"3":var i=o[n(1484)](H);continue;case"4":s[n(1391)](Prisma[n(443)][n(358)]()[n(1108)],u[n(1108)])&&u[n(250)+n(1017)](H);continue;case"5":var r=o[s[n(1422)](i,1)];continue;case"6":var o=Prisma[n(2510)][n(2107)](S);continue}break}},1e3);continue}break}},this[x(863)+x(3240)]=function(n){var t=x,i={CDxxX:function(n,e){return y[_0x164b(1353)](n,e)},PXnSc:y[t(906)],zDQTk:function(n,e){return y[t(2163)](n,e)}},r=0;return n[t(1920)](function(n){var e=t;i[e(726)](typeof n[e(2995)],i[e(2800)])&&(r=Math[e(1978)](r,i[e(2553)](parseInt,n[e(2995)])))}),r},this[x(280)]=function(){for(var t=x,n=g[t(1239)][t(1586)]("|"),e=0;;){switch(n[e++]){case"0":Prisma[t(283)][t(2956)](g[t(921)],{toggle:function(){var n=t;Prisma[n(283)][n(1705)+n(957)](N[n(578)](),o[n(578)]()),Prisma[n(283)][n(1705)+n(2320)](i[n(1281)](A,!1),N[n(578)]())},gone:function(){g[t(1294)](clearTimeout,m)},up:function(){var n=t;Navigator[n(2301)]("up")?Navigator[n(371)]("up"):Prisma[n(283)][n(620)](g[n(2106)])},down:function(){var n=t;Navigator[n(371)](i[n(2022)])},right:function(){var n=t;Navigator[n(2301)](g[n(3334)])?Navigator[n(371)](g[n(3334)]):w[n(2698)](Prisma[n(770)][n(3074)](g[n(899)]),g[n(3139)])},left:function(){var n=t;Navigator[n(2301)](i[n(2392)])?Navigator[n(371)](i[n(2392)]):Prisma[n(283)][n(620)](i[n(2681)])},back:this[t(522)][t(872)](this)});continue;case"1":Prisma[t(283)][t(620)](g[t(921)]);continue;case"2":r||(r=!0,this[t(978)]());continue;case"3":Prisma[t(1406)][t(1226)+"y"](Prisma[t(2514)][t(1086)+t(596)+"r"](I[t(1343)]));continue;case"4":var i={KpjoC:function(n,e){return g[t(686)](n,e)},bhkKt:g[t(3175)],HhfJc:g[t(2590)],TRlfO:g[t(336)]};continue;case"5":if(g[t(1965)](Prisma[t(443)][t(358)]()[t(1108)],this[t(1108)]))return;continue}break}},this[x(578)]=function(){return o[x(578)]()},this[x(522)]=function(){var n=x;Prisma[n(443)][n(1755)]()},this[x(558)]=function(){},this[x(1971)]=function(){},this[x(2720)+"p"]=function(){var n,i,t,l=x,m={FbggD:g[l(3388)],blSrb:function(n,e){return g[l(486)](n,e)},wHUUr:function(n,e){return g[l(964)](n,e)},UxAxO:function(n,e){return g[l(2555)](n,e)},ezoIU:function(n,e){return g[l(2087)](n,e)},UJpnf:function(n,e){return g[l(1217)](n,e)},rtcOP:function(n,e){return g[l(401)](n,e)},JLkFn:function(n,e){return g[l(624)](n,e)},jDUse:function(n,e){return g[l(2562)](n,e)},ynkTu:function(n,e){return g[l(2562)](n,e)},IEIqC:function(n,e){return g[l(2092)](n,e)},neVjI:function(n,e){return g[l(2087)](n,e)},vkGKV:function(n,e){return g[l(2745)](n,e)},NBDaA:function(n,e){return g[l(364)](n,e)},qYzZe:function(n,e){return g[l(2562)](n,e)},LkRnZ:function(n,e){return g[l(1217)](n,e)},JkNKm:g[l(2472)],mRLJW:function(n,e){return g[l(1514)](n,e)},MVPqC:g[l(1561)],XwHBd:function(n,e,t){return g[l(1782)](n,e,t)},dpgBY:g[l(2959)],meMVJ:function(n,e){return g[l(2658)](n,e)}},v=g[l(849)]($,Prisma[l(1624)][l(1562)](g[l(2959)],{},!0)),d=w[l(578)]()[l(1966)](g[l(1501)]);function r(){for(var n=l,e=m[n(2407)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":m[n(822)](m[n(1112)](m[n(2037)](i[n(979)],f),a),c)?u[n(2525)]=m[n(2788)](i[n(979)],20):u[n(2525)]=m[n(685)](m[n(685)](i[n(2525)],f),10);continue;case"1":var i=d[0][n(535)+n(1451)+"t"]();continue;case"2":return u;case"3":m[n(285)](u[n(809)],a)?u[n(809)]=a:m[n(3197)](m[n(2037)](u[n(809)],r),m[n(2281)](o,a))&&(u[n(809)]=m[n(2281)](m[n(1921)](o,r),a));continue;case"4":var r=s[n(2448)]||220;continue;case"5":var o=window[n(475)];continue;case"6":var c=window[n(580)+"t"];continue;case"7":var a=20;continue;case"8":u[n(809)]=m[n(1426)](m[n(1399)](m[n(1426)](i[n(809)],m[n(1221)](i[n(2448)],2)),m[n(1221)](r,2)),30);continue;case"9":m[n(359)](u[n(2525)],a)?u[n(2525)]=a:m[n(3197)](m[n(1426)](u[n(2525)],f),m[n(1921)](c,a))&&(u[n(2525)]=m[n(2638)](m[n(2760)](c,f),a));continue;case"10":var s=v[0][n(535)+n(1451)+"t"]();continue;case"11":var u={top:0,left:0};continue;case"12":var f=s[n(2572)]||120;continue}break}}d[l(2557)]&&d.is(g[l(2351)])&&(n=d[0][l(535)+l(1451)+"t"](),g[l(3055)](n[l(2448)],0)||g[l(2048)](n[l(2572)],0)||(g[l(1819)]($,g[l(496)])[l(2221)](v),n=g[l(2168)](r),v[l(2278)]({top:g[l(547)](n[l(2525)],"px"),left:g[l(981)](n[l(809)],"px")}),g[l(740)](setTimeout,function(){var n=l;v[n(1260)](m[n(1263)])},100),i=function(){var n=l,e=g[n(2270)](r);v[n(2278)]({top:g[n(1731)](e[n(2525)],"px"),left:g[n(488)](e[n(809)],"px")})},g[l(788)]($,window).on(g[l(1561)],i),t=g[l(1197)](setTimeout,function(){var e=l,t={BgUQB:function(n,e){return m[_0x164b(2148)](n,e)},hDXQt:m[e(2174)]};v[e(369)+"s"](m[e(1263)]),m[e(1565)](setTimeout,function(){var n=e;t[n(2732)]($,window)[n(2192)](t[n(3162)],i),v[n(1761)]()},300),Prisma[e(449)][e(3034)](m[e(2893)],!0)},5e3),d[l(2544)](g[l(2616)],function(){var e=l;g[e(1294)](clearTimeout,t),v[e(369)+"s"](g[e(2472)]),g[e(2779)](setTimeout,function(){var n=e;m[n(471)]($,window)[n(2192)](m[n(2174)],i),v[n(1761)]()},300),Prisma[e(449)][e(3034)](g[e(2959)],!0)})))},this[x(637)]=function(){var n=x;Prisma[n(449)][n(1761)](y[n(3172)])},this[x(3144)+"ip"]=function(){this[x(2720)+"p"]()},this[x(3293)]=function(){for(var n=x,e=y[n(1432)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":b[n(3344)]();continue;case"1":y[n(2935)]($,y[n(3129)])[n(1761)]();continue;case"2":N[n(3293)]();continue;case"3":window[n(594)+"p"]&&delete window[n(594)+"p"];continue;case"4":y[n(629)](clearInterval,m);continue;case"5":y[n(772)](clearTimeout,p);continue;case"6":window[n(499)+"ip"]&&delete window[n(499)+"ip"];continue;case"7":this[n(2612)+"s"]();continue;case"8":o[n(3293)]();continue}break}},y[x(1882)](typeof window,y[x(906)])&&(window[x(594)+"p"]=this[x(3144)+"ip"][x(872)](this),window[x(499)+"ip"]=this[x(637)][x(872)](this))}function o(n,f){var i=d,l={ptgfE:function(n,e){return y[_0x164b(553)](n,e)},sQexQ:y[i(2979)],yUDQc:function(n,e){return y[i(3237)](n,e)},bVhOH:y[i(1902)],mJdGt:function(n,e){return y[i(1354)](n,e)},SAiSf:function(n,e){return y[i(2403)](n,e)},CNPFe:function(n,e){return y[i(1449)](n,e)},PMjTJ:y[i(2795)],InKoS:y[i(1175)],ALzdL:function(n,e){return y[i(483)](n,e)},xwJod:y[i(1277)],tJPfh:y[i(1995)],mQWAA:function(n,e,t){return y[i(961)](n,e,t)},JBIaF:function(n,e){return y[i(1973)](n,e)},NAVTG:function(n,e){return y[i(2915)](n,e)},UiuSm:function(n,e){return y[i(2670)](n,e)},JiJtU:function(n){return y[i(1645)](n)}},m=new Prisma[i(2527)],n={title:n,search:function(r,s){var o=i,u={Ubhxo:l[o(2294)],tylnT:function(n,e){return l[o(2143)](n,e)},xqLMx:function(n,e){return l[o(1480)](n,e)},qqcbM:function(n,e){return l[o(1007)](n,e)},QHOMv:l[o(3303)],ccbcD:function(n,e){return l[o(2669)](n,e)},AIzlq:l[o(626)],xRaZF:function(n,e){return l[o(1613)](n,e)},WpVvT:function(n,e){return l[o(1007)](n,e)},EpuAs:function(n,e){return l[o(1007)](n,e)},ABNWg:l[o(463)],OKqQq:l[o(3035)],YWmmC:function(n,e,t){return l[o(1706)](n,e,t)},kukiE:function(n,e){return l[o(2669)](n,e)},HmUvV:function(n,e){return l[o(1613)](n,e)}};function c(n){var i,r=o,a={jjtms:function(n,e){return l[_0x164b(3008)](n,e)},gGXcF:l[r(389)],HbNtU:function(n,e){return l[r(2669)](n,e)}},e=Prisma[r(2510)][r(2107)](n);e[r(2557)]?((i=new Prisma[r(2722)](e[r(2557)]))[r(360)]=function(t){var i=r,o={hCRuc:u[i(640)],MRbZj:function(n,e){return u[i(2689)](n,e)},snTyR:function(n,e){return u[i(1477)](n,e)},BDWpc:function(n,e){return u[i(818)](n,e)},VDSsX:u[i(2799)],TBlmt:function(n,e){return u[i(1485)](n,e)},GOiMj:u[i(1660)]},c=[];e[i(1920)](function(n){var r=i,e=t[n];e&&e[r(3205)]&&a[r(1945)](e[r(1266)],a[r(1696)])&&(e=e[r(3205)][r(1739)](function(n){for(var e=r,t=o[e(1467)][e(1586)]("|"),i=0;;){switch(t[i++]){case"0":return n;case"1":n[e(1520)]=f;continue;case"2":n[e(2054)]=Prisma[e(2514)][e(2311)+e(1394)+"r"](n[e(2054)]);continue;case"3":o[e(3084)](n[e(769)],void 0)&&(o[e(492)](n[e(769)][e(2391)](0),"/")&&(n[e(769)]=o[e(3106)](Defined[e(2778)],n[e(769)][e(1166)](1))),o[e(3084)](n[e(769)][e(1484)](o[e(2661)]),-1))&&(n[e(769)]=o[e(657)](account,n[e(769)]));continue;case"4":n[e(2238)+"te"]=n[e(2425)]||o[e(2776)];continue}break}}),c[r(295)]({title:n,results:e}))}),u[i(2864)](s,c)},e[r(1920)](function(e){var t=r;m[t(2312)](a[t(748)](account,n[e]),function(n){i[t(2221)](e,n)},function(){i[t(1607)]()})})):l[r(2669)](s,[])}m[o(2312)](l[o(2669)](account,l[o(1956)](l[o(2044)](l[o(2044)](l[o(1679)](Defined[o(2778)],l[o(463)]),f),l[o(3035)]),r[o(873)])),function(n){var t=o,i={xWrOq:function(n,e){return u[_0x164b(2864)](n,e)},onCHK:function(n,e){return u[_0x164b(2864)](n,e)},HkAlQ:function(n,e){return u[_0x164b(818)](n,e)},bsmSR:function(n,e){return u[_0x164b(1942)](n,e)},jSSBI:function(n,e){return u[_0x164b(2961)](n,e)},vVXXU:u[t(2155)],VQRpY:u[t(1113)]};n[t(1459)]?u[t(1132)](rchRun,n,function(){var e=t,n={SgALl:function(n,e){return i[_0x164b(1146)](n,e)}};m[e(2312)](i[e(2361)](account,i[e(587)](i[e(2009)](i[e(587)](i[e(2389)](Defined[e(2778)],i[e(1373)]),f),i[e(931)]),r[e(873)])),function(n){i[e(1146)](c,n)},function(){n[e(3121)](s,[])})}):u[t(1593)](c,n)},function(){u[o(1420)](s,[])})},onCancel:function(){m[i(3344)]()},params:{lazy:!0,align_left:!0,card_events:{onMenu:function(){}}},onMore:function(n,e){l[i(634)](e)},onSelect:function(n,e){var t=i;y[t(1645)](e),Prisma[t(443)][t(295)]({url:n[t(2786)][t(1580)],title:y[t(2341)](y[t(2777)],n[t(2786)][t(2054)]),component:y[t(1834)],movie:n[t(2786)],page:1,search:n[t(2786)][t(2054)],clarification:!0,balanser:n[t(2786)][t(1520)],noinfo:!0})}};Prisma[i(951)][i(1637)](n)}window[d(2551)+d(2449)]||y[d(1983)](function(){var s=d,i={TqjOD:y[s(2589)],ijaJm:y[s(1143)],IiwXo:y[s(2147)],ouTrh:y[s(1834)],iSEPU:function(n){return y[s(928)](n)},zQKnc:y[s(2202)],ZJTCZ:y[s(1378)],qVrJk:function(n,e){return y[s(2041)](n,e)},hJueh:y[s(2758)],dSAPU:y[s(2512)],CZKhs:y[s(2783)],NngAY:function(n,e){return y[s(1097)](n,e)},thclr:y[s(433)],rQrCR:y[s(725)]},n=(window[s(2551)+s(2449)]=!0,{type:y[s(1849)],version:y[s(1100)],name:y[s(313)],description:y[s(1858)],component:y[s(1834)],onContextMenu:function(n){var e=s;return{name:Prisma[e(770)][e(3074)](i[e(829)]),description:""}},onContextLauch:function(n){for(var e=s,t=y[e(2255)][e(1586)]("|"),i=0;;){switch(t[i++]){case"0":Prisma[e(443)][e(295)]({url:"",title:Prisma[e(770)][e(3074)](y[e(1378)]),component:y[e(1834)],search:r[o]||n[e(2054)],search_one:n[e(2054)],search_two:n[e(696)+e(2222)],movie:n,page:1,clarification:!!r[o]});continue;case"1":var r=Prisma[e(449)][e(1562)](y[e(2202)],"{}");continue;case"2":y[e(1983)](u);continue;case"3":var o=Prisma[e(2514)][e(795)](n[e(3150)+e(2969)]?n[e(3305)+e(3199)]:n[e(696)+e(2222)]);continue;case"4":Prisma[e(1075)][e(2956)](y[e(1834)],f);continue}break}}});function u(){for(var n=s,e=y[n(2331)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":Prisma[n(1624)][n(2956)](y[n(3172)],y[n(1817)]);continue;case"1":Prisma[n(1624)][n(2956)](y[n(1523)],y[n(2008)]);continue;case"2":Prisma[n(1624)][n(2956)](y[n(859)],y[n(2397)]);continue;case"3":Prisma[n(1624)][n(2956)](y[n(1635)],y[n(3196)]);continue;case"4":Prisma[n(1624)][n(2956)](y[n(1054)],y[n(1371)]);continue;case"5":Prisma[n(1624)][n(2956)](y[n(2442)],y[n(520)]);continue;case"6":Prisma[n(1624)][n(2956)](y[n(1072)],y[n(2954)]);continue}break}}y[s(2125)](o,y[s(1963)],y[s(3281)]),y[s(2138)](o,y[s(3279)],y[s(3202)]),Prisma[s(811)][s(1984)]=n,Prisma[s(770)][s(2956)]({online_watch:{ru:y[s(313)],en:y[s(1518)],ua:y[s(968)],zh:y[s(938)]},online_video:{ru:y[s(2723)],en:y[s(2871)],ua:y[s(2664)],zh:"视频"},online_no_watch_history:{ru:y[s(575)],en:y[s(2109)],ua:y[s(423)],zh:y[s(1067)]},online_nolink:{ru:y[s(1452)],uk:y[s(2242)],en:y[s(2363)],zh:y[s(493)]},online_balanser:{ru:y[s(3359)],uk:y[s(3359)],en:y[s(1463)],zh:y[s(537)]},helper_online_file:{ru:y[s(353)],uk:y[s(346)],en:y[s(288)],zh:y[s(865)]},title_online:{ru:y[s(2289)],uk:y[s(2615)],en:y[s(1756)],zh:y[s(1386)]},online_voice_subscribe:{ru:y[s(1446)],uk:y[s(3122)],en:y[s(667)],zh:y[s(3056)]},online_voice_success:{ru:y[s(365)],uk:y[s(1410)],en:y[s(2911)],zh:y[s(1683)]},online_voice_error:{ru:y[s(2003)],uk:y[s(2608)],en:y[s(1670)],zh:y[s(2356)]},online_clear_all_marks:{ru:y[s(2394)],uk:y[s(1773)],en:y[s(1216)],zh:y[s(3389)]},online_clear_all_timecodes:{ru:y[s(480)],uk:y[s(3294)],en:y[s(2216)],zh:y[s(1090)]},online_change_balanser:{ru:y[s(1981)],uk:y[s(1985)],en:y[s(665)],zh:y[s(328)]},online_balanser_dont_work:{ru:y[s(1049)],uk:y[s(2622)],en:y[s(1715)],zh:y[s(2013)]},online_balanser_timeout:{ru:y[s(3214)],uk:y[s(676)],en:y[s(3128)],zh:y[s(2075)]},online_balanser_tip:{ru:y[s(2162)],uk:y[s(2937)],en:y[s(1247)],zh:y[s(373)]},online_does_not_answer_text:{ru:y[s(1049)],uk:y[s(2622)],en:y[s(1715)],zh:y[s(2013)]}}),Prisma[s(1624)][s(2956)](y[s(2764)],y[s(855)]),y[s(1034)]($,y[s(290)])[s(2221)](Prisma[s(1624)][s(1562)](y[s(2764)],{},!0));var r=y[s(2769)][s(673)](n[s(2980)],y[s(1284)]);function t(o){for(var c=s,n=i[c(274)][c(1586)]("|"),e=0;;){switch(n[e++]){case"0":var a={EIIBl:i[c(2805)],frrjp:i[c(306)],bdGCK:function(n){return i[c(3275)](n)},nLgYP:i[c(2200)],ahnDS:i[c(2470)]};continue;case"1":var t=i[c(2518)]($,Prisma[c(770)][c(3074)](r));continue;case"2":t.on(i[c(2406)],function(){for(var n=c,e=a[n(1667)][n(1586)]("|"),t=0;;){switch(e[t++]){case"0":Prisma[n(1075)][n(2956)](a[n(282)],f);continue;case"1":a[n(2595)](u);continue;case"2":var i=Prisma[n(2514)][n(795)](o[n(1343)][n(3150)+n(2969)]?o[n(1343)][n(3305)+n(3199)]:o[n(1343)][n(696)+n(2222)]);continue;case"3":var r=Prisma[n(449)][n(1562)](a[n(3182)],"{}");continue;case"4":Prisma[n(443)][n(295)]({url:"",title:Prisma[n(770)][n(3074)](a[n(2737)]),component:a[n(282)],search:r[i]||o[n(1343)][n(2054)],search_one:o[n(1343)][n(2054)],search_two:o[n(1343)][n(696)+n(2222)],movie:o[n(1343)],page:1,clarification:!!r[i]});continue}break}});continue;case"3":if(o[c(578)][c(1966)](i[c(2024)])[c(2557)])return;continue;case"4":o[c(578)][c(1966)](i[c(2423)])[c(3184)](t);continue}break}}Prisma[s(1075)][s(2956)](y[s(1834)],f),y[s(3187)](u),Prisma[s(3288)][s(2190)](y[s(2137)],function(n){var e=s;y[e(990)](n[e(1266)],y[e(1096)])&&y[e(2929)](t,{render:n[e(1156)][e(1108)][e(578)](),movie:n[e(3205)][e(1343)]})});try{y[s(2073)](Prisma[s(443)][s(358)]()[s(3105)],y[s(2137)])&&y[s(2465)](t,{render:Prisma[s(443)][s(358)]()[s(1108)][s(578)](),movie:Prisma[s(443)][s(358)]()[s(1522)]})}catch(n){}y[s(482)](Prisma[s(811)][s(2096)+"l"],177)&&([y[s(1988)],y[s(3215)],y[s(3010)],y[s(3256)],y[s(1754)],y[s(2906)],y[s(1475)],y[s(2081)],y[s(1336)],y[s(1455)],y[s(2619)],y[s(1795)],y[s(2540)],y[s(319)],y[s(3191)],y[s(3257)],y[s(1388)],y[s(958)],y[s(3338)],y[s(2355)],y[s(2651)],y[s(1835)],y[s(2388)],y[s(2111)],y[s(993)],y[s(3245)],y[s(892)],y[s(2230)],y[s(1711)],y[s(2042)],y[s(1414)],y[s(2506)],y[s(1859)],y[s(1252)],y[s(2344)],y[s(3328)],y[s(2272)],y[s(2093)],y[s(2958)],y[s(377)],y[s(1960)],y[s(1611)],y[s(2634)],y[s(2205)],y[s(1743)],y[s(3003)],y[s(1498)],y[s(1812)],y[s(874)],y[s(1812)],y[s(2201)],y[s(3087)],y[s(3053)],y[s(706)]][s(1920)](function(n){var e=s;Prisma[e(449)][e(460)](i[e(335)](i[e(2549)],n),i[e(2989)])}),Prisma[s(449)][s(460)](y[s(2427)],y[s(725)]))})}(),function(){"use strict";var a=_0x164b,s={IGdtB:function(n,e){return n(e)},Fbvkl:function(n,e){return n+e},stxUA:function(n,e){return n+e},ZCZXQ:a(1061),JHxoV:function(n,e){return n+e},Etbqw:a(1856),TTTWA:a(1253),KMKjz:a(2962)+"3",IdVYb:a(1705),DrAVp:a(1403)+"0",XbplJ:function(n){return n()},qzGGM:a(658),JhypW:a(991),rBKLS:a(2932),QAKoo:a(1705)+"s",ljTVP:function(n,e){return n==e},Wngpt:a(3171),rBRUr:function(n){return n()},ZapRz:a(2998)+a(732)},r=new Prisma[a(2527)],o=s[a(2469)](s[a(2469)](Prisma[a(2514)][a(648)](),Prisma[a(811)][a(1528)+"n"]),s[a(3080)]);var u={main:function(n,e,t){var i=a;r[i(2312)](s[i(2469)](s[i(2259)](o,s[i(1864)]),n[i(1964)]),function(n){var t=i;n[t(1705)]=!0,n[t(2493)+"s"]=n[t(2493)+"s"]||5,n[t(1516)][t(1920)](function(n){var e=t;n[e(1933)+"h"]=n[e(769)],n[e(3050)+e(2304)]=n[e(769)]}),s[t(2636)](e,n)},t)},full:function(n,t,e){var i=a;r[i(2312)](s[i(2259)](s[i(2469)](s[i(2490)](s[i(2490)](o,s[i(1886)]),n[i(1580)]),s[i(639)]),n[i(1964)]),function(n){var e=i;n[e(2493)+"s"]=n[e(2493)+"s"]||15,s[e(2636)](t,n)},e)},clear:function(){r[a(3344)]()}};function c(e){for(var r=a,n=s[r(1900)][r(1586)]("|"),t=0;;){switch(n[t++]){case"0":c[r(2497)+r(2187)]=function(n,e,t){var i=r;u[i(2747)](n,e[i(872)](c),t[i(872)](c))};continue;case"1":var o={QFUeY:s[r(1431)]};continue;case"2":c[r(2046)]=function(){var n=r;u[n(2747)](e,this[n(261)][n(872)](this),this[n(621)][n(872)](this))};continue;case"3":return c;case"4":var c=new Prisma[r(2049)+r(2757)](e);continue;case"5":c[r(355)]=function(n,e,t){var i=r;t[i(398)]=!1,t[i(1672)]=function(){var n=i;Prisma[n(443)][n(295)]({url:e[n(1557)],title:e[n(2054)],component:o[n(2424)],page:1})}};continue}break}}function f(e){var r=a,o=new Prisma[r(2049)+r(2757)](e);return o[r(2046)]=function(){var n=r;u[n(3299)](e,this[n(261)][n(872)](this),this[n(621)][n(872)](this))},o[r(2497)+r(2187)]=function(n,e,t){var i=r;u[i(3299)](n,e[i(872)](o),t[i(872)](o))},o}window[a(1705)+a(1694)]||s[a(402)](function(){for(var t=a,n=s[t(3059)][t(1586)]("|"),e=0;;){switch(n[e++]){case"0":window[t(2059)]?s[t(402)](add):Prisma[t(3288)][t(2190)](s[t(3145)],function(n){var e=t;r[e(2976)](n[e(1266)],r[e(541)])&&r[e(3127)](add)});continue;case"1":var i={type:s[t(2334)],version:s[t(1837)],description:"",component:s[t(1028)]};continue;case"2":Prisma[t(1075)][t(2956)](s[t(1028)],c);continue;case"3":Prisma[t(811)][t(1984)]=i;continue;case"4":var r={HDoLN:function(n,e){return s[t(678)](n,e)},fDANH:s[t(378)],tanQV:function(n){return s[t(1917)](n)}};continue;case"5":Prisma[t(1075)][t(2956)](s[t(1431)],f);continue}break}})}();
function _0x3e0c(t,n){var e=_0x2589();return(_0x3e0c=function(t,n){return e[t-=429]})(t,n)}function _0x2589(){var t=["vYvoi","2.4763 16.","t-backdrop","OytmG","final_prog","load.svg","MJEUz","Failed to ","Программа ","YGHvt","tus--live ","2.3036 1.5","PkRQe","errorCode","\n         ","px);backdr","11.1143 3.","GqrKc","qOrrp","09 15.6325",'<path d="M',"userAgent","xAjvb","wAIoq","peTjR","network","nwzjJ","\nПриєднуйт"," broadcast","appready","removeUpda","pyMXU","{-webkit-b","ur(5px);ba","ире",'071_2606">',"|5|1|2|0|4","remove","it-box-ali","KcPbP","0,122,0.7)","lwfBK","writable","8,0);backg"," stroke-li","lKjaN","dXeqv","e-height: ",".8em;heigh"," the broad","us-soon 3s","qRBTi","рами","Немає прог",".90786 22.","255,255,0.",":rgba(255,","cHNAs","split","9666M8.392","VMuHM","olor:#76e6","1|0"," осталось ","605 12.303","clip0_1807","image_hori",".card__age","YWTnL","-shadow: 0","7a}70%{-we","<li class=","yfphX",'="card__im',"time_offse","lNEZX"," 16.9858M6","nite}.broa","img--loade","blur(5px)}","silent","nite}\n    ","LIqVP","adius:.3em",';">\n      ','u__text">',",122,0.7);","}}@-o-keyf","ast will s","soon","75714 16.9","подождите.","image_vert","VvshU","onTouch"," 0 0 rgba(","dCXXK",";backgroun","pkpOl","secondsToT","   </div>\n","fgtGq","inite;-o-a","icIal","object",'="0 0 24 2','text">LIVE','" stroke-w',"xPacp","adcast__st","SRlbZ","nYXeT","mkiEJ","ZncmL",'ass="broad',"yagFM","d-color:#7","QIgQR","ndex:",'="card__pr',"qvwBF","hadow:0 1p","34M22.4749","oxEjD","tor","ext{color:","add","iv>\n      ","Sports bro"," </div>","10 minutes","wBKcw","       </d",'="margin-b',"Немає поси","random","_status-ma","gPMwu",' 0.05em;">',"sort","PnLKV",' class="ca',"SZULN","WMRPX","--live{bac","37 12.0002","tbZvp","Broadcast ","iVFCt","C18.6587 1","ZlBQY","></div>\n  ","60 минут.","Трансляція",":center}.b",'-marker"><',"      </di","EHOng",'="card__ag',"Lang","052 15.749","get","yBoBn","CGISH","Uyqby","ddvOr","on{backgro","https://a.","image"," <rect wid"," трансляці","26 2.75714","VmTjC",": 0.6em 0.","classList","093C16.762","_watch","gapsK","6e67a}70%{","OweZw","e 1.5s inf","addEventLi","0.6674 8.7","es marker-","video","roHwH",'live">\n   ',"HuNlq","ecnBW","casts","t started ","roadcast__","rker{-webk","Предстоящи","MZEXH","FFuwi","vXhln","kPJFy","5068 22.50","addUpdate","render","4749 11.26","         <","imitive va","ї залишило","tuixF","iptv","translate","XTBnT","        </","1|6|7|8","0454C17.71","arted!\nJoi","VARSt","send","webkit-box","YqraQ","utraff.com","6C16.1045 ","follow","/vast/QHqC","3em;-webki","MxyfQ","push","r--visible","M6.125 3.2","casts_read","До початку","eft: 1em; ","lor:rgba(2","string","ound-color","r:rgba(255","5,0.4)}100","0.9; margi","rd__promo-",": 2.4em; f",".5436 10.6","/get",".89622 14.","w:0 0 0 0 ","The broadc"," 15.4905 1","und-color:","ts.","0024 12.00","ebkit-keyf","uJfaSHIxZ-","CxUrg","MaeNf",": rgba(255"," 16.9858M1","type","ector laye","HSWQw","ww.w3.org/","wxoUa","ZqidO","ba(255,255","Coming up ","z-index:10","XOkef","LPbVt","atus--soon","QCcOy","ram","GAeQM","/api/ad/vi","C1.50037 1","Interactio","ew?","mqAqm","5004 14.02","UjVQB","broken.svg","a(234,78,7","5 22.5002 ",'or: #fff;"',"е трансляц","stat for i","егляду.","XCAUy","     <div ","osition: a","FDuhn","map",",255,0.4)}","now","parseTime","328 20.532","|8|9","9 13.7116 ","9.84311 14",' height="2',"ing.","22M20.939 ","gba(255,25","peOnc","d-color:rg","5,0.5)}100","kbXGt",">\n        ","0003 7.000","GXtdg","VamKW","ottom: 1em","Fifej","3370570boNqwP","n-bottom: ",",255,255,0","VUxjK","5|2|4|3|1|","1.83032 12","алася.\nБуд","Oqlbv","ze:1em;fon","C5.63231 1","C6.69301 1","|10|7|3|14","flex;-webk","Platform","OSRNg","xt-transfo","0.3em; box","svg>\n     ","19 14.5004","webkit-fle","watch","loader","NfzIV",".1195 7.39",'iew" style',"6|11|13|12",".4)}}.broa","KSdqs","sSKTR","append","empty","qoWzu","bkit-borde",'="http://w',"r-spacing:",'s="card__v',"cast.","0.9707 5.1","рансляцію.",",0);backgr","padding:.4",'xt"></div>',"Ghiew","ical",".1091 16.3","сь 60 хвил",'th="24" he',"fixProtoco","x-shadow:0","(234,78,78"," 1.5s infi"," 7.00039 1"," часом","63 5.184 1","final_now_","sfedt","1|7|6|5",'itle"></di',"ata availa","display","   ","ble","arker-stat"," 22.1036 5","чалась.\nПо","18.9128 2.","NRJUH","aWZhq","CMVUm","2027214LDsKcg","Storage","gba(0, 0, ","росмотру.","10 минут.","forEach","azvcv"," на трансл","1em; color",'s="broadca','="card sel',"5547 15.50","60 minutes","/api/sport","12.0003 12","x;display:","8,78,0);ba","12.0004 22","/div>\n    ","visible",".0892 20.5",'one" xmlns',"href",'nd"/>\n    ',"filter","sessionId","ebkit-bord","timeLeft","Reguest","9.7715 8.6","16.95 13.3","EAsIp","jhehw","        <c","mo-text","C12.1018 1","xt{font-si","6.6248 4.7",".125 3.296","YcrpN","2,0.7);box","0%;border-","XbLlo","ox-shadow:",".5)}100%{-","UMths","4)}}@-webk","ready",'v class="b',"Найближчим","sess_","ter:blur(5","hover:ente","5954C11.10","ZqIhe","live","ion:marker"," 2.16256 9",":0 0 0 0 r","17.5122C19","Qfbyi","ncruq","streams","jaGsl","еться тран","trdIl","ohRbQ",": 700; lin","YBzGQ","M7.39909 2","erty","ast has en","kground-co","abr",'="broadcas'," layer--re"," left unti",";display:-","Нет ссылки","broadcasts","as a funct","set","Cannot cal","onVisible","VcABZ","Utils","2|3|4|5|0|","BGoaB","aqUqE","nd-color:r","яцию.","XNszP","Activity","r-status-l","7791 1.500","      <div","8.78855 22","отсутствуе","lue.","1 10.441 1","querySelec","01 12.0004","hvoRp","onFocus","жалуйста, ","it-keyfram","04 1.50024","zibQH",",78,0);bac","PtmzY","results","cast__stat","prisma_uid","tjGcG","t__status-","final_soon","boSoT","Gwkac","1 13.5598 ","Трансляция","5,255,0.4)",'width="24"',"ZnRAh","v>\n       ","HJLWZ","Player","floor","4|6|5|3|2|",'ath="url(#',"qlkxc","IzFCc",'us-marker"',"NPBwJ","toString","MFxuy","lvZTV","app_digita"," <g clip-p",", 255, 255","2.0002C22.","8,78,0);bo","rgba(0,0,0","@@toPrimit","0 0 0 rgba","Component","st__status","u__list","cEHQV","AhzqD","onload","-flex-alig"," завершена","e>\n    @-w","onerror",", 0.9); te","udxwz","7a}70%{box",".785 8.392","CQoTM","ZePqI","bind","IepLx","2522259UqisdH","xXPyJ","0 0 0 0 rg","fnJId","xml","GslZU","location","8919 7.670","15.9101 20","-status-so","sPxYR","XyAel","FbUGL","5,0.7)}65%","Sjydm","1.0.2","shadow:0 0","95 13.3093","stener","enumerable","0 .4em rgb","}@-o-keyfr",")}.broadca","live{0%{-w","adow:0 0 0","{box-shado"," 11.2634C2","954C10.650","n{0%{backg","-webkit-al","qODsC","n 3s infin","on 3s infi",'">\n       ',"ion","ruRGa","dkCxp","22,0.7);ba","BkRWi","ZbXDl","yw8OUCkmxp","sent succe","3|2",'s="card__t',"getKeys",'class="men',"op-filter:","FWjNN","generateSe","3|0|4|8|2|","2|1|4|3|0","6 1.50454M","XFWgD",".50024 12.","card--wide","njDAl","ign-items:","MRgsK","100%{backg","7 22.5002 ","трансляції","ames marke","destroy","xHsFY",'lass="card'," 15.2693 7","olor:rgba(","img","bSzOF","t-border-r","1|5|0|3|4|","Left","9209 15.63","__status--","activity","ssionId","4,78,78,0)","lor:rgba(0","hQrCL","pris_domai","__status-t","status-mar","HazgP",".939 17.51","error","tatus-live","); padding","hvWvf","1 20.939 1","rames mark","t:.8em;-we","ь ласка, з","box-shadow","dcast__sta","t_not_yet",'u__ico">\n ',"FvmLW","Vkmes","th>\n      ","ready_inde","dBXKp","66C7.80174","909 21.441","GEMxY","ackdrop-fi","    </defs","XWCjW","yet.\nPleas","protocol","em .8em;-w","briefly","NEEEK","HrEXQ","Bell","key","0.2em; col","ин.","data"," еще не на","8,0);box-s","       <di","zolax","AkQQE",".50037 8.3","time_end","_css","jsFQd","ZrEkE","configurab","adcasts","1.441C5.42",".7)}65%{ba",'4" fill="n',"Спорт",'fill="curr',"TKFxB","8em; borde",'4" viewBox',"body","8KlWvfd","No link to","      </g>","name","Sport","bkit-box-s","jmwnd","TPxeh","  </clipPa","dius:.3em;",'necap="rou',"ckground-c","QXEtY","4.2845 20.","app",".menu .men","LVTgB","Скоро в эф","3 3.79874 ","day",'title"></d',"mlhLe","ihjNO","MAspA","HkacT","lign-items","zontal","19 21.929 ",'g">\n      ',"LgvzH"," 0, 0, 0.6","5|2|4|1|3|",'ight="24" ',",0,0,0.6);","us-live 1.",'2000/svg">',".00039 12.","-o-animati","4|5|0|1|6|",'(5px);">\n ',"ite;animat","ded.","zBeyN",",0);box-sh","55,255,255"," 1.50454M1","    <div c","25C8.13724","ckdrop-fil","nder card-","length","09 7.02039","255,255,25"," началась!","./img/img_","-ms-flexbo"," 0 rgba(23",'e="#F2F2F2',"call","сляція","src","Template","lipPath id","mouth","l the broa","(0,0,0,0.5","12540VDzWVX"," <div clas","DOHDj","card",".8635 15.2","r-radius:5","vlKvx","  </div>\n ","XzBZQ",",0.6);padd",";margin-ri","cmtVk","ebkit-box-","broadcast_","oDLOo","-webkit-bo","IlypZ"," 6.125 3.2","13.5655 18","getTime","anqgC","UHznq","ing:.4em .","2.0004C11.","rgba(234,7","aIaMf","right:1em;","056 15.777","build","HKCgp","style","   <div cl","49 11.2634","r-radius: ","ast has no","uCp9Oa8o4.","n:marker-s","GBijA","-shadow:0 ","symbol"," 11.5483 7","2.4918 11.","3.8046 1.9","PvOWv","dbbxj",'omo">\n    ','"font-size',"value","ajax",'iv class="',"     <svg ","aINqb","px)}.broad","00;color:#","n:center;a","oMWMm","defineProp","2775 17.09","eyframes m","status-liv","<div class","substr","tart soon","YCweq","0, 0.2); b","radius:50%","status--so","ktauU","tus-marker","log",'e"></div>\n',"ba(118,230","XcYza","find","hover:touc","eturn a pr","трансляции","63 1.65803","250534qQQZSE","oWfSx","3988 10.65","118,230,12"," 22.5004 1","2029 1.501","12ubfsJo","SAXvB","0.659 7.05","toPrimitiv","92 2.75714","Arrays","PPXSV","ase; lette","ive{0%{box","t-weight:6","updateTime",".card__pro","ont-weight","naPyw","04 11.7525","m selector","wcuJR","jIEEG","        <d","ybZHX","PLecM","</style>\n ","center;-ms","div style=","          ","No program","FOAbz","GET",".card__img","prototype","iptv_broad","%{-webkit-","nimation:m","YojEt","RtheV","dWoLc","14.8921 15","warn","HMJGj","BIarN","us-live{0%","create",".card__tit","gHXCD","\nПрисоедин","programRea",".3em;borde","status bro","it-animati","e;top:1em;","541 20.477","RLgWN","mVJHF","l a class ","hadow:0 0 ","7.5122M8.3",'858" strok',"concat","0 0 .4em r","fXvbc"," 0 0 .4em ","TkKHj","soon{0%{ba","9204 6.957","zDhft"," почалася!","39C16.0757","nd:rgba(0,","ssfully fo","ont-size: ","003 1.9971"," infinite;","none","ачекайте.","5,0.4)}}@k","есь до пер","default","imeHuman",'"menu__ite',"lter: blur","rEYoM","2565 22.47","лання на т","GCgCY",'v style="f',"bsolute; l"," <defs>\n  ","; backgrou","WWvou"," ще не поч","До начала ","plugins",",78,0);box","qPOWh","on:absolut","innerText","send broad","dDLhU","vGYAr","top: 0.8em","\n    <styl","dipRS","updates","IrieH","rm: upperc","JpbAz","ted","CMLRA","     </li>","uMJsF","__promo-te","mGGDG","params","time","round-colo","e;animatio","r-radius:.","2 5.28516 ","Qatfq","left","TWYCy","gn:center;","NKbwk","yujKd","Скоро почн",".card__vie","ker{width:","n the view","8em;-webki",'v style="p',"3C12.0964 ","hPpnF","IDjJC","HAevC","er-radius:","68 12.3036","view stat ","gYwXc","45505GDlgAm","#76e67a}.b","grFGS","YgATt","53393 12.0","OFyfj",'="clip0_18',"BsCXS","tus{positi","{backgroun","21.441M16.","ast has st","final_star","final_titl","3|0|1|2|4","sAdrZ","yKJrr","9 7.05954M","hrCLT","YgkDt","Dcbat",".4)}}@keyf"," 2px 8px r",'1_2606)">\n',"x 2px rgba","er-status-","9666C3.334","%{backgrou","16.5565 14","M12.0003 1",".5002C10.3","Manifest","118RtuaMN","status",",0.5)}100%"," трансляци","cast view ","яйтесь к п","ive must r","3 7.39909 ",'xt">СКОРО<',"No sport d","Спортивные",".82371 1.5","-filter:bl","YCyae","acDrK","status-soo","us--live .",";border-ra","ght:.5em}.","сь 10 хвил","final_end","kSCaY","Uvgci","Listener","FNPcc","fff;text-s","gba(118,23","395773fnNswl","text","dcast star","gba(234,78","agrjN","694 15.608","nMain","xHTIA","305 14.500","<img class","dsNCd","soon .broa","mo-title","cMgTA","PoXtF",'idth="1.5"',"(118,230,1",".0004C13.8","title","_status-te","r index:","RzFeokikE2","jwxjD","hRsxq",'entColor"/',"JUbwz","wuxNe","lotMC","on:marker-","hover:focu","time_start","YPUnE","</div>\n   ","UJAco","5s infinit","Спортивні ","title_left","e wait.","{-webkit-a",".1976 1.66",".broadcast","10.659 7.0","lLink","-webkit-ba","PGOXP","7 15.6325C",'-small">\n '];return(_0x2589=function(){return t})()}(function(){for(var t=_0x3e0c,n=_0x2589();;)try{if(201135==+parseInt(t(1081))+parseInt(t(1257))/2*(-parseInt(t(1003))/3)+-parseInt(t(1087))/4*(parseInt(t(1225))/5)+parseInt(t(636))/6+parseInt(t(1284))/7*(-parseInt(t(937))/8)+parseInt(t(798))/9+-parseInt(t(567))/10)break;n.push(n.shift())}catch(t){n.push(n.shift())}})(),function(){"use strict";var o=_0x3e0c,g={wBKcw:function(t,n){return t instanceof n},MAspA:o(718)+o(1140)+o(716)+o(832),ZlBQY:function(t,n){return t<n},GAeQM:function(t,n){return t in n},qvwBF:o(1050),xHsFY:function(t,n){return t(n)},ybZHX:function(t,n,e){return t(n,e)},JpbAz:function(t,n,e){return t(n,e)},dXeqv:o(1116),YPUnE:function(t,n){return t!=n},ZnRAh:o(1435),ncruq:function(t,n){return t!==n},VARSt:function(t,n){return t||n},kSCaY:o(1163),Oqlbv:o(778)+o(1263)+o(1078)+o(463)+o(734),sfedt:function(t,n){return t===n},trdIl:o(490),HkacT:function(t,n){return t==n},MRgsK:o(1042),dBXKp:function(t,n){return t+n},gPMwu:o(868)+"2",icIal:function(t,n,e){return t(n,e)},KcPbP:function(t){return t()},SRlbZ:function(t,n){return t*n},DOHDj:function(t,n){return t-n},lotMC:o(717),vlKvx:o(1492),YGHvt:o(1206),WMRPX:o(459),HAevC:o(1361)+"te",lvZTV:function(t,n){return n<t},CMLRA:o(1266)+o(625)+o(628),pkpOl:o(649)+o(498),IDjJC:function(t,n,e){return t(n,e)},Sjydm:function(t,n){return t+n},jIEEG:function(t,n){return t+n},GCgCY:o(686),HrEXQ:o(1338)+o(1183)+o(1261)+o(539)+o(1449),Fifej:o(968)+"0",FvmLW:o(1114),YcrpN:o(748),UMths:o(527)+o(530),NRJUH:o(1478)+o(1223)+o(839)+o(1155)+o(1304),cmtVk:o(846)+o(873),SZULN:o(474),oxEjD:function(t,n){return t*n},qODsC:function(t,n){return t+n},ihjNO:function(t,n){return t-n},sSKTR:o(848),MFxuy:function(t,n){return n<t},Gwkac:function(t,n){return t!==n},IepLx:o(592)+o(578)+o(1367)+o(550),YCyae:o(1313)+"s",CxUrg:o(1098)+o(670),PLecM:function(t,n){return t===n},ZbXDl:o(587),lNEZX:o(722)+o(470),cEHQV:function(t,n){return t(n)},hQrCL:o(1345)+o(1111)+o(1004)+o(645)+o(781)+o(1359)+o(871)+o(446)+o(1111)+o(1111)+o(1004)+o(645)+o(781)+o(1486)+o(654)+o(1111)+o(1111)+o(1063)+o(710)+o(750)+o(1437)+o(1316)+o(1111)+o(1463)+o(1458)+o(1111),Dcbat:o(1212)+"w",UjVQB:o(688)+"r",jhehw:o(852),XNszP:o(691),Qfbyi:function(t,n){return n<t},Qatfq:o(571)+"0",hRsxq:o(1159),vYvoi:function(t,n){return t(n)},PkRQe:o(1345)+o(918)+o(1216)+o(543)+o(1172)+o(488)+o(1186)+o(1174)+o(1154)+o(967)+o(884)+o(433)+o(934)+o(1036)+o(583)+o(1400)+o(1247)+o(638)+o(1067)+o(902)+o(1166)+o(976)+o(1111)+o(462)+o(1110)+o(1049)+o(496)+o(1099)+o(703)+o(1378)+o(494)+o(568)+o(913)+o(537)+">",peOnc:o(1316)+o(1111)+o(918)+o(1171)+o(1156)+o(644)+o(510)+o(774)+o(790)+o(582)+o(1191)+o(1094)+o(601)+o(1469),kPJFy:o(1316)+o(1111)+o(1431)+o(1111)+"  ",HKCgp:function(t,n){return t(n)},oWfSx:o(1345)+o(918)+o(684)+o(451)+o(1134)+o(1440)+o(523)+o(831)+o(1111)+o(1034)+o(1445)+o(747)+o(767)+o(1482)+o(1111)+o(1105)+o(1052)+o(1016)+o(1303)+o(1265)+o(654)+o(1111)+o(1010)+o(1111)+" ",PPXSV:o(1129)+"le",qRBTi:o(1077)+"h",fgtGq:o(1098)+o(1296),HJLWZ:o(1016)+o(1335)+o(525),XOkef:o(655),aIaMf:o(1115),boSoT:function(t,n){return t(n)},XCAUy:o(1063)+o(646)+o(513)+o(484)+o(711)+o(986)+o(1330)+o(1111)+o(1004)+o(602)+o(591)+o(1464)+o(565)+o(1415)+o(1111)+o(1293)+o(1404)+o(965)+o(1111)+o(1063)+o(1450)+o(1048)+o(1111)+o(731)+o(1472)+o(495)+o(957)+o(1458)+o(1111)+o(983)+o(862)+o(1197)+o(608)+o(1345)+o(1463)+o(1458)+o(1111)+o(1063)+o(1489)+o(1073)+o(1111)+o(1010)+o(1111)+o(1004)+o(841)+o(624)+o(759)+o(1460),zDhft:o(1398),PnLKV:function(t,n){return t==n},mqAqm:function(t,n){return t+n},dWoLc:function(t,n){return t+n},OFyfj:o(1320),AhzqD:function(t,n){return t/n},dsNCd:function(t,n){return t<n},XTBnT:o(1016)+o(1277),mlhLe:o(1016)+o(1237)+o(1193),aWZhq:o(991)+o(534),yujKd:function(t,n){return t===n},gHXCD:o(991)+o(1336),wxoUa:o(763)+o(1393),oDLOo:o(709),qPOWh:function(t,n){return t-n},bSzOF:function(t,n){return t==n},MaeNf:o(975)+o(840),xHTIA:o(1016)+o(1238)+"e",ecnBW:function(t,n){return t<n},qlkxc:o(1498)+o(477)+o(480)+o(507)+o(838)+o(1305)+o(1038)+o(802),qOrrp:o(1016)+o(1237)+o(892),IzFCc:o(1409)+"d",jsFQd:function(t,n,e){return t(n,e)},jmwnd:o(1128),NPBwJ:o(1097)+o(869),PoXtF:o(1499),LVTgB:o(860),HuNlq:o(460),VUxjK:o(1239),ZncmL:function(t,n){return t<=n},azvcv:function(t,n){return t==n},LIqVP:function(t,n){return n<t},mGGDG:o(1420),gapsK:o(847)+o(623),GslZU:function(t,n){return t*n},vGYAr:function(t,n){return t*n},QCcOy:o(1016)+o(751)+o(436),njDAl:o(1016)+o(621)+o(587),LgvzH:o(1016)+o(1302),zibQH:o(1117)+o(449),CGISH:function(t,n){return t(n)},hrCLT:o(1402)+o(1165)+o(1102)+o(831)+o(542)+o(843)+o(893)+o(1111)+o(1053)+o(757)+o(553)+o(935)+o(1436)+o(930)+o(657)+o(600)+o(515)+o(972)+o(1345)+o(1111)+o(773)+o(764)+o(1396)+o(1248)+o(1111)+o(1111)+o(1351)+o(650)+o(1301)+o(737)+o(502)+o(1332)+o(815)+o(1254)+o(1026)+o(754)+o(552)+o(793)+o(1350)+o(1254)+o(1026)+o(735)+o(442)+o(1083)+o(1242)+o(666)+o(435)+o(551)+o(1253)+o(611)+o(1292)+o(478)+o(1123)+o(1007)+o(1289)+o(1329)+o(1021)+o(497)+o(549)+o(1264)+o(1235)+o(815)+o(1480)+o(950)+o(1491)+o(886)+o(1142)+o(870)+o(984)+o(863)+o(499)+o(805)+o(585)+o(576)+o(604)+o(1150)+o(1020)+o(1390)+o(1350)+o(577)+o(673)+o(1060)+o(1091)+o(511)+o(1089)+o(825)+o(1204)+o(1347)+o(1229)+o(1157)+o(1217)+o(572)+o(1323)+o(1395)+o(849)+o(1325)+o(689)+o(988)+o(1043)+o(973)+(o(562)+o(1153)+o(618)+o(665)+o(1168)+o(1035)+o(485)+o(1251)+o(620)+o(921)+o(730)+o(1476)+o(528)+o(1045)+o(647)+o(431)+o(1407)+o(674)+o(899)+o(693)+o(1268)+o(505)+o(742)+o(671)+o(851)+o(1086)+o(1222)+o(982)+o(1342)+o(471)+o(1080)+o(630)+o(1385)+o(461)+o(1453)+o(824)+o(1044)+o(458)+o(1101)+o(1085)+o(775)+o(532)+o(964)+o(806)+o(881)+o(555)+o(695)+o(656)+o(1030)+o(857)+o(653)+o(1255)+o(536)+o(732)+o(590)+o(900)+o(705)+o(928)+o(1137)+o(955)+o(632)+o(1421)+o(1143)+o(994)+o(1438)+o(1299)+o(1375)+o(947)+o(659)+o(1111)+o(939)+o(1345)+o(1111)+o(1173)+o(1111)+o(669)+o(999)+o(1231)+o(1366)+o(1345)+o(1111)+o(429)+o(613)+o(969)+o(932)+o(1308)+o(561)+o(1111)+o(945)+o(896)+o(1111)+o(903)+o(561)+o(469)+o(584)+o(1463)+o(1458)+o(1487)+o(759)+o(542))+(o(843)+o(1416)),yfphX:o(1316)+o(1195),HMJGj:function(t,n){return t(n)},dkCxp:o(952)+o(782),NKbwk:o(683),FNPcc:function(t){return t()},grFGS:o(715)+o(923),GBijA:o(1187)+o(788)+o(506)+o(887)+o(1250)+o(821)+o(1015)+o(814)+o(1426)+o(1084)+o(676)+o(1041)+o(779)+o(1300)+o(835)+o(948)+o(1392)+o(1401)+o(942)+o(1141)+o(818)+o(535)+o(917)+o(1141)+o(818)+o(535)+o(1374)+o(1201)+o(492)+o(569)+o(680)+o(475)+o(1041)+o(779)+o(616)+o(980)+o(822)+o(993)+o(874)+o(1428)+o(558)+o(518)+o(546)+o(819)+o(859)+o(729)+o(1095)+o(1041)+o(779)+o(1300)+o(835)+o(948)+o(1392)+o(792)+o(1041)+o(1145)+o(1287)+o(744)+o(708)+o(489)+o(981)+o(1259)+o(823)+o(500)+o(1027)+o(652)+o(948)+o(864)+o(989)+o(1161)+o(1061)+o(629)+o(1127)+o(1363)+o(679)+o(800)+o(1074)+o(1417)+o(890)+o(694)+o(1283)+o(1371)+o(1428)+o(1447)+o(438)+o(1018)+o(615)+o(1147)+o(1027)+o(776)+o(615)+o(1147)+o(1027)+o(652)+o(948)+o(864)+o(989)+o(559)+o(1118)+o(890)+(o(694)+o(1287)+o(1179)+o(1041)+o(779)+o(616)+o(606)+o(491)+o(1387)+o(1386)+o(682)+o(741)+o(443)+o(1272)+o(826)+o(1201)+o(492)+o(569)+o(929)+o(948)+o(864)+o(989)+o(493)+o(1252)+o(725)+o(556)+o(756)+o(1418)+o(887)+o(1250)+o(1149)+o(948)+o(864)+o(989)+o(811)+o(1234)+o(558)+o(518)+o(546)+o(856)+o(1201)+o(492)+o(569)+o(1246)+o(887)+o(1250)+o(1149)+o(948)+o(864)+o(989)+o(811)+o(1234)+o(558)+o(518)+o(546)+o(856)+o(1201)+o(492)+o(569)+o(593)+o(891)+o(1233)+o(1181)+o(1136)+o(1029)+o(520)+o(713)+o(475)+o(713)+o(586)+o(651)+o(992)+o(651)+o(579)+o(1369)+o(1208)+o(827)+o(854)+o(1109)+o(786)+o(1057)+o(962)+o(1485)+o(451)+o(879)+o(1213)+o(1379)+o(888)+o(599)+o(1008)+o(677)+o(1068)+o(1013)+o(1275)+o(1016)+o(1303)+o(672)+o(575)+o(1096)+o(1056))+(o(1282)+o(1452)+o(1249)+o(1002)+o(820)+o(781)+o(1475)+o(708)+o(875)+o(970)+o(607)+o(907)+o(662)+o(1221)+o(1133)+o(1203)+o(481)+o(1333)+o(1269)+o(1364)+o(985)+o(687)+o(1055)+o(747)+o(1273)+o(1016)+o(1467)+o(452)+o(1135)+o(1312)+o(1062)+o(440)+o(1433)+o(1119)+o(629)+o(971)+o(1318)+o(1202)+o(1039)+o(883)+o(617)+o(1408)+o(891)+o(1341)+o(1324)+o(878)+o(1456)+o(1226)+o(451)+o(1069)+o(1497)+o(503)+o(777)+o(1012)+o(1025)+o(1215)+o(867)+o(1414)+o(1274)+o(946)+o(1327)+o(985)+o(687)+o(1346)+o(844)+o(1410)+o(1324)+o(871)+o(1295)+o(891)+o(1071)+o(1322)+o(1119)+o(629)+o(1381)+o(1158)+o(974)+o(1312)+o(1272)+o(829)+o(977)+o(692)+o(807)+o(830)+o(1412)+o(1108)+o(627)),XFWgD:function(t,n){return t(n)},VmTjC:o(936),QIgQR:o(931),aqUqE:o(941),kbXGt:o(1267)+o(1260)+"и",gYwXc:o(1319)+o(858),nYXeT:o(1459)+o(927),sPxYR:o(1339)+o(733)+"т",FFuwi:o(1384)+o(1383),nwzjJ:o(1112),GqrKc:o(1177)+o(1079)+o(1394)+o(1483),ZePqI:o(487)+o(430)+o(464)+o(612)+o(914),GEMxY:o(648)+o(712)+o(1001)+o(1286)+o(504),naPyw:o(1177)+o(1079)+o(1394)+o(640),OweZw:o(487)+o(430)+o(464)+o(1276)+o(914),peTjR:o(1461)+o(712)+o(1001)+o(1286)+o(504),YojEt:o(755)+o(916)+o(631)+o(740)+o(1422),EAsIp:o(1484)+o(1176)+o(573)+o(889)+o(1160),PvOWv:o(501)+o(1037)+o(450)+o(905)+o(1321),UHznq:o(755)+o(990)+o(1131)+o(1262)+o(639),MxyfQ:o(1484)+o(1152)+o(1358)+o(1162)+o(540),BkRWi:o(501)+o(1236)+o(472)+o(1214)+o(554),VcABZ:o(755)+o(787)+".",cHNAs:o(1484)+o(787)+".",jaGsl:o(501)+o(707)+o(978),aINqb:o(714)+o(643)+o(726),Ghiew:o(1465)+o(1169)+o(605),fnJId:o(938)+o(1380)+o(603),hvWvf:o(453)+o(538)+"ии",lwfBK:o(685)+o(619),yagFM:o(519)+o(1420),YgkDt:o(954)+o(1365),mkiEJ:o(1211)+o(700)+o(996),NfzIV:o(501)+o(1419)+o(1065),TkKHj:o(444),tbZvp:o(813),dbbxj:o(1016)+o(940),VamKW:o(951),lKjaN:function(t,n){return n<=t}};function s(t,n){var e=o;if(!g[e(1462)](t,n))throw new TypeError(g[e(960)])}function i(t,n){for(var e=o,r=0;g[e(1481)](r,n[e(987)]);r++){var i=n[r];i[e(817)]=i[e(817)]||!1,i[e(926)+"le"]=!0,g[e(526)](g[e(1451)],i)&&(i[e(1373)]=!0),Object[e(1059)+e(706)](t,g[e(861)](a,i[e(912)]),i)}}function t(t,n,e){var r=o;return n&&g[r(1106)](i,t[r(1116)],n),e&&g[r(1192)](i,t,e),Object[r(1059)+r(706)](t,g[r(1377)],{writable:!1}),t}function e(t,n){var e=o;if(g[e(1315)](g[e(758)],typeof t)||!t)return t;var r=t[Symbol[e(1090)+"e"]];if(g[e(697)](void 0,r)){r=r[e(995)](t,g[e(473)](n,g[e(1278)]));if(g[e(1315)](g[e(758)],typeof r))return r;throw new TypeError(g[e(574)])}return(g[e(622)](g[e(701)],n)?String:Number)(t)}function a(t){var n=o,t=g[n(1106)](e,t,g[n(701)]);return g[n(961)](g[n(855)],typeof t)?t:g[n(898)](t,"")}h={yBoBn:g[(v=o)(1468)],XyAel:function(t,n,e){return g[v(1434)](t,n,e)},zolax:function(t){return g[v(1370)](t)},ZrEkE:function(t,n){return g[v(1441)](t,n)},PtmzY:function(t,n){return g[v(1005)](t,n)}};var w=new(g[v(1192)](t,function t(){for(var e=v,n=h[e(1493)][e(1389)]("|"),r=0;;){switch(n[r++]){case"0":h[e(809)](s,this,t);continue;case"1":var i={TPxeh:function(t){return h[e(919)](t)}};continue;case"2":h[e(809)](setInterval,function(){var n=e;a[n(1189)][n(641)](function(t){return i[n(944)](t)})},h[e(925)](1e3,10));continue;case"3":this[e(1405)+"t"]=0;continue;case"4":this[e(1189)]=[];continue;case"5":var a=this;continue}break}},[{key:g[v(1311)],value:function(t){var n=v;this[n(1405)+"t"]=h[n(745)](t,Date[n(547)]())}},{key:g[v(1009)],value:function(){var t=v,n=new Date,e=g[t(898)](n[t(1022)](),this[t(1405)+"t"]);return(n=new Date(e))[t(1022)]()}},{key:g[v(1340)],value:function(t){var n=v;return h[n(745)](t,this[n(1492)]())}},{key:g[v(1474)],value:function(t){var n=v;this[n(1189)][n(483)](t)}},{key:g[v(1220)],value:function(t){var n=v;Prisma[n(1092)][n(1368)](this[n(1189)],t)}}]));d={dipRS:function(t,n,e){return g[_0x3e0c(1106)](t,n,e)},wuxNe:function(t,n){return g[_0x3e0c(771)](t,n)},wAIoq:function(t,n){return g[_0x3e0c(861)](t,n)},yKJrr:g[(l=o)(1194)],PGOXP:function(t,n){return g[l(898)](t,n)},MJEUz:g[l(1429)]};var c=new(g[l(1219)](t,function t(){var n=l;d[n(1188)](s,this,t),this[n(1356)]=new Prisma[n(664)]},[{key:g[l(1009)],value:function(e,r){var i=l,a={hvoRp:function(t,n){return d[_0x3e0c(1354)](t,n)}},o=this,t=d[i(1328)](d[i(1328)](Prisma[i(721)][i(906)](),Prisma[i(1256)][i(877)+"n"]),d[i(1337)]);this[i(1356)][i(1411)](t,function(t){var n=i;t&&d[n(1310)](t[n(746)][n(987)],0)?(w[n(717)](t[n(547)]),d[n(1354)](e,t[n(746)])):r?d[n(1354)](r,d[n(1241)]):console[n(882)](d[n(1241)])},function(t){var n=i;r&&a[n(738)](r,o[n(1356)][n(1344)](t))})}}]));f={rEYoM:g[(u=o)(910)],HazgP:g[u(566)],EHOng:g[u(894)],SAXvB:g[u(675)],QXEtY:function(t,n){return g[u(898)](t,n)},IrieH:function(t,n){return g[u(1104)](t,n)},uMJsF:function(t,n){return g[u(812)](t,n)},anqgC:g[u(681)],YCweq:g[u(633)]};var u,f,l,d,v,h,k=new(g[u(1192)](t,function t(){var n=u;g[n(1434)](s,this,t),this[n(897)+"x"]={},this[n(661)]=this[n(846)+n(873)]()},[{key:g[u(1014)],value:function(){var t=u;return g[t(898)](g[t(812)](g[t(1104)](g[t(1170)],Date[t(547)]()),"_"),Math[t(1466)]()[t(769)](36)[t(1064)](2,9))}},{key:g[u(1473)],value:function(i){for(var a=u,t=f[a(880)][a(1389)]("|"),n=0;;){switch(t[n++]){case"0":$[a(1051)]({url:r,method:f[a(1488)],headers:{"User-Agent":navigator[a(1352)],Referer:window[a(804)][a(658)]},timeout:1e4,success:function(t){var n=a;console[n(1072)](o[n(454)],i)},error:function(t,n,e){var r=a;console[r(1124)](f[r(1167)],i,e)}});continue;case"1":var e=new URLSearchParams({index:i,uid:Prisma[a(637)][a(1492)](f[a(1088)],""),platform:Prisma[a(580)][a(1492)](),sid:this[a(661)]});continue;case"2":if(this[a(897)+"x"][i])return;continue;case"3":var r=f[a(949)](f[a(1190)](f[a(1196)](Prisma[a(721)][a(906)](),Prisma[a(1256)][a(877)+"n"]),f[a(1023)]),e[a(769)]());continue;case"4":this[a(897)+"x"][i]=!0;continue;case"5":var o={MZEXH:f[a(1066)]};continue}break}}}]));function x(t,n){var e=o;return Math[e(762)](g[e(812)](g[e(1454)](Math[e(1466)](),g[e(828)](g[e(959)](n,t),1)),t))}var _,y,P=0,m=(y={mVJHF:function(t,n){return g[_0x3e0c(753)](t,n)},JUbwz:g[(_=o)(1017)],FbUGL:function(t,n){return g[_(1180)](t,n)},ohRbQ:function(t,n){return g[_(1032)](t,n)},TWYCy:function(t,n){return g[_(866)](t,n)},YqraQ:g[_(727)],xAjvb:function(t,n){return g[_(1481)](t,n)},ZqidO:g[_(468)],KSdqs:g[_(509)],fXvbc:g[_(1291)],BGoaB:function(t,n){return g[_(448)](t,n)},CQoTM:g[_(765)],CMVUm:function(t,n){return g[_(1122)](t,n)},tjGcG:function(t,n){return g[_(1454)](t,n)},OytmG:function(t,n){return g[_(1454)](t,n)},iVFCt:function(t,n,e){return g[_(1106)](t,n,e)},acDrK:g[_(1349)],GXtdg:g[_(766)]},g[_(924)](t,function t(){for(var n=_,e=g[n(595)][n(1389)]("|"),r=0;;){switch(e[r++]){case"0":this[n(1199)]=i;continue;case"1":var i=g[n(770)](arguments[n(987)],1)&&g[n(753)](arguments[1],void 0)?arguments[1]:{};continue;case"2":var a=g[n(771)](arguments[n(987)],0)&&g[n(697)](arguments[0],void 0)?arguments[0]:{};continue;case"3":this[n(915)]=a;continue;case"4":g[n(1192)](s,this,t);continue}break}},[{key:g[_(943)],value:function(){for(var c=_,t=g[c(797)][c(1389)]("|"),n=0;;){switch(t[n++]){case"0":this[c(1006)][c(441)+c(816)](g[c(1270)],function(){var t=c;p[t(739)]&&p[t(739)](p[t(1006)],{})});continue;case"1":this[c(1006)][c(736)+c(1455)](g[c(508)])[c(1182)]="";continue;case"2":if(g[c(1107)](this[c(1199)][c(512)],g[c(837)]))for(var e,r=g[c(1406)][c(1389)]("|"),i=0;;){switch(r[i++]){case"0":g[c(473)](s,a)&&(e=g[c(783)]($,g[c(876)]),this[c(1006)][c(736)+c(1455)](g[c(1245)])[c(596)](e[0]));continue;case"1":this[c(1006)][c(441)+c(816)](g[c(533)],function(){var i=c,r={TKFxB:function(t,n){return y[_0x3e0c(1139)](t,n)},BsCXS:y[i(1309)],agrjN:function(t,n){return y[i(810)](t,n)},sAdrZ:function(t,n){return y[i(702)](t,n)}},t=y[i(1207)](p[i(915)][i(1258)],y[i(476)]);if(y[i(1353)](w[i(1206)](p[i(915)][i(922)]),0)&&!t)Prisma[i(911)][i(483)]({text:Prisma[i(1490)][i(467)](y[i(517)])});else if(y[i(1353)](w[i(1206)](p[i(915)][i(1314)]),0)||t)for(var n=y[i(594)][i(1389)]("|"),e=0;;){switch(n[e++]){case"0":var a=Prisma[i(1092)][i(842)](p[i(915)][i(698)])[i(660)](function(t){var n=i;return r[n(933)](t,r[n(1232)])});continue;case"1":a[i(1470)](function(t,n){var e=i;return r[e(1288)](r[e(1240)](parseInt,n),r[e(1240)](parseInt,t))});continue;case"2":k[i(474)](0);continue;case"3":Prisma[i(761)][i(466)]({title:Prisma[i(1490)][i(467)](y[i(1146)]),url:Prisma[i(721)][i(614)+i(1326)](s),position:0,total:1,vast_url:o,vast_msg:Prisma[i(1490)][i(467)]("ad"),onGetChannel:function(){var t=i,n={url:Prisma[t(721)][t(614)+t(1326)](s),name:p[t(915)][t(1302)],group:p[t(915)][t(512)]||"",icons:[],position:0,total:1};return Prisma[t(761)][t(1132)+"dy"]({channel:n,position:0,total:1}),n},onGetProgram:function(t,n,e){var r=i;e[0][r(597)]()[r(1285)](Prisma[r(1490)][r(467)](h[r(1317)]))}});continue;case"4":var o=!!y[i(723)](P,Date[i(547)]())&&y[i(794)];continue;case"5":P=y[i(635)](Date[i(547)](),y[i(749)](y[i(1334)](1e3,60),y[i(1479)](x,30,80)));continue;case"6":var s=p[i(915)][i(698)][a[0]];continue}break}else Prisma[i(911)][i(483)]({text:Prisma[i(1490)][i(467)](y[i(1271)])})});continue;case"2":this[c(1006)][c(434)][c(1457)](g[c(668)]);continue;case"3":var a=g[c(961)](this[c(915)][c(1258)],g[c(727)]);continue;case"4":var o=w[c(1206)](this[c(915)][c(1314)]);continue;case"5":var s=a||g[c(1481)](o,0)&&g[c(696)](w[c(1206)](this[c(915)][c(922)]),0);continue;case"6":this[c(663)]=this[c(1097)+c(869)][c(796)](this);continue;case"7":w[c(459)](this[c(663)]);continue;case"8":this[c(1097)+c(869)]();continue}break}else for(var u=g[c(1205)][c(1389)]("|"),f=0;;){switch(u[f++]){case"0":this[c(915)][c(1423)+c(610)]||(this[c(865)][c(1033)][c(626)]=g[c(1307)]);continue;case"1":this[c(1006)][c(736)+c(1455)](g[c(1245)])[c(596)](d[0]);continue;case"2":var l=g[c(1331)]($,g[c(1343)][c(1144)](v[c(956)],g[c(557)])[c(1144)](v[c(1e3)],g[c(457)]));continue;case"3":var d=g[c(1032)]($,g[c(1082)]);continue;case"4":this[c(1006)][c(736)+c(1455)](g[c(1245)])[c(596)](l[0]);continue;case"5":var v=Prisma[c(721)][c(548)](this[c(915)][c(1314)]);continue}break}continue;case"3":this[c(1006)][c(736)+c(1455)](g[c(1093)])[c(1182)]=this[c(915)][c(1302)];continue;case"4":this[c(1006)][c(441)+c(816)](g[c(1382)],function(){var t=c;p[t(1425)]&&p[t(1425)](p[t(1006)],{})});continue;case"5":this[c(1006)][c(736)+c(1455)](g[c(1432)])[c(1182)]="";continue;case"6":var h={UJAco:g[c(760)]};continue;case"7":var m=Prisma[c(721)][c(548)](Date[c(547)]());continue;case"8":this[c(1006)][c(441)+c(816)](g[c(521)],this[c(655)][c(796)](this));continue;case"9":this[c(1499)]();continue;case"10":var b=Prisma[c(721)][c(548)](this[c(915)][c(1314)]);continue;case"11":var p=this;continue;case"12":this[c(865)]=this[c(1006)][c(736)+c(1455)](g[c(1028)])||{};continue;case"13":this[c(1006)]=g[c(752)]($,g[c(541)])[0];continue;case"14":this[c(1006)][c(736)+c(1455)](g[c(1151)])[c(1182)]=g[c(1471)](b[c(956)],m[c(956)])?g[c(531)]("В ",b[c(1200)]):b[c(908)];continue}break}}},{key:g[_(768)],value:function(){var t=_,n=w[t(1206)](this[t(915)][t(1314)]);this[t(1006)][t(1076)](g[t(508)])[t(1285)](g[t(696)](n,1e3)?g[t(1122)](g[t(828)](Prisma[t(1490)][t(467)](g[t(1230)]),": "),Prisma[t(721)][t(1430)+t(1164)](g[t(784)](n,1e3))):Prisma[t(1490)][t(467)](g[t(1294)](n,-g[t(1454)](g[t(1454)](g[t(1454)](1e3,60),60),4))?g[t(468)]:g[t(958)]))}},{key:g[_(1298)],value:function(){var n=_,e={tuixF:g[n(634)]},r=this;this[n(865)][n(785)]=function(){var t=n;r[t(1006)][t(434)][t(1457)](y[t(563)])},this[n(865)][n(789)]=function(){var t=n;r[t(865)][t(997)]=e[t(465)]}}},{key:g[_(521)],value:function(){var t=_,n=(g[t(1210)](this[t(1199)][t(512)],g[t(837)])?this[t(915)][t(1397)+t(963)]:this[t(915)][t(1423)+t(610)])||g[t(1130)];this[t(865)][t(997)]=n,this[t(719)]&&this[t(719)](this[t(1006)],{})}},{key:g[_(953)],value:function(){for(var t=_,n=g[t(516)][t(1389)]("|"),e=0;;){switch(n[e++]){case"0":w[t(1361)+"te"](this[t(663)]);continue;case"1":this[t(865)]=null;continue;case"2":this[t(1006)]=null;continue;case"3":this[t(1006)][t(1368)]();continue;case"4":this[t(865)][t(789)]=function(){};continue;case"5":this[t(865)][t(997)]="";continue;case"6":this[t(865)][t(785)]=function(){};continue}break}}},{key:g[_(447)],value:function(t){var n=_;return t?this[n(1006)]:y[n(702)]($,this[n(1006)])}}]));function n(t){var e=o,r={Uvgci:g[e(570)],dDLhU:function(t,n){return g[e(1444)](t,n)},pyMXU:function(t,n){return g[e(642)](t,n)},XzBZQ:g[e(727)],RLgWN:function(t,n){return g[e(1413)](t,n)},LPbVt:g[e(837)],vXhln:g[e(1198)],FOAbz:g[e(437)],dCXXK:function(t,n){return g[e(961)](t,n)},ktauU:function(t,n){return g[e(803)](t,n)},wcuJR:function(t,n){return g[e(1185)](t,n)},zBeyN:function(t,n){return g[e(1454)](t,n)},udxwz:g[e(524)],NEEEK:g[e(853)]},t=new Prisma[e(529)+e(1290)](t);return t[e(1128)]=function(){for(var u=e,t=r[u(1279)][u(1389)]("|"),n=0;;){switch(t[n++]){case"0":var f=this;continue;case"1":this[u(872)][u(588)](!0);continue;case"2":c[u(1492)](function(t){for(var r=u,n=l[r(1495)][r(1389)]("|"),e=0;;){switch(n[e++]){case"0":f[r(872)][r(588)](!1);continue;case"1":var i=[];continue;case"2":var a=t[r(660)](function(t){var n=r;return l[n(445)](w[n(1206)](t[n(1314)]),s)});continue;case"3":var o={XbLlo:function(t,n){return l[r(445)](t,n)},VMuHM:function(t,n){return l[r(904)](t,n)},hPpnF:l[r(1424)]};continue;case"4":var s=l[r(1496)](l[r(920)](l[r(598)](l[r(1126)](1e3,60),60),24),1);continue;case"5":f[r(1031)](i);continue;case"6":a[r(987)]&&i[r(483)]({title:Prisma[r(1490)][r(467)](l[r(799)]),nomore:!0,results:a[r(545)](function(t){var n=r,e={OSRNg:l[n(1175)]};return{cardClass:function(){return new m(t,{type:e[n(581)]})}}})});continue;case"7":c[r(987)]&&i[r(483)]({title:Prisma[r(1490)][r(467)](l[r(845)]),nomore:!0,results:c[r(545)](function(t){var n=r,e={YgATt:l[n(1075)]};return{cardClass:function(){return new m(t,{type:e[n(1228)]})}}})});continue;case"8":var c=t[r(660)](function(t){var n=r;return l[n(1019)](w[n(1206)](t[n(1314)]),s)||l[n(704)](t[n(1258)],l[n(1424)])})[r(660)](function(t){var n=r;return o[n(678)](w[n(1206)](t[n(922)]),0)||o[n(1391)](t[n(1258)],o[n(1218)])});continue}break}},this[u(597)][u(796)](this));continue;case"3":var l={IlypZ:function(t,n){return r[u(1184)](t,n)},YBzGQ:function(t,n){return r[u(1362)](t,n)},VvshU:r[u(1011)],roHwH:function(t,n){return r[u(1138)](t,n)},XcYza:r[u(522)],WWvou:r[u(456)],Uyqby:r[u(1113)],XWCjW:function(t,n){return r[u(1427)](t,n)},ddvOr:function(t,n){return r[u(1070)](t,n)},AkQQE:function(t,n){return r[u(1103)](t,n)},qoWzu:function(t,n){return r[u(979)](t,n)},BIarN:function(t,n){return r[u(1103)](t,n)},xXPyJ:r[u(791)],FWjNN:r[u(909)]};continue;case"4":return this[u(460)]()}break}},t}function r(){var e=o,r={ruRGa:g[e(966)],oMWMm:g[e(743)],cMgTA:function(t,n){return g[e(1494)](t,n)},YWTnL:g[e(1243)],Vkmes:g[e(1403)],ZqIhe:g[e(533)],RtheV:function(t,n){return g[e(1125)](t,n)},HSWQw:g[e(834)],FDuhn:function(t,n){return g[e(1471)](t,n)},xPacp:g[e(1209)],jwxjD:function(t){return g[e(1281)](t)}},i=(Prisma[e(998)][e(1457)](g[e(1227)],g[e(1040)]),g[e(850)]($,g[e(432)])[e(596)](Prisma[e(998)][e(1492)](g[e(1227)],{},!0)),Prisma[e(1490)][e(1457)]({broadcast_name:{ru:g[e(1448)],uk:g[e(1448)],en:g[e(724)]},broadcast_title:{ru:g[e(560)],uk:g[e(1224)],en:g[e(1442)]},broadcast_final_program:{ru:g[e(808)],uk:g[e(455)],en:g[e(1357)]},broadcast_final_bell_60:{ru:g[e(1348)],uk:g[e(795)],en:g[e(901)]},broadcast_final_bell_10:{ru:g[e(1100)],uk:g[e(439)],en:g[e(1355)]},broadcast_final_start_not_yet:{ru:g[e(1120)],uk:g[e(667)],en:g[e(1046)]},broadcast_final_started:{ru:g[e(1024)],uk:g[e(482)],en:g[e(836)]},broadcast_final_end:{ru:g[e(720)],uk:g[e(1388)],en:g[e(699)]},broadcast_final_nolink:{ru:g[e(1054)],uk:g[e(609)],en:g[e(801)]},broadcast_final_now_watch:{ru:g[e(885)],uk:g[e(1372)],en:g[e(1446)]},broadcast_final_soon_watch:{ru:g[e(1244)],uk:g[e(1443)],en:g[e(589)]}}),{type:g[e(1148)],version:g[e(1477)],name:Prisma[e(1490)][e(467)](g[e(1047)]),description:"",component:g[e(743)]});function a(){var n=e,t=r[n(1297)]($,r[n(1399)][n(1144)](i[n(940)],r[n(895)]));t.on(r[n(690)],function(){var t=n;Prisma[t(728)][t(483)]({url:"",title:Prisma[t(1490)][t(467)](r[t(833)]),component:r[t(1058)],page:1})}),r[n(1121)]($,r[n(514)]).eq(0)[n(596)](t)}Prisma[e(1256)][e(1178)]=i,Prisma[e(780)][e(1457)](g[e(743)],n),window[e(1360)]?g[e(1370)](a):Prisma[e(1280)][e(479)](g[e(564)],function(t){var n=e;r[n(544)](t[n(512)],r[n(1439)])&&r[n(1306)](a)}),window[e(1117)+e(486)+"y"]=!0}!window[o(1117)+o(486)+"y"]&&g[o(1376)](Prisma[o(1256)][o(772)+"l"],246)&&g[o(1281)](r)}();
})();
